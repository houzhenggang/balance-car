                        .module encoder.c
                        .area text(rom, con, rel)
 0000                   .dbfile encoder.c
                        .area data(ram, con, rel)
 0000                   .dbfile encoder.c
 0000           _Lcount::
 0000                   .blkb 2
                        .area idata
 0000 0000              .word 0
                        .area data(ram, con, rel)
 0002                   .dbfile encoder.c
 0002                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\encoder.c
 0002                   .dbsym e Lcount _Lcount I
 0002           _Rcount::
 0002                   .blkb 2
                        .area idata
 0002 0000              .word 0
                        .area data(ram, con, rel)
 0004                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\encoder.c
 0004                   .dbsym e Rcount _Rcount I
                        .area text(rom, con, rel)
 0000                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\encoder.c
 0000                   .dbfunc e encoder_init _encoder_init fV
                        .even
 0000           _encoder_init::
 0000                   .dbline -1
 0000                   .dbline 10
 0000           ; #include "iom128v.h"
 0000           ; #include "encoder.h"
 0000           ; 
 0000           ; int Lcount = 0;
 0000           ; int Rcount = 0;
 0000           ; int Speed_rl;
 0000           ; 
 0000           ; //编码器初始化
 0000           ; void encoder_init(void)
 0000           ; {
 0000                   .dbline 11
 0000           ;       DDRD &= ~0x03;
 0000 81B3              in R24,0x11
 0002 8C7F              andi R24,252
 0004 81BB              out 0x11,R24
 0006                   .dbline 12
 0006           ;       DDRG &= ~((0x01<<3)|(0x01<<4));
 0006 80916400          lds R24,100
 000A 877E              andi R24,231
 000C 80936400          sts 100,R24
 0010                   .dbline 13
 0010           ;       PORTG |= (0x01<<3)|(0x01<<4);
 0010 80916500          lds R24,101
 0014 8861              ori R24,24
 0016 80936500          sts 101,R24
 001A                   .dbline 14
 001A           ;       EIMSK |= (1<<INT0) | (1<<INT1);
 001A 89B7              in R24,0x39
 001C 8360              ori R24,3
 001E 89BF              out 0x39,R24
 0020                   .dbline 15
 0020           ;       EICRA &= 0xF0;
 0020 80916A00          lds R24,106
 0024 807F              andi R24,240
 0026 80936A00          sts 106,R24
 002A                   .dbline 16
 002A           ;       EICRA |= (1<<ISC01) | (1<<ISC11);
 002A 80916A00          lds R24,106
 002E 8A60              ori R24,10
 0030 80936A00          sts 106,R24
 0034                   .dbline -2
 0034           L1:
 0034                   .dbline 0 ; func end
 0034 0895              ret
 0036                   .dbend
 0036                   .dbfunc e Get_Speed _Get_Speed fV
 0036           ;       distance -> R10,R11
 0036           ;          speed -> R12,R13
                        .even
 0036           _Get_Speed::
 0036 0E940000          xcall push_xgset003C
 003A 5901              movw R10,R18
 003C 6801              movw R12,R16
 003E                   .dbline -1
 003E                   .dbline 20
 003E           ; }
 003E           ; 
 003E           ; void Get_Speed(int *speed, int *distance)
 003E           ; {
 003E                   .dbline 21
 003E           ;     Speed_rl = (Lcount + Rcount)/2;
 003E 20900200          lds R2,_Rcount
 0042 30900300          lds R3,_Rcount+1
 0046 00910000          lds R16,_Lcount
 004A 10910100          lds R17,_Lcount+1
 004E 020D              add R16,R2
 0050 131D              adc R17,R3
 0052 22E0              ldi R18,2
 0054 30E0              ldi R19,0
 0056 0E940000          xcall div16s
 005A 10930100          sts _Speed_rl+1,R17
 005E 00930000          sts _Speed_rl,R16
 0062                   .dbline 22
 0062           ;       *speed *= 0.7;
 0062 00E0              ldi R16,<L3
 0064 10E0              ldi R17,>L3
 0066 0E940000          xcall elpm32
 006A 1801              movw R2,R16
 006C 2901              movw R4,R18
 006E F601              movw R30,R12
 0070 0081              ldd R16,z+0
 0072 1181              ldd R17,z+1
 0074 0E940000          xcall int2fp
 0078 3A93              st -y,R19
 007A 2A93              st -y,R18
 007C 1A93              st -y,R17
 007E 0A93              st -y,R16
 0080 8101              movw R16,R2
 0082 9201              movw R18,R4
 0084 0E940000          xcall fpmule2
 0088 0E940000          xcall fpint
 008C F601              movw R30,R12
 008E 1183              std z+1,R17
 0090 0083              std z+0,R16
 0092                   .dbline 23
 0092           ;       *speed += Speed_rl*0.3;
 0092 0E940000          xcall int2fp
 0096 1801              movw R2,R16
 0098 2901              movw R4,R18
 009A 00E0              ldi R16,<L4
 009C 10E0              ldi R17,>L4
 009E 0E940000          xcall elpm32
 00A2 3801              movw R6,R16
 00A4 4901              movw R8,R18
 00A6 00910000          lds R16,_Speed_rl
 00AA 10910100          lds R17,_Speed_rl+1
 00AE 0E940000          xcall int2fp
 00B2 3A93              st -y,R19
 00B4 2A93              st -y,R18
 00B6 1A93              st -y,R17
 00B8 0A93              st -y,R16
 00BA 8301              movw R16,R6
 00BC 9401              movw R18,R8
 00BE 0E940000          xcall fpmule2x
 00C2 8101              movw R16,R2
 00C4 9201              movw R18,R4
 00C6 0E940000          xcall fpadd2
 00CA 0E940000          xcall fpint
 00CE F601              movw R30,R12
 00D0 1183              std z+1,R17
 00D2 0083              std z+0,R16
 00D4                   .dbline 24
 00D4           ;       *distance = *speed;
 00D4 2080              ldd R2,z+0
 00D6 3180              ldd R3,z+1
 00D8 F501              movw R30,R10
 00DA 3182              std z+1,R3
 00DC 2082              std z+0,R2
 00DE                   .dbline -2
 00DE           L2:
 00DE                   .dbline 0 ; func end
 00DE 0C940000          xjmp pop_xgset003C
 00E2                   .dbsym r distance 10 pI
 00E2                   .dbsym r speed 12 pI
 00E2                   .dbend
 00E2                   .dbfunc e Clean_Speed _Clean_Speed fV
                        .even
 00E2           _Clean_Speed::
 00E2                   .dbline -1
 00E2                   .dbline 28
 00E2           ; }
 00E2           ; 
 00E2           ; void Clean_Speed(void)
 00E2           ; {
 00E2                   .dbline 29
 00E2           ;     Lcount = 0;
 00E2 2224              clr R2
 00E4 3324              clr R3
 00E6 30920100          sts _Lcount+1,R3
 00EA 20920000          sts _Lcount,R2
 00EE                   .dbline 30
 00EE           ;       Rcount = 0;
 00EE 30920300          sts _Rcount+1,R3
 00F2 20920200          sts _Rcount,R2
 00F6                   .dbline -2
 00F6           L5:
 00F6                   .dbline 0 ; func end
 00F6 0895              ret
 00F8                   .dbend
                        .area vector(rom, abs)
                        .org 4
 0004 0C947C00          jmp _INT_T0
                        .area text(rom, con, rel)
 00F8                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\encoder.c
 00F8                   .dbfunc e INT_T0 _INT_T0 fV
                        .even
 00F8           _INT_T0::
 00F8 2A92              st -y,R2
 00FA 8A93              st -y,R24
 00FC 9A93              st -y,R25
 00FE 2FB6              IN R2,63
 0100 2A92              st -y,R2
 0102                   .dbline -1
 0102                   .dbline 36
 0102           ; }
 0102           ; 
 0102           ; //外部中断0
 0102           ; #pragma interrupt_handler INT_T0:2
 0102           ; void INT_T0(void)
 0102           ; {  
 0102                   .dbline 37
 0102           ;       if(PING & (0x01<<3))
 0102 20906300          lds R2,99
 0106 23FE              sbrs R2,3
 0108 0AC0              rjmp L7
 010A           X0:
 010A                   .dbline 38
 010A           ;               Lcount--;
 010A 80910000          lds R24,_Lcount
 010E 90910100          lds R25,_Lcount+1
 0112 0197              sbiw R24,1
 0114 90930100          sts _Lcount+1,R25
 0118 80930000          sts _Lcount,R24
 011C 09C0              xjmp L8
 011E           L7:
 011E                   .dbline 40
 011E           ;       else
 011E           ;               Lcount++;
 011E 80910000          lds R24,_Lcount
 0122 90910100          lds R25,_Lcount+1
 0126 0196              adiw R24,1
 0128 90930100          sts _Lcount+1,R25
 012C 80930000          sts _Lcount,R24
 0130           L8:
 0130                   .dbline -2
 0130           L6:
 0130                   .dbline 0 ; func end
 0130 2990              ld R2,y+
 0132 2FBE              OUT 63,R2
 0134 9991              ld R25,y+
 0136 8991              ld R24,y+
 0138 2990              ld R2,y+
 013A 1895              reti
 013C                   .dbend
                        .area vector(rom, abs)
                        .org 8
 0008 0C949E00          jmp _INT_T1
                        .area text(rom, con, rel)
 013C                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\encoder.c
 013C                   .dbfunc e INT_T1 _INT_T1 fV
                        .even
 013C           _INT_T1::
 013C 2A92              st -y,R2
 013E 8A93              st -y,R24
 0140 9A93              st -y,R25
 0142 2FB6              IN R2,63
 0144 2A92              st -y,R2
 0146                   .dbline -1
 0146                   .dbline 46
 0146           ; }
 0146           ; 
 0146           ; //外部中断1 
 0146           ; #pragma interrupt_handler INT_T1:3
 0146           ; void INT_T1(void)
 0146           ; {  
 0146                   .dbline 47
 0146           ;       if(PING & (0x01<<4))
 0146 20906300          lds R2,99
 014A 24FE              sbrs R2,4
 014C 0AC0              rjmp L10
 014E           X1:
 014E                   .dbline 48
 014E           ;           Rcount++;
 014E 80910200          lds R24,_Rcount
 0152 90910300          lds R25,_Rcount+1
 0156 0196              adiw R24,1
 0158 90930300          sts _Rcount+1,R25
 015C 80930200          sts _Rcount,R24
 0160 09C0              xjmp L11
 0162           L10:
 0162                   .dbline 50
 0162           ;       else
 0162           ;               Rcount--;
 0162 80910200          lds R24,_Rcount
 0166 90910300          lds R25,_Rcount+1
 016A 0197              sbiw R24,1
 016C 90930300          sts _Rcount+1,R25
 0170 80930200          sts _Rcount,R24
 0174           L11:
 0174                   .dbline -2
 0174           L9:
 0174                   .dbline 0 ; func end
 0174 2990              ld R2,y+
 0176 2FBE              OUT 63,R2
 0178 9991              ld R25,y+
 017A 8991              ld R24,y+
 017C 2990              ld R2,y+
 017E 1895              reti
 0180                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\encoder.c
 0000           _Speed_rl::
 0000                   .blkb 2
 0002                   .dbsym e Speed_rl _Speed_rl I
                        .area lit(rom, con, rel)
 0000           L4:
 0000 9A99993E          .word 0x999a,0x3e99
 0004           L3:
 0004 3333333F          .word 0x3333,0x3f33
 0008           ; }
