#include "iom128v.h"
#include "macros.h"
#include "usart.h"
#include "stdio.h"

#define  F_CPU 16000000

/****************************************
函数名:     usart1_init 
函数功能:   串口1口初始化 ，若UCSR1A设置倍速 ，则设置波特率时应减小一半
形式参数:   无
返回参数:   无
****************************************/
void usart1_init(void)
{
   //USART1 IO初始化
   DDRD &= ~(0x0C);
   DDRD |= 0x00;
   
   //1-禁止发送和接收
   UCSR1B = 0x00; 
   
   //2-倍速
   UCSR1A =(1<<U2X1);	
   
   //3-8位数据、1 位停止、异步、无校验
   UCSR1C=(1<<UCSZ11) | (1<<UCSZ10);	

   //4-接收中断使能 ,接收使能 ,发送使能
   UCSR1B =(1<<RXCIE1)|(1<<RXEN1) | (1<<TXEN1);
   SEI();
  
   //5-波特率 9600
   UBRR1H = 0x00;
   UBRR1L = 12;
}

/****************************************
函数名:     send_char 
函数功能:   发送一个字符
形式参数:   要发送的字符
返回参数:   无
****************************************/
void send_char(unsigned char sendchar)
{
   //1-等待发送缓冲器为空
   while(!(UCSR1A & (1<<UDRE1)));
   
   //2-发送数据
   UDR1 = sendchar;   
}

/****************************************
函数名:     putchar 
函数功能:   重定向printf函数 		
形式参数:   要发送的字符
返回参数:   无
****************************************/
extern int putchar(char input)
{
  if(input== '\n')
  {  
   	while(!(UCSR1A & (1<<UDRE1)));
 	UDR1 = '\t';
  }   
   
  while(!(UCSR1A&(1<<UDRE1)));
  UDR1=input;
  return 1;
} 

#pragma interrupt_handler receive_char:31
void receive_char(void)
{  
   unsigned char rchar;
   
   //1-禁止发送和接收
   UCSR1B=0x00;
   
   //2-将接收到的字符缓存在 receivechar中
   rchar = UDR1;
   
   //3-允许发送和接收,接收中断使能
   UCSR1B =(1<<RXCIE1)|(1<<RXEN1) | (1<<TXEN1);
   
   //4-重新发送回上位机
   send_char(rchar);
}


void USART0_init(unsigned int band)//USART 初始化
{
	//设置帧格式: 8 个数据位, 1个停止位
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01); 
	
	//U2X=0时的公式计算
    UBRR0L= (F_CPU/band/16-1)%256;
    UBRR0H= (F_CPU/band/16-1)/256;
    //U2X=1时的公式计算
    //UBRR0L= (F_CPU/BAUDRATE0/8-1)%256;
    //UBRR0H= (F_CPU/BAUDRATE0/8-1)/256;
    //也可根据数据手册的[波特率设置的例子]查得
    //UBRR0L = 0x2F; //set baud rate lo
    //UBRR0H = 0x00; //set baud rate hi
	
	//使能接收中断，使能接收，使能发送
	UCSR0A = 0x00;
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);

}

// 数据发送【发送5 到8 位数据位的帧】
void USART0_transmit( unsigned char data )
{
     //等待发送缓冲器为空 
     while ( !( UCSR0A & (1<<UDRE0)) );
     // 将数据放入缓冲器，发送数据 
     UDR0 = data;
} 

void USART0_str(const char *str)
{
	char *a;
	a=str;
	while( (*a) !='\0')
	{
		USART0_transmit(*a);
		a++;
	}		
}	

// 数据接收【以5 到8 个数据位的方式接收数 据帧】
unsigned char USART0_receive( void )
{
     // 等待接收数据
     while ( !(UCSR0A & (1<<RXC0)) );
     // 从缓冲器中获取并返回数据
     return UDR0;
} 
