#include "mpu6050.h"
#include "inv_mpu_dmp_motion_driver.h"
#include "inv_mpu.h"
#include "stdio.h"
#include "i2c.h"
#include "math.h"

signed char gyro_orientation[9] = {-1, 0, 0,0,-1, 0,0, 0, 1};
struct rx_s 
{
    unsigned char header[3];
    unsigned char cmd;
};
struct hal_s 
{
    unsigned char sensors;
    unsigned char dmp_on;
    unsigned char wait_for_tap;
    volatile unsigned char new_gyro;
    unsigned short report;
    unsigned short dmp_features;
    unsigned char motion_int_mode;
    struct rx_s rx;
};

struct hal_s hal = {0};

volatile unsigned char rx_new;

enum packet_type_e 
{
    PACKET_TYPE_ACCEL,
    PACKET_TYPE_GYRO,
    PACKET_TYPE_QUAT,
    PACKET_TYPE_TAP,
    PACKET_TYPE_ANDROID_ORIENT,
    PACKET_TYPE_PEDO,
    PACKET_TYPE_MISC
};

unsigned short inv_row_2_scale(const signed char *row)
{
    unsigned short b;

    if (row[0] > 0)
        b = 0;
    else if (row[0] < 0)
        b = 4;
    else if (row[1] > 0)
        b = 1;
    else if (row[1] < 0)
        b = 5;
    else if (row[2] > 0)
        b = 2;
    else if (row[2] < 0)
        b = 6;
    else
        b = 7;     
    return b;
}

unsigned short inv_orientation_matrix_to_scalar(const signed char *mtx)
{
    unsigned short scalar;

    scalar = inv_row_2_scale(mtx);
    scalar |= inv_row_2_scale(mtx + 3) << 3;
    scalar |= inv_row_2_scale(mtx + 6) << 6;


    return scalar;
}

void run_self_test(void)
{
    int result;
    long gyro[3], accel[3];
	
    result = mpu_run_self_test(gyro, accel);

    if (result == 0x03) 
	{
        float sens;
        unsigned short accel_sens;
        mpu_get_gyro_sens(&sens);
        gyro[0] = (long)(gyro[0] * sens);
        gyro[1] = (long)(gyro[1] * sens);
        gyro[2] = (long)(gyro[2] * sens);
        dmp_set_gyro_bias(gyro);
        mpu_get_accel_sens(&accel_sens);
        accel[0] *= accel_sens;
        accel[1] *= accel_sens;
        accel[2] *= accel_sens;
        dmp_set_accel_bias(accel);	 	
    }
 }

void MPU6050_Config(void)
{
	int result; 
	I2C_Config();
	result = mpu_init();
 	if(!result)
  	{
	  printf("\t\tDMP初始化.....\n\n ");
	  
	  //mpu_set_sensor
	  if(!mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL))
	  {
	  	 printf("\t传感器设定成功 ......\n\n");
	  }
	  else
	  {
	  	 printf("\t传感器设定失败 ......\n\n");
	  }
	  
	  //mpu_configure_fifo
	  if(!mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL))
	  {
	  	 printf("\tFifo设定成功......\n\n");
	  }
	  else
	  {
	  	 printf("\tFifo设定失败 ......\n\n");
	  }
	  
	  //mpu_set_sample_rate
	  if(!mpu_set_sample_rate(DEFAULT_MPU_HZ))
	  {
	  	 printf("\tDMP采样速率设定成功 ......\n\n");
	  }
	  else
	  {
	  	 printf("\tDMP采样速率设定失败 ......\n\n");
	  }
	  
	  //dmp_load_motion_driver_firmvare
	  if(!dmp_load_motion_driver_firmware())
	  {
	  	printf("\t开启DMP功能成功 ......\n\n");
	  }
	  else
	  {
	  	printf("\t开启DMP功能失败 ......\n\n");
	  }
	  
	  //dmp_set_orientation
	  if(!dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_orientation)))
	  {
	  	 printf("\t初始方向设定偏差成功......\n\n");
	  }
	  else
	  {
	  	 printf("\t初始方向设定偏差失败 ......\n\n");
	  }
	  
	  //dmp_enable_feature
	  if(!dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP |
	        DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO |
	        DMP_FEATURE_GYRO_CAL))
	  {
	  	 printf("\tDMP使能成功 ......\n\n");
	  }
	  else
	  {
	  	 printf("\tDMP使能失败 ......\n\n");
	  }
	  
	  //dmp_set_fifo_rate
	  if(!dmp_set_fifo_rate(DEFAULT_MPU_HZ))
	  {
	  	 printf("\tFifo速度设定成功......\n\n");
	  }
	  else
	  {
	  	 printf("\tFifo速度设定失败 ......\n\n");
	  }
	  
	  if(!mpu_set_dmp_state(1))
	  {
	  	 printf("\tDMP写入驱动成功 ......\n\n");
	  }
	  else
	  {
	  	 printf("\tDMP写入驱动失败 ......\n\n");
	  }
	  
	  run_self_test();
   }
}

#define q30  1073741824.0f
short gyro[3], accel[3],sensors;	
float Pitch,Yaw,Roll;
float ax, ay, az, gx, gy, gz;

void Get_Data(void)
{
    float q0=1.0f,q1=0.0f,q2=0.0f,q3=0.0f;
	unsigned long sensor_timestamp;
	unsigned char more;
	long quat[4];
	dmp_read_fifo(gyro, accel, quat, &sensor_timestamp, &sensors,&more);
	  
    if (sensors & INV_WXYZ_QUAT )
	{
	 	q0=quat[0] / q30;
		q1=quat[1] / q30;
		q2=quat[2] / q30;
		q3=quat[3] / q30;
		Pitch = -asin(2 * q1 * q3 - 2 * q0* q2)* 57.3; 
    	Roll = -atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3; 
		Yaw = -(atan2(2*(q1*q2 + q0*q3),q0*q0+q1*q1-q2*q2-q3*q3)*57.3);
		//printf("%f,%f\n",Pitch, Roll);
	}
	  
	if(sensors & INV_XYZ_ACCEL)
	{
		ax=accel[0]/Accel_2_Scale_Factor;
		ay=accel[1]/Accel_2_Scale_Factor;
		az=accel[2]/Accel_2_Scale_Factor;	
		//printf("%f, %f, %f\n",ax, ay, az);   
	}

	if(sensors & INV_XYZ_GYRO)
	{
	  gx=gyro[0]/Gyro_250_Scale_Factor;
	  gy=gyro[1]/Gyro_250_Scale_Factor;
	  gz=gyro[2]/Gyro_250_Scale_Factor;
	}
}