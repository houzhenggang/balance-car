#include "iom128v.h"
#include "stdio.h"
#include "math.h"
#include "macros.h"
#include "motor.h"
#include "usart.h"
#include "encoder.h"
#include "mpu6050.h"
#include "i2c.h"
#include "pid.h"

//------------------------------------------------
//循环变量
//------------------------------------------------
unsigned int loops = 0;
unsigned char loopsBit = 0;

//------------------------------------------------
//串口变量
//------------------------------------------------
#define  FARWARD  '1'
#define  BACKWARD '2'
#define  LEFT     '3'
#define  RIGHT    '4'
#define  STOP     '5'
#define  FIX      '6'
#define  WAIT     '7'
unsigned char rchar = WAIT;

//------------------------------------------------
//平衡变量
//------------------------------------------------
unsigned int Kp_A=4000, Ki_A=200, Kd_A=3500;
PID_ANGLGE PID_angle;	
float angle_Targer;
float fix_angle;
float angle, angle_dot;
int PWM_Balance;
int PWM_L=0,PWM_R=0;

//------------------------------------------------
//转动变量
//------------------------------------------------
unsigned char turn_flag = 0;
int PWM_Lturn=0;
int PWM_Rturn=0;

//------------------------------------------------
//运动变量
//------------------------------------------------
int speed, distance;
float Ksp=6, Ksn=0.2;


int main(void)
{
	usart0_init(9600);
	//printf("\tusart0 init OK!\n");
	
	motor_init();
	//printf("\motor init OK!\n");
	
	//encoder_init();
	//printf("\encoder init OK!\n");
	
	MPU6050_Config();
	//printf("\MPU6050 init OK!\n");
	
	Get_Angle(&angle, &angle_dot);
	angle_Targer = angle;
	fix_angle = angle;
	//printf("\angle init OK!\n");
	
	PID_angle_init(&PID_angle, Kp_A, Ki_A, Kd_A, angle_Targer);	
	//printf("\PID angle init OK!\n");
	
	timer3_init();
	//printf("\timer3 init OK!\n");
	
	while(1)
	{
		//--------------------------------------------------------------------
		//3ms循环一次
		//进行角度平衡，使小车可以站稳
		//--------------------------------------------------------------------
		if(loopsBit & 0x01)
		{	   
		   loopsBit &= ~(0x01);
		   
		   //获取当前角度，角速度
		   Get_Angle(&angle, &angle_dot);	
		   
		   //通过位置式PID得到小车保存角度为零所需要的PWM
	 	   PWM_Balance = PID_Proc(&PID_angle, angle, angle_dot);
		   
		   //调整左右电机PWM输出
	 	   PWM_L = PWM_Balance + PWM_Lturn; 
	 	   PWM_R = PWM_Balance + PWM_Rturn;	
		   
		   //输出PWM
		   PWM_Output(PWM_L, PWM_R);  	   
		}
		
		//--------------------------------------------------------------------
		//10ms循环一次
		//进行速度平衡，使小车可以行走
		//--------------------------------------------------------------------
		if(loopsBit & 0x02)
		{
		   loopsBit &= ~(0x02);
		   /*
		   Get_Speed(&speed, &distance);
		   
		   PWM_Balance += Ksp*speed + Ksn*distance;
		   
		   PWM_L = PWM_Balance; 
	 	   PWM_R = PWM_Balance;	
		   
		   PWM_Output(PWM_L, PWM_R);
		   
		   Clean_Speed();
		   */
		}
		
		//--------------------------------------------------------------------
		//50ms循环一次
		//进行转向控制，转动一定角度可以停下
		//--------------------------------------------------------------------
		if(loopsBit & 0x04)
		{
		   loopsBit &= ~(0x04);
		   
		   if(turn_flag<15)
		   {
		      turn_flag++;
		   }
		   else
		   {
		   	  turn_flag = 15;
		      PWM_Lturn = 0;
			  PWM_Rturn = 0;
		   }
		}
		
		//--------------------------------------------------------------------
		//100ms循环一次
		//串口接收，接收各种控制小车的命令
		//--------------------------------------------------------------------
		if(loopsBit & 0x08)
		{
	 	   loopsBit &= ~(0x08);
		   loops = 0;	   	
		   
		    if(rchar == FARWARD)
   		   {
   	  	   	   angle_Targer -= 0.005;
			   PID_angle.target = angle_Targer;
	  		   printf("angle_Targer:%f\n", angle_Targer);
   		   }
   
   		   if(rchar == BACKWARD)
   		   {
     	       angle_Targer += 0.005;
			   PID_angle.target = angle_Targer;
	           printf("angle_Targer：%f\n", angle_Targer);
   		   }
		   
		   if(rchar == LEFT)
   		   {
			   PWM_Lturn = 150;
			   PWM_Rturn = 0;
			   turn_flag = 1;
   		   }
		   
		   if(rchar == RIGHT)
   		   {
			   PWM_Lturn = 0;
			   PWM_Rturn = 150;
			   turn_flag = 1;
   		   }
		   
		   if(rchar == STOP)
   		   {
			   angle_Targer = fix_angle;
			   PID_angle.target = angle_Targer;
			   printf("angle_Targer：%f\n", angle_Targer);
   		   }
		   
		   if(rchar == FIX)
		   {
		   	  fix_angle = angle;
		   }
		   
		   rchar = WAIT;
		   loops = 0;
		}
	}
	
	return 0;
}

//定时器3中断溢出,1ms中断一次
#pragma interrupt_handler timer3_interrupt: 30
void timer3_interrupt(void) 
{    
	 TCNT3=49535;
	 loops++; 
	 
	 if(!(loops % 3))     {loopsBit |= 0x01;}  
	 if(!(loops % 10))    {loopsBit |= 0x02;} 
	 if(!(loops % 100))   {loopsBit |= 0x04;}   
	 if(!(loops % 1000))  {loopsBit |= 0x08;}  
}

//串口0接收中断
#pragma interrupt_handler uart_receive:19
void uart_receive(void)
{   
   rchar = UDR0;
}
