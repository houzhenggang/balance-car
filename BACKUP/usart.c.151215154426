#include "iom128v.h"
#include "macros.h"
#include "usart.h"
#include "stdio.h"

#define  F_CPU 16000000

void usart0_init(unsigned int band)//USART 初始化
{
	//USART1 IO初始化
    DDRE=0x00;
    PORTE=0x00;
	
	//设置帧格式: 8 个数据位, 1个停止位
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01); 
	
	//U2X=0时的公式计算
    UBRR0L= (F_CPU/band/16-1)%256;
    UBRR0H= (F_CPU/band/16-1)/256;
	
	//使能接收中断，使能接收，使能发送
	UCSR0A = 0x00;
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
	
	//开总中断
	SEI();
}

// 数据发送
void send_char(unsigned char data )
{
     //等待发送缓冲器为空 
     while ( !( UCSR0A & (1<<UDRE0)) );
     // 将数据放入缓冲器，发送数据 
     UDR0 = data;
}

// 数据接收【以5 到8 个数据位的方式接收数 据帧】
unsigned char USART0_receive( void )
{
     // 等待接收数据
     while (!(UCSR0A & (1<<RXC0)) );
	 printf("receive\n");
     // 从缓冲器中获取并返回数据
     return UDR0;
} 

extern int putchar(char input)
{
  if(input== '\n')
  {  
   	while(!(UCSR0A & (1<<UDRE0)));
 	UDR0 = '\t';
  }   
   
  while(!(UCSR0A&(1<<UDRE0)));
  UDR0=input;
  return 1;
} 

#pragma interrupt_handler receive_char:19
void receive_char(void)
{  
   unsigned char rchar;
   
   //1-禁止发送和接收
   UCSR0B=0x00;
   
   //2-将接收到的字符缓存在 receivechar中
   rchar = UDR0;
   
   //3-允许发送和接收,接收中断使能
   UCSR0B =(1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
   
   //4-重新发送回上位机
   send_char(rchar);
}
