#include "iom128v.h"
#include "pid.h"

void PID_angle_init(PID_angle *pid, unsigned int Kp, unsigned int Ki, unsigned int Kd, unsigned int target)
{
	pid->target = target;
	pid->integral = 0;	
	pid->Kp = Kp;
	pid->Ki = Ki;
	pid->Kd = Kd;
}

int PID_proc(PID_angle *p, float current, float differential)
{
	float offset;

	offset = p->target - current;
	p->integral += offset;

	return (int)(p->Kp*offset + p->Ki*p->integral + p->Kd*differential);
}

void  PID_speed_init(PID_Struture* pid,float kp,float ki,float kd,int target)
{
	pid->kp = kp;
	pid->ki = ki;
	pid->kd = kd;
	pid->target = target;
	pid->enote[PRESENT] = 0;
	pid->enote[LAST] = 0;
	pid->enote[BEFORE] = 0;
	pid->sumerr = 0;
}

void PID_devCal(PID_Struture* pid,int fbv)
{
	pid->enote[BEFORE] = pid->enote[LAST];
	pid->enote[LAST] = pid->enote[PRESENT];
	pid->enote[PRESENT] = (fbv - pid->target);
	
	pid->sumerr += pid->enote[PRESENT];
}

int PID_Inc(PID_Struture* pid)
{
    pid->lastcontrol = pid->kp*(pid->enote[PRESENT] - pid->enote[LAST]) + pid->ki*pid->enote[PRESENT] + pid->kd*(pid->enote[PRESENT] - 2*pid->enote[LAST] +pid->enote[BEFORE]); 
	return ((int)pid->lastcontrol);
}

int PID_Nor(PID_Struture* pid)
{
	pid->lastcontrol = pid->kp*pid->enote[PRESENT] + pid->ki*pid->sumerr + pid->kd*(pid->enote[PRESENT] - pid->enote[LAST]); 
	return ((int)pid->lastcontrol);
}


