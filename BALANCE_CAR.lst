Interrupt Vectors
    00000 940C 08FC JMP	__text_start|__start
    00002 940C 367A JMP	_INT_T0
    00004 940C 369C JMP	_INT_T1
    00024 940C 0B73 JMP	_uart_receive
    0003A 940C 0B16 JMP	_timer3_interrupt

Program Code (text area)
__text_start|__start:
    008FC EFCF      LDI	R28,0xFF
    008FD E1D0      LDI	R29,0x10
    008FE BFCD      OUT	0x3D,R28
    008FF BFDE      OUT	0x3E,R29
    00900 51CE      SUBI	R28,0x1E
    00901 40D0      SBCI	R29,0
    00902 EA0A      LDI	R16,0xAA
    00903 8308      ST	Y,R16
    00904 2400      CLR	R0
    00905 EEE5      LDI	R30,0xE5
    00906 E0FF      LDI	R31,0xF
    00907 E110      LDI	R17,0x10
    00908 36EA      CPI	R30,0x6A
    00909 07F1      CPC	R31,R17
    0090A F011      BEQ	0x090D
    0090B 9201      ST	Z+,R0
    0090C CFFB      RJMP	0x0908
    0090D 8300      ST	Z,R16
    0090E E1E2      LDI	R30,0x12
    0090F E0F3      LDI	R31,3
    00910 E0A0      LDI	R26,0
    00911 E0B1      LDI	R27,1
    00912 E111      LDI	R17,0x11
    00913 E000      LDI	R16,0
    00914 BF0B      OUT	0x3B,R16
    00915 3FE7      CPI	R30,0xF7
    00916 07F1      CPC	R31,R17
    00917 F021      BEQ	0x091C
    00918 95C8      LPM
    00919 9631      ADIW	R30,1
    0091A 920D      ST	X+,R0
    0091B CFF9      RJMP	0x0915
    0091C 940E 091F CALL	_main
_exit:
    0091E CFFF      RJMP	_exit
_main:
    0091F 9726      SBIW	R28,6
FILE: E:\大学课程\平衡小车设计\平衡小车程序final\main.c
(0001) #include "iom128v.h"
(0002) #include "stdio.h"
(0003) #include "math.h"
(0004) #include "macros.h"
(0005) #include "motor.h"
(0006) #include "usart.h"
(0007) #include "encoder.h"
(0008) #include "mpu6050.h"
(0009) #include "i2c.h"
(0010) #include "pid.h"
(0011) 
(0012) //------------------------------------------------
(0013) //串口变量
(0014) //------------------------------------------------
(0015) #define  FARWARD  '1'
(0016) #define  BACKWARD '2'
(0017) #define  LEFT     '3'
(0018) #define  RIGHT    '4'
(0019) #define  STOP     '5'
(0020) #define  FIX      '6'
(0021) #define  WAIT     '7'
(0022) unsigned char rchar = WAIT;
(0023) 
(0024) //------------------------------------------------
(0025) //循环变量
(0026) //------------------------------------------------
(0027) unsigned int loops = 0;
(0028) unsigned char loopsBit = 0;
(0029) 
(0030) //------------------------------------------------
(0031) //平衡变量
(0032) //------------------------------------------------
(0033) unsigned int Kp_A=4000, Ki_A=300, Kd_A=4500;
(0034) PID_ANGLGE PID_angle;	
(0035) float angle_Targer;
(0036) float fix_angle;
(0037) float angle, angle_dot;
(0038) int PWM_Balance;
(0039) int PWM_L=0,PWM_R=0;
(0040) 
(0041) //----------------------------------- 0-------------
(0042) //转动变量
(0043) //------------------------------------------------
(0044) unsigned char turn_flag = 0;
(0045) int PWM_Lturn=0;
(0046) int PWM_Rturn=0;
(0047) 
(0048) //------------------------------------------------
(0049) //运动变量
(0050) //------------------------------------------------
(0051) int speed, distance;
(0052) float Ksp=6, Ksn=0.2;
(0053) 
(0054) unsigned char rec_buf[3][10];
(0055) unsigned char i=0 , j=0;
(0056) unsigned int pid_num;
(0057) 
(0058) int main(void)
(0059) {	
(0060) 	usart0_init(9600);
    00920 E800      LDI	R16,0x80
    00921 E215      LDI	R17,0x25
    00922 940E 0CD5 CALL	_usart0_init
(0061) 	printf("\tusart0 init OK!\n");
    00924 E502      LDI	R16,0x52
    00925 E011      LDI	R17,1
    00926 940E 4CC1 CALL	_printf
(0062) 	
(0063) 	motor_init();
    00928 940E 0C8B CALL	_motor_init
(0064) 	
(0065) 	encoder_init();
    0092A 940E 35FE CALL	_encoder_init
(0066) 	
(0067) 	MPU6050_Config();
    0092C 940E 341C CALL	_MPU6050_Config
(0068) 	
(0069) 	Get_Angle(&angle, &angle_dot);
    0092E E02B      LDI	R18,0xB
    0092F E130      LDI	R19,0x10
    00930 E00F      LDI	R16,0xF
    00931 E110      LDI	R17,0x10
    00932 940E 34B6 CALL	_Get_Angle
(0070) 	fix_angle = angle;
    00934 9040 1011 LDS	R4,angle+2
    00936 9050 1012 LDS	R5,angle+3
    00938 9020 100F LDS	R2,angle
    0093A 9030 1010 LDS	R3,angle+1
    0093C 9230 1014 STS	fix_angle+1,R3
    0093E 9220 1013 STS	fix_angle,R2
    00940 9250 1016 STS	fix_angle+3,R5
    00942 9240 1015 STS	fix_angle+2,R4
(0071) 	
(0072) 	PID_angle_init(&PID_angle, Kp_A, Ki_A, Kd_A, angle_Targer);	
    00944 9120 1019 LDS	R18,angle_Targer+2
    00946 9130 101A LDS	R19,angle_Targer+3
    00948 9100 1017 LDS	R16,angle_Targer
    0094A 9110 1018 LDS	R17,angle_Targer+1
    0094C 940E 4290 CALL	fpint
    0094E 831D      STD	Y+5,R17
    0094F 830C      STD	Y+4,R16
    00950 9020 0108 LDS	R2,Kd_A
    00952 9030 0109 LDS	R3,Kd_A+1
    00954 823B      STD	Y+3,R3
    00955 822A      STD	Y+2,R2
    00956 9020 0106 LDS	R2,Ki_A
    00958 9030 0107 LDS	R3,Ki_A+1
    0095A 8239      STD	Y+1,R3
    0095B 8228      ST	Y,R2
    0095C 9120 0104 LDS	R18,Kp_A
    0095E 9130 0105 LDS	R19,Kp_A+1
    00960 E10B      LDI	R16,0x1B
    00961 E110      LDI	R17,0x10
    00962 940E 39A4 CALL	_PID_angle_init
(0073) 	
(0074) 	timer3_init();
    00964 940E 3B17 CALL	_timer3_init
    00966 C1AC      RJMP	0x0B13
(0075) 	
(0076) 	while(1)
(0077) 	{	
(0078) 		//--------------------------------------------------------------------
(0079) 		//3ms循环一次
(0080) 		//进行角度平衡，使小车可以站稳
(0081) 		//--------------------------------------------------------------------
(0082) 		if(loopsBit & 0x01)
    00967 9020 0103 LDS	R2,loopsBit
    00969 FE20      SBRS	R2,0
    0096A C046      RJMP	0x09B1
(0083) 		{	   
(0084) 		   loopsBit &= ~(0x01);
    0096B 2D82      MOV	R24,R2
    0096C 7F8E      ANDI	R24,0xFE
    0096D 9380 0103 STS	loopsBit,R24
(0085) 		   
(0086) 		   //获取当前角度，角速度
(0087) 		   Get_Angle(&angle, &angle_dot);	
    0096F E02B      LDI	R18,0xB
    00970 E130      LDI	R19,0x10
    00971 E00F      LDI	R16,0xF
    00972 E110      LDI	R17,0x10
    00973 940E 34B6 CALL	_Get_Angle
(0088) 		   
(0089) 		   //通过位置式PID得到小车保存角度为零所需要的PWM
(0090) 	 	   PWM_Balance = PID_Proc(&PID_angle, angle, angle_dot);
    00975 9040 100D LDS	R4,angle_dot+2
    00977 9050 100E LDS	R5,angle_dot+3
    00979 9020 100B LDS	R2,angle_dot
    0097B 9030 100C LDS	R3,angle_dot+1
    0097D 822A      STD	Y+2,R2
    0097E 823B      STD	Y+3,R3
    0097F 824C      STD	Y+4,R4
    00980 825D      STD	Y+5,R5
    00981 9040 1011 LDS	R4,angle+2
    00983 9050 1012 LDS	R5,angle+3
    00985 9020 100F LDS	R2,angle
    00987 9030 1010 LDS	R3,angle+1
    00989 8248      ST	Y,R4
    0098A 8259      STD	Y+1,R5
    0098B 0191      MOVW	R18,R2
    0098C E10B      LDI	R16,0x1B
    0098D E110      LDI	R17,0x10
    0098E 940E 39D9 CALL	_PID_Proc
    00990 9310 100A STS	PWM_Balance+1,R17
    00992 9300 1009 STS	PWM_Balance,R16
(0091) 		   
(0092) 		   //调整左右电机PWM输出
(0093) 	 	   PWM_L = (PWM_Balance + PWM_Lturn); 
    00994 9020 010F LDS	R2,PWM_Lturn
    00996 9030 0110 LDS	R3,PWM_Lturn+1
    00998 0128      MOVW	R4,R16
    00999 0C42      ADD	R4,R2
    0099A 1C53      ADC	R5,R3
    0099B 9250 010B STS	PWM_L+1,R5
    0099D 9240 010A STS	PWM_L,R4
(0094) 	 	   PWM_R = (PWM_Balance + PWM_Rturn);	
    0099F 9020 0111 LDS	R2,PWM_Rturn
    009A1 9030 0112 LDS	R3,PWM_Rturn+1
    009A3 0128      MOVW	R4,R16
    009A4 0C42      ADD	R4,R2
    009A5 1C53      ADC	R5,R3
    009A6 9250 010D STS	PWM_R+1,R5
    009A8 9240 010C STS	PWM_R,R4
(0095) 		   
(0096) 		   //输出PWM
(0097) 		   PWM_Output(PWM_L, PWM_R);  	   
    009AA 0192      MOVW	R18,R4
    009AB 9100 010A LDS	R16,PWM_L
    009AD 9110 010B LDS	R17,PWM_L+1
    009AF 940E 0C8D CALL	_PWM_Output
(0098) 		}
(0099) 		
(0100) 		//--------------------------------------------------------------------
(0101) 		//10ms循环一次
(0102) 		//进行速度平衡，使小车可以行走
(0103) 		//--------------------------------------------------------------------
(0104) 		if(loopsBit & 0x02)
    009B1 9020 0103 LDS	R2,loopsBit
    009B3 FE21      SBRS	R2,1
    009B4 C063      RJMP	0x0A18
(0105) 		{
(0106) 		   loopsBit &= ~(0x02);
    009B5 2D82      MOV	R24,R2
    009B6 7F8D      ANDI	R24,0xFD
    009B7 9380 0103 STS	loopsBit,R24
(0107) 		   
(0108) 		   //获取当前速度，位移
(0109) 		   Get_Speed(&speed, &distance);
    009B9 E025      LDI	R18,5
    009BA E130      LDI	R19,0x10
    009BB E007      LDI	R16,7
    009BC E110      LDI	R17,0x10
    009BD 940E 3619 CALL	_Get_Speed
(0110) 		   
(0111) 		   //通过速度和位移调整小车平衡需要的PWM
(0112) 		   PWM_Balance += Ksp*speed + Ksn*distance;
    009BF 9100 1009 LDS	R16,PWM_Balance
    009C1 9110 100A LDS	R17,PWM_Balance+1
    009C3 940E 42C4 CALL	int2fp
    009C5 0118      MOVW	R2,R16
    009C6 0129      MOVW	R4,R18
    009C7 9080 0115 LDS	R8,Ksp+2
    009C9 9090 0116 LDS	R9,Ksp+3
    009CB 9060 0113 LDS	R6,Ksp
    009CD 9070 0114 LDS	R7,Ksp+1
    009CF 9100 1007 LDS	R16,speed
    009D1 9110 1008 LDS	R17,speed+1
    009D3 940E 42C4 CALL	int2fp
    009D5 933A      ST	-Y,R19
    009D6 932A      ST	-Y,R18
    009D7 931A      ST	-Y,R17
    009D8 930A      ST	-Y,R16
    009D9 0183      MOVW	R16,R6
    009DA 0194      MOVW	R18,R8
    009DB 940E 4469 CALL	fpmule2
    009DD 0138      MOVW	R6,R16
    009DE 0149      MOVW	R8,R18
    009DF 9160 0119 LDS	R22,Ksn+2
    009E1 9170 011A LDS	R23,Ksn+3
    009E3 9140 0117 LDS	R20,Ksn
    009E5 9150 0118 LDS	R21,Ksn+1
    009E7 9100 1005 LDS	R16,distance
    009E9 9110 1006 LDS	R17,distance+1
    009EB 940E 42C4 CALL	int2fp
    009ED 933A      ST	-Y,R19
    009EE 932A      ST	-Y,R18
    009EF 931A      ST	-Y,R17
    009F0 930A      ST	-Y,R16
    009F1 018A      MOVW	R16,R20
    009F2 019B      MOVW	R18,R22
    009F3 940E 4481 CALL	fpmule2x
    009F5 0183      MOVW	R16,R6
    009F6 0194      MOVW	R18,R8
    009F7 940E 4260 CALL	fpadd2x
    009F9 0181      MOVW	R16,R2
    009FA 0192      MOVW	R18,R4
    009FB 940E 4255 CALL	fpadd2
    009FD 940E 4290 CALL	fpint
    009FF 9310 100A STS	PWM_Balance+1,R17
    00A01 9300 1009 STS	PWM_Balance,R16
(0113) 		   
(0114) 		   //调整左右电机PWM输出
(0115) 		   PWM_L = PWM_Balance; 
    00A03 0118      MOVW	R2,R16
    00A04 9230 010B STS	PWM_L+1,R3
    00A06 9220 010A STS	PWM_L,R2
(0116) 	 	   PWM_R = PWM_Balance;	
    00A08 9230 010D STS	PWM_R+1,R3
    00A0A 9220 010C STS	PWM_R,R2
(0117) 		   
(0118) 		   //速出PWM
(0119) 		   PWM_Output(PWM_L, PWM_R);
    00A0C 9120 010C LDS	R18,PWM_R
    00A0E 9130 010D LDS	R19,PWM_R+1
    00A10 9100 010A LDS	R16,PWM_L
    00A12 9110 010B LDS	R17,PWM_L+1
    00A14 940E 0C8D CALL	_PWM_Output
(0120) 		   
(0121) 		   //编码器计数归零
(0122) 		   Clean_Speed();
    00A16 940E 366F CALL	_Clean_Speed
(0123) 		}
(0124) 		
(0125) 		//--------------------------------------------------------------------
(0126) 		//50ms循环一次
(0127) 		//进行转向控制，转动一定角度可以停下
(0128) 		//--------------------------------------------------------------------
(0129) 		if(loopsBit & 0x04)
    00A18 9020 0103 LDS	R2,loopsBit
    00A1A FE22      SBRS	R2,2
    00A1B C019      RJMP	0x0A35
(0130) 		{
(0131) 		   loopsBit &= ~(0x04);
    00A1C 2D82      MOV	R24,R2
    00A1D 7F8B      ANDI	R24,0xFB
    00A1E 9380 0103 STS	loopsBit,R24
(0132) 		   
(0133) 		   //转动1.5s后停止转动
(0134) 		   if(turn_flag<15)
    00A20 9180 010E LDS	R24,turn_flag
    00A22 308F      CPI	R24,0xF
    00A23 F420      BCC	0x0A28
(0135) 		   {
(0136) 		      turn_flag++;
    00A24 5F8F      SUBI	R24,0xFF
    00A25 9380 010E STS	turn_flag,R24
(0137) 		   }
    00A27 C00D      RJMP	0x0A35
(0138) 		   else
(0139) 		   {
(0140) 		   	  turn_flag = 15;
    00A28 E08F      LDI	R24,0xF
    00A29 9380 010E STS	turn_flag,R24
(0141) 		      PWM_Lturn = 0;
    00A2B 2422      CLR	R2
    00A2C 2433      CLR	R3
    00A2D 9230 0110 STS	PWM_Lturn+1,R3
    00A2F 9220 010F STS	PWM_Lturn,R2
(0142) 			  PWM_Rturn = 0;
    00A31 9230 0112 STS	PWM_Rturn+1,R3
    00A33 9220 0111 STS	PWM_Rturn,R2
(0143) 		   }
(0144) 		}
(0145) 		
(0146) 		//--------------------------------------------------------------------
(0147) 		//100ms循环一次
(0148) 		//串口接收，接收各种控制小车的命令
(0149) 		//--------------------------------------------------------------------
(0150) 		
(0151) 		if(loopsBit & 0x08)
    00A35 9020 0103 LDS	R2,loopsBit
    00A37 FE23      SBRS	R2,3
    00A38 C0DA      RJMP	0x0B13
(0152) 		{
(0153) 	 	   loopsBit &= ~(0x08);
    00A39 2D82      MOV	R24,R2
    00A3A 7F87      ANDI	R24,0xF7
    00A3B 9380 0103 STS	loopsBit,R24
(0154) 		   loops = 0;	   	
    00A3D 2422      CLR	R2
    00A3E 2433      CLR	R3
    00A3F 9230 0102 STS	loops+1,R3
    00A41 9220 0101 STS	loops,R2
(0155) 		   
(0156) 		   //前进
(0157) 		   if(rchar == FARWARD)
    00A43 9180 0100 LDS	R24,rchar
    00A45 3381      CPI	R24,0x31
    00A46 F569      BNE	0x0A74
(0158)    		   {
(0159)    	  	   	   //目标倾角每次减少0.005弧度，往前倾
(0160) 			   angle_Targer -= 0.005;
    00A47 9040 1019 LDS	R4,angle_Targer+2
    00A49 9050 101A LDS	R5,angle_Targer+3
    00A4B 9020 1017 LDS	R2,angle_Targer
    00A4D 9030 1018 LDS	R3,angle_Targer+1
    00A4F E80E      LDI	R16,0x8E
    00A50 E010      LDI	R17,0
    00A51 940E 409A CALL	elpm32
    00A53 933A      ST	-Y,R19
    00A54 932A      ST	-Y,R18
    00A55 931A      ST	-Y,R17
    00A56 930A      ST	-Y,R16
    00A57 0181      MOVW	R16,R2
    00A58 0192      MOVW	R18,R4
    00A59 940E 4278 CALL	fpsub2
    00A5B 9310 1018 STS	angle_Targer+1,R17
    00A5D 9300 1017 STS	angle_Targer,R16
    00A5F 9330 101A STS	angle_Targer+3,R19
    00A61 9320 1019 STS	angle_Targer+2,R18
(0161) 			   PID_angle.target = angle_Targer;
    00A63 0118      MOVW	R2,R16
    00A64 0129      MOVW	R4,R18
    00A65 9230 101C STS	PID_angle+1,R3
    00A67 9220 101B STS	PID_angle,R2
    00A69 9250 101E STS	PID_angle+3,R5
    00A6B 9240 101D STS	PID_angle+2,R4
(0162) 	  		   printf("angle_Targer:%f\n", angle_Targer);
    00A6D 8328      ST	Y,R18
    00A6E 8339      STD	Y+1,R19
    00A6F 0198      MOVW	R18,R16
    00A70 E401      LDI	R16,0x41
    00A71 E011      LDI	R17,1
    00A72 940E 4CC1 CALL	_printf
(0163)    		   }
(0164) 			
(0165) 		   //后退
(0166)    		   if(rchar == BACKWARD)
    00A74 9180 0100 LDS	R24,rchar
    00A76 3382      CPI	R24,0x32
    00A77 F569      BNE	0x0AA5
(0167)    		   {
(0168)      	       //目标倾角每次增加0.005弧度，往后仰
(0169) 			   angle_Targer += 0.005;
    00A78 9040 1019 LDS	R4,angle_Targer+2
    00A7A 9050 101A LDS	R5,angle_Targer+3
    00A7C 9020 1017 LDS	R2,angle_Targer
    00A7E 9030 1018 LDS	R3,angle_Targer+1
    00A80 E80E      LDI	R16,0x8E
    00A81 E010      LDI	R17,0
    00A82 940E 409A CALL	elpm32
    00A84 933A      ST	-Y,R19
    00A85 932A      ST	-Y,R18
    00A86 931A      ST	-Y,R17
    00A87 930A      ST	-Y,R16
    00A88 0181      MOVW	R16,R2
    00A89 0192      MOVW	R18,R4
    00A8A 940E 4255 CALL	fpadd2
    00A8C 9310 1018 STS	angle_Targer+1,R17
    00A8E 9300 1017 STS	angle_Targer,R16
    00A90 9330 101A STS	angle_Targer+3,R19
    00A92 9320 1019 STS	angle_Targer+2,R18
(0170) 			   PID_angle.target = angle_Targer;
    00A94 0118      MOVW	R2,R16
    00A95 0129      MOVW	R4,R18
    00A96 9230 101C STS	PID_angle+1,R3
    00A98 9220 101B STS	PID_angle,R2
    00A9A 9250 101E STS	PID_angle+3,R5
    00A9C 9240 101D STS	PID_angle+2,R4
(0171) 	           printf("angle_Targer：%f\n", angle_Targer);
    00A9E 8328      ST	Y,R18
    00A9F 8339      STD	Y+1,R19
    00AA0 0198      MOVW	R18,R16
    00AA1 E20F      LDI	R16,0x2F
    00AA2 E011      LDI	R17,1
    00AA3 940E 4CC1 CALL	_printf
(0172)    		   }
(0173) 		   
(0174) 		   if(rchar == LEFT)
    00AA5 9180 0100 LDS	R24,rchar
    00AA7 3383      CPI	R24,0x33
    00AA8 F479      BNE	0x0AB8
(0175)    		   {
(0176) 			   //左轮PWM增加,右轮不动
(0177) 			   PWM_Lturn = 150;
    00AA9 E986      LDI	R24,0x96
    00AAA E090      LDI	R25,0
    00AAB 9390 0110 STS	PWM_Lturn+1,R25
    00AAD 9380 010F STS	PWM_Lturn,R24
(0178) 			   PWM_Rturn = 0;
    00AAF 2422      CLR	R2
    00AB0 2433      CLR	R3
    00AB1 9230 0112 STS	PWM_Rturn+1,R3
    00AB3 9220 0111 STS	PWM_Rturn,R2
(0179) 			   turn_flag = 1;
    00AB5 E081      LDI	R24,1
    00AB6 9380 010E STS	turn_flag,R24
(0180)    		   }
(0181) 		   
(0182) 		   if(rchar == RIGHT)
    00AB8 9180 0100 LDS	R24,rchar
    00ABA 3384      CPI	R24,0x34
    00ABB F479      BNE	0x0ACB
(0183)    		   {
(0184) 			   //右轮PWM增加，左轮不动
(0185) 			   PWM_Lturn = 0;
    00ABC 2422      CLR	R2
    00ABD 2433      CLR	R3
    00ABE 9230 0110 STS	PWM_Lturn+1,R3
    00AC0 9220 010F STS	PWM_Lturn,R2
(0186) 			   PWM_Rturn = 150;
    00AC2 E986      LDI	R24,0x96
    00AC3 E090      LDI	R25,0
    00AC4 9390 0112 STS	PWM_Rturn+1,R25
    00AC6 9380 0111 STS	PWM_Rturn,R24
(0187) 			   turn_flag = 1;
    00AC8 E081      LDI	R24,1
    00AC9 9380 010E STS	turn_flag,R24
(0188)    		   }
(0189) 		   
(0190) 		   if(rchar == STOP)
    00ACB 9180 0100 LDS	R24,rchar
    00ACD 3385      CPI	R24,0x35
    00ACE F539      BNE	0x0AF6
(0191)    		   {
(0192) 			   //使目标倾角回到平衡角度
(0193) 			   angle_Targer = fix_angle;
    00ACF 9040 1015 LDS	R4,fix_angle+2
    00AD1 9050 1016 LDS	R5,fix_angle+3
    00AD3 9020 1013 LDS	R2,fix_angle
    00AD5 9030 1014 LDS	R3,fix_angle+1
    00AD7 9230 1018 STS	angle_Targer+1,R3
    00AD9 9220 1017 STS	angle_Targer,R2
    00ADB 9250 101A STS	angle_Targer+3,R5
    00ADD 9240 1019 STS	angle_Targer+2,R4
(0194) 			   PID_angle.target = angle_Targer;
    00ADF 9040 1019 LDS	R4,angle_Targer+2
    00AE1 9050 101A LDS	R5,angle_Targer+3
    00AE3 9020 1017 LDS	R2,angle_Targer
    00AE5 9030 1018 LDS	R3,angle_Targer+1
    00AE7 9230 101C STS	PID_angle+1,R3
    00AE9 9220 101B STS	PID_angle,R2
    00AEB 9250 101E STS	PID_angle+3,R5
    00AED 9240 101D STS	PID_angle+2,R4
(0195) 			   printf("angle_Targer：%f\n", angle_Targer);
    00AEF 8248      ST	Y,R4
    00AF0 8259      STD	Y+1,R5
    00AF1 0191      MOVW	R18,R2
    00AF2 E20F      LDI	R16,0x2F
    00AF3 E011      LDI	R17,1
    00AF4 940E 4CC1 CALL	_printf
(0196)    		   }
(0197) 		   
(0198) 		   if(rchar == FIX)
    00AF6 9180 0100 LDS	R24,rchar
    00AF8 3386      CPI	R24,0x36
    00AF9 F481      BNE	0x0B0A
(0199) 		   {
(0200) 		   	   //设定平衡角
(0201) 			   fix_angle = angle;
    00AFA 9040 1011 LDS	R4,angle+2
    00AFC 9050 1012 LDS	R5,angle+3
    00AFE 9020 100F LDS	R2,angle
    00B00 9030 1010 LDS	R3,angle+1
    00B02 9230 1014 STS	fix_angle+1,R3
    00B04 9220 1013 STS	fix_angle,R2
    00B06 9250 1016 STS	fix_angle+3,R5
    00B08 9240 1015 STS	fix_angle+2,R4
(0202) 		   }
(0203) 		   
(0204) 		   rchar = WAIT;
    00B0A E387      LDI	R24,0x37
    00B0B 9380 0100 STS	rchar,R24
(0205) 		   loops = 0;
    00B0D 2422      CLR	R2
    00B0E 2433      CLR	R3
    00B0F 9230 0102 STS	loops+1,R3
    00B11 9220 0101 STS	loops,R2
    00B13 CE53      RJMP	0x0967
    00B14 9626      ADIW	R28,6
    00B15 9508      RET
_timer3_interrupt:
    00B16 930A      ST	-Y,R16
    00B17 931A      ST	-Y,R17
    00B18 932A      ST	-Y,R18
    00B19 933A      ST	-Y,R19
    00B1A 938A      ST	-Y,R24
    00B1B 939A      ST	-Y,R25
    00B1C B70F      IN	R16,0x3F
    00B1D 930A      ST	-Y,R16
(0206) 		}
(0207) 	}
(0208) 	return 0;
(0209) }
(0210) 
(0211) //------------------------------------------------
(0212) //定时器3中断溢出,1ms中断一次
(0213) //------------------------------------------------
(0214) #pragma interrupt_handler timer3_interrupt: 30
(0215) void timer3_interrupt(void) 
(0216) {    
(0217) 	 TCNT3=49535;
    00B1E E78F      LDI	R24,0x7F
    00B1F EC91      LDI	R25,0xC1
    00B20 9390 0089 STS	0x89,R25
    00B22 9380 0088 STS	0x88,R24
(0218) 	 loops++; 
    00B24 9180 0101 LDS	R24,loops
    00B26 9190 0102 LDS	R25,loops+1
    00B28 9601      ADIW	R24,1
    00B29 9390 0102 STS	loops+1,R25
    00B2B 9380 0101 STS	loops,R24
(0219) 	 
(0220) 	 if(!(loops % 3))     {loopsBit |= 0x01;}  
    00B2D E023      LDI	R18,3
    00B2E E030      LDI	R19,0
    00B2F 018C      MOVW	R16,R24
    00B30 940E 3FFC CALL	mod16u
    00B32 3000      CPI	R16,0
    00B33 0701      CPC	R16,R17
    00B34 F429      BNE	0x0B3A
    00B35 9180 0103 LDS	R24,loopsBit
    00B37 6081      ORI	R24,1
    00B38 9380 0103 STS	loopsBit,R24
(0221) 	 if(!(loops % 10))    {loopsBit |= 0x02;} 
    00B3A E02A      LDI	R18,0xA
    00B3B E030      LDI	R19,0
    00B3C 9100 0101 LDS	R16,loops
    00B3E 9110 0102 LDS	R17,loops+1
    00B40 940E 3FFC CALL	mod16u
    00B42 3000      CPI	R16,0
    00B43 0701      CPC	R16,R17
    00B44 F429      BNE	0x0B4A
    00B45 9180 0103 LDS	R24,loopsBit
    00B47 6082      ORI	R24,2
    00B48 9380 0103 STS	loopsBit,R24
(0222) 	 if(!(loops % 100))   {loopsBit |= 0x04;}   
    00B4A E624      LDI	R18,0x64
    00B4B E030      LDI	R19,0
    00B4C 9100 0101 LDS	R16,loops
    00B4E 9110 0102 LDS	R17,loops+1
    00B50 940E 3FFC CALL	mod16u
    00B52 3000      CPI	R16,0
    00B53 0701      CPC	R16,R17
    00B54 F429      BNE	0x0B5A
    00B55 9180 0103 LDS	R24,loopsBit
    00B57 6084      ORI	R24,4
    00B58 9380 0103 STS	loopsBit,R24
(0223) 	 if(!(loops % 1000))  {loopsBit |= 0x08;}  
    00B5A EE28      LDI	R18,0xE8
    00B5B E033      LDI	R19,3
    00B5C 9100 0101 LDS	R16,loops
    00B5E 9110 0102 LDS	R17,loops+1
    00B60 940E 3FFC CALL	mod16u
    00B62 3000      CPI	R16,0
    00B63 0701      CPC	R16,R17
    00B64 F429      BNE	0x0B6A
    00B65 9180 0103 LDS	R24,loopsBit
    00B67 6088      ORI	R24,0x8
    00B68 9380 0103 STS	loopsBit,R24
    00B6A 9109      LD	R16,Y+
    00B6B BF0F      OUT	0x3F,R16
    00B6C 9199      LD	R25,Y+
    00B6D 9189      LD	R24,Y+
    00B6E 9139      LD	R19,Y+
    00B6F 9129      LD	R18,Y+
    00B70 9119      LD	R17,Y+
    00B71 9109      LD	R16,Y+
    00B72 9518      RETI
_uart_receive:
    00B73 920A      ST	-Y,R0
    00B74 921A      ST	-Y,R1
    00B75 922A      ST	-Y,R2
    00B76 923A      ST	-Y,R3
    00B77 924A      ST	-Y,R4
    00B78 925A      ST	-Y,R5
    00B79 926A      ST	-Y,R6
    00B7A 927A      ST	-Y,R7
    00B7B 928A      ST	-Y,R8
    00B7C 929A      ST	-Y,R9
    00B7D 930A      ST	-Y,R16
    00B7E 931A      ST	-Y,R17
    00B7F 932A      ST	-Y,R18
    00B80 933A      ST	-Y,R19
    00B81 938A      ST	-Y,R24
    00B82 939A      ST	-Y,R25
    00B83 93AA      ST	-Y,R26
    00B84 93BA      ST	-Y,R27
    00B85 93EA      ST	-Y,R30
    00B86 93FA      ST	-Y,R31
    00B87 B60F      IN	R0,0x3F
    00B88 920A      ST	-Y,R0
    00B89 92AA      ST	-Y,R10
    00B8A 92BA      ST	-Y,R11
    00B8B 9724      SBIW	R28,4
(0224) }
(0225) 
(0226) //------------------------------------------------
(0227) //串口0接收中断
(0228) //------------------------------------------------
(0229) #pragma interrupt_handler uart_receive:19
(0230) void uart_receive(void)
(0231) {   
(0232)    rchar = UDR0;
    00B8C B02C      IN	R2,0x0C
    00B8D 9220 0100 STS	rchar,R2
(0233)    
(0234)    if(rchar == 'P')
    00B8F 2D82      MOV	R24,R2
    00B90 3580      CPI	R24,0x50
    00B91 F491      BNE	0x0BA4
(0235)    {
(0236)    	  memset(&rec_buf[0],'\0',sizeof(rec_buf[0]));
    00B92 E08A      LDI	R24,0xA
    00B93 E090      LDI	R25,0
    00B94 8399      STD	Y+1,R25
    00B95 8388      ST	Y,R24
    00B96 2722      CLR	R18
    00B97 2733      CLR	R19
    00B98 EE07      LDI	R16,0xE7
    00B99 E01F      LDI	R17,0xF
    00B9A 940E 3FB6 CALL	_memset
(0237) 	  pid_num = 0;
    00B9C 2422      CLR	R2
    00B9D 2433      CLR	R3
    00B9E 9230 0FE6 STS	pid_num+1,R3
    00BA0 9220 0FE5 STS	pid_num,R2
(0238) 	  i=0;
    00BA2 9220 011B STS	i,R2
(0239)    }
(0240)    
(0241)    if(rchar == 'I')
    00BA4 9180 0100 LDS	R24,rchar
    00BA6 3489      CPI	R24,0x49
    00BA7 F499      BNE	0x0BBB
(0242)    {
(0243)    	  memset(&rec_buf[1],'\0',sizeof(rec_buf[1]));
    00BA8 E08A      LDI	R24,0xA
    00BA9 E090      LDI	R25,0
    00BAA 8399      STD	Y+1,R25
    00BAB 8388      ST	Y,R24
    00BAC 2722      CLR	R18
    00BAD 2733      CLR	R19
    00BAE EF01      LDI	R16,0xF1
    00BAF E01F      LDI	R17,0xF
    00BB0 940E 3FB6 CALL	_memset
(0244) 	  pid_num = 1;
    00BB2 E081      LDI	R24,1
    00BB3 E090      LDI	R25,0
    00BB4 9390 0FE6 STS	pid_num+1,R25
    00BB6 9380 0FE5 STS	pid_num,R24
(0245) 	  i=0;
    00BB8 2422      CLR	R2
    00BB9 9220 011B STS	i,R2
(0246)    }
(0247)    
(0248)    if(rchar == 'D')
    00BBB 9180 0100 LDS	R24,rchar
    00BBD 3484      CPI	R24,0x44
    00BBE F499      BNE	0x0BD2
(0249)    {
(0250)    	  memset(&rec_buf[2],'\0',sizeof(rec_buf[2]));
    00BBF E08A      LDI	R24,0xA
    00BC0 E090      LDI	R25,0
    00BC1 8399      STD	Y+1,R25
    00BC2 8388      ST	Y,R24
    00BC3 2722      CLR	R18
    00BC4 2733      CLR	R19
    00BC5 EF0B      LDI	R16,0xFB
    00BC6 E01F      LDI	R17,0xF
    00BC7 940E 3FB6 CALL	_memset
(0251) 	  pid_num = 2;
    00BC9 E082      LDI	R24,2
    00BCA E090      LDI	R25,0
    00BCB 9390 0FE6 STS	pid_num+1,R25
    00BCD 9380 0FE5 STS	pid_num,R24
(0252) 	  i=0;
    00BCF 2422      CLR	R2
    00BD0 9220 011B STS	i,R2
(0253)    }
(0254)    
(0255)    if(isdigit(rchar))
    00BD2 9100 0100 LDS	R16,rchar
    00BD4 2711      CLR	R17
    00BD5 940E 4878 CALL	_isdigit
    00BD7 3000      CPI	R16,0
    00BD8 0701      CPC	R16,R17
    00BD9 F0E1      BEQ	0x0BF6
(0256)        rec_buf[pid_num][i++] = rchar;
    00BDA 9020 011B LDS	R2,i
    00BDC 2433      CLR	R3
    00BDD 0121      MOVW	R4,R2
    00BDE 2D82      MOV	R24,R2
    00BDF 5F8F      SUBI	R24,0xFF
    00BE0 9380 011B STS	i,R24
    00BE2 9120 0FE5 LDS	R18,pid_num
    00BE4 9130 0FE6 LDS	R19,pid_num+1
    00BE6 E00A      LDI	R16,0xA
    00BE7 E010      LDI	R17,0
    00BE8 940E 40AE CALL	empy16s
    00BEA EE87      LDI	R24,0xE7
    00BEB E09F      LDI	R25,0xF
    00BEC 0118      MOVW	R2,R16
    00BED 0E28      ADD	R2,R24
    00BEE 1E39      ADC	R3,R25
    00BEF 2DE4      MOV	R30,R4
    00BF0 27FF      CLR	R31
    00BF1 0DE2      ADD	R30,R2
    00BF2 1DF3      ADC	R31,R3
    00BF3 9020 0100 LDS	R2,rchar
    00BF5 8220      ST	Z,R2
(0257) 	   
(0258)    if(rchar == 'E')
    00BF6 9180 0100 LDS	R24,rchar
    00BF8 3485      CPI	R24,0x45
    00BF9 F009      BEQ	0x0BFB
    00BFA C059      RJMP	0x0C54
(0259)    {
(0260) 	   Kp_A = atoi(rec_buf[0]);
    00BFB EE07      LDI	R16,0xE7
    00BFC E01F      LDI	R17,0xF
    00BFD 940E 44D9 CALL	_atoi
    00BFF 0158      MOVW	R10,R16
    00C00 92B0 0105 STS	Kp_A+1,R11
    00C02 92A0 0104 STS	Kp_A,R10
(0261) 	   Ki_A = atoi(rec_buf[1]);
    00C04 EF01      LDI	R16,0xF1
    00C05 E01F      LDI	R17,0xF
    00C06 940E 44D9 CALL	_atoi
    00C08 0158      MOVW	R10,R16
    00C09 92B0 0107 STS	Ki_A+1,R11
    00C0B 92A0 0106 STS	Ki_A,R10
(0262) 	   Kd_A = atoi(rec_buf[2]);
    00C0D EF0B      LDI	R16,0xFB
    00C0E E01F      LDI	R17,0xF
    00C0F 940E 44D9 CALL	_atoi
    00C11 0158      MOVW	R10,R16
    00C12 92B0 0109 STS	Kd_A+1,R11
    00C14 92A0 0108 STS	Kd_A,R10
(0263) 	   
(0264) 	   PID_angle.Kp = Kp_A;
    00C16 9100 0104 LDS	R16,Kp_A
    00C18 9110 0105 LDS	R17,Kp_A+1
    00C1A 940E 42C2 CALL	uint2fp
    00C1C 9310 1024 STS	PID_angle+9,R17
    00C1E 9300 1023 STS	PID_angle+8,R16
    00C20 9330 1026 STS	PID_angle+11,R19
    00C22 9320 1025 STS	PID_angle+10,R18
(0265) 	   PID_angle.Ki = Ki_A;
    00C24 9100 0106 LDS	R16,Ki_A
    00C26 9110 0107 LDS	R17,Ki_A+1
    00C28 940E 42C2 CALL	uint2fp
    00C2A 9310 1028 STS	PID_angle+13,R17
    00C2C 9300 1027 STS	PID_angle+12,R16
    00C2E 9330 102A STS	PID_angle+15,R19
    00C30 9320 1029 STS	PID_angle+14,R18
(0266) 	   PID_angle.Kd = Kd_A;
    00C32 9100 0108 LDS	R16,Kd_A
    00C34 9110 0109 LDS	R17,Kd_A+1
    00C36 940E 42C2 CALL	uint2fp
    00C38 9310 102C STS	PID_angle+17,R17
    00C3A 9300 102B STS	PID_angle+16,R16
    00C3C 9330 102E STS	PID_angle+19,R19
    00C3E 9320 102D STS	PID_angle+18,R18
(0267) 	   
(0268) 	   printf("P=%d, I=%d, D=%d\n", Kp_A,Ki_A,Kd_A);
    00C40 9020 0108 LDS	R2,Kd_A
    00C42 9030 0109 LDS	R3,Kd_A+1
    00C44 823B      STD	Y+3,R3
    00C45 822A      STD	Y+2,R2
    00C46 9020 0106 LDS	R2,Ki_A
    00C48 9030 0107 LDS	R3,Ki_A+1
    00C4A 8239      STD	Y+1,R3
    00C4B 8228      ST	Y,R2
    00C4C 9120 0104 LDS	R18,Kp_A
    00C4E 9130 0105 LDS	R19,Kp_A+1
    00C50 E10D      LDI	R16,0x1D
    00C51 E011      LDI	R17,1
    00C52 940E 4CC1 CALL	_printf
(0269)    }
    00C54 9624      ADIW	R28,4
    00C55 90B9      LD	R11,Y+
    00C56 90A9      LD	R10,Y+
    00C57 9009      LD	R0,Y+
    00C58 BE0F      OUT	0x3F,R0
    00C59 91F9      LD	R31,Y+
    00C5A 91E9      LD	R30,Y+
    00C5B 91B9      LD	R27,Y+
    00C5C 91A9      LD	R26,Y+
    00C5D 9199      LD	R25,Y+
    00C5E 9189      LD	R24,Y+
    00C5F 9139      LD	R19,Y+
    00C60 9129      LD	R18,Y+
    00C61 9119      LD	R17,Y+
    00C62 9109      LD	R16,Y+
    00C63 9099      LD	R9,Y+
    00C64 9089      LD	R8,Y+
    00C65 9079      LD	R7,Y+
    00C66 9069      LD	R6,Y+
    00C67 9059      LD	R5,Y+
    00C68 9049      LD	R4,Y+
    00C69 9039      LD	R3,Y+
    00C6A 9029      LD	R2,Y+
    00C6B 9019      LD	R1,Y+
    00C6C 9009      LD	R0,Y+
    00C6D 9518      RETI
FILE: E:\大学课程\平衡小车设计\平衡小车程序final\motor.c
(0001) #include "iom128v.h"
(0002) #include "motor.h"
(0003) #include "stdio.h"
(0004) 
(0005) //电机A：PWM引脚PB5，方向控制引脚PC0，PC1
(0006) //电机B: PWM引脚PB6，方向控制引脚PC2，PC3
(0007) void motor_io_init(void)
(0008) {
(0009) 	//PB5,6设置为输出,控制PWM
(0010) 	DDRB |= (0x03<<5);
_motor_io_init:
    00C6E B387      IN	R24,0x17
    00C6F 6680      ORI	R24,0x60
    00C70 BB87      OUT	0x17,R24
(0011) 	
(0012) 	//PC0,1,2,3设置为输出控制方向
(0013) 	DDRC |= (0x0F);
    00C71 B384      IN	R24,0x14
    00C72 608F      ORI	R24,0xF
    00C73 BB84      OUT	0x14,R24
(0014) 	PORTC &= ~(0x0F);
    00C74 B385      IN	R24,0x15
    00C75 7F80      ANDI	R24,0xF0
    00C76 BB85      OUT	0x15,R24
    00C77 9508      RET
(0015) }
(0016) 
(0017) //电机pwm初始化
(0018) void motor_pwm_init(void)
(0019) {
(0020) 	OCR1A = 0;
_motor_pwm_init:
    00C78 2422      CLR	R2
    00C79 2433      CLR	R3
    00C7A BC3B      OUT	0x2B,R3
    00C7B BC2A      OUT	0x2A,R2
(0021) 	OCR1B = 0;
    00C7C BC39      OUT	0x29,R3
    00C7D BC28      OUT	0x28,R2
(0022) 	
(0023) 	//10位快速pwm
(0024) 	TCCR1A |= (1<<WGM11)|(1<<WGM10);
    00C7E B58F      IN	R24,0x2F
    00C7F 6083      ORI	R24,3
    00C80 BD8F      OUT	0x2F,R24
(0025) 	TCCR1B |= (1<<WGM12);
    00C81 B58E      IN	R24,0x2E
    00C82 6088      ORI	R24,0x8
    00C83 BD8E      OUT	0x2E,R24
(0026) 	
(0027) 	//pwm输出口
(0028) 	TCCR1A |= (1<<COM1A1) | (1<<COM1B1);
    00C84 B58F      IN	R24,0x2F
    00C85 6A80      ORI	R24,0xA0
    00C86 BD8F      OUT	0x2F,R24
(0029) 	
(0030) 	TCCR1B |= ((1<<CS11)|(1<<CS10));
    00C87 B58E      IN	R24,0x2E
    00C88 6083      ORI	R24,3
    00C89 BD8E      OUT	0x2E,R24
    00C8A 9508      RET
(0031) }
(0032) 
(0033) void motor_init(void)
(0034) {
(0035)     motor_io_init();
_motor_init:
    00C8B DFE2      RCALL	_motor_io_init
(0036) 	motor_pwm_init();
    00C8C CFEB      RJMP	_motor_pwm_init
_PWM_Output:
  PWM_R                --> R20
  PWM_L                --> R22
    00C8D 940E 4127 CALL	push_xgsetF000
    00C8F 01A9      MOVW	R20,R18
    00C90 01B8      MOVW	R22,R16
(0037) }
(0038) 
(0039) void PWM_Output(int PWM_L,int PWM_R)
(0040) {
(0041) 	if (PWM_L<0)
    00C91 3060      CPI	R22,0
    00C92 E0E0      LDI	R30,0
    00C93 077E      CPC	R23,R30
    00C94 F45C      BGE	0x0CA0
(0042) 	{
(0043) 		PORTC &= ~0x03;
    00C95 B385      IN	R24,0x15
    00C96 7F8C      ANDI	R24,0xFC
    00C97 BB85      OUT	0x15,R24
(0044) 		PORTC |= 0x01;
    00C98 9AA8      SBI	0x15,0
(0045) 		PWM_L *= -1; 
    00C99 EF0F      LDI	R16,0xFF
    00C9A EF1F      LDI	R17,0xFF
    00C9B 019B      MOVW	R18,R22
    00C9C 940E 40AE CALL	empy16s
    00C9E 01B8      MOVW	R22,R16
(0046) 	}
    00C9F C004      RJMP	0x0CA4
(0047) 	else
(0048) 	{
(0049) 		PORTC &= ~0x03;
    00CA0 B385      IN	R24,0x15
    00CA1 7F8C      ANDI	R24,0xFC
    00CA2 BB85      OUT	0x15,R24
(0050) 		PORTC |= 0x02;
    00CA3 9AA9      SBI	0x15,1
(0051) 	}
(0052) 	
(0053) 	if (PWM_L>1000)
    00CA4 EE88      LDI	R24,0xE8
    00CA5 E093      LDI	R25,3
    00CA6 1786      CP	R24,R22
    00CA7 0797      CPC	R25,R23
    00CA8 F414      BGE	0x0CAB
(0054) 	{
(0055) 		PWM_L=1000;
    00CA9 EE68      LDI	R22,0xE8
    00CAA E073      LDI	R23,3
(0056) 	}
(0057) 	
(0058) 	if (PWM_R<0)
    00CAB 3040      CPI	R20,0
    00CAC E0E0      LDI	R30,0
    00CAD 075E      CPC	R21,R30
    00CAE F45C      BGE	0x0CBA
(0059) 	{ 
(0060) 		PORTC &= ~0x0C;
    00CAF B385      IN	R24,0x15
    00CB0 7F83      ANDI	R24,0xF3
    00CB1 BB85      OUT	0x15,R24
(0061) 		PORTC |= 0x04;
    00CB2 9AAA      SBI	0x15,2
(0062) 		PWM_R *= -1;
    00CB3 EF0F      LDI	R16,0xFF
    00CB4 EF1F      LDI	R17,0xFF
    00CB5 019A      MOVW	R18,R20
    00CB6 940E 40AE CALL	empy16s
    00CB8 01A8      MOVW	R20,R16
(0063) 	}
    00CB9 C004      RJMP	0x0CBE
(0064) 	else
(0065) 	{
(0066) 		PORTC &= ~0x0C;
    00CBA B385      IN	R24,0x15
    00CBB 7F83      ANDI	R24,0xF3
    00CBC BB85      OUT	0x15,R24
(0067) 		PORTC |= 0x08;
    00CBD 9AAB      SBI	0x15,3
(0068) 	}
(0069) 	
(0070) 	if (PWM_R>1000)
    00CBE EE88      LDI	R24,0xE8
    00CBF E093      LDI	R25,3
    00CC0 1784      CP	R24,R20
    00CC1 0795      CPC	R25,R21
    00CC2 F414      BGE	0x0CC5
(0071) 	{
(0072) 		PWM_R=1000;
    00CC3 EE48      LDI	R20,0xE8
    00CC4 E053      LDI	R21,3
(0073) 	}
(0074) 	
(0075) 	OCR1AH=(PWM_L>>8);
    00CC5 011B      MOVW	R2,R22
    00CC6 2C23      MOV	R2,R3
    00CC7 2433      CLR	R3
    00CC8 FC27      SBRC	R2,7
    00CC9 9430      COM	R3
    00CCA BC2B      OUT	0x2B,R2
(0076) 	OCR1AL=PWM_L;			
    00CCB BD6A      OUT	0x2A,R22
(0077) 	
(0078) 	OCR1BH=(PWM_R>>8);
    00CCC 011A      MOVW	R2,R20
    00CCD 2C23      MOV	R2,R3
    00CCE 2433      CLR	R3
    00CCF FC27      SBRC	R2,7
    00CD0 9430      COM	R3
    00CD1 BC29      OUT	0x29,R2
(0079) 	OCR1BL=PWM_R;					
    00CD2 BD48      OUT	0x28,R20
    00CD3 940C 412C JMP	pop_xgsetF000
_usart0_init:
  band                 --> R10
    00CD5 940E 4131 CALL	push_xgsetF00C
    00CD7 0158      MOVW	R10,R16
FILE: E:\大学课程\平衡小车设计\平衡小车程序final\usart.c
(0001) #include "iom128v.h"
(0002) #include "macros.h"
(0003) #include "usart.h"
(0004) #include "stdio.h"
(0005) 
(0006) void usart0_init(unsigned int band)//USART 初始化
(0007) {	
(0008) 	//设置帧格式: 8 个数据位, 1个停止位
(0009) 	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01); 
    00CD8 E086      LDI	R24,6
    00CD9 9380 0095 STS	0x95,R24
(0010) 	
(0011) 	//U2X=0时的公式计算
(0012)     UBRR0L= (16000000/band/16-1)%256;
    00CDB 0115      MOVW	R2,R10
    00CDC 2444      CLR	R4
    00CDD 2455      CLR	R5
    00CDE E040      LDI	R20,0
    00CDF E254      LDI	R21,0x24
    00CE0 EF64      LDI	R22,0xF4
    00CE1 E070      LDI	R23,0
    00CE2 925A      ST	-Y,R5
    00CE3 924A      ST	-Y,R4
    00CE4 923A      ST	-Y,R3
    00CE5 922A      ST	-Y,R2
    00CE6 018A      MOVW	R16,R20
    00CE7 019B      MOVW	R18,R22
    00CE8 940E 401E CALL	div32s
    00CEA E140      LDI	R20,0x10
    00CEB E050      LDI	R21,0
    00CEC E060      LDI	R22,0
    00CED E070      LDI	R23,0
    00CEE 937A      ST	-Y,R23
    00CEF 936A      ST	-Y,R22
    00CF0 935A      ST	-Y,R21
    00CF1 934A      ST	-Y,R20
    00CF2 940E 401E CALL	div32s
    00CF4 0118      MOVW	R2,R16
    00CF5 0129      MOVW	R4,R18
    00CF6 E041      LDI	R20,1
    00CF7 E050      LDI	R21,0
    00CF8 E060      LDI	R22,0
    00CF9 E070      LDI	R23,0
    00CFA 1A24      SUB	R2,R20
    00CFB 0A35      SBC	R3,R21
    00CFC 0A46      SBC	R4,R22
    00CFD 0A57      SBC	R5,R23
    00CFE E040      LDI	R20,0
    00CFF E051      LDI	R21,1
    00D00 E060      LDI	R22,0
    00D01 E070      LDI	R23,0
    00D02 937A      ST	-Y,R23
    00D03 936A      ST	-Y,R22
    00D04 935A      ST	-Y,R21
    00D05 934A      ST	-Y,R20
    00D06 0181      MOVW	R16,R2
    00D07 0192      MOVW	R18,R4
    00D08 940E 4020 CALL	mod32s
    00D0A B909      OUT	0x09,R16
(0013)     UBRR0H= (16000000/band/16-1)/256;
    00D0B 0115      MOVW	R2,R10
    00D0C 2444      CLR	R4
    00D0D 2455      CLR	R5
    00D0E E040      LDI	R20,0
    00D0F E254      LDI	R21,0x24
    00D10 EF64      LDI	R22,0xF4
    00D11 E070      LDI	R23,0
    00D12 925A      ST	-Y,R5
    00D13 924A      ST	-Y,R4
    00D14 923A      ST	-Y,R3
    00D15 922A      ST	-Y,R2
    00D16 018A      MOVW	R16,R20
    00D17 019B      MOVW	R18,R22
    00D18 940E 401E CALL	div32s
    00D1A E140      LDI	R20,0x10
    00D1B E050      LDI	R21,0
    00D1C E060      LDI	R22,0
    00D1D E070      LDI	R23,0
    00D1E 937A      ST	-Y,R23
    00D1F 936A      ST	-Y,R22
    00D20 935A      ST	-Y,R21
    00D21 934A      ST	-Y,R20
    00D22 940E 401E CALL	div32s
    00D24 0118      MOVW	R2,R16
    00D25 0129      MOVW	R4,R18
    00D26 E041      LDI	R20,1
    00D27 E050      LDI	R21,0
    00D28 E060      LDI	R22,0
    00D29 E070      LDI	R23,0
    00D2A 1A24      SUB	R2,R20
    00D2B 0A35      SBC	R3,R21
    00D2C 0A46      SBC	R4,R22
    00D2D 0A57      SBC	R5,R23
    00D2E E040      LDI	R20,0
    00D2F E051      LDI	R21,1
    00D30 E060      LDI	R22,0
    00D31 E070      LDI	R23,0
    00D32 937A      ST	-Y,R23
    00D33 936A      ST	-Y,R22
    00D34 935A      ST	-Y,R21
    00D35 934A      ST	-Y,R20
    00D36 0181      MOVW	R16,R2
    00D37 0192      MOVW	R18,R4
    00D38 940E 401E CALL	div32s
    00D3A 9300 0090 STS	0x90,R16
(0014) 	
(0015) 	//使能接收中断，使能接收，使能发送
(0016) 	UCSR0A = 0x00;
    00D3C 2422      CLR	R2
    00D3D B82B      OUT	0x0B,R2
(0017) 	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
    00D3E E988      LDI	R24,0x98
    00D3F B98A      OUT	0x0A,R24
(0018) 	
(0019) 	//开总中断
(0020) 	SEI();
    00D40 9478      BSET	7
    00D41 940C 4138 JMP	pop_xgsetF00C
(0021) }
(0022) 
(0023) // 数据发送
(0024) void send_char(unsigned char data )
(0025) {
(0026)      //等待发送缓冲器为空 
(0027)      while ( !( UCSR0A & (1<<UDRE0)) );
_send_char:
  data                 --> R16
    00D43 9B5D      SBIS	0x0B,5
    00D44 CFFE      RJMP	_send_char
(0028)      // 将数据放入缓冲器，发送数据 
(0029)      UDR0 = data;
    00D45 B90C      OUT	0x0C,R16
    00D46 9508      RET
(0030) }
(0031) 
(0032) extern int putchar(char input)
(0033) {
(0034)   if(input== '\n')
_putchar$device_specific$|_putchar:
  input                --> R16
    00D47 300A      CPI	R16,0xA
    00D48 F421      BNE	0x0D4D
(0035)   {  
(0036)    	while(!(UCSR0A & (1<<UDRE0)));
    00D49 9B5D      SBIS	0x0B,5
    00D4A CFFE      RJMP	0x0D49
(0037)  	UDR0 = '\t';
    00D4B E089      LDI	R24,0x9
    00D4C B98C      OUT	0x0C,R24
(0038)   }   
(0039)    
(0040)   while(!(UCSR0A&(1<<UDRE0)));
    00D4D 9B5D      SBIS	0x0B,5
    00D4E CFFE      RJMP	0x0D4D
(0041)   UDR0=input;
    00D4F B90C      OUT	0x0C,R16
(0042)   return 1;
    00D50 E001      LDI	R16,1
    00D51 E010      LDI	R17,0
    00D52 9508      RET
FILE: E:\大学课程\平衡小车设计\平衡小车程序final\i2c.c
(0001) #include "i2c.h"
(0002) 
(0003) #define SCL     0    
(0004) #define SDA     1    
(0005) 
(0006) #define  SCL_L   DDRA|=(1<<SCL)    //输出低电平
(0007) #define  SCL_H   DDRA&=~(1<<SCL)   //输入，外部电阻上拉为高电平 
(0008) #define  SDA_L   DDRA|=(1<<SDA)    //输出低电平
(0009) #define  SDA_H   DDRA&=~(1<<SDA)   //输入，外部电阻上拉为高电平
(0010) 
(0011) #define SCL_read      (PINA & 0x01)
(0012) #define SDA_read      (PINA & 0x02)
(0013) 
(0014) void I2C_Config(void)
(0015) {	
(0016) 	PORTA&=~((1<<SCL)|(1<<SDA));
_I2C_Config:
    00D53 B38B      IN	R24,0x1B
    00D54 7F8C      ANDI	R24,0xFC
    00D55 BB8B      OUT	0x1B,R24
(0017) 	SCL_H;
    00D56 98D0      CBI	0x1A,0
(0018) 	SDA_H;
    00D57 98D1      CBI	0x1A,1
    00D58 9508      RET
(0019) }
(0020) 
(0021) static void I2C_delay(void)
(0022) {
(0023)     asm("nop");
i2c.c:I2C_delay:
    00D59 0000      NOP
    00D5A 9508      RET
_delay_us:
  b                    --> R20
  a                    --> R16
    00D5B 934A      ST	-Y,R20
    00D5C 935A      ST	-Y,R21
(0024) }
(0025) 
(0026) void delay_us(unsigned int a)
(0027) {
(0028) 	unsigned int b;
(0029) 	for (;a>0;a--)
    00D5D C00A      RJMP	0x0D68
(0030) 	{
(0031) 		for (b=130;b>0;b--);
    00D5E E842      LDI	R20,0x82
    00D5F E050      LDI	R21,0
    00D60 C002      RJMP	0x0D63
    00D61 5041      SUBI	R20,1
    00D62 4050      SBCI	R21,0
    00D63 3040      CPI	R20,0
    00D64 0745      CPC	R20,R21
    00D65 F7D9      BNE	0x0D61
    00D66 5001      SUBI	R16,1
    00D67 4010      SBCI	R17,0
    00D68 3000      CPI	R16,0
    00D69 0701      CPC	R16,R17
    00D6A F799      BNE	0x0D5E
(0032) 	};
    00D6B 9159      LD	R21,Y+
    00D6C 9149      LD	R20,Y+
    00D6D 9508      RET
_delay_ms:
  b                    --> R20
  a                    --> R16
    00D6E 934A      ST	-Y,R20
    00D6F 935A      ST	-Y,R21
(0033) }
(0034) 
(0035) void delay_ms(unsigned int a)
(0036) {
(0037) 	unsigned int b;
(0038) 	for (;a>0;a--)
    00D70 C00A      RJMP	0x0D7B
(0039) 	{
(0040) 		for (b=630;b>0;b--);
    00D71 E746      LDI	R20,0x76
    00D72 E052      LDI	R21,2
    00D73 C002      RJMP	0x0D76
    00D74 5041      SUBI	R20,1
    00D75 4050      SBCI	R21,0
    00D76 3040      CPI	R20,0
    00D77 0745      CPC	R20,R21
    00D78 F7D9      BNE	0x0D74
    00D79 5001      SUBI	R16,1
    00D7A 4010      SBCI	R17,0
    00D7B 3000      CPI	R16,0
    00D7C 0701      CPC	R16,R17
    00D7D F799      BNE	0x0D71
    00D7E 9159      LD	R21,Y+
    00D7F 9149      LD	R20,Y+
    00D80 9508      RET
(0041) 	}	
(0042) }
(0043) 
(0044) static bool I2C_Start(void)
(0045) {
(0046)     SDA_H;
i2c.c:I2C_Start:
    00D81 98D1      CBI	0x1A,1
(0047)     SCL_H;
    00D82 98D0      CBI	0x1A,0
(0048)     I2C_delay();
    00D83 DFD5      RCALL	i2c.c:I2C_delay
(0049)     if (!SDA_read)
    00D84 99C9      SBIC	0x19,1
    00D85 C002      RJMP	0x0D88
(0050) 	{
(0051) 		return false;
    00D86 2700      CLR	R16
    00D87 C009      RJMP	0x0D91
(0052) 	}
(0053)     SDA_L;
    00D88 9AD1      SBI	0x1A,1
(0054)     I2C_delay();
    00D89 DFCF      RCALL	i2c.c:I2C_delay
(0055)     if (SDA_read)
    00D8A 9BC9      SBIS	0x19,1
    00D8B C002      RJMP	0x0D8E
(0056) 	{
(0057) 		return false;
    00D8C 2700      CLR	R16
    00D8D C003      RJMP	0x0D91
(0058) 	}
(0059)     SDA_L;
    00D8E 9AD1      SBI	0x1A,1
(0060)     I2C_delay();
    00D8F DFC9      RCALL	i2c.c:I2C_delay
(0061)     return true;
    00D90 E001      LDI	R16,1
    00D91 9508      RET
(0062) }
(0063) 
(0064) static void I2C_Stop(void)
(0065) {
(0066)     SCL_L;
i2c.c:I2C_Stop:
    00D92 9AD0      SBI	0x1A,0
(0067)     I2C_delay();
    00D93 DFC5      RCALL	i2c.c:I2C_delay
(0068)     SDA_L;
    00D94 9AD1      SBI	0x1A,1
(0069)     I2C_delay();
    00D95 DFC3      RCALL	i2c.c:I2C_delay
(0070)     SCL_H;
    00D96 98D0      CBI	0x1A,0
(0071)     I2C_delay();
    00D97 DFC1      RCALL	i2c.c:I2C_delay
(0072)     SDA_H;
    00D98 98D1      CBI	0x1A,1
(0073)     I2C_delay();
    00D99 CFBF      RJMP	i2c.c:I2C_delay
(0074) }
(0075) 
(0076) static void I2C_Ack(void)
(0077) {
(0078)     SCL_L;
i2c.c:I2C_Ack:
    00D9A 9AD0      SBI	0x1A,0
(0079)     I2C_delay();
    00D9B DFBD      RCALL	i2c.c:I2C_delay
(0080)     SDA_L;
    00D9C 9AD1      SBI	0x1A,1
(0081)     I2C_delay();
    00D9D DFBB      RCALL	i2c.c:I2C_delay
(0082)     SCL_H;
    00D9E 98D0      CBI	0x1A,0
(0083)     I2C_delay();
    00D9F DFB9      RCALL	i2c.c:I2C_delay
(0084)     SCL_L;
    00DA0 9AD0      SBI	0x1A,0
(0085)     I2C_delay();
    00DA1 CFB7      RJMP	i2c.c:I2C_delay
(0086) }
(0087) 
(0088) static void I2C_NoAck(void)
(0089) {
(0090)     SCL_L;
i2c.c:I2C_NoAck:
    00DA2 9AD0      SBI	0x1A,0
(0091)     I2C_delay();
    00DA3 DFB5      RCALL	i2c.c:I2C_delay
(0092)     SDA_H;
    00DA4 98D1      CBI	0x1A,1
(0093)     I2C_delay();
    00DA5 DFB3      RCALL	i2c.c:I2C_delay
(0094)     SCL_H;
    00DA6 98D0      CBI	0x1A,0
(0095)     I2C_delay();
    00DA7 DFB1      RCALL	i2c.c:I2C_delay
(0096)     SCL_L;
    00DA8 9AD0      SBI	0x1A,0
(0097)     I2C_delay();
    00DA9 CFAF      RJMP	i2c.c:I2C_delay
(0098) }
(0099) 
(0100) static bool I2C_WaitAck(void)
(0101) {
(0102)     SCL_L;
i2c.c:I2C_WaitAck:
    00DAA 9AD0      SBI	0x1A,0
(0103)     I2C_delay();
    00DAB DFAD      RCALL	i2c.c:I2C_delay
(0104)     SDA_H;
    00DAC 98D1      CBI	0x1A,1
(0105)     I2C_delay();
    00DAD DFAB      RCALL	i2c.c:I2C_delay
(0106)     SCL_H;
    00DAE 98D0      CBI	0x1A,0
(0107)     I2C_delay();
    00DAF DFA9      RCALL	i2c.c:I2C_delay
(0108)     if (SDA_read) 
    00DB0 9BC9      SBIS	0x19,1
    00DB1 C003      RJMP	0x0DB5
(0109) 	{
(0110) 		SCL_L;
    00DB2 9AD0      SBI	0x1A,0
(0111)         return false;
    00DB3 2700      CLR	R16
    00DB4 C002      RJMP	0x0DB7
(0112)     }
(0113)     SCL_L;
    00DB5 9AD0      SBI	0x1A,0
(0114)     return true;
    00DB6 E001      LDI	R16,1
    00DB7 9508      RET
i2c.c:I2C_SendByte:
  i                    --> R20
  byte                 --> R10
    00DB8 92AA      ST	-Y,R10
    00DB9 934A      ST	-Y,R20
    00DBA 2EA0      MOV	R10,R16
(0115) }
(0116) 
(0117) static void I2C_SendByte(uint8_t byte)
(0118) {
(0119)     uint8_t i = 8;
    00DBB E048      LDI	R20,0x8
    00DBC C00B      RJMP	0x0DC8
(0120)     while (i--) {
(0121)         SCL_L;
    00DBD 9AD0      SBI	0x1A,0
(0122)         I2C_delay();
    00DBE DF9A      RCALL	i2c.c:I2C_delay
(0123)         if (byte & 0x80)
    00DBF FEA7      SBRS	R10,7
    00DC0 C002      RJMP	0x0DC3
(0124)             SDA_H;
    00DC1 98D1      CBI	0x1A,1
    00DC2 C001      RJMP	0x0DC4
(0125)         else
(0126)             SDA_L;
    00DC3 9AD1      SBI	0x1A,1
(0127)         byte <<= 1;
    00DC4 0CAA      LSL	R10
(0128)         I2C_delay();
    00DC5 DF93      RCALL	i2c.c:I2C_delay
(0129)         SCL_H;
    00DC6 98D0      CBI	0x1A,0
(0130)         I2C_delay();
    00DC7 DF91      RCALL	i2c.c:I2C_delay
    00DC8 2E24      MOV	R2,R20
    00DC9 2433      CLR	R3
    00DCA 5041      SUBI	R20,1
    00DCB 2022      TST	R2
    00DCC F781      BNE	0x0DBD
(0131)     }
(0132)     SCL_L;
    00DCD 9AD0      SBI	0x1A,0
    00DCE 9149      LD	R20,Y+
    00DCF 90A9      LD	R10,Y+
    00DD0 9508      RET
i2c.c:I2C_ReceiveByte:
  i                    --> R22
  byte                 --> R20
    00DD1 934A      ST	-Y,R20
    00DD2 936A      ST	-Y,R22
(0133) }
(0134) 
(0135) static uint8_t I2C_ReceiveByte(void)
(0136) {
(0137)     uint8_t i = 8;
    00DD3 E068      LDI	R22,0x8
(0138)     uint8_t byte = 0;
    00DD4 2744      CLR	R20
(0139) 
(0140)     SDA_H;
    00DD5 98D1      CBI	0x1A,1
    00DD6 C008      RJMP	0x0DDF
(0141)     while (i--) {
(0142)         byte <<= 1;
    00DD7 0F44      LSL	R20
(0143)         SCL_L;
    00DD8 9AD0      SBI	0x1A,0
(0144)         I2C_delay();
    00DD9 DF7F      RCALL	i2c.c:I2C_delay
(0145)         SCL_H;
    00DDA 98D0      CBI	0x1A,0
(0146)         I2C_delay();
    00DDB DF7D      RCALL	i2c.c:I2C_delay
(0147)         if (SDA_read) {
    00DDC 9BC9      SBIS	0x19,1
    00DDD C001      RJMP	0x0DDF
(0148)             byte |= 0x01;
    00DDE 6041      ORI	R20,1
    00DDF 2E26      MOV	R2,R22
    00DE0 2433      CLR	R3
    00DE1 5061      SUBI	R22,1
    00DE2 2022      TST	R2
    00DE3 F799      BNE	0x0DD7
(0149)         }
(0150)     }
(0151)     SCL_L;
    00DE4 9AD0      SBI	0x1A,0
(0152)     return byte;
    00DE5 2F04      MOV	R16,R20
    00DE6 9169      LD	R22,Y+
    00DE7 9149      LD	R20,Y+
    00DE8 9508      RET
_i2cWriteBuffer:
  i                    --> R20
  data                 --> R10
  len                  --> R12
  reg                  --> R14
  addr                 --> R20
    00DE9 940E 4114 CALL	push_xgset30FC
    00DEB 2EE2      MOV	R14,R18
    00DEC 2F40      MOV	R20,R16
    00DED 84C8      LDD	R12,Y+8
    00DEE 84AA      LDD	R10,Y+10
    00DEF 84BB      LDD	R11,Y+11
(0153) }
(0154) 
(0155) bool i2cWriteBuffer(uint8_t addr, uint8_t reg, uint8_t len, uint8_t * data)
(0156) {
(0157)     int i;
(0158)     if (!I2C_Start())
    00DF0 DF90      RCALL	i2c.c:I2C_Start
    00DF1 2300      TST	R16
    00DF2 F411      BNE	0x0DF5
(0159) 	{
(0160) 		return false;
    00DF3 2700      CLR	R16
    00DF4 C024      RJMP	0x0E19
(0161) 	}
(0162) 	
(0163)     I2C_SendByte(addr << 1 | I2C_DirectionTransmitter);
    00DF5 2F04      MOV	R16,R20
    00DF6 0F00      LSL	R16
    00DF7 DFC0      RCALL	i2c.c:I2C_SendByte
(0164) 	
(0165)     if (!I2C_WaitAck()) 
    00DF8 DFB1      RCALL	i2c.c:I2C_WaitAck
    00DF9 2300      TST	R16
    00DFA F419      BNE	0x0DFE
(0166) 	{
(0167) 		I2C_Stop();
    00DFB DF96      RCALL	i2c.c:I2C_Stop
(0168)         return false;
    00DFC 2700      CLR	R16
    00DFD C01B      RJMP	0x0E19
(0169)     }
(0170)     I2C_SendByte(reg);
    00DFE 2D0E      MOV	R16,R14
    00DFF DFB8      RCALL	i2c.c:I2C_SendByte
(0171)     I2C_WaitAck();
    00E00 DFA9      RCALL	i2c.c:I2C_WaitAck
(0172)     for (i = 0; i < len; i++)
    00E01 2744      CLR	R20
    00E02 2755      CLR	R21
    00E03 C00E      RJMP	0x0E12
(0173) 	{
(0174)         I2C_SendByte(data[i]);
    00E04 01FA      MOVW	R30,R20
    00E05 0DEA      ADD	R30,R10
    00E06 1DFB      ADC	R31,R11
    00E07 8100      LD	R16,Z
    00E08 DFAF      RCALL	i2c.c:I2C_SendByte
(0175)         if (!I2C_WaitAck()) 
    00E09 DFA0      RCALL	i2c.c:I2C_WaitAck
    00E0A 2EE0      MOV	R14,R16
    00E0B 2300      TST	R16
    00E0C F419      BNE	0x0E10
(0176) 		{
(0177) 			I2C_Stop();
    00E0D DF84      RCALL	i2c.c:I2C_Stop
(0178)             return false;
    00E0E 2700      CLR	R16
    00E0F C009      RJMP	0x0E19
    00E10 5F4F      SUBI	R20,0xFF
    00E11 4F5F      SBCI	R21,0xFF
    00E12 2C2C      MOV	R2,R12
    00E13 2433      CLR	R3
    00E14 1542      CP	R20,R2
    00E15 0553      CPC	R21,R3
    00E16 F36C      BLT	0x0E04
(0179)         }
(0180)     }
(0181)     I2C_Stop();
    00E17 DF7A      RCALL	i2c.c:I2C_Stop
(0182)     return true;
    00E18 E001      LDI	R16,1
    00E19 940C 40FE JMP	pop_xgset30FC
_i2cwrite:
  data                 --> R20
  len                  --> R14
  reg                  --> R12
  addr                 --> R10
    00E1B 940E 4114 CALL	push_xgset30FC
    00E1D 2EC2      MOV	R12,R18
    00E1E 2EA0      MOV	R10,R16
    00E1F 9724      SBIW	R28,4
    00E20 84EC      LDD	R14,Y+12
    00E21 854E      LDD	R20,Y+14
    00E22 855F      LDD	R21,Y+15
(0183) }
(0184) 
(0185) int8_t i2cwrite(uint8_t addr, uint8_t reg, uint8_t len, uint8_t * data)
(0186) {
(0187) 	if(i2cWriteBuffer(addr,reg,len,data))
    00E23 835B      STD	Y+3,R21
    00E24 834A      STD	Y+2,R20
    00E25 82E8      ST	Y,R14
    00E26 2D2C      MOV	R18,R12
    00E27 2D0A      MOV	R16,R10
    00E28 DFC0      RCALL	_i2cWriteBuffer
    00E29 2300      TST	R16
    00E2A F011      BEQ	0x0E2D
(0188) 	{
(0189) 		return TRUE;
    00E2B 2700      CLR	R16
    00E2C C001      RJMP	0x0E2E
(0190) 	}
(0191) 	else
(0192) 	{
(0193) 		return FALSE;
    00E2D EF0F      LDI	R16,0xFF
    00E2E 9624      ADIW	R28,4
    00E2F 940C 40FE JMP	pop_xgset30FC
_i2cread:
  buf                  --> R20
  len                  --> R14
  reg                  --> R12
  addr                 --> R10
    00E31 940E 4114 CALL	push_xgset30FC
    00E33 2EC2      MOV	R12,R18
    00E34 2EA0      MOV	R10,R16
    00E35 9724      SBIW	R28,4
    00E36 84EC      LDD	R14,Y+12
    00E37 854E      LDD	R20,Y+14
    00E38 855F      LDD	R21,Y+15
(0194) 	}
(0195) }
(0196) int8_t i2cread(uint8_t addr, uint8_t reg, uint8_t len, uint8_t *buf)
(0197) {
(0198) 	if(i2cRead(addr,reg,len,buf))
    00E39 835B      STD	Y+3,R21
    00E3A 834A      STD	Y+2,R20
    00E3B 82E8      ST	Y,R14
    00E3C 2D2C      MOV	R18,R12
    00E3D 2D0A      MOV	R16,R10
    00E3E D025      RCALL	_i2cRead
    00E3F 2300      TST	R16
    00E40 F011      BEQ	0x0E43
(0199) 	{
(0200) 		return TRUE;
    00E41 2700      CLR	R16
    00E42 C001      RJMP	0x0E44
(0201) 	}
(0202) 	else
(0203) 	{
(0204) 		return FALSE;
    00E43 EF0F      LDI	R16,0xFF
    00E44 9624      ADIW	R28,4
    00E45 940C 40FE JMP	pop_xgset30FC
_i2cWrite:
  data                 --> R10
  reg                  --> R12
  addr                 --> R14
    00E47 940E 4116 CALL	push_xgset00FC
    00E49 2EC2      MOV	R12,R18
    00E4A 2EE0      MOV	R14,R16
    00E4B 80AE      LDD	R10,Y+6
(0205) 	}
(0206) }
(0207) 
(0208) bool i2cWrite(uint8_t addr, uint8_t reg, uint8_t data)
(0209) {
(0210)     if (!I2C_Start())
    00E4C DF34      RCALL	i2c.c:I2C_Start
    00E4D 2300      TST	R16
    00E4E F411      BNE	0x0E51
(0211)         return false;
    00E4F 2700      CLR	R16
    00E50 C011      RJMP	0x0E62
(0212)     I2C_SendByte(addr << 1 | I2C_DirectionTransmitter);
    00E51 2D0E      MOV	R16,R14
    00E52 0F00      LSL	R16
    00E53 DF64      RCALL	i2c.c:I2C_SendByte
(0213)     if (!I2C_WaitAck()) {
    00E54 DF55      RCALL	i2c.c:I2C_WaitAck
    00E55 2300      TST	R16
    00E56 F419      BNE	0x0E5A
(0214)         I2C_Stop();
    00E57 DF3A      RCALL	i2c.c:I2C_Stop
(0215)         return false;
    00E58 2700      CLR	R16
    00E59 C008      RJMP	0x0E62
(0216)     }
(0217)     I2C_SendByte(reg);
    00E5A 2D0C      MOV	R16,R12
    00E5B DF5C      RCALL	i2c.c:I2C_SendByte
(0218)     I2C_WaitAck();
    00E5C DF4D      RCALL	i2c.c:I2C_WaitAck
(0219)     I2C_SendByte(data);
    00E5D 2D0A      MOV	R16,R10
    00E5E DF59      RCALL	i2c.c:I2C_SendByte
(0220)     I2C_WaitAck();
    00E5F DF4A      RCALL	i2c.c:I2C_WaitAck
(0221)     I2C_Stop();
    00E60 DF31      RCALL	i2c.c:I2C_Stop
(0222)     return true;
    00E61 E001      LDI	R16,1
    00E62 940C 40F7 JMP	pop_xgset00FC
_i2cRead:
  buf                  --> R20
  len                  --> R22
  reg                  --> R12
  addr                 --> R10
    00E64 940E 414D CALL	push_xgsetF03C
    00E66 2EC2      MOV	R12,R18
    00E67 2EA0      MOV	R10,R16
    00E68 8568      LDD	R22,Y+8
    00E69 854A      LDD	R20,Y+10
    00E6A 855B      LDD	R21,Y+11
(0223) }
(0224) 
(0225) bool i2cRead(uint8_t addr, uint8_t reg, uint8_t len, uint8_t *buf)
(0226) {
(0227)     if (!I2C_Start())
    00E6B DF15      RCALL	i2c.c:I2C_Start
    00E6C 2300      TST	R16
    00E6D F411      BNE	0x0E70
(0228)         return false;
    00E6E 2700      CLR	R16
    00E6F C023      RJMP	0x0E93
(0229)     I2C_SendByte(addr << 1 | I2C_DirectionTransmitter);
    00E70 2D0A      MOV	R16,R10
    00E71 0F00      LSL	R16
    00E72 DF45      RCALL	i2c.c:I2C_SendByte
(0230)     if (!I2C_WaitAck()) {
    00E73 DF36      RCALL	i2c.c:I2C_WaitAck
    00E74 2300      TST	R16
    00E75 F419      BNE	0x0E79
(0231)         I2C_Stop();
    00E76 DF1B      RCALL	i2c.c:I2C_Stop
(0232)         return false;
    00E77 2700      CLR	R16
    00E78 C01A      RJMP	0x0E93
(0233)     }
(0234)     I2C_SendByte(reg);
    00E79 2D0C      MOV	R16,R12
    00E7A DF3D      RCALL	i2c.c:I2C_SendByte
(0235)     I2C_WaitAck();
    00E7B DF2E      RCALL	i2c.c:I2C_WaitAck
(0236)     I2C_Start();
    00E7C DF04      RCALL	i2c.c:I2C_Start
(0237)     I2C_SendByte(addr << 1 | I2C_DirectionReceiver);
    00E7D 2D0A      MOV	R16,R10
    00E7E 0F00      LSL	R16
    00E7F 6001      ORI	R16,1
    00E80 DF37      RCALL	i2c.c:I2C_SendByte
(0238)     I2C_WaitAck();
    00E81 DF28      RCALL	i2c.c:I2C_WaitAck
    00E82 C00C      RJMP	0x0E8F
(0239)     while (len) {
(0240)         *buf = I2C_ReceiveByte();
    00E83 DF4D      RCALL	i2c.c:I2C_ReceiveByte
    00E84 2EA0      MOV	R10,R16
    00E85 01FA      MOVW	R30,R20
    00E86 82A0      ST	Z,R10
(0241)         if (len == 1)
    00E87 3061      CPI	R22,1
    00E88 F411      BNE	0x0E8B
(0242)             I2C_NoAck();
    00E89 DF18      RCALL	i2c.c:I2C_NoAck
    00E8A C001      RJMP	0x0E8C
(0243)         else
(0244)             I2C_Ack();
    00E8B DF0E      RCALL	i2c.c:I2C_Ack
(0245)         buf++;
    00E8C 5F4F      SUBI	R20,0xFF
    00E8D 4F5F      SBCI	R21,0xFF
(0246)         len--;
    00E8E 956A      DEC	R22
    00E8F 2366      TST	R22
    00E90 F791      BNE	0x0E83
(0247)     }
(0248)     I2C_Stop();
    00E91 DF00      RCALL	i2c.c:I2C_Stop
(0249)     return true;
    00E92 E001      LDI	R16,1
    00E93 940C 4156 JMP	pop_xgsetF03C
(0250) }
(0251) 
(0252) uint16_t i2cGetErrorCounter(void)
(0253) {
(0254)     return 0;
_i2cGetErrorCounter:
    00E95 2700      CLR	R16
    00E96 2711      CLR	R17
    00E97 9508      RET
_MPU6050_ReadI2C:
  REG_data             --> R10
  REG_Address          --> R12
  SlaveAddress         --> R20
    00E98 940E 413F CALL	push_xgset303C
    00E9A 2EC2      MOV	R12,R18
    00E9B 2F40      MOV	R20,R16
(0255) }
(0256) 
(0257) /************************************************
(0258)  函数名:     MPU6050_ReadI2C
(0259)  函数功能:	  从I2C设备读取一个字节数据
(0260)  形参:		  读取设备地址
(0261)  返回参数:	  读取字节数据
(0262) ************************************************/
(0263) uint8_t MPU6050_ReadI2C(uint8_t SlaveAddress,uint8_t REG_Address)
(0264) {
(0265) 	uint8_t REG_data;
(0266) 	I2C_Start();                  //起始信号
    00E9C DEE4      RCALL	i2c.c:I2C_Start
(0267) 	I2C_SendByte(SlaveAddress);  //发送设备地址+写信号
    00E9D 2F04      MOV	R16,R20
    00E9E DF19      RCALL	i2c.c:I2C_SendByte
(0268) 	REG_data=I2C_WaitAck();	   
    00E9F DF0A      RCALL	i2c.c:I2C_WaitAck
(0269) 	I2C_SendByte(REG_Address);   //发送存储单元地址，从0开始
    00EA0 2D0C      MOV	R16,R12
    00EA1 DF16      RCALL	i2c.c:I2C_SendByte
(0270) 	REG_data=I2C_WaitAck();	   
    00EA2 DF07      RCALL	i2c.c:I2C_WaitAck
(0271) 	I2C_Start();                  //起始信号
    00EA3 DEDD      RCALL	i2c.c:I2C_Start
(0272) 	I2C_SendByte(SlaveAddress+1);//发送设备地址+读信号
    00EA4 2F04      MOV	R16,R20
    00EA5 5F0F      SUBI	R16,0xFF
    00EA6 DF11      RCALL	i2c.c:I2C_SendByte
(0273) 	REG_data=I2C_WaitAck();	   
    00EA7 DF02      RCALL	i2c.c:I2C_WaitAck
(0274)  	REG_data=I2C_ReceiveByte();		//读取一个字节,不继续再读,发送NAK,读出寄存器数据
    00EA8 DF28      RCALL	i2c.c:I2C_ReceiveByte
    00EA9 2EC0      MOV	R12,R16
    00EAA 2CAC      MOV	R10,R12
(0275) 	I2C_Stop();	                  //停止信号
    00EAB DEE6      RCALL	i2c.c:I2C_Stop
(0276) 	return REG_data;
    00EAC 2D0A      MOV	R16,R10
    00EAD 940C 4146 JMP	pop_xgset303C
_MPU6050_WriteI2C:
  REG_data             --> R10
  REG_Address          --> R12
  SlaveAddress         --> R14
    00EAF 940E 4116 CALL	push_xgset00FC
    00EB1 2EC2      MOV	R12,R18
    00EB2 2EE0      MOV	R14,R16
    00EB3 80AE      LDD	R10,Y+6
(0277) }
(0278) 
(0279) /************************************************
(0280)  函数名:     MPU6050_WriteI2C
(0281)  函数功能:	  向I2C设备写入一个字节数据
(0282)  形参:		  写入设备地址，写入字节数据
(0283)  返回参数:	  无
(0284) ************************************************/
(0285) void MPU6050_WriteI2C(uint8_t SlaveAddress,uint8_t REG_Address,uint8_t REG_data)
(0286) {
(0287)     I2C_Start();                   //起始信号
    00EB4 DECC      RCALL	i2c.c:I2C_Start
(0288)     I2C_SendByte(SlaveAddress);   //发送设备地址+写信号
    00EB5 2D0E      MOV	R16,R14
    00EB6 DF01      RCALL	i2c.c:I2C_SendByte
(0289) 	I2C_WaitAck();	   
    00EB7 DEF2      RCALL	i2c.c:I2C_WaitAck
(0290)     I2C_SendByte(REG_Address);    //内部寄存器地址
    00EB8 2D0C      MOV	R16,R12
    00EB9 DEFE      RCALL	i2c.c:I2C_SendByte
(0291) 	I2C_WaitAck(); 	 										  		   
    00EBA DEEF      RCALL	i2c.c:I2C_WaitAck
(0292)     I2C_SendByte(REG_data);       //内部寄存器数据
    00EBB 2D0A      MOV	R16,R10
    00EBC DEFB      RCALL	i2c.c:I2C_SendByte
(0293) 	I2C_WaitAck(); 	 										  		   
    00EBD DEEC      RCALL	i2c.c:I2C_WaitAck
(0294)     I2C_Stop();                    //发送停止信号
    00EBE DED3      RCALL	i2c.c:I2C_Stop
    00EBF 940C 40F7 JMP	pop_xgset00FC
_GetData:
  L                    --> R10
  H                    --> R12
  REG_Address          --> R20
  SlaveAddress         --> R12
    00EC1 940E 413F CALL	push_xgset303C
    00EC3 2F42      MOV	R20,R18
    00EC4 2EC0      MOV	R12,R16
(0295) }
(0296) 
(0297) /************************************************
(0298)  函数名:     GetData
(0299)  函数功能:	  获取MPU6050的加速度，角速度原始值
(0300)  形参:		  要读取的加速度，角速度的地址
(0301)  返回参数:	  读取到的加速度，角速度
(0302) ************************************************/
(0303) short GetData(uint8_t SlaveAddress,uint8_t REG_Address)
(0304) {
(0305) 	char H,L;
(0306) 	L=MPU6050_ReadI2C(SlaveAddress,REG_Address);
    00EC5 2F24      MOV	R18,R20
    00EC6 2D0C      MOV	R16,R12
    00EC7 DFD0      RCALL	_MPU6050_ReadI2C
    00EC8 2EA0      MOV	R10,R16
(0307) 	H=MPU6050_ReadI2C(SlaveAddress,REG_Address+1);
    00EC9 2F24      MOV	R18,R20
    00ECA 5F2F      SUBI	R18,0xFF
    00ECB 2D0C      MOV	R16,R12
    00ECC DFCB      RCALL	_MPU6050_ReadI2C
    00ECD 2EC0      MOV	R12,R16
(0308) 	return (L<<8)+H;   //合成数据
    00ECE 2D1A      MOV	R17,R10
    00ECF 2D0C      MOV	R16,R12
    00ED0 940C 4146 JMP	pop_xgset303C
inv_mpu.c:set_int_enable:
  tmp                  --> Y,+4
  enable               --> R10
    00ED2 92AA      ST	-Y,R10
    00ED3 2EA0      MOV	R10,R16
    00ED4 9725      SBIW	R28,5
FILE: E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
(0001) #include <stdio.h>
(0002) #include <stdlib.h>
(0003) #include <string.h>
(0004) #include <math.h>
(0005) #include "inv_mpu.h"
(0006) #include "i2c.h"
(0007)  
(0008) #define MOTION_DRIVER_TARGET_MSP430
(0009) 
(0010) #if defined MOTION_DRIVER_TARGET_MSP430
(0011) 
(0012) #define i2c_write   i2cwrite
(0013) #define i2c_read    i2cread
(0014) #define delay_ms    delay_ms
(0015) #define get_ms      get_ms
(0016) 
(0017) #define fabs        fabsf
(0018) #define min(a,b) ((a<b)?a:b)
(0019) 
(0020) #elif defined EMPL_TARGET_MSP430
(0021) #include "msp430.h"
(0022) #include "msp430_i2c.h"
(0023) #include "msp430_clock.h"
(0024) #include "msp430_interrupt.h"
(0025) #include "log.h"
(0026) #define i2c_write   msp430_i2c_write
(0027) #define i2c_read    msp430_i2c_read
(0028) #define delay_ms    msp430_delay_ms
(0029) #define get_ms      msp430_get_clock_ms
(0030) static inline int reg_int_cb(struct int_param_s *int_param)
(0031) {
(0032) 	return msp430_reg_int_cb(int_param->cb, int_param->pin, int_param->lp_exit,
(0033) 	int_param->active_low);
(0034) }
(0035) #define log_i       MPL_LOGI
(0036) #define log_e       MPL_LOGE
(0037) 
(0038) #define fabs        fabsf
(0039) #define min(a,b) ((a<b)?a:b)
(0040) #elif defined EMPL_TARGET_UC3L0
(0041) 
(0042) #define i2c_write(a, b, c, d)   twi_write(a, b, d, c)
(0043) #define i2c_read(a, b, c, d)    twi_read(a, b, d, c)
(0044) 
(0045) #define get_ms  uc3l0_get_clock_ms
(0046) static inline int reg_int_cb(struct int_param_s *int_param)
(0047) {
(0048) 	sensor_board_irq_connect(int_param->pin, int_param->cb, int_param->arg);
(0049) 	return 0;
(0050) }
(0051) #define log_i       MPL_LOGI
(0052) #define log_e       MPL_LOGE
(0053) 
(0054) #define labs        abs
(0055) #define fabs(x)     (((x)>0)?(x):-(x))
(0056) #else
(0057) #error  Gyro driver is missing the system layer implementations.
(0058) #endif
(0059) 
(0060) static int set_int_enable(unsigned char enable);
(0061) 
(0062) struct gyro_reg_s 
(0063) {
(0064) 	unsigned char who_am_i;
(0065) 	unsigned char rate_div;
(0066) 	unsigned char lpf;
(0067) 	unsigned char prod_id;
(0068) 	unsigned char user_ctrl;
(0069) 	unsigned char fifo_en;
(0070) 	unsigned char gyro_cfg;
(0071) 	unsigned char accel_cfg;
(0072) 
(0073) 	unsigned char motion_thr;
(0074) 	unsigned char motion_dur;
(0075) 	unsigned char fifo_count_h;
(0076) 	unsigned char fifo_r_w;
(0077) 	unsigned char raw_gyro;
(0078) 	unsigned char raw_accel;
(0079) 	unsigned char temp;
(0080) 	unsigned char int_enable;
(0081) 	unsigned char dmp_int_status;
(0082) 	unsigned char int_status;
(0083) 
(0084) 	unsigned char pwr_mgmt_1;
(0085) 	unsigned char pwr_mgmt_2;
(0086) 	unsigned char int_pin_cfg;
(0087) 	unsigned char mem_r_w;
(0088) 	unsigned char accel_offs;
(0089) 	unsigned char i2c_mst;
(0090) 	unsigned char bank_sel;
(0091) 	unsigned char mem_start_addr;
(0092) 	unsigned char prgm_start_h;
(0093) };
(0094) 
(0095) struct hw_s 
(0096) {
(0097) 	unsigned char addr;
(0098) 	unsigned short max_fifo;
(0099) 	unsigned char num_reg;
(0100) 	unsigned short temp_sens;
(0101) 	short temp_offset;
(0102) 	unsigned short bank_size;
(0103) };
(0104) 
(0105) 
(0106) struct motion_int_cache_s 
(0107) {
(0108) 	unsigned short gyro_fsr;
(0109) 	unsigned char accel_fsr;
(0110) 	unsigned short lpf;
(0111) 	unsigned short sample_rate;
(0112) 	unsigned char sensors_on;
(0113) 	unsigned char fifo_sensors;
(0114) 	unsigned char dmp_on;
(0115) };
(0116) 
(0117) struct chip_cfg_s 
(0118) {
(0119) 	unsigned char gyro_fsr;
(0120) 
(0121) 	unsigned char accel_fsr;
(0122)  
(0123) 	unsigned char sensors;
(0124)  
(0125) 	unsigned char lpf;
(0126) 	unsigned char clk_src;
(0127) 	
(0128) 	unsigned short sample_rate;
(0129) 
(0130) 	unsigned char fifo_enable;
(0131)  
(0132) 	unsigned char int_enable;
(0133) 
(0134) 	unsigned char bypass_mode;
(0135) 
(0136) 	unsigned char accel_half;
(0137) 
(0138) 	unsigned char lp_accel_mode;
(0139)  
(0140) 	unsigned char int_motion_only;
(0141) 	struct motion_int_cache_s cache;
(0142)  
(0143) 	unsigned char active_low_int;
(0144) 	
(0145) 	unsigned char latched_int;
(0146) 
(0147) 	unsigned char dmp_on;
(0148) 	
(0149) 	unsigned char dmp_loaded;
(0150) 
(0151) 	unsigned short dmp_sample_rate;
(0152) };
(0153) 
(0154) struct test_s 
(0155) {
(0156) 	unsigned long gyro_sens;
(0157) 	unsigned long accel_sens;
(0158) 	unsigned char reg_rate_div;
(0159) 	unsigned char reg_lpf;
(0160) 	unsigned char reg_gyro_fsr;
(0161) 	unsigned char reg_accel_fsr;
(0162) 	unsigned short wait_ms;
(0163) 	unsigned char packet_thresh;
(0164) 	float min_dps;
(0165) 	float max_dps;
(0166) 	float max_gyro_var;
(0167) 	float min_g;
(0168) 	float max_g;
(0169) 	float max_accel_var;
(0170) };
(0171) 
(0172) struct gyro_state_s 
(0173) {
(0174) 	const struct gyro_reg_s *reg;
(0175) 	const struct hw_s *hw;
(0176) 	struct chip_cfg_s chip_cfg;
(0177) 	const struct test_s *test;
(0178) };
(0179) 
(0180) enum lpf_e 
(0181) {
(0182) 	INV_FILTER_256HZ_NOLPF2 = 0,
(0183) 	INV_FILTER_188HZ,
(0184) 	INV_FILTER_98HZ,
(0185) 	INV_FILTER_42HZ,
(0186) 	INV_FILTER_20HZ,
(0187) 	INV_FILTER_10HZ,
(0188) 	INV_FILTER_5HZ,
(0189) 	INV_FILTER_2100HZ_NOLPF,
(0190) 	NUM_FILTER
(0191) };
(0192) 
(0193) enum gyro_fsr_e 
(0194) {
(0195) 	INV_FSR_250DPS = 0,
(0196) 	INV_FSR_500DPS,
(0197) 	INV_FSR_1000DPS,
(0198) 	INV_FSR_2000DPS,
(0199) 	NUM_GYRO_FSR
(0200) };
(0201) 
(0202) enum accel_fsr_e 
(0203) {
(0204) 	INV_FSR_2G = 0,
(0205) 	INV_FSR_4G,
(0206) 	INV_FSR_8G,
(0207) 	INV_FSR_16G,
(0208) 	NUM_ACCEL_FSR
(0209) };
(0210) 
(0211) enum clock_sel_e 
(0212) {
(0213) 	INV_CLK_INTERNAL = 0,
(0214) 	INV_CLK_PLL,
(0215) 	NUM_CLK
(0216) };
(0217) 
(0218) enum lp_accel_rate_e 
(0219) {
(0220) 	INV_LPA_1_25HZ,
(0221) 	INV_LPA_5HZ,
(0222) 	INV_LPA_20HZ,
(0223) 	INV_LPA_40HZ
(0224) };
(0225) 
(0226) #define BIT_I2C_MST_VDDIO   (0x80)
(0227) #define BIT_FIFO_EN         (0x40)
(0228) #define BIT_DMP_EN          (0x80)
(0229) #define BIT_FIFO_RST        (0x04)
(0230) #define BIT_DMP_RST         (0x08)
(0231) #define BIT_FIFO_OVERFLOW   (0x10)
(0232) #define BIT_DATA_RDY_EN     (0x01)
(0233) #define BIT_DMP_INT_EN      (0x02)
(0234) #define BIT_MOT_INT_EN      (0x40)
(0235) #define BITS_FSR            (0x18)
(0236) #define BITS_LPF            (0x07)
(0237) #define BITS_HPF            (0x07)
(0238) #define BITS_CLK            (0x07)
(0239) #define BIT_FIFO_SIZE_1024  (0x40)
(0240) #define BIT_FIFO_SIZE_2048  (0x80)
(0241) #define BIT_FIFO_SIZE_4096  (0xC0)
(0242) #define BIT_RESET           (0x80)
(0243) #define BIT_SLEEP           (0x40)
(0244) #define BIT_S0_DELAY_EN     (0x01)
(0245) #define BIT_S2_DELAY_EN     (0x04)
(0246) #define BITS_SLAVE_LENGTH   (0x0F)
(0247) #define BIT_SLAVE_BYTE_SW   (0x40)
(0248) #define BIT_SLAVE_GROUP     (0x10)
(0249) #define BIT_SLAVE_EN        (0x80)
(0250) #define BIT_I2C_READ        (0x80)
(0251) #define BITS_I2C_MASTER_DLY (0x1F)
(0252) #define BIT_AUX_IF_EN       (0x20)
(0253) #define BIT_ACTL            (0x80)
(0254) #define BIT_LATCH_EN        (0x20)
(0255) #define BIT_ANY_RD_CLR      (0x10)
(0256) #define BIT_BYPASS_EN       (0x02)
(0257) #define BITS_WOM_EN         (0xC0)
(0258) #define BIT_LPA_CYCLE       (0x20)
(0259) #define BIT_STBY_XA         (0x20)
(0260) #define BIT_STBY_YA         (0x10)
(0261) #define BIT_STBY_ZA         (0x08)
(0262) #define BIT_STBY_XG         (0x04)
(0263) #define BIT_STBY_YG         (0x02)
(0264) #define BIT_STBY_ZG         (0x01)
(0265) #define BIT_STBY_XYZA       (BIT_STBY_XA | BIT_STBY_YA | BIT_STBY_ZA)
(0266) #define BIT_STBY_XYZG       (BIT_STBY_XG | BIT_STBY_YG | BIT_STBY_ZG)
(0267) 
(0268) const struct hw_s hw=
(0269) {
(0270) 	0x68,	 //addr
(0271) 	1024,	 //max_fifo
(0272) 	118,	 //num_reg
(0273) 	340,	 //temp_sens
(0274) 	-521,	 //temp_offset
(0275) 	256	 //bank_size
(0276) };
(0277) const struct gyro_reg_s reg = 
(0278) {
(0279) 	0x75,  //who_am_i
(0280) 	0x19,  //rate_div
(0281) 	0x1A,  //lpf
(0282) 	0x0C,  //prod_id
(0283) 	0x6A,  //user_ctrl
(0284) 	0x23,  //fifo_en
(0285) 	0x1B,  //gyro_cfg
(0286) 	0x1C,  //accel_cfg
(0287) 	0x1F,  // motion_thr
(0288) 	0x20,  // motion_dur
(0289) 	0x72,  // fifo_count_h
(0290) 	0x74,  // fifo_r_w
(0291) 	0x43,  // raw_gyro
(0292) 	0x3B,  // raw_accel
(0293) 	0x41,  // temp
(0294) 	0x38,  // int_enable
(0295) 	0x39,  //  dmp_int_status
(0296) 	0x3A,  //  int_status
(0297) 	0x6B,  // pwr_mgmt_1
(0298) 	0x6C,  // pwr_mgmt_2
(0299) 	0x37,  // int_pin_cfg
(0300) 	0x6F,  // mem_r_w
(0301) 	0x06,  // accel_offs
(0302) 	0x24,  // i2c_mst
(0303) 	0x6D,  // bank_sel
(0304) 	0x6E,  // mem_start_addr
(0305) 	0x70   // prgm_start_h
(0306) };
(0307) 
(0308) const struct test_s test=
(0309) {
(0310) 	32768/250,		 //gyro_sens
(0311) 	32768/16,		 //	accel_sens
(0312) 	0,				 //	reg_rate_div
(0313) 	1,				//	reg_lpf
(0314) 	0,				 //	reg_gyro_fsr
(0315) 	0x18,			//	reg_accel_fsr
(0316) 	50,				//	wait_ms
(0317) 	5,				//	packet_thresh
(0318) 	10.0f,			 //	min_dps
(0319) 	105.0f,			 //	max_dps
(0320) 	0.14f,			//	max_gyro_var
(0321) 	0.3f,		   //	min_g
(0322) 	0.95f,		   //	max_g
(0323) 	0.14f		   //	max_accel_var
(0324) };
(0325) 
(0326) static struct gyro_state_s st=
(0327) {
(0328) 	&reg,
(0329) 	&hw,
(0330) 	{0},
(0331) 	&test
(0332) };
(0333) 
(0334) #define MAX_PACKET_LENGTH (12)
(0335) 
(0336) static int set_int_enable(unsigned char enable)
(0337) {
(0338) 	unsigned char tmp;
(0339) 
(0340) 	if (st.chip_cfg.dmp_on) 
    00ED5 9020 01CD LDS	R2,inv_mpu.c:st+29
    00ED7 2022      TST	R2
    00ED8 F111      BEQ	0x0EFB
(0341) 	{
(0342) 		if (enable)
    00ED9 20AA      TST	R10
    00EDA F019      BEQ	0x0EDE
(0343) 			tmp = BIT_DMP_INT_EN;
    00EDB E082      LDI	R24,2
    00EDC 838C      STD	Y+4,R24
    00EDD C002      RJMP	0x0EE0
(0344) 		else
(0345) 			tmp = 0x00;
    00EDE 2422      CLR	R2
    00EDF 822C      STD	Y+4,R2
(0346) 		if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
    00EE0 01CE      MOVW	R24,R28
    00EE1 9604      ADIW	R24,4
    00EE2 839B      STD	Y+3,R25
    00EE3 838A      STD	Y+2,R24
    00EE4 E081      LDI	R24,1
    00EE5 8388      ST	Y,R24
    00EE6 91E0 01B0 LDS	R30,inv_mpu.c:st
    00EE8 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    00EEA 8527      LDD	R18,Z+15
    00EEB 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    00EED 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    00EEF 8100      LD	R16,Z
    00EF0 940E 0E1B CALL	_i2cwrite
    00EF2 2300      TST	R16
    00EF3 F019      BEQ	0x0EF7
(0347) 			return -1;
    00EF4 EF0F      LDI	R16,0xFF
    00EF5 EF1F      LDI	R17,0xFF
    00EF6 C037      RJMP	0x0F2E
(0348) 		st.chip_cfg.int_enable = tmp;
    00EF7 802C      LDD	R2,Y+4
    00EF8 9220 01BC STS	inv_mpu.c:st+12,R2
(0349) 	} 
    00EFA C031      RJMP	0x0F2C
(0350) 	else 
(0351) 	{
(0352) 		if (!st.chip_cfg.sensors)
    00EFB 9020 01B6 LDS	R2,inv_mpu.c:st+6
    00EFD 2022      TST	R2
    00EFE F419      BNE	0x0F02
(0353) 			return -1;
    00EFF EF0F      LDI	R16,0xFF
    00F00 EF1F      LDI	R17,0xFF
    00F01 C02C      RJMP	0x0F2E
(0354) 		if (enable && st.chip_cfg.int_enable)
    00F02 20AA      TST	R10
    00F03 F039      BEQ	0x0F0B
    00F04 9020 01BC LDS	R2,inv_mpu.c:st+12
    00F06 2022      TST	R2
    00F07 F019      BEQ	0x0F0B
(0355) 			return 0;
    00F08 2700      CLR	R16
    00F09 2711      CLR	R17
    00F0A C023      RJMP	0x0F2E
(0356) 		if (enable)
    00F0B 20AA      TST	R10
    00F0C F019      BEQ	0x0F10
(0357) 			tmp = BIT_DATA_RDY_EN;
    00F0D E081      LDI	R24,1
    00F0E 838C      STD	Y+4,R24
    00F0F C002      RJMP	0x0F12
(0358) 		else
(0359) 			tmp = 0x00;
    00F10 2422      CLR	R2
    00F11 822C      STD	Y+4,R2
(0360) 		if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
    00F12 01CE      MOVW	R24,R28
    00F13 9604      ADIW	R24,4
    00F14 839B      STD	Y+3,R25
    00F15 838A      STD	Y+2,R24
    00F16 E081      LDI	R24,1
    00F17 8388      ST	Y,R24
    00F18 91E0 01B0 LDS	R30,inv_mpu.c:st
    00F1A 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    00F1C 8527      LDD	R18,Z+15
    00F1D 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    00F1F 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    00F21 8100      LD	R16,Z
    00F22 940E 0E1B CALL	_i2cwrite
    00F24 2300      TST	R16
    00F25 F019      BEQ	0x0F29
(0361) 			return -1;
    00F26 EF0F      LDI	R16,0xFF
    00F27 EF1F      LDI	R17,0xFF
    00F28 C005      RJMP	0x0F2E
(0362) 		st.chip_cfg.int_enable = tmp;
    00F29 802C      LDD	R2,Y+4
    00F2A 9220 01BC STS	inv_mpu.c:st+12,R2
(0363) 	}
(0364) 	return 0;
    00F2C 2700      CLR	R16
    00F2D 2711      CLR	R17
    00F2E 9625      ADIW	R28,5
    00F2F 90A9      LD	R10,Y+
    00F30 9508      RET
_mpu_reg_dump:
  data                 --> Y,+4
  ii                   --> R10
    00F31 92AA      ST	-Y,R10
    00F32 9725      SBIW	R28,5
(0365) }
(0366) 
(0367) int mpu_reg_dump(void)
(0368) {
(0369) 	unsigned char ii;
(0370) 	unsigned char data;
(0371) 
(0372) 	for (ii = 0; ii < st.hw->num_reg; ii++) 
    00F33 24AA      CLR	R10
    00F34 C020      RJMP	0x0F55
(0373)   {
(0374) 		if (ii == st.reg->fifo_r_w || ii == st.reg->mem_r_w)
    00F35 9040 01B0 LDS	R4,inv_mpu.c:st
    00F37 9050 01B1 LDS	R5,inv_mpu.c:st+1
    00F39 01F2      MOVW	R30,R4
    00F3A 8423      LDD	R2,Z+11
    00F3B 14A2      CP	R10,R2
    00F3C F019      BEQ	0x0F40
    00F3D 8825      LDD	R2,Z+21
    00F3E 14A2      CP	R10,R2
    00F3F F409      BNE	0x0F41
(0375) 			continue;
    00F40 C013      RJMP	0x0F54
(0376) 		if (i2c_read(st.hw->addr, ii, 1, &data))
    00F41 01CE      MOVW	R24,R28
    00F42 9604      ADIW	R24,4
    00F43 839B      STD	Y+3,R25
    00F44 838A      STD	Y+2,R24
    00F45 E081      LDI	R24,1
    00F46 8388      ST	Y,R24
    00F47 2D2A      MOV	R18,R10
    00F48 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    00F4A 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    00F4C 8100      LD	R16,Z
    00F4D 940E 0E31 CALL	_i2cread
    00F4F 2300      TST	R16
    00F50 F019      BEQ	0x0F54
(0377) 			return -1;
    00F51 EF0F      LDI	R16,0xFF
    00F52 EF1F      LDI	R17,0xFF
    00F53 C00A      RJMP	0x0F5E
    00F54 94A3      INC	R10
    00F55 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    00F57 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    00F59 8023      LDD	R2,Z+3
    00F5A 14A2      CP	R10,R2
    00F5B F2C8      BCS	0x0F35
(0378) 	}
(0379) 	return 0;
    00F5C 2700      CLR	R16
    00F5D 2711      CLR	R17
    00F5E 9625      ADIW	R28,5
    00F5F 90A9      LD	R10,Y+
    00F60 9508      RET
_mpu_read_reg:
  data                 --> R12
  reg                  --> R10
    00F61 940E 4118 CALL	push_xgset003C
    00F63 0169      MOVW	R12,R18
    00F64 2EA0      MOV	R10,R16
    00F65 9724      SBIW	R28,4
(0380) }
(0381) 
(0382) 
(0383) int mpu_read_reg(unsigned char reg, unsigned char *data)
(0384) {
(0385) 	if (reg == st.reg->fifo_r_w || reg == st.reg->mem_r_w)
    00F66 9040 01B0 LDS	R4,inv_mpu.c:st
    00F68 9050 01B1 LDS	R5,inv_mpu.c:st+1
    00F6A 01F2      MOVW	R30,R4
    00F6B 8423      LDD	R2,Z+11
    00F6C 14A2      CP	R10,R2
    00F6D F019      BEQ	0x0F71
    00F6E 8825      LDD	R2,Z+21
    00F6F 14A2      CP	R10,R2
    00F70 F419      BNE	0x0F74
(0386) 		return -1;
    00F71 EF0F      LDI	R16,0xFF
    00F72 EF1F      LDI	R17,0xFF
    00F73 C017      RJMP	0x0F8B
(0387) 	if (reg >= st.hw->num_reg)
    00F74 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    00F76 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    00F78 8023      LDD	R2,Z+3
    00F79 14A2      CP	R10,R2
    00F7A F018      BCS	0x0F7E
(0388) 		return -1;
    00F7B EF0F      LDI	R16,0xFF
    00F7C EF1F      LDI	R17,0xFF
    00F7D C00D      RJMP	0x0F8B
(0389) 	return i2c_read(st.hw->addr, reg, 1, data);
    00F7E 82DB      STD	Y+3,R13
    00F7F 82CA      STD	Y+2,R12
    00F80 E081      LDI	R24,1
    00F81 8388      ST	Y,R24
    00F82 2D2A      MOV	R18,R10
    00F83 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    00F85 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    00F87 8100      LD	R16,Z
    00F88 940E 0E31 CALL	_i2cread
    00F8A 2711      CLR	R17
    00F8B 9624      ADIW	R28,4
    00F8C 940C 40F2 JMP	pop_xgset003C
_mpu_init:
  rev                  --> R20
  data                 --> Y,+4
    00F8E 940E 411D CALL	push_xgset300C
    00F90 972A      SBIW	R28,0xA
(0390) }
(0391) 
(0392) int mpu_init(void)
(0393) {
(0394) 	unsigned char data[6], rev;
(0395) 
(0396) 	data[0] = 0x80;
    00F91 E880      LDI	R24,0x80
    00F92 838C      STD	Y+4,R24
(0397) 	if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &(data[0])))
    00F93 01CE      MOVW	R24,R28
    00F94 9604      ADIW	R24,4
    00F95 839B      STD	Y+3,R25
    00F96 838A      STD	Y+2,R24
    00F97 E081      LDI	R24,1
    00F98 8388      ST	Y,R24
    00F99 91E0 01B0 LDS	R30,inv_mpu.c:st
    00F9B 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    00F9D 8922      LDD	R18,Z+18
    00F9E 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    00FA0 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    00FA2 8100      LD	R16,Z
    00FA3 940E 0E1B CALL	_i2cwrite
    00FA5 2300      TST	R16
    00FA6 F019      BEQ	0x0FAA
(0398) 		return -1;
    00FA7 EF0F      LDI	R16,0xFF
    00FA8 EF1F      LDI	R17,0xFF
    00FA9 C0DB      RJMP	0x1085
(0399) 	delay_ms(100);
    00FAA E604      LDI	R16,0x64
    00FAB E010      LDI	R17,0
    00FAC 940E 0D6E CALL	_delay_ms
(0400) 
(0401) 	data[0] = 0x00;
    00FAE 2422      CLR	R2
    00FAF 822C      STD	Y+4,R2
(0402) 	if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &(data[0])))
    00FB0 01CE      MOVW	R24,R28
    00FB1 9604      ADIW	R24,4
    00FB2 839B      STD	Y+3,R25
    00FB3 838A      STD	Y+2,R24
    00FB4 E081      LDI	R24,1
    00FB5 8388      ST	Y,R24
    00FB6 91E0 01B0 LDS	R30,inv_mpu.c:st
    00FB8 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    00FBA 8922      LDD	R18,Z+18
    00FBB 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    00FBD 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    00FBF 8100      LD	R16,Z
    00FC0 940E 0E1B CALL	_i2cwrite
    00FC2 2300      TST	R16
    00FC3 F019      BEQ	0x0FC7
(0403) 		return -1;
    00FC4 EF0F      LDI	R16,0xFF
    00FC5 EF1F      LDI	R17,0xFF
    00FC6 C0BE      RJMP	0x1085
(0404) 
(0405) 	if (i2c_read(st.hw->addr, st.reg->accel_offs, 6, data))
    00FC7 01CE      MOVW	R24,R28
    00FC8 9604      ADIW	R24,4
    00FC9 839B      STD	Y+3,R25
    00FCA 838A      STD	Y+2,R24
    00FCB E086      LDI	R24,6
    00FCC 8388      ST	Y,R24
    00FCD 91E0 01B0 LDS	R30,inv_mpu.c:st
    00FCF 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    00FD1 8926      LDD	R18,Z+22
    00FD2 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    00FD4 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    00FD6 8100      LD	R16,Z
    00FD7 940E 0E31 CALL	_i2cread
    00FD9 2EA0      MOV	R10,R16
    00FDA 2300      TST	R16
    00FDB F019      BEQ	0x0FDF
(0406) 		return -1;
    00FDC EF0F      LDI	R16,0xFF
    00FDD EF1F      LDI	R17,0xFF
    00FDE C0A6      RJMP	0x1085
(0407) 	rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
    00FDF 818F      LDD	R24,Y+7
    00FE0 7081      ANDI	R24,1
    00FE1 0F88      LSL	R24
    00FE2 8549      LDD	R20,Y+9
    00FE3 7041      ANDI	R20,1
    00FE4 0F44      LSL	R20
    00FE5 0F44      LSL	R20
    00FE6 2B48      OR	R20,R24
    00FE7 818D      LDD	R24,Y+5
    00FE8 7081      ANDI	R24,1
    00FE9 2B48      OR	R20,R24
(0408) 		(data[1] & 0x01);
(0409) 
(0410) 	if (rev) 
    00FEA F079      BEQ	0x0FFA
(0411) 	{
(0412) 		if (rev == 1)
    00FEB 3041      CPI	R20,1
    00FEC F421      BNE	0x0FF1
(0413) 				st.chip_cfg.accel_half = 1;
    00FED E081      LDI	R24,1
    00FEE 9380 01BE STS	inv_mpu.c:st+14,R24
    00FF0 C030      RJMP	0x1021
(0414) 			else if (rev == 2)
    00FF1 3042      CPI	R20,2
    00FF2 F421      BNE	0x0FF7
(0415) 				st.chip_cfg.accel_half = 0;
    00FF3 2422      CLR	R2
    00FF4 9220 01BE STS	inv_mpu.c:st+14,R2
    00FF6 C02A      RJMP	0x1021
(0416) 			else 
(0417) 			{
(0418) 				return -1;
    00FF7 EF0F      LDI	R16,0xFF
    00FF8 EF1F      LDI	R17,0xFF
    00FF9 C08B      RJMP	0x1085
(0419) 			}
(0420) 	} 
(0421) 	
(0422) 	else 
(0423) 	{
(0424) 		if (i2c_read(st.hw->addr, st.reg->prod_id, 1, &(data[0])))
    00FFA 01CE      MOVW	R24,R28
    00FFB 9604      ADIW	R24,4
    00FFC 839B      STD	Y+3,R25
    00FFD 838A      STD	Y+2,R24
    00FFE E081      LDI	R24,1
    00FFF 8388      ST	Y,R24
    01000 91E0 01B0 LDS	R30,inv_mpu.c:st
    01002 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    01004 8123      LDD	R18,Z+3
    01005 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    01007 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    01009 8100      LD	R16,Z
    0100A 940E 0E31 CALL	_i2cread
    0100C 2EA0      MOV	R10,R16
    0100D 2300      TST	R16
    0100E F019      BEQ	0x1012
(0425) 			return -1;
    0100F EF0F      LDI	R16,0xFF
    01010 EF1F      LDI	R17,0xFF
    01011 C073      RJMP	0x1085
(0426) 		rev = data[0] & 0x0F;
    01012 814C      LDD	R20,Y+4
    01013 704F      ANDI	R20,0xF
(0427) 		if (!rev) 
    01014 F419      BNE	0x1018
(0428) 		{
(0429) 			return -1;
    01015 EF0F      LDI	R16,0xFF
    01016 EF1F      LDI	R17,0xFF
    01017 C06D      RJMP	0x1085
(0430) 		} 
(0431) 		else if (rev == 4) 
    01018 3044      CPI	R20,4
    01019 F421      BNE	0x101E
(0432) 		{
(0433) 			st.chip_cfg.accel_half = 1;
    0101A E081      LDI	R24,1
    0101B 9380 01BE STS	inv_mpu.c:st+14,R24
(0434) 		} 
    0101D C003      RJMP	0x1021
(0435) 		else
(0436) 			st.chip_cfg.accel_half = 0;
    0101E 2422      CLR	R2
    0101F 9220 01BE STS	inv_mpu.c:st+14,R2
(0437) 	}
(0438) 
(0439) 	st.chip_cfg.sensors = 0xFF;
    01021 EF8F      LDI	R24,0xFF
    01022 9380 01B6 STS	inv_mpu.c:st+6,R24
(0440) 	st.chip_cfg.gyro_fsr = 0xFF;
    01024 9380 01B4 STS	inv_mpu.c:st+4,R24
(0441) 	st.chip_cfg.accel_fsr = 0xFF;
    01026 9380 01B5 STS	inv_mpu.c:st+5,R24
(0442) 	st.chip_cfg.lpf = 0xFF;
    01028 9380 01B7 STS	inv_mpu.c:st+7,R24
(0443) 	st.chip_cfg.sample_rate = 0xFFFF;
    0102A EF9F      LDI	R25,0xFF
    0102B 9390 01BA STS	inv_mpu.c:st+10,R25
    0102D 9380 01B9 STS	inv_mpu.c:st+9,R24
(0444) 	st.chip_cfg.fifo_enable = 0xFF;
    0102F 9380 01BB STS	inv_mpu.c:st+11,R24
(0445) 	st.chip_cfg.bypass_mode = 0xFF;
    01031 9380 01BD STS	inv_mpu.c:st+13,R24
(0446) 	st.chip_cfg.clk_src = INV_CLK_PLL;
    01033 E081      LDI	R24,1
    01034 9380 01B8 STS	inv_mpu.c:st+8,R24
(0447) 	st.chip_cfg.active_low_int = 1;
    01036 9380 01CB STS	inv_mpu.c:st+27,R24
(0448) 	st.chip_cfg.latched_int = 0;
    01038 2422      CLR	R2
    01039 9220 01CC STS	inv_mpu.c:st+28,R2
(0449) 	st.chip_cfg.int_motion_only = 0;
    0103B 9220 01C0 STS	inv_mpu.c:st+16,R2
(0450) 	st.chip_cfg.lp_accel_mode = 0;
    0103D 9220 01BF STS	inv_mpu.c:st+15,R2
(0451) 	memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
    0103F E08A      LDI	R24,0xA
    01040 E090      LDI	R25,0
    01041 8399      STD	Y+1,R25
    01042 8388      ST	Y,R24
    01043 2722      CLR	R18
    01044 2733      CLR	R19
    01045 EC01      LDI	R16,0xC1
    01046 E011      LDI	R17,1
    01047 940E 3FB6 CALL	_memset
(0452) 	st.chip_cfg.dmp_on = 0;
    01049 2422      CLR	R2
    0104A 9220 01CD STS	inv_mpu.c:st+29,R2
(0453) 	st.chip_cfg.dmp_loaded = 0;
    0104C 9220 01CE STS	inv_mpu.c:st+30,R2
(0454) 	st.chip_cfg.dmp_sample_rate = 0;
    0104E 2433      CLR	R3
    0104F 9230 01D0 STS	inv_mpu.c:st+32,R3
    01051 9220 01CF STS	inv_mpu.c:st+31,R2
(0455) 
(0456) 	if (mpu_set_gyro_fsr(2000))
    01053 ED00      LDI	R16,0xD0
    01054 E017      LDI	R17,7
    01055 D468      RCALL	_mpu_set_gyro_fsr
    01056 0158      MOVW	R10,R16
    01057 3000      CPI	R16,0
    01058 0701      CPC	R16,R17
    01059 F019      BEQ	0x105D
(0457) 		return -1;
    0105A EF0F      LDI	R16,0xFF
    0105B EF1F      LDI	R17,0xFF
    0105C C028      RJMP	0x1085
(0458) 	if (mpu_set_accel_fsr(2))
    0105D E002      LDI	R16,2
    0105E D4F7      RCALL	_mpu_set_accel_fsr
    0105F 0158      MOVW	R10,R16
    01060 3000      CPI	R16,0
    01061 0701      CPC	R16,R17
    01062 F019      BEQ	0x1066
(0459) 		return -1;
    01063 EF0F      LDI	R16,0xFF
    01064 EF1F      LDI	R17,0xFF
    01065 C01F      RJMP	0x1085
(0460) 	if (mpu_set_lpf(42))
    01066 E20A      LDI	R16,0x2A
    01067 E010      LDI	R17,0
    01068 D5A4      RCALL	_mpu_set_lpf
    01069 0158      MOVW	R10,R16
    0106A 3000      CPI	R16,0
    0106B 0701      CPC	R16,R17
    0106C F019      BEQ	0x1070
(0461) 		return -1;
    0106D EF0F      LDI	R16,0xFF
    0106E EF1F      LDI	R17,0xFF
    0106F C015      RJMP	0x1085
(0462) 	if (mpu_set_sample_rate(50))
    01070 E302      LDI	R16,0x32
    01071 E010      LDI	R17,0
    01072 D603      RCALL	_mpu_set_sample_rate
    01073 0158      MOVW	R10,R16
    01074 3000      CPI	R16,0
    01075 0701      CPC	R16,R17
    01076 F019      BEQ	0x107A
(0463) 		return -1;
    01077 EF0F      LDI	R16,0xFF
    01078 EF1F      LDI	R17,0xFF
    01079 C00B      RJMP	0x1085
(0464) 	if (mpu_configure_fifo(0))
    0107A 2700      CLR	R16
    0107B D6ED      RCALL	_mpu_configure_fifo
    0107C 0158      MOVW	R10,R16
    0107D 3000      CPI	R16,0
    0107E 0701      CPC	R16,R17
    0107F F019      BEQ	0x1083
(0465) 		return -1;
    01080 EF0F      LDI	R16,0xFF
    01081 EF1F      LDI	R17,0xFF
    01082 C002      RJMP	0x1085
(0466) 	return 0;
    01083 2700      CLR	R16
    01084 2711      CLR	R17
    01085 962A      ADIW	R28,0xA
    01086 940C 4122 JMP	pop_xgset300C
_mpu_lp_accel_mode:
  tmp                  --> Y,+4
  rate                 --> R20
    01088 934A      ST	-Y,R20
    01089 2F40      MOV	R20,R16
    0108A 9726      SBIW	R28,6
(0467) }
(0468) 
(0469) int mpu_lp_accel_mode(unsigned char rate)
(0470) {
(0471) 	unsigned char tmp[2];
(0472) 
(0473) 	if (rate > 40)
    0108B E288      LDI	R24,0x28
    0108C 1784      CP	R24,R20
    0108D F418      BCC	0x1091
(0474) 		return -1;
    0108E EF0F      LDI	R16,0xFF
    0108F EF1F      LDI	R17,0xFF
    01090 C077      RJMP	0x1108
(0475) 
(0476) 	if (!rate) 
    01091 2344      TST	R20
    01092 F521      BNE	0x10B7
(0477) 	{
(0478) 		mpu_set_int_latched(0);
    01093 2700      CLR	R16
    01094 940E 1A41 CALL	_mpu_set_int_latched
(0479) 		tmp[0] = 0;
    01096 2422      CLR	R2
    01097 822C      STD	Y+4,R2
(0480) 		tmp[1] = BIT_STBY_XYZG;
    01098 E087      LDI	R24,7
    01099 838D      STD	Y+5,R24
(0481) 		if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
    0109A 01CE      MOVW	R24,R28
    0109B 9604      ADIW	R24,4
    0109C 839B      STD	Y+3,R25
    0109D 838A      STD	Y+2,R24
    0109E E082      LDI	R24,2
    0109F 8388      ST	Y,R24
    010A0 91E0 01B0 LDS	R30,inv_mpu.c:st
    010A2 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    010A4 8922      LDD	R18,Z+18
    010A5 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    010A7 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    010A9 8100      LD	R16,Z
    010AA 940E 0E1B CALL	_i2cwrite
    010AC 2300      TST	R16
    010AD F019      BEQ	0x10B1
(0482) 				return -1;
    010AE EF0F      LDI	R16,0xFF
    010AF EF1F      LDI	R17,0xFF
    010B0 C057      RJMP	0x1108
(0483) 		st.chip_cfg.lp_accel_mode = 0;
    010B1 2422      CLR	R2
    010B2 9220 01BF STS	inv_mpu.c:st+15,R2
(0484) 		return 0;
    010B4 2700      CLR	R16
    010B5 2711      CLR	R17
    010B6 C051      RJMP	0x1108
(0485) 	}
(0486) 	
(0487) 	mpu_set_int_latched(1);
    010B7 E001      LDI	R16,1
    010B8 940E 1A41 CALL	_mpu_set_int_latched
(0488) 	tmp[0] = BIT_LPA_CYCLE;
    010BA E280      LDI	R24,0x20
    010BB 838C      STD	Y+4,R24
(0489) 	
(0490) 	if (rate == 1) 
    010BC 3041      CPI	R20,1
    010BD F431      BNE	0x10C4
(0491) 	{
(0492) 		tmp[1] = INV_LPA_1_25HZ;
    010BE 2422      CLR	R2
    010BF 822D      STD	Y+5,R2
(0493) 		mpu_set_lpf(5);
    010C0 E005      LDI	R16,5
    010C1 E010      LDI	R17,0
    010C2 D54A      RCALL	_mpu_set_lpf
(0494) 	} 	
    010C3 C017      RJMP	0x10DB
(0495) 	else if (rate <= 5) 
    010C4 E085      LDI	R24,5
    010C5 1784      CP	R24,R20
    010C6 F030      BCS	0x10CD
(0496) 	{
(0497) 		tmp[1] = INV_LPA_5HZ;
    010C7 E081      LDI	R24,1
    010C8 838D      STD	Y+5,R24
(0498) 		mpu_set_lpf(5);
    010C9 E005      LDI	R16,5
    010CA E010      LDI	R17,0
    010CB D541      RCALL	_mpu_set_lpf
(0499) 	} 	
    010CC C00E      RJMP	0x10DB
(0500) 	else if (rate <= 20) 
    010CD E184      LDI	R24,0x14
    010CE 1784      CP	R24,R20
    010CF F030      BCS	0x10D6
(0501) 	{
(0502) 		tmp[1] = INV_LPA_20HZ;
    010D0 E082      LDI	R24,2
    010D1 838D      STD	Y+5,R24
(0503) 		mpu_set_lpf(10);
    010D2 E00A      LDI	R16,0xA
    010D3 E010      LDI	R17,0
    010D4 D538      RCALL	_mpu_set_lpf
(0504) 	} 	
    010D5 C005      RJMP	0x10DB
(0505) 	else 
(0506) 	{
(0507) 		tmp[1] = INV_LPA_40HZ;
    010D6 E083      LDI	R24,3
    010D7 838D      STD	Y+5,R24
(0508) 		mpu_set_lpf(20);
    010D8 E104      LDI	R16,0x14
    010D9 E010      LDI	R17,0
    010DA D532      RCALL	_mpu_set_lpf
(0509) 	}
(0510) 	
(0511) 	tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    010DB 818D      LDD	R24,Y+5
    010DC 0F88      LSL	R24
    010DD 0F88      LSL	R24
    010DE 0F88      LSL	R24
    010DF 0F88      LSL	R24
    010E0 0F88      LSL	R24
    010E1 0F88      LSL	R24
    010E2 6087      ORI	R24,7
    010E3 838D      STD	Y+5,R24
(0512) 	if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
    010E4 01CE      MOVW	R24,R28
    010E5 9604      ADIW	R24,4
    010E6 839B      STD	Y+3,R25
    010E7 838A      STD	Y+2,R24
    010E8 E082      LDI	R24,2
    010E9 8388      ST	Y,R24
    010EA 91E0 01B0 LDS	R30,inv_mpu.c:st
    010EC 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    010EE 8922      LDD	R18,Z+18
    010EF 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    010F1 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    010F3 8100      LD	R16,Z
    010F4 940E 0E1B CALL	_i2cwrite
    010F6 2300      TST	R16
    010F7 F019      BEQ	0x10FB
(0513) 		return -1;
    010F8 EF0F      LDI	R16,0xFF
    010F9 EF1F      LDI	R17,0xFF
    010FA C00D      RJMP	0x1108
(0514) 	st.chip_cfg.sensors = INV_XYZ_ACCEL;
    010FB E088      LDI	R24,0x8
    010FC 9380 01B6 STS	inv_mpu.c:st+6,R24
(0515) 	st.chip_cfg.clk_src = 0;
    010FE 2422      CLR	R2
    010FF 9220 01B8 STS	inv_mpu.c:st+8,R2
(0516) 	st.chip_cfg.lp_accel_mode = 1;
    01101 E081      LDI	R24,1
    01102 9380 01BF STS	inv_mpu.c:st+15,R24
(0517) 	mpu_configure_fifo(0);
    01104 2700      CLR	R16
    01105 D663      RCALL	_mpu_configure_fifo
(0518) 
(0519) 	return 0;
    01106 2700      CLR	R16
    01107 2711      CLR	R17
    01108 9626      ADIW	R28,6
    01109 9149      LD	R20,Y+
    0110A 9508      RET
_mpu_get_gyro_reg:
  tmp                  --> Y,+4
  timestamp            --> R10
  data                 --> R20
    0110B 940E 411D CALL	push_xgset300C
    0110D 0159      MOVW	R10,R18
    0110E 01A8      MOVW	R20,R16
    0110F 972A      SBIW	R28,0xA
(0520) }
(0521) 
(0522) int mpu_get_gyro_reg(short *data, unsigned long *timestamp)
(0523) {
(0524) 	unsigned char tmp[6];
(0525) 
(0526) 	if (!(st.chip_cfg.sensors & INV_XYZ_GYRO))
    01110 9180 01B6 LDS	R24,inv_mpu.c:st+6
    01112 7780      ANDI	R24,0x70
    01113 F419      BNE	0x1117
(0527) 		return -1;
    01114 EF0F      LDI	R16,0xFF
    01115 EF1F      LDI	R17,0xFF
    01116 C02D      RJMP	0x1144
(0528) 
(0529) 	if (i2c_read(st.hw->addr, st.reg->raw_gyro, 6, tmp))
    01117 01CE      MOVW	R24,R28
    01118 9604      ADIW	R24,4
    01119 839B      STD	Y+3,R25
    0111A 838A      STD	Y+2,R24
    0111B E086      LDI	R24,6
    0111C 8388      ST	Y,R24
    0111D 91E0 01B0 LDS	R30,inv_mpu.c:st
    0111F 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    01121 8524      LDD	R18,Z+12
    01122 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    01124 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    01126 8100      LD	R16,Z
    01127 940E 0E31 CALL	_i2cread
    01129 2300      TST	R16
    0112A F019      BEQ	0x112E
(0530) 		return -1;
    0112B EF0F      LDI	R16,0xFF
    0112C EF1F      LDI	R17,0xFF
    0112D C016      RJMP	0x1144
(0531) 	data[0] = (tmp[0] << 8) | tmp[1];
    0112E 802D      LDD	R2,Y+5
    0112F 803C      LDD	R3,Y+4
    01130 01FA      MOVW	R30,R20
    01131 8231      STD	Z+1,R3
    01132 8220      ST	Z,R2
(0532) 	data[1] = (tmp[2] << 8) | tmp[3];
    01133 802F      LDD	R2,Y+7
    01134 803E      LDD	R3,Y+6
    01135 8233      STD	Z+3,R3
    01136 8222      STD	Z+2,R2
(0533) 	data[2] = (tmp[4] << 8) | tmp[5];
    01137 8429      LDD	R2,Y+9
    01138 8438      LDD	R3,Y+8
    01139 8235      STD	Z+5,R3
    0113A 8224      STD	Z+4,R2
(0534) 	if (timestamp)
    0113B 20AA      TST	R10
    0113C F411      BNE	0x113F
    0113D 20BB      TST	R11
    0113E F019      BEQ	0x1142
(0535) 		get_ms(timestamp);
    0113F 0185      MOVW	R16,R10
    01140 940E 252B CALL	_get_ms
(0536) 	return 0;
    01142 2700      CLR	R16
    01143 2711      CLR	R17
    01144 962A      ADIW	R28,0xA
    01145 940C 4122 JMP	pop_xgset300C
_mpu_get_accel_reg:
  tmp                  --> Y,+4
  timestamp            --> R10
  data                 --> R20
    01147 940E 411D CALL	push_xgset300C
    01149 0159      MOVW	R10,R18
    0114A 01A8      MOVW	R20,R16
    0114B 972A      SBIW	R28,0xA
(0537) }
(0538) 
(0539) int mpu_get_accel_reg(short *data, unsigned long *timestamp)
(0540) {
(0541) 	unsigned char tmp[6];
(0542) 
(0543) 	if (!(st.chip_cfg.sensors & INV_XYZ_ACCEL))
    0114C 9020 01B6 LDS	R2,inv_mpu.c:st+6
    0114E FC23      SBRC	R2,3
    0114F C003      RJMP	0x1153
(0544) 		return -1;
    01150 EF0F      LDI	R16,0xFF
    01151 EF1F      LDI	R17,0xFF
    01152 C02D      RJMP	0x1180
(0545) 
(0546) 	if (i2c_read(st.hw->addr, st.reg->raw_accel, 6, tmp))
    01153 01CE      MOVW	R24,R28
    01154 9604      ADIW	R24,4
    01155 839B      STD	Y+3,R25
    01156 838A      STD	Y+2,R24
    01157 E086      LDI	R24,6
    01158 8388      ST	Y,R24
    01159 91E0 01B0 LDS	R30,inv_mpu.c:st
    0115B 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    0115D 8525      LDD	R18,Z+13
    0115E 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    01160 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    01162 8100      LD	R16,Z
    01163 940E 0E31 CALL	_i2cread
    01165 2300      TST	R16
    01166 F019      BEQ	0x116A
(0547) 		return -1;
    01167 EF0F      LDI	R16,0xFF
    01168 EF1F      LDI	R17,0xFF
    01169 C016      RJMP	0x1180
(0548) 	data[0] = (tmp[0] << 8) | tmp[1];
    0116A 802D      LDD	R2,Y+5
    0116B 803C      LDD	R3,Y+4
    0116C 01FA      MOVW	R30,R20
    0116D 8231      STD	Z+1,R3
    0116E 8220      ST	Z,R2
(0549) 	data[1] = (tmp[2] << 8) | tmp[3];
    0116F 802F      LDD	R2,Y+7
    01170 803E      LDD	R3,Y+6
    01171 8233      STD	Z+3,R3
    01172 8222      STD	Z+2,R2
(0550) 	data[2] = (tmp[4] << 8) | tmp[5];
    01173 8429      LDD	R2,Y+9
    01174 8438      LDD	R3,Y+8
    01175 8235      STD	Z+5,R3
    01176 8224      STD	Z+4,R2
(0551) 	if (timestamp)
    01177 20AA      TST	R10
    01178 F411      BNE	0x117B
    01179 20BB      TST	R11
    0117A F019      BEQ	0x117E
(0552) 		get_ms(timestamp);
    0117B 0185      MOVW	R16,R10
    0117C 940E 252B CALL	_get_ms
(0553) 	return 0;
    0117E 2700      CLR	R16
    0117F 2711      CLR	R17
    01180 962A      ADIW	R28,0xA
    01181 940C 4122 JMP	pop_xgset300C
_mpu_get_temperature:
  raw                  --> R12
  tmp                  --> Y,+4
  timestamp            --> R14
  data                 --> R10
    01183 940E 4116 CALL	push_xgset00FC
    01185 0179      MOVW	R14,R18
    01186 0158      MOVW	R10,R16
    01187 9726      SBIW	R28,6
(0554) }
(0555) 
(0556) int mpu_get_temperature(long *data, unsigned long *timestamp)
(0557) {
(0558) 	unsigned char tmp[2];
(0559) 	short raw;
(0560) 
(0561) 	if (!(st.chip_cfg.sensors))
    01188 9020 01B6 LDS	R2,inv_mpu.c:st+6
    0118A 2022      TST	R2
    0118B F419      BNE	0x118F
(0562) 		return -1;
    0118C EF0F      LDI	R16,0xFF
    0118D EF1F      LDI	R17,0xFF
    0118E C06A      RJMP	0x11F9
(0563) 
(0564) 	if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
    0118F 01CE      MOVW	R24,R28
    01190 9604      ADIW	R24,4
    01191 839B      STD	Y+3,R25
    01192 838A      STD	Y+2,R24
    01193 E082      LDI	R24,2
    01194 8388      ST	Y,R24
    01195 91E0 01B0 LDS	R30,inv_mpu.c:st
    01197 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    01199 8526      LDD	R18,Z+14
    0119A 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    0119C 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    0119E 8100      LD	R16,Z
    0119F 940E 0E31 CALL	_i2cread
    011A1 2300      TST	R16
    011A2 F019      BEQ	0x11A6
(0565) 		return -1;
    011A3 EF0F      LDI	R16,0xFF
    011A4 EF1F      LDI	R17,0xFF
    011A5 C053      RJMP	0x11F9
(0566) 	raw = (tmp[0] << 8) | tmp[1];
    011A6 802D      LDD	R2,Y+5
    011A7 803C      LDD	R3,Y+4
    011A8 2CD3      MOV	R13,R3
    011A9 2CC2      MOV	R12,R2
(0567) 	if (timestamp)
    011AA 20EE      TST	R14
    011AB F411      BNE	0x11AE
    011AC 20FF      TST	R15
    011AD F019      BEQ	0x11B1
(0568) 		get_ms(timestamp);
    011AE 0187      MOVW	R16,R14
    011AF 940E 252B CALL	_get_ms
(0569) 
(0570) 	data[0] = (long)((35 + ((raw - (float)st.hw->temp_offset) / st.hw->temp_sens)) * 65536L);
    011B1 EB0E      LDI	R16,0xBE
    011B2 E010      LDI	R17,0
    011B3 940E 409A CALL	elpm32
    011B5 0118      MOVW	R2,R16
    011B6 0129      MOVW	R4,R18
    011B7 0186      MOVW	R16,R12
    011B8 940E 42C4 CALL	int2fp
    011BA 0138      MOVW	R6,R16
    011BB 0149      MOVW	R8,R18
    011BC 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    011BE 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    011C0 8106      LDD	R16,Z+6
    011C1 8117      LDD	R17,Z+7
    011C2 940E 42C4 CALL	int2fp
    011C4 933A      ST	-Y,R19
    011C5 932A      ST	-Y,R18
    011C6 931A      ST	-Y,R17
    011C7 930A      ST	-Y,R16
    011C8 0183      MOVW	R16,R6
    011C9 0194      MOVW	R18,R8
    011CA 940E 4278 CALL	fpsub2
    011CC 0138      MOVW	R6,R16
    011CD 0149      MOVW	R8,R18
    011CE 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    011D0 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    011D2 8104      LDD	R16,Z+4
    011D3 8115      LDD	R17,Z+5
    011D4 940E 42C2 CALL	uint2fp
    011D6 933A      ST	-Y,R19
    011D7 932A      ST	-Y,R18
    011D8 931A      ST	-Y,R17
    011D9 930A      ST	-Y,R16
    011DA 0183      MOVW	R16,R6
    011DB 0194      MOVW	R18,R8
    011DC 940E 42EF CALL	fpdiv2
    011DE 0138      MOVW	R6,R16
    011DF 0149      MOVW	R8,R18
    011E0 EB0A      LDI	R16,0xBA
    011E1 E010      LDI	R17,0
    011E2 940E 409A CALL	elpm32
    011E4 933A      ST	-Y,R19
    011E5 932A      ST	-Y,R18
    011E6 931A      ST	-Y,R17
    011E7 930A      ST	-Y,R16
    011E8 0183      MOVW	R16,R6
    011E9 0194      MOVW	R18,R8
    011EA 940E 4260 CALL	fpadd2x
    011EC 0181      MOVW	R16,R2
    011ED 0192      MOVW	R18,R4
    011EE 940E 4469 CALL	fpmule2
    011F0 940E 4290 CALL	fpint
    011F2 01F5      MOVW	R30,R10
    011F3 8300      ST	Z,R16
    011F4 8311      STD	Z+1,R17
    011F5 8322      STD	Z+2,R18
    011F6 8333      STD	Z+3,R19
(0571) 	return 0;
    011F7 2700      CLR	R16
    011F8 2711      CLR	R17
    011F9 9626      ADIW	R28,6
    011FA 940C 40F7 JMP	pop_xgset00FC
_mpu_set_accel_bias:
  fg                   --> Y,+22
  got_accel            --> Y,+16
  accel_hw             --> Y,+10
  data                 --> Y,+4
  accel_bias           --> R20
    011FC 940E 411D CALL	push_xgset300C
    011FE 01A8      MOVW	R20,R16
    011FF 976C      SBIW	R28,0x1C
(0572) }
(0573) 
(0574) int mpu_set_accel_bias(const long *accel_bias)
(0575) {
(0576) 	unsigned char data[6];
(0577) 	short accel_hw[3];
(0578) 	short got_accel[3];
(0579) 	short fg[3];
(0580) 
(0581) 	if (!accel_bias)
    01200 3040      CPI	R20,0
    01201 0745      CPC	R20,R21
    01202 F419      BNE	0x1206
(0582) 		return -1;
    01203 EF0F      LDI	R16,0xFF
    01204 EF1F      LDI	R17,0xFF
    01205 C12D      RJMP	0x1333
(0583) 	if (!accel_bias[0] && !accel_bias[1] && !accel_bias[2])
    01206 01FA      MOVW	R30,R20
    01207 8020      LD	R2,Z
    01208 8031      LDD	R3,Z+1
    01209 8042      LDD	R4,Z+2
    0120A 8053      LDD	R5,Z+3
    0120B 9488      BCLR	0
    0120C 2022      TST	R2
    0120D 0432      CPC	R3,R2
    0120E 0442      CPC	R4,R2
    0120F 0452      CPC	R5,R2
    01210 F4D1      BNE	0x122B
    01211 9634      ADIW	R30,4
    01212 8020      LD	R2,Z
    01213 8031      LDD	R3,Z+1
    01214 8042      LDD	R4,Z+2
    01215 8053      LDD	R5,Z+3
    01216 9488      BCLR	0
    01217 2022      TST	R2
    01218 0432      CPC	R3,R2
    01219 0442      CPC	R4,R2
    0121A 0452      CPC	R5,R2
    0121B F479      BNE	0x122B
    0121C 01FA      MOVW	R30,R20
    0121D 9638      ADIW	R30,0x8
    0121E 8020      LD	R2,Z
    0121F 8031      LDD	R3,Z+1
    01220 8042      LDD	R4,Z+2
    01221 8053      LDD	R5,Z+3
    01222 9488      BCLR	0
    01223 2022      TST	R2
    01224 0432      CPC	R3,R2
    01225 0442      CPC	R4,R2
    01226 0452      CPC	R5,R2
    01227 F419      BNE	0x122B
(0584) 		return 0;
    01228 2700      CLR	R16
    01229 2711      CLR	R17
    0122A C108      RJMP	0x1333
(0585) 
(0586) 	if (i2c_read(st.hw->addr, 3, 3, data))
    0122B 01CE      MOVW	R24,R28
    0122C 9604      ADIW	R24,4
    0122D 839B      STD	Y+3,R25
    0122E 838A      STD	Y+2,R24
    0122F E083      LDI	R24,3
    01230 8388      ST	Y,R24
    01231 E023      LDI	R18,3
    01232 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    01234 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    01236 8100      LD	R16,Z
    01237 940E 0E31 CALL	_i2cread
    01239 2300      TST	R16
    0123A F019      BEQ	0x123E
(0587) 		return -1;
    0123B EF0F      LDI	R16,0xFF
    0123C EF1F      LDI	R17,0xFF
    0123D C0F5      RJMP	0x1333
(0588) 	fg[0] = ((data[0] >> 4) + 8) & 0xf;
    0123E 818C      LDD	R24,Y+4
    0123F 2799      CLR	R25
    01240 9595      ASR	R25
    01241 9587      ROR	R24
    01242 9595      ASR	R25
    01243 9587      ROR	R24
    01244 9595      ASR	R25
    01245 9587      ROR	R24
    01246 9595      ASR	R25
    01247 9587      ROR	R24
    01248 9608      ADIW	R24,0x8
    01249 708F      ANDI	R24,0xF
    0124A 7090      ANDI	R25,0
    0124B 8B9F      STD	Y+23,R25
    0124C 8B8E      STD	Y+22,R24
(0589) 	fg[1] = ((data[1] >> 4) + 8) & 0xf;
    0124D 818D      LDD	R24,Y+5
    0124E 2799      CLR	R25
    0124F 9595      ASR	R25
    01250 9587      ROR	R24
    01251 9595      ASR	R25
    01252 9587      ROR	R24
    01253 9595      ASR	R25
    01254 9587      ROR	R24
    01255 9595      ASR	R25
    01256 9587      ROR	R24
    01257 9608      ADIW	R24,0x8
    01258 708F      ANDI	R24,0xF
    01259 7090      ANDI	R25,0
    0125A 8F99      STD	Y+25,R25
    0125B 8F88      STD	Y+24,R24
(0590) 	fg[2] = ((data[2] >> 4) + 8) & 0xf;
    0125C 818E      LDD	R24,Y+6
    0125D 2799      CLR	R25
    0125E 9595      ASR	R25
    0125F 9587      ROR	R24
    01260 9595      ASR	R25
    01261 9587      ROR	R24
    01262 9595      ASR	R25
    01263 9587      ROR	R24
    01264 9595      ASR	R25
    01265 9587      ROR	R24
    01266 9608      ADIW	R24,0x8
    01267 708F      ANDI	R24,0xF
    01268 7090      ANDI	R25,0
    01269 8F9B      STD	Y+27,R25
    0126A 8F8A      STD	Y+26,R24
(0591) 
(0592) 	accel_hw[0] = (short)(accel_bias[0] * 2 / (64 + fg[0]));
    0126B 898E      LDD	R24,Y+22
    0126C 899F      LDD	R25,Y+23
    0126D 5C80      SUBI	R24,0xC0
    0126E 4F9F      SBCI	R25,0xFF
    0126F 011C      MOVW	R2,R24
    01270 2444      CLR	R4
    01271 FC37      SBRC	R3,7
    01272 9440      COM	R4
    01273 2455      CLR	R5
    01274 FC47      SBRC	R4,7
    01275 9450      COM	R5
    01276 01FA      MOVW	R30,R20
    01277 8100      LD	R16,Z
    01278 8111      LDD	R17,Z+1
    01279 8122      LDD	R18,Z+2
    0127A 8133      LDD	R19,Z+3
    0127B 0F00      LSL	R16
    0127C 1F11      ROL	R17
    0127D 1F22      ROL	R18
    0127E 1F33      ROL	R19
    0127F 925A      ST	-Y,R5
    01280 924A      ST	-Y,R4
    01281 923A      ST	-Y,R3
    01282 922A      ST	-Y,R2
    01283 940E 401E CALL	div32s
    01285 871B      STD	Y+11,R17
    01286 870A      STD	Y+10,R16
(0593) 	accel_hw[1] = (short)(accel_bias[1] * 2 / (64 + fg[1]));
    01287 8D88      LDD	R24,Y+24
    01288 8D99      LDD	R25,Y+25
    01289 5C80      SUBI	R24,0xC0
    0128A 4F9F      SBCI	R25,0xFF
    0128B 011C      MOVW	R2,R24
    0128C 2444      CLR	R4
    0128D FC37      SBRC	R3,7
    0128E 9440      COM	R4
    0128F 2455      CLR	R5
    01290 FC47      SBRC	R4,7
    01291 9450      COM	R5
    01292 01FA      MOVW	R30,R20
    01293 8104      LDD	R16,Z+4
    01294 8115      LDD	R17,Z+5
    01295 8126      LDD	R18,Z+6
    01296 8137      LDD	R19,Z+7
    01297 0F00      LSL	R16
    01298 1F11      ROL	R17
    01299 1F22      ROL	R18
    0129A 1F33      ROL	R19
    0129B 925A      ST	-Y,R5
    0129C 924A      ST	-Y,R4
    0129D 923A      ST	-Y,R3
    0129E 922A      ST	-Y,R2
    0129F 940E 401E CALL	div32s
    012A1 871D      STD	Y+13,R17
    012A2 870C      STD	Y+12,R16
(0594) 	accel_hw[2] = (short)(accel_bias[2] * 2 / (64 + fg[2]));
    012A3 8D8A      LDD	R24,Y+26
    012A4 8D9B      LDD	R25,Y+27
    012A5 5C80      SUBI	R24,0xC0
    012A6 4F9F      SBCI	R25,0xFF
    012A7 011C      MOVW	R2,R24
    012A8 2444      CLR	R4
    012A9 FC37      SBRC	R3,7
    012AA 9440      COM	R4
    012AB 2455      CLR	R5
    012AC FC47      SBRC	R4,7
    012AD 9450      COM	R5
    012AE 01FA      MOVW	R30,R20
    012AF 8500      LDD	R16,Z+8
    012B0 8511      LDD	R17,Z+9
    012B1 8522      LDD	R18,Z+10
    012B2 8533      LDD	R19,Z+11
    012B3 0F00      LSL	R16
    012B4 1F11      ROL	R17
    012B5 1F22      ROL	R18
    012B6 1F33      ROL	R19
    012B7 925A      ST	-Y,R5
    012B8 924A      ST	-Y,R4
    012B9 923A      ST	-Y,R3
    012BA 922A      ST	-Y,R2
    012BB 940E 401E CALL	div32s
    012BD 871F      STD	Y+15,R17
    012BE 870E      STD	Y+14,R16
(0595) 
(0596) 	if (i2c_read(st.hw->addr, 0x06, 6, data))
    012BF 01CE      MOVW	R24,R28
    012C0 9604      ADIW	R24,4
    012C1 839B      STD	Y+3,R25
    012C2 838A      STD	Y+2,R24
    012C3 E086      LDI	R24,6
    012C4 8388      ST	Y,R24
    012C5 E026      LDI	R18,6
    012C6 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    012C8 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    012CA 8100      LD	R16,Z
    012CB 940E 0E31 CALL	_i2cread
    012CD 2300      TST	R16
    012CE F019      BEQ	0x12D2
(0597) 		return -1;
    012CF EF0F      LDI	R16,0xFF
    012D0 EF1F      LDI	R17,0xFF
    012D1 C061      RJMP	0x1333
(0598) 
(0599) 	got_accel[0] = ((short)data[0] << 8) | data[1];
    012D2 802D      LDD	R2,Y+5
    012D3 803C      LDD	R3,Y+4
    012D4 2444      CLR	R4
    012D5 8A39      STD	Y+17,R3
    012D6 8A28      STD	Y+16,R2
(0600) 	got_accel[1] = ((short)data[2] << 8) | data[3];
    012D7 802F      LDD	R2,Y+7
    012D8 803E      LDD	R3,Y+6
    012D9 2444      CLR	R4
    012DA 8A3B      STD	Y+19,R3
    012DB 8A2A      STD	Y+18,R2
(0601) 	got_accel[2] = ((short)data[4] << 8) | data[5];
    012DC 8429      LDD	R2,Y+9
    012DD 8438      LDD	R3,Y+8
    012DE 2444      CLR	R4
    012DF 8A3D      STD	Y+21,R3
    012E0 8A2C      STD	Y+20,R2
(0602) 
(0603) 	accel_hw[0] += got_accel[0];
    012E1 8828      LDD	R2,Y+16
    012E2 8839      LDD	R3,Y+17
    012E3 844A      LDD	R4,Y+10
    012E4 845B      LDD	R5,Y+11
    012E5 0C42      ADD	R4,R2
    012E6 1C53      ADC	R5,R3
    012E7 865B      STD	Y+11,R5
    012E8 864A      STD	Y+10,R4
(0604) 	accel_hw[1] += got_accel[1];
    012E9 882A      LDD	R2,Y+18
    012EA 883B      LDD	R3,Y+19
    012EB 844C      LDD	R4,Y+12
    012EC 845D      LDD	R5,Y+13
    012ED 0C42      ADD	R4,R2
    012EE 1C53      ADC	R5,R3
    012EF 865D      STD	Y+13,R5
    012F0 864C      STD	Y+12,R4
(0605) 	accel_hw[2] += got_accel[2];
    012F1 882C      LDD	R2,Y+20
    012F2 883D      LDD	R3,Y+21
    012F3 844E      LDD	R4,Y+14
    012F4 845F      LDD	R5,Y+15
    012F5 0C42      ADD	R4,R2
    012F6 1C53      ADC	R5,R3
    012F7 865F      STD	Y+15,R5
    012F8 864E      STD	Y+14,R4
(0606) 
(0607) 	data[0] = (accel_hw[0] >> 8) & 0xff;
    012F9 858A      LDD	R24,Y+10
    012FA 859B      LDD	R25,Y+11
    012FB 2F89      MOV	R24,R25
    012FC 2799      CLR	R25
    012FD FD87      SBRC	R24,7
    012FE 9590      COM	R25
    012FF 7090      ANDI	R25,0
    01300 838C      STD	Y+4,R24
(0608) 	data[1] = (accel_hw[0]) & 0xff;
    01301 858A      LDD	R24,Y+10
    01302 859B      LDD	R25,Y+11
    01303 7090      ANDI	R25,0
    01304 838D      STD	Y+5,R24
(0609) 	data[2] = (accel_hw[1] >> 8) & 0xff;
    01305 858C      LDD	R24,Y+12
    01306 859D      LDD	R25,Y+13
    01307 2F89      MOV	R24,R25
    01308 2799      CLR	R25
    01309 FD87      SBRC	R24,7
    0130A 9590      COM	R25
    0130B 7090      ANDI	R25,0
    0130C 838E      STD	Y+6,R24
(0610) 	data[3] = (accel_hw[1]) & 0xff;
    0130D 858C      LDD	R24,Y+12
    0130E 859D      LDD	R25,Y+13
    0130F 7090      ANDI	R25,0
    01310 838F      STD	Y+7,R24
(0611) 	data[4] = (accel_hw[2] >> 8) & 0xff;
    01311 858E      LDD	R24,Y+14
    01312 859F      LDD	R25,Y+15
    01313 2F89      MOV	R24,R25
    01314 2799      CLR	R25
    01315 FD87      SBRC	R24,7
    01316 9590      COM	R25
    01317 7090      ANDI	R25,0
    01318 8788      STD	Y+8,R24
(0612) 	data[5] = (accel_hw[2]) & 0xff;
    01319 858E      LDD	R24,Y+14
    0131A 859F      LDD	R25,Y+15
    0131B 7090      ANDI	R25,0
    0131C 8789      STD	Y+9,R24
(0613) 
(0614) 	if (i2c_write(st.hw->addr, 0x06, 6, data))
    0131D 01CE      MOVW	R24,R28
    0131E 9604      ADIW	R24,4
    0131F 839B      STD	Y+3,R25
    01320 838A      STD	Y+2,R24
    01321 E086      LDI	R24,6
    01322 8388      ST	Y,R24
    01323 E026      LDI	R18,6
    01324 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    01326 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    01328 8100      LD	R16,Z
    01329 940E 0E1B CALL	_i2cwrite
    0132B 2EA0      MOV	R10,R16
    0132C 2300      TST	R16
    0132D F019      BEQ	0x1331
(0615) 		return -1;
    0132E EF0F      LDI	R16,0xFF
    0132F EF1F      LDI	R17,0xFF
    01330 C002      RJMP	0x1333
(0616) 	return 0;
    01331 2700      CLR	R16
    01332 2711      CLR	R17
    01333 966C      ADIW	R28,0x1C
    01334 940C 4122 JMP	pop_xgset300C
_mpu_reset_fifo:
  data                 --> Y,+4
    01336 92AA      ST	-Y,R10
    01337 9725      SBIW	R28,5
(0617) }
(0618) 
(0619) int mpu_reset_fifo(void)
(0620) {
(0621) 	unsigned char data;
(0622) 
(0623) 	if (!(st.chip_cfg.sensors))
    01338 9020 01B6 LDS	R2,inv_mpu.c:st+6
    0133A 2022      TST	R2
    0133B F419      BNE	0x133F
(0624) 		return -1;
    0133C EF0F      LDI	R16,0xFF
    0133D EF1F      LDI	R17,0xFF
    0133E C145      RJMP	0x1484
(0625) 
(0626) 	data = 0;
    0133F 2422      CLR	R2
    01340 822C      STD	Y+4,R2
(0627) 	if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
    01341 01CE      MOVW	R24,R28
    01342 9604      ADIW	R24,4
    01343 839B      STD	Y+3,R25
    01344 838A      STD	Y+2,R24
    01345 E081      LDI	R24,1
    01346 8388      ST	Y,R24
    01347 91E0 01B0 LDS	R30,inv_mpu.c:st
    01349 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    0134B 8527      LDD	R18,Z+15
    0134C 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    0134E 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    01350 8100      LD	R16,Z
    01351 940E 0E1B CALL	_i2cwrite
    01353 2300      TST	R16
    01354 F019      BEQ	0x1358
(0628) 		return -1;
    01355 EF0F      LDI	R16,0xFF
    01356 EF1F      LDI	R17,0xFF
    01357 C12C      RJMP	0x1484
(0629) 	if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
    01358 01CE      MOVW	R24,R28
    01359 9604      ADIW	R24,4
    0135A 839B      STD	Y+3,R25
    0135B 838A      STD	Y+2,R24
    0135C E081      LDI	R24,1
    0135D 8388      ST	Y,R24
    0135E 91E0 01B0 LDS	R30,inv_mpu.c:st
    01360 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    01362 8125      LDD	R18,Z+5
    01363 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    01365 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    01367 8100      LD	R16,Z
    01368 940E 0E1B CALL	_i2cwrite
    0136A 2300      TST	R16
    0136B F019      BEQ	0x136F
(0630) 		return -1;
    0136C EF0F      LDI	R16,0xFF
    0136D EF1F      LDI	R17,0xFF
    0136E C115      RJMP	0x1484
(0631) 	if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
    0136F 01CE      MOVW	R24,R28
    01370 9604      ADIW	R24,4
    01371 839B      STD	Y+3,R25
    01372 838A      STD	Y+2,R24
    01373 E081      LDI	R24,1
    01374 8388      ST	Y,R24
    01375 91E0 01B0 LDS	R30,inv_mpu.c:st
    01377 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    01379 8124      LDD	R18,Z+4
    0137A 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    0137C 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    0137E 8100      LD	R16,Z
    0137F 940E 0E1B CALL	_i2cwrite
    01381 2EA0      MOV	R10,R16
    01382 2300      TST	R16
    01383 F019      BEQ	0x1387
(0632) 		return -1;
    01384 EF0F      LDI	R16,0xFF
    01385 EF1F      LDI	R17,0xFF
    01386 C0FD      RJMP	0x1484
(0633) 
(0634) 	if (st.chip_cfg.dmp_on) 
    01387 9020 01CD LDS	R2,inv_mpu.c:st+29
    01389 2022      TST	R2
    0138A F409      BNE	0x138C
    0138B C07A      RJMP	0x1406
(0635) 	{
(0636) 		data = BIT_FIFO_RST | BIT_DMP_RST;
    0138C E08C      LDI	R24,0xC
    0138D 838C      STD	Y+4,R24
(0637) 		if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
    0138E 01CE      MOVW	R24,R28
    0138F 9604      ADIW	R24,4
    01390 839B      STD	Y+3,R25
    01391 838A      STD	Y+2,R24
    01392 E081      LDI	R24,1
    01393 8388      ST	Y,R24
    01394 91E0 01B0 LDS	R30,inv_mpu.c:st
    01396 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    01398 8124      LDD	R18,Z+4
    01399 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    0139B 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    0139D 8100      LD	R16,Z
    0139E 940E 0E1B CALL	_i2cwrite
    013A0 2EA0      MOV	R10,R16
    013A1 2300      TST	R16
    013A2 F019      BEQ	0x13A6
(0638) 			return -1;
    013A3 EF0F      LDI	R16,0xFF
    013A4 EF1F      LDI	R17,0xFF
    013A5 C0DE      RJMP	0x1484
(0639) 		delay_ms(50);
    013A6 E302      LDI	R16,0x32
    013A7 E010      LDI	R17,0
    013A8 940E 0D6E CALL	_delay_ms
(0640) 		data = BIT_DMP_EN | BIT_FIFO_EN;
    013AA EC80      LDI	R24,0xC0
    013AB 838C      STD	Y+4,R24
(0641) 		if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
    013AC 9020 01B6 LDS	R2,inv_mpu.c:st+6
    013AE FE20      SBRS	R2,0
    013AF C002      RJMP	0x13B2
(0642) 			data |= BIT_AUX_IF_EN;
    013B0 6280      ORI	R24,0x20
    013B1 838C      STD	Y+4,R24
(0643) 		if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
    013B2 01CE      MOVW	R24,R28
    013B3 9604      ADIW	R24,4
    013B4 839B      STD	Y+3,R25
    013B5 838A      STD	Y+2,R24
    013B6 E081      LDI	R24,1
    013B7 8388      ST	Y,R24
    013B8 91E0 01B0 LDS	R30,inv_mpu.c:st
    013BA 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    013BC 8124      LDD	R18,Z+4
    013BD 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    013BF 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    013C1 8100      LD	R16,Z
    013C2 940E 0E1B CALL	_i2cwrite
    013C4 2EA0      MOV	R10,R16
    013C5 2300      TST	R16
    013C6 F019      BEQ	0x13CA
(0644) 			return -1;
    013C7 EF0F      LDI	R16,0xFF
    013C8 EF1F      LDI	R17,0xFF
    013C9 C0BA      RJMP	0x1484
(0645) 		if (st.chip_cfg.int_enable)
    013CA 9020 01BC LDS	R2,inv_mpu.c:st+12
    013CC 2022      TST	R2
    013CD F019      BEQ	0x13D1
(0646) 			data = BIT_DMP_INT_EN;
    013CE E082      LDI	R24,2
    013CF 838C      STD	Y+4,R24
    013D0 C002      RJMP	0x13D3
(0647) 		else
(0648) 			data = 0;
    013D1 2422      CLR	R2
    013D2 822C      STD	Y+4,R2
(0649) 		if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
    013D3 01CE      MOVW	R24,R28
    013D4 9604      ADIW	R24,4
    013D5 839B      STD	Y+3,R25
    013D6 838A      STD	Y+2,R24
    013D7 E081      LDI	R24,1
    013D8 8388      ST	Y,R24
    013D9 91E0 01B0 LDS	R30,inv_mpu.c:st
    013DB 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    013DD 8527      LDD	R18,Z+15
    013DE 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    013E0 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    013E2 8100      LD	R16,Z
    013E3 940E 0E1B CALL	_i2cwrite
    013E5 2EA0      MOV	R10,R16
    013E6 2300      TST	R16
    013E7 F019      BEQ	0x13EB
(0650) 			return -1;
    013E8 EF0F      LDI	R16,0xFF
    013E9 EF1F      LDI	R17,0xFF
    013EA C099      RJMP	0x1484
(0651) 		data = 0;
    013EB 2422      CLR	R2
    013EC 822C      STD	Y+4,R2
(0652) 		if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
    013ED 01CE      MOVW	R24,R28
    013EE 9604      ADIW	R24,4
    013EF 839B      STD	Y+3,R25
    013F0 838A      STD	Y+2,R24
    013F1 E081      LDI	R24,1
    013F2 8388      ST	Y,R24
    013F3 91E0 01B0 LDS	R30,inv_mpu.c:st
    013F5 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    013F7 8125      LDD	R18,Z+5
    013F8 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    013FA 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    013FC 8100      LD	R16,Z
    013FD 940E 0E1B CALL	_i2cwrite
    013FF 2EA0      MOV	R10,R16
    01400 2300      TST	R16
    01401 F409      BNE	0x1403
    01402 C07F      RJMP	0x1482
(0653) 			return -1;
    01403 EF0F      LDI	R16,0xFF
    01404 EF1F      LDI	R17,0xFF
    01405 C07E      RJMP	0x1484
(0654) 	} 
(0655) 	else 
(0656) 	{
(0657) 		data = BIT_FIFO_RST;
    01406 E084      LDI	R24,4
    01407 838C      STD	Y+4,R24
(0658) 		if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
    01408 01CE      MOVW	R24,R28
    01409 9604      ADIW	R24,4
    0140A 839B      STD	Y+3,R25
    0140B 838A      STD	Y+2,R24
    0140C E081      LDI	R24,1
    0140D 8388      ST	Y,R24
    0140E 91E0 01B0 LDS	R30,inv_mpu.c:st
    01410 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    01412 8124      LDD	R18,Z+4
    01413 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    01415 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    01417 8100      LD	R16,Z
    01418 940E 0E1B CALL	_i2cwrite
    0141A 2EA0      MOV	R10,R16
    0141B 2300      TST	R16
    0141C F019      BEQ	0x1420
(0659) 			return -1;
    0141D EF0F      LDI	R16,0xFF
    0141E EF1F      LDI	R17,0xFF
    0141F C064      RJMP	0x1484
(0660) 		if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors ))
    01420 9020 01BD LDS	R2,inv_mpu.c:st+13
    01422 2022      TST	R2
    01423 F421      BNE	0x1428
    01424 9020 01B6 LDS	R2,inv_mpu.c:st+6
    01426 2022      TST	R2
    01427 F419      BNE	0x142B
(0661) 			data = BIT_FIFO_EN;
    01428 E480      LDI	R24,0x40
    01429 838C      STD	Y+4,R24
    0142A C002      RJMP	0x142D
(0662) 		else
(0663) 			data = BIT_FIFO_EN | BIT_AUX_IF_EN;
    0142B E680      LDI	R24,0x60
    0142C 838C      STD	Y+4,R24
(0664) 		if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
    0142D 01CE      MOVW	R24,R28
    0142E 9604      ADIW	R24,4
    0142F 839B      STD	Y+3,R25
    01430 838A      STD	Y+2,R24
    01431 E081      LDI	R24,1
    01432 8388      ST	Y,R24
    01433 91E0 01B0 LDS	R30,inv_mpu.c:st
    01435 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    01437 8124      LDD	R18,Z+4
    01438 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    0143A 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    0143C 8100      LD	R16,Z
    0143D 940E 0E1B CALL	_i2cwrite
    0143F 2EA0      MOV	R10,R16
    01440 2300      TST	R16
    01441 F019      BEQ	0x1445
(0665) 			return -1;
    01442 EF0F      LDI	R16,0xFF
    01443 EF1F      LDI	R17,0xFF
    01444 C03F      RJMP	0x1484
(0666) 		delay_ms(50);
    01445 E302      LDI	R16,0x32
    01446 E010      LDI	R17,0
    01447 940E 0D6E CALL	_delay_ms
(0667) 		if (st.chip_cfg.int_enable)
    01449 9020 01BC LDS	R2,inv_mpu.c:st+12
    0144B 2022      TST	R2
    0144C F019      BEQ	0x1450
(0668) 			data = BIT_DATA_RDY_EN;
    0144D E081      LDI	R24,1
    0144E 838C      STD	Y+4,R24
    0144F C002      RJMP	0x1452
(0669) 		else
(0670) 			data = 0;
    01450 2422      CLR	R2
    01451 822C      STD	Y+4,R2
(0671) 		if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
    01452 01CE      MOVW	R24,R28
    01453 9604      ADIW	R24,4
    01454 839B      STD	Y+3,R25
    01455 838A      STD	Y+2,R24
    01456 E081      LDI	R24,1
    01457 8388      ST	Y,R24
    01458 91E0 01B0 LDS	R30,inv_mpu.c:st
    0145A 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    0145C 8527      LDD	R18,Z+15
    0145D 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    0145F 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    01461 8100      LD	R16,Z
    01462 940E 0E1B CALL	_i2cwrite
    01464 2EA0      MOV	R10,R16
    01465 2300      TST	R16
    01466 F019      BEQ	0x146A
(0672) 			return -1;
    01467 EF0F      LDI	R16,0xFF
    01468 EF1F      LDI	R17,0xFF
    01469 C01A      RJMP	0x1484
(0673) 		if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
    0146A EB8B      LDI	R24,0xBB
    0146B E091      LDI	R25,1
    0146C 839B      STD	Y+3,R25
    0146D 838A      STD	Y+2,R24
    0146E E081      LDI	R24,1
    0146F 8388      ST	Y,R24
    01470 91E0 01B0 LDS	R30,inv_mpu.c:st
    01472 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    01474 8125      LDD	R18,Z+5
    01475 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    01477 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    01479 8100      LD	R16,Z
    0147A 940E 0E1B CALL	_i2cwrite
    0147C 2EA0      MOV	R10,R16
    0147D 2300      TST	R16
    0147E F019      BEQ	0x1482
(0674) 			return -1;
    0147F EF0F      LDI	R16,0xFF
    01480 EF1F      LDI	R17,0xFF
    01481 C002      RJMP	0x1484
(0675) 	}
(0676) 	return 0;
    01482 2700      CLR	R16
    01483 2711      CLR	R17
    01484 9625      ADIW	R28,5
    01485 90A9      LD	R10,Y+
    01486 9508      RET
_mpu_get_gyro_fsr:
  fsr                  --> R16
    01487 934A      ST	-Y,R20
    01488 935A      ST	-Y,R21
(0677) }
(0678) 
(0679) int mpu_get_gyro_fsr(unsigned short *fsr)
(0680) {
(0681) 	switch (st.chip_cfg.gyro_fsr) 
    01489 9140 01B4 LDS	R20,inv_mpu.c:st+4
    0148B 2755      CLR	R21
    0148C 3040      CPI	R20,0
    0148D 0745      CPC	R20,R21
    0148E F069      BEQ	0x149C
    0148F 3041      CPI	R20,1
    01490 E0E0      LDI	R30,0
    01491 075E      CPC	R21,R30
    01492 F079      BEQ	0x14A2
    01493 3042      CPI	R20,2
    01494 E0E0      LDI	R30,0
    01495 075E      CPC	R21,R30
    01496 F089      BEQ	0x14A8
    01497 3043      CPI	R20,3
    01498 E0E0      LDI	R30,0
    01499 075E      CPC	R21,R30
    0149A F099      BEQ	0x14AE
    0149B C018      RJMP	0x14B4
(0682) 	{
(0683) 	case INV_FSR_250DPS:
(0684) 		fsr[0] = 250;
    0149C EF8A      LDI	R24,0xFA
    0149D E090      LDI	R25,0
    0149E 01F8      MOVW	R30,R16
    0149F 8391      STD	Z+1,R25
    014A0 8380      ST	Z,R24
(0685) 		break;
    014A1 C017      RJMP	0x14B9
(0686) 	case INV_FSR_500DPS:
(0687) 		fsr[0] = 500;
    014A2 EF84      LDI	R24,0xF4
    014A3 E091      LDI	R25,1
    014A4 01F8      MOVW	R30,R16
    014A5 8391      STD	Z+1,R25
    014A6 8380      ST	Z,R24
(0688) 		break;
    014A7 C011      RJMP	0x14B9
(0689) 	case INV_FSR_1000DPS:
(0690) 		fsr[0] = 1000;
    014A8 EE88      LDI	R24,0xE8
    014A9 E093      LDI	R25,3
    014AA 01F8      MOVW	R30,R16
    014AB 8391      STD	Z+1,R25
    014AC 8380      ST	Z,R24
(0691) 		break;
    014AD C00B      RJMP	0x14B9
(0692) 	case INV_FSR_2000DPS:
(0693) 		fsr[0] = 2000;
    014AE ED80      LDI	R24,0xD0
    014AF E097      LDI	R25,7
    014B0 01F8      MOVW	R30,R16
    014B1 8391      STD	Z+1,R25
    014B2 8380      ST	Z,R24
(0694) 		break;
    014B3 C005      RJMP	0x14B9
(0695) 	default:
(0696) 		fsr[0] = 0;
    014B4 2422      CLR	R2
    014B5 2433      CLR	R3
    014B6 01F8      MOVW	R30,R16
    014B7 8231      STD	Z+1,R3
    014B8 8220      ST	Z,R2
(0697) 		break;
(0698) 	}
(0699) 	return 0;
    014B9 2700      CLR	R16
    014BA 2711      CLR	R17
    014BB 9159      LD	R21,Y+
    014BC 9149      LD	R20,Y+
    014BD 9508      RET
_mpu_set_gyro_fsr:
  data                 --> Y,+4
  fsr                  --> R20
    014BE 934A      ST	-Y,R20
    014BF 935A      ST	-Y,R21
    014C0 01A8      MOVW	R20,R16
    014C1 9725      SBIW	R28,5
(0700) }
(0701) 
(0702) int mpu_set_gyro_fsr(unsigned short fsr)
(0703) {
(0704) 	unsigned char data;
(0705) 
(0706) 	if (!(st.chip_cfg.sensors))
    014C2 9020 01B6 LDS	R2,inv_mpu.c:st+6
    014C4 2022      TST	R2
    014C5 F419      BNE	0x14C9
(0707) 		return -1;
    014C6 EF0F      LDI	R16,0xFF
    014C7 EF1F      LDI	R17,0xFF
    014C8 C054      RJMP	0x151D
(0708) 
(0709) 	switch (fsr) 
    014C9 3F44      CPI	R20,0xF4
    014CA E0E1      LDI	R30,1
    014CB 075E      CPC	R21,R30
    014CC F0D1      BEQ	0x14E7
    014CD EF84      LDI	R24,0xF4
    014CE E091      LDI	R25,1
    014CF 1784      CP	R24,R20
    014D0 0795      CPC	R25,R21
    014D1 F02C      BLT	0x14D7
    014D2 3F4A      CPI	R20,0xFA
    014D3 E0E0      LDI	R30,0
    014D4 075E      CPC	R21,R30
    014D5 F071      BEQ	0x14E4
    014D6 C019      RJMP	0x14F0
    014D7 3E48      CPI	R20,0xE8
    014D8 E0E3      LDI	R30,3
    014D9 075E      CPC	R21,R30
    014DA F079      BEQ	0x14EA
    014DB 3E48      CPI	R20,0xE8
    014DC E0E3      LDI	R30,3
    014DD 075E      CPC	R21,R30
    014DE F08C      BLT	0x14F0
    014DF 3D40      CPI	R20,0xD0
    014E0 E0E7      LDI	R30,7
    014E1 075E      CPC	R21,R30
    014E2 F051      BEQ	0x14ED
    014E3 C00C      RJMP	0x14F0
(0710) 	{
(0711) 	case 250:
(0712) 		data = INV_FSR_250DPS << 3;
    014E4 2422      CLR	R2
    014E5 822C      STD	Y+4,R2
(0713) 		break;
    014E6 C00C      RJMP	0x14F3
(0714) 	case 500:
(0715) 		data = INV_FSR_500DPS << 3;
    014E7 E088      LDI	R24,0x8
    014E8 838C      STD	Y+4,R24
(0716) 		break;
    014E9 C009      RJMP	0x14F3
(0717) 	case 1000:
(0718) 		data = INV_FSR_1000DPS << 3;
    014EA E180      LDI	R24,0x10
    014EB 838C      STD	Y+4,R24
(0719) 		break;
    014EC C006      RJMP	0x14F3
(0720) 	case 2000:
(0721) 		data = INV_FSR_2000DPS << 3;
    014ED E188      LDI	R24,0x18
    014EE 838C      STD	Y+4,R24
(0722) 		break;
    014EF C003      RJMP	0x14F3
(0723) 	default:
(0724) 		return -1;
    014F0 EF0F      LDI	R16,0xFF
    014F1 EF1F      LDI	R17,0xFF
    014F2 C02A      RJMP	0x151D
(0725) 	}
(0726) 
(0727) 	if (st.chip_cfg.gyro_fsr == (data >> 3))
    014F3 802C      LDD	R2,Y+4
    014F4 9426      LSR	R2
    014F5 9426      LSR	R2
    014F6 9426      LSR	R2
    014F7 9030 01B4 LDS	R3,inv_mpu.c:st+4
    014F9 1432      CP	R3,R2
    014FA F419      BNE	0x14FE
(0728) 		return 0;
    014FB 2700      CLR	R16
    014FC 2711      CLR	R17
    014FD C01F      RJMP	0x151D
(0729) 	if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
    014FE 01CE      MOVW	R24,R28
    014FF 9604      ADIW	R24,4
    01500 839B      STD	Y+3,R25
    01501 838A      STD	Y+2,R24
    01502 E081      LDI	R24,1
    01503 8388      ST	Y,R24
    01504 91E0 01B0 LDS	R30,inv_mpu.c:st
    01506 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    01508 8126      LDD	R18,Z+6
    01509 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    0150B 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    0150D 8100      LD	R16,Z
    0150E 940E 0E1B CALL	_i2cwrite
    01510 2300      TST	R16
    01511 F019      BEQ	0x1515
(0730) 		return -1;
    01512 EF0F      LDI	R16,0xFF
    01513 EF1F      LDI	R17,0xFF
    01514 C008      RJMP	0x151D
(0731) 	st.chip_cfg.gyro_fsr = data >> 3;
    01515 802C      LDD	R2,Y+4
    01516 9426      LSR	R2
    01517 9426      LSR	R2
    01518 9426      LSR	R2
    01519 9220 01B4 STS	inv_mpu.c:st+4,R2
(0732) 	return 0;
    0151B 2700      CLR	R16
    0151C 2711      CLR	R17
    0151D 9625      ADIW	R28,5
    0151E 9159      LD	R21,Y+
    0151F 9149      LD	R20,Y+
    01520 9508      RET
_mpu_get_accel_fsr:
  fsr                  --> R16
    01521 934A      ST	-Y,R20
    01522 935A      ST	-Y,R21
(0733) }
(0734) 
(0735) int mpu_get_accel_fsr(unsigned char *fsr)
(0736) {
(0737) 	switch (st.chip_cfg.accel_fsr) 
    01523 9140 01B5 LDS	R20,inv_mpu.c:st+5
    01525 2755      CLR	R21
    01526 3040      CPI	R20,0
    01527 0745      CPC	R20,R21
    01528 F069      BEQ	0x1536
    01529 3041      CPI	R20,1
    0152A E0E0      LDI	R30,0
    0152B 075E      CPC	R21,R30
    0152C F069      BEQ	0x153A
    0152D 3042      CPI	R20,2
    0152E E0E0      LDI	R30,0
    0152F 075E      CPC	R21,R30
    01530 F069      BEQ	0x153E
    01531 3043      CPI	R20,3
    01532 E0E0      LDI	R30,0
    01533 075E      CPC	R21,R30
    01534 F069      BEQ	0x1542
    01535 C010      RJMP	0x1546
(0738) 	{
(0739) 	case INV_FSR_2G:
(0740) 		fsr[0] = 2;
    01536 E082      LDI	R24,2
    01537 01F8      MOVW	R30,R16
    01538 8380      ST	Z,R24
(0741) 		break;
    01539 C00F      RJMP	0x1549
(0742) 	case INV_FSR_4G:
(0743) 		fsr[0] = 4;
    0153A E084      LDI	R24,4
    0153B 01F8      MOVW	R30,R16
    0153C 8380      ST	Z,R24
(0744) 		break;
    0153D C00B      RJMP	0x1549
(0745) 	case INV_FSR_8G:
(0746) 		fsr[0] = 8;
    0153E E088      LDI	R24,0x8
    0153F 01F8      MOVW	R30,R16
    01540 8380      ST	Z,R24
(0747) 		break;
    01541 C007      RJMP	0x1549
(0748) 	case INV_FSR_16G:
(0749) 		fsr[0] = 16;
    01542 E180      LDI	R24,0x10
    01543 01F8      MOVW	R30,R16
    01544 8380      ST	Z,R24
(0750) 		break;
    01545 C003      RJMP	0x1549
(0751) 	default:
(0752) 		return -1;
    01546 EF0F      LDI	R16,0xFF
    01547 EF1F      LDI	R17,0xFF
    01548 C00A      RJMP	0x1553
(0753) 	}
(0754) 	if (st.chip_cfg.accel_half)
    01549 9020 01BE LDS	R2,inv_mpu.c:st+14
    0154B 2022      TST	R2
    0154C F021      BEQ	0x1551
(0755) 		fsr[0] <<= 1;
    0154D 01F8      MOVW	R30,R16
    0154E 8020      LD	R2,Z
    0154F 0C22      LSL	R2
    01550 8220      ST	Z,R2
(0756) 	return 0;
    01551 2700      CLR	R16
    01552 2711      CLR	R17
    01553 9159      LD	R21,Y+
    01554 9149      LD	R20,Y+
    01555 9508      RET
_mpu_set_accel_fsr:
  data                 --> Y,+4
  fsr                  --> R10
    01556 940E 411D CALL	push_xgset300C
    01558 2EA0      MOV	R10,R16
    01559 9725      SBIW	R28,5
(0757) }
(0758) 
(0759) int mpu_set_accel_fsr(unsigned char fsr)
(0760) {
(0761) 	unsigned char data;
(0762) 
(0763) 	if (!(st.chip_cfg.sensors))
    0155A 9020 01B6 LDS	R2,inv_mpu.c:st+6
    0155C 2022      TST	R2
    0155D F419      BNE	0x1561
(0764) 		return -1;
    0155E EF0F      LDI	R16,0xFF
    0155F EF1F      LDI	R17,0xFF
    01560 C052      RJMP	0x15B3
(0765) 
(0766) 	switch (fsr) 
    01561 2D4A      MOV	R20,R10
    01562 2755      CLR	R21
    01563 3048      CPI	R20,0x8
    01564 E0E0      LDI	R30,0
    01565 075E      CPC	R21,R30
    01566 F0C9      BEQ	0x1580
    01567 E088      LDI	R24,0x8
    01568 E090      LDI	R25,0
    01569 1784      CP	R24,R20
    0156A 0795      CPC	R25,R21
    0156B F04C      BLT	0x1575
    0156C 3042      CPI	R20,2
    0156D E0E0      LDI	R30,0
    0156E 075E      CPC	R21,R30
    0156F F051      BEQ	0x157A
    01570 3044      CPI	R20,4
    01571 E0E0      LDI	R30,0
    01572 075E      CPC	R21,R30
    01573 F049      BEQ	0x157D
    01574 C011      RJMP	0x1586
    01575 3140      CPI	R20,0x10
    01576 E0E0      LDI	R30,0
    01577 075E      CPC	R21,R30
    01578 F051      BEQ	0x1583
    01579 C00C      RJMP	0x1586
(0767) 	{
(0768) 	case 2:
(0769) 		data = INV_FSR_2G << 3;
    0157A 2422      CLR	R2
    0157B 822C      STD	Y+4,R2
(0770) 		break;
    0157C C00C      RJMP	0x1589
(0771) 	case 4:
(0772) 		data = INV_FSR_4G << 3;
    0157D E088      LDI	R24,0x8
    0157E 838C      STD	Y+4,R24
(0773) 		break;
    0157F C009      RJMP	0x1589
(0774) 	case 8:
(0775) 		data = INV_FSR_8G << 3;
    01580 E180      LDI	R24,0x10
    01581 838C      STD	Y+4,R24
(0776) 		break;
    01582 C006      RJMP	0x1589
(0777) 	case 16:
(0778) 		data = INV_FSR_16G << 3;
    01583 E188      LDI	R24,0x18
    01584 838C      STD	Y+4,R24
(0779) 		break;
    01585 C003      RJMP	0x1589
(0780) 	default:
(0781) 		return -1;
    01586 EF0F      LDI	R16,0xFF
    01587 EF1F      LDI	R17,0xFF
    01588 C02A      RJMP	0x15B3
(0782) 	}
(0783) 
(0784) 	if (st.chip_cfg.accel_fsr == (data >> 3))
    01589 802C      LDD	R2,Y+4
    0158A 9426      LSR	R2
    0158B 9426      LSR	R2
    0158C 9426      LSR	R2
    0158D 9030 01B5 LDS	R3,inv_mpu.c:st+5
    0158F 1432      CP	R3,R2
    01590 F419      BNE	0x1594
(0785) 		return 0;
    01591 2700      CLR	R16
    01592 2711      CLR	R17
    01593 C01F      RJMP	0x15B3
(0786) 	if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
    01594 01CE      MOVW	R24,R28
    01595 9604      ADIW	R24,4
    01596 839B      STD	Y+3,R25
    01597 838A      STD	Y+2,R24
    01598 E081      LDI	R24,1
    01599 8388      ST	Y,R24
    0159A 91E0 01B0 LDS	R30,inv_mpu.c:st
    0159C 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    0159E 8127      LDD	R18,Z+7
    0159F 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    015A1 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    015A3 8100      LD	R16,Z
    015A4 940E 0E1B CALL	_i2cwrite
    015A6 2300      TST	R16
    015A7 F019      BEQ	0x15AB
(0787) 		return -1;
    015A8 EF0F      LDI	R16,0xFF
    015A9 EF1F      LDI	R17,0xFF
    015AA C008      RJMP	0x15B3
(0788) 	st.chip_cfg.accel_fsr = data >> 3;
    015AB 802C      LDD	R2,Y+4
    015AC 9426      LSR	R2
    015AD 9426      LSR	R2
    015AE 9426      LSR	R2
    015AF 9220 01B5 STS	inv_mpu.c:st+5,R2
(0789) 	return 0;
    015B1 2700      CLR	R16
    015B2 2711      CLR	R17
    015B3 9625      ADIW	R28,5
    015B4 940C 4122 JMP	pop_xgset300C
_mpu_get_lpf:
  lpf                  --> R16
    015B6 934A      ST	-Y,R20
    015B7 935A      ST	-Y,R21
(0790) }
(0791) 
(0792) int mpu_get_lpf(unsigned short *lpf)
(0793) {
(0794) 	switch (st.chip_cfg.lpf) 
    015B8 9140 01B7 LDS	R20,inv_mpu.c:st+7
    015BA 2755      CLR	R21
    015BB 3040      CPI	R20,0
    015BC 0745      CPC	R20,R21
    015BD F409      BNE	0x15BF
    015BE C044      RJMP	0x1603
    015BF 3041      CPI	R20,1
    015C0 E0E0      LDI	R30,0
    015C1 075E      CPC	R21,R30
    015C2 F0E1      BEQ	0x15DF
    015C3 3042      CPI	R20,2
    015C4 E0E0      LDI	R30,0
    015C5 075E      CPC	R21,R30
    015C6 F0F1      BEQ	0x15E5
    015C7 3043      CPI	R20,3
    015C8 E0E0      LDI	R30,0
    015C9 075E      CPC	R21,R30
    015CA F101      BEQ	0x15EB
    015CB 3044      CPI	R20,4
    015CC E0E0      LDI	R30,0
    015CD 075E      CPC	R21,R30
    015CE F111      BEQ	0x15F1
    015CF 3045      CPI	R20,5
    015D0 E0E0      LDI	R30,0
    015D1 075E      CPC	R21,R30
    015D2 F409      BNE	0x15D4
    015D3 C023      RJMP	0x15F7
    015D4 3046      CPI	R20,6
    015D5 E0E0      LDI	R30,0
    015D6 075E      CPC	R21,R30
    015D7 F409      BNE	0x15D9
    015D8 C024      RJMP	0x15FD
    015D9 3047      CPI	R20,7
    015DA E0E0      LDI	R30,0
    015DB 075E      CPC	R21,R30
    015DC F409      BNE	0x15DE
    015DD C025      RJMP	0x1603
    015DE C024      RJMP	0x1603
(0795) 	{
(0796) 	case INV_FILTER_188HZ:
(0797) 		lpf[0] = 188;
    015DF EB8C      LDI	R24,0xBC
    015E0 E090      LDI	R25,0
    015E1 01F8      MOVW	R30,R16
    015E2 8391      STD	Z+1,R25
    015E3 8380      ST	Z,R24
(0798) 		break;
    015E4 C023      RJMP	0x1608
(0799) 	case INV_FILTER_98HZ:
(0800) 		lpf[0] = 98;
    015E5 E682      LDI	R24,0x62
    015E6 E090      LDI	R25,0
    015E7 01F8      MOVW	R30,R16
    015E8 8391      STD	Z+1,R25
    015E9 8380      ST	Z,R24
(0801) 		break;
    015EA C01D      RJMP	0x1608
(0802) 	case INV_FILTER_42HZ:
(0803) 		lpf[0] = 42;
    015EB E28A      LDI	R24,0x2A
    015EC E090      LDI	R25,0
    015ED 01F8      MOVW	R30,R16
    015EE 8391      STD	Z+1,R25
    015EF 8380      ST	Z,R24
(0804) 		break;
    015F0 C017      RJMP	0x1608
(0805) 	case INV_FILTER_20HZ:
(0806) 		lpf[0] = 20;
    015F1 E184      LDI	R24,0x14
    015F2 E090      LDI	R25,0
    015F3 01F8      MOVW	R30,R16
    015F4 8391      STD	Z+1,R25
    015F5 8380      ST	Z,R24
(0807) 		break;
    015F6 C011      RJMP	0x1608
(0808) 	case INV_FILTER_10HZ:
(0809) 		lpf[0] = 10;
    015F7 E08A      LDI	R24,0xA
    015F8 E090      LDI	R25,0
    015F9 01F8      MOVW	R30,R16
    015FA 8391      STD	Z+1,R25
    015FB 8380      ST	Z,R24
(0810) 		break;
    015FC C00B      RJMP	0x1608
(0811) 	case INV_FILTER_5HZ:
(0812) 		lpf[0] = 5;
    015FD E085      LDI	R24,5
    015FE E090      LDI	R25,0
    015FF 01F8      MOVW	R30,R16
    01600 8391      STD	Z+1,R25
    01601 8380      ST	Z,R24
(0813) 		break;
    01602 C005      RJMP	0x1608
(0814) 	case INV_FILTER_256HZ_NOLPF2:
(0815) 	case INV_FILTER_2100HZ_NOLPF:
(0816) 	default:
(0817) 		lpf[0] = 0;
    01603 2422      CLR	R2
    01604 2433      CLR	R3
    01605 01F8      MOVW	R30,R16
    01606 8231      STD	Z+1,R3
    01607 8220      ST	Z,R2
(0818) 		break;
(0819) 	}
(0820) 	return 0;
    01608 2700      CLR	R16
    01609 2711      CLR	R17
    0160A 9159      LD	R21,Y+
    0160B 9149      LD	R20,Y+
    0160C 9508      RET
_mpu_set_lpf:
  data                 --> Y,+4
  lpf                  --> R20
    0160D 934A      ST	-Y,R20
    0160E 935A      ST	-Y,R21
    0160F 01A8      MOVW	R20,R16
    01610 9725      SBIW	R28,5
(0821) }
(0822) 
(0823) int mpu_set_lpf(unsigned short lpf)
(0824) {
(0825) 	unsigned char data;
(0826) 
(0827) 	if (!(st.chip_cfg.sensors))
    01611 9020 01B6 LDS	R2,inv_mpu.c:st+6
    01613 2022      TST	R2
    01614 F419      BNE	0x1618
(0828) 		return -1;
    01615 EF0F      LDI	R16,0xFF
    01616 EF1F      LDI	R17,0xFF
    01617 C049      RJMP	0x1661
(0829) 
(0830) 	if (lpf >= 188)
    01618 3B4C      CPI	R20,0xBC
    01619 E0E0      LDI	R30,0
    0161A 075E      CPC	R21,R30
    0161B F018      BCS	0x161F
(0831) 		data = INV_FILTER_188HZ;
    0161C E081      LDI	R24,1
    0161D 838C      STD	Y+4,R24
    0161E C01E      RJMP	0x163D
(0832) 	else if (lpf >= 98)
    0161F 3642      CPI	R20,0x62
    01620 E0E0      LDI	R30,0
    01621 075E      CPC	R21,R30
    01622 F018      BCS	0x1626
(0833) 		data = INV_FILTER_98HZ;
    01623 E082      LDI	R24,2
    01624 838C      STD	Y+4,R24
    01625 C017      RJMP	0x163D
(0834) 	else if (lpf >= 42)
    01626 324A      CPI	R20,0x2A
    01627 E0E0      LDI	R30,0
    01628 075E      CPC	R21,R30
    01629 F018      BCS	0x162D
(0835) 		data = INV_FILTER_42HZ;
    0162A E083      LDI	R24,3
    0162B 838C      STD	Y+4,R24
    0162C C010      RJMP	0x163D
(0836) 	else if (lpf >= 20)
    0162D 3144      CPI	R20,0x14
    0162E E0E0      LDI	R30,0
    0162F 075E      CPC	R21,R30
    01630 F018      BCS	0x1634
(0837) 		data = INV_FILTER_20HZ;
    01631 E084      LDI	R24,4
    01632 838C      STD	Y+4,R24
    01633 C009      RJMP	0x163D
(0838) 	else if (lpf >= 10)
    01634 304A      CPI	R20,0xA
    01635 E0E0      LDI	R30,0
    01636 075E      CPC	R21,R30
    01637 F018      BCS	0x163B
(0839) 		data = INV_FILTER_10HZ;
    01638 E085      LDI	R24,5
    01639 838C      STD	Y+4,R24
    0163A C002      RJMP	0x163D
(0840) 	else
(0841) 		data = INV_FILTER_5HZ;
    0163B E086      LDI	R24,6
    0163C 838C      STD	Y+4,R24
(0842) 
(0843) 	if (st.chip_cfg.lpf == data)
    0163D 802C      LDD	R2,Y+4
    0163E 9030 01B7 LDS	R3,inv_mpu.c:st+7
    01640 1432      CP	R3,R2
    01641 F419      BNE	0x1645
(0844) 		return 0;
    01642 2700      CLR	R16
    01643 2711      CLR	R17
    01644 C01C      RJMP	0x1661
(0845) 	if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
    01645 01CE      MOVW	R24,R28
    01646 9604      ADIW	R24,4
    01647 839B      STD	Y+3,R25
    01648 838A      STD	Y+2,R24
    01649 E081      LDI	R24,1
    0164A 8388      ST	Y,R24
    0164B 91E0 01B0 LDS	R30,inv_mpu.c:st
    0164D 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    0164F 8122      LDD	R18,Z+2
    01650 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    01652 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    01654 8100      LD	R16,Z
    01655 940E 0E1B CALL	_i2cwrite
    01657 2300      TST	R16
    01658 F019      BEQ	0x165C
(0846) 		return -1;
    01659 EF0F      LDI	R16,0xFF
    0165A EF1F      LDI	R17,0xFF
    0165B C005      RJMP	0x1661
(0847) 	st.chip_cfg.lpf = data;
    0165C 802C      LDD	R2,Y+4
    0165D 9220 01B7 STS	inv_mpu.c:st+7,R2
(0848) 	return 0;
    0165F 2700      CLR	R16
    01660 2711      CLR	R17
    01661 9625      ADIW	R28,5
    01662 9159      LD	R21,Y+
    01663 9149      LD	R20,Y+
    01664 9508      RET
(0849) }
(0850) 
(0851) int mpu_get_sample_rate(unsigned short *rate)
(0852) {
(0853) 	if (st.chip_cfg.dmp_on)
_mpu_get_sample_rate:
  rate                 --> R16
    01665 9020 01CD LDS	R2,inv_mpu.c:st+29
    01667 2022      TST	R2
    01668 F019      BEQ	0x166C
(0854) 		return -1;
    01669 EF0F      LDI	R16,0xFF
    0166A EF1F      LDI	R17,0xFF
    0166B C009      RJMP	0x1675
(0855) 	else
(0856) 		rate[0] = st.chip_cfg.sample_rate;
    0166C 9020 01B9 LDS	R2,inv_mpu.c:st+9
    0166E 9030 01BA LDS	R3,inv_mpu.c:st+10
    01670 01F8      MOVW	R30,R16
    01671 8231      STD	Z+1,R3
    01672 8220      ST	Z,R2
(0857) 	return 0;
    01673 2700      CLR	R16
    01674 2711      CLR	R17
    01675 9508      RET
_mpu_set_sample_rate:
  data                 --> Y,+4
  rate                 --> R20
    01676 934A      ST	-Y,R20
    01677 935A      ST	-Y,R21
    01678 01A8      MOVW	R20,R16
    01679 9725      SBIW	R28,5
(0858) }
(0859) 
(0860) int mpu_set_sample_rate(unsigned short rate)
(0861) {
(0862) 	unsigned char data;
(0863) 
(0864) 	if (!(st.chip_cfg.sensors))
    0167A 9020 01B6 LDS	R2,inv_mpu.c:st+6
    0167C 2022      TST	R2
    0167D F419      BNE	0x1681
(0865) 		return -1;
    0167E EF0F      LDI	R16,0xFF
    0167F EF1F      LDI	R17,0xFF
    01680 C058      RJMP	0x16D9
(0866) 
(0867) 	if (st.chip_cfg.dmp_on)
    01681 9020 01CD LDS	R2,inv_mpu.c:st+29
    01683 2022      TST	R2
    01684 F019      BEQ	0x1688
(0868) 		return -1;
    01685 EF0F      LDI	R16,0xFF
    01686 EF1F      LDI	R17,0xFF
    01687 C051      RJMP	0x16D9
(0869) 	else 
(0870) 	{
(0871) 		if (st.chip_cfg.lp_accel_mode) 
    01688 9020 01BF LDS	R2,inv_mpu.c:st+15
    0168A 2022      TST	R2
    0168B F079      BEQ	0x169B
(0872) 		{
(0873) 			if (rate && (rate <= 40)) 
    0168C 3040      CPI	R20,0
    0168D 0745      CPC	R20,R21
    0168E F051      BEQ	0x1699
    0168F E288      LDI	R24,0x28
    01690 E090      LDI	R25,0
    01691 1784      CP	R24,R20
    01692 0795      CPC	R25,R21
    01693 F028      BCS	0x1699
(0874) 			{
(0875) 				mpu_lp_accel_mode(rate);
    01694 2F04      MOV	R16,R20
    01695 D9F2      RCALL	_mpu_lp_accel_mode
(0876) 				return 0;
    01696 2700      CLR	R16
    01697 2711      CLR	R17
    01698 C040      RJMP	0x16D9
(0877) 			}
(0878) 
(0879) 			mpu_lp_accel_mode(0);
    01699 2700      CLR	R16
    0169A D9ED      RCALL	_mpu_lp_accel_mode
(0880) 		}
(0881) 		if (rate < 4)
    0169B 3044      CPI	R20,4
    0169C E0E0      LDI	R30,0
    0169D 075E      CPC	R21,R30
    0169E F418      BCC	0x16A2
(0882) 			rate = 4;
    0169F E044      LDI	R20,4
    016A0 E050      LDI	R21,0
    016A1 C007      RJMP	0x16A9
(0883) 		else if (rate > 1000)
    016A2 EE88      LDI	R24,0xE8
    016A3 E093      LDI	R25,3
    016A4 1784      CP	R24,R20
    016A5 0795      CPC	R25,R21
    016A6 F410      BCC	0x16A9
(0884) 			rate = 1000;
    016A7 EE48      LDI	R20,0xE8
    016A8 E053      LDI	R21,3
(0885) 
(0886) 		data = 1000 / rate - 1;
    016A9 EE08      LDI	R16,0xE8
    016AA E013      LDI	R17,3
    016AB 019A      MOVW	R18,R20
    016AC 940E 3FFE CALL	div16u
    016AE 01C8      MOVW	R24,R16
    016AF 9701      SBIW	R24,1
    016B0 838C      STD	Y+4,R24
(0887) 		if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
    016B1 01CE      MOVW	R24,R28
    016B2 9604      ADIW	R24,4
    016B3 839B      STD	Y+3,R25
    016B4 838A      STD	Y+2,R24
    016B5 E081      LDI	R24,1
    016B6 8388      ST	Y,R24
    016B7 91E0 01B0 LDS	R30,inv_mpu.c:st
    016B9 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    016BB 8121      LDD	R18,Z+1
    016BC 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    016BE 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    016C0 8100      LD	R16,Z
    016C1 940E 0E1B CALL	_i2cwrite
    016C3 2300      TST	R16
    016C4 F019      BEQ	0x16C8
(0888) 			return -1;
    016C5 EF0F      LDI	R16,0xFF
    016C6 EF1F      LDI	R17,0xFF
    016C7 C011      RJMP	0x16D9
(0889) 
(0890) 		st.chip_cfg.sample_rate = 1000 / (1 + data);
    016C8 812C      LDD	R18,Y+4
    016C9 2733      CLR	R19
    016CA 5F2F      SUBI	R18,0xFF
    016CB 4F3F      SBCI	R19,0xFF
    016CC EE08      LDI	R16,0xE8
    016CD E013      LDI	R17,3
    016CE 940E 3FE2 CALL	div16s
    016D0 9310 01BA STS	inv_mpu.c:st+10,R17
    016D2 9300 01B9 STS	inv_mpu.c:st+9,R16
(0891) 
(0892) 		mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
    016D4 9516      LSR	R17
    016D5 9507      ROR	R16
    016D6 DF36      RCALL	_mpu_set_lpf
(0893) 		return 0;
    016D7 2700      CLR	R16
    016D8 2711      CLR	R17
    016D9 9625      ADIW	R28,5
    016DA 9159      LD	R21,Y+
    016DB 9149      LD	R20,Y+
    016DC 9508      RET
_mpu_get_gyro_sens:
  sens                 --> R10
    016DD 940E 411D CALL	push_xgset300C
    016DF 0158      MOVW	R10,R16
(0894) 	}
(0895) }
(0896) 
(0897) int mpu_get_gyro_sens(float *sens)
(0898) {
(0899) 	switch (st.chip_cfg.gyro_fsr) 
    016E0 9140 01B4 LDS	R20,inv_mpu.c:st+4
    016E2 2755      CLR	R21
    016E3 3040      CPI	R20,0
    016E4 0745      CPC	R20,R21
    016E5 F069      BEQ	0x16F3
    016E6 3041      CPI	R20,1
    016E7 E0E0      LDI	R30,0
    016E8 075E      CPC	R21,R30
    016E9 F099      BEQ	0x16FD
    016EA 3042      CPI	R20,2
    016EB E0E0      LDI	R30,0
    016EC 075E      CPC	R21,R30
    016ED F0C9      BEQ	0x1707
    016EE 3043      CPI	R20,3
    016EF E0E0      LDI	R30,0
    016F0 075E      CPC	R21,R30
    016F1 F0F9      BEQ	0x1711
    016F2 C028      RJMP	0x171B
(0900) 	{
(0901) 	case INV_FSR_250DPS:
(0902) 		sens[0] = 131.f;
    016F3 EB06      LDI	R16,0xB6
    016F4 E010      LDI	R17,0
    016F5 940E 409A CALL	elpm32
    016F7 01F5      MOVW	R30,R10
    016F8 8300      ST	Z,R16
    016F9 8311      STD	Z+1,R17
    016FA 8322      STD	Z+2,R18
    016FB 8333      STD	Z+3,R19
(0903) 		break;
    016FC C021      RJMP	0x171E
(0904) 	case INV_FSR_500DPS:
(0905) 		sens[0] = 65.5f;
    016FD EB02      LDI	R16,0xB2
    016FE E010      LDI	R17,0
    016FF 940E 409A CALL	elpm32
    01701 01F5      MOVW	R30,R10
    01702 8300      ST	Z,R16
    01703 8311      STD	Z+1,R17
    01704 8322      STD	Z+2,R18
    01705 8333      STD	Z+3,R19
(0906) 		break;
    01706 C017      RJMP	0x171E
(0907) 	case INV_FSR_1000DPS:
(0908) 		sens[0] = 32.8f;
    01707 EA0E      LDI	R16,0xAE
    01708 E010      LDI	R17,0
    01709 940E 409A CALL	elpm32
    0170B 01F5      MOVW	R30,R10
    0170C 8300      ST	Z,R16
    0170D 8311      STD	Z+1,R17
    0170E 8322      STD	Z+2,R18
    0170F 8333      STD	Z+3,R19
(0909) 		break;
    01710 C00D      RJMP	0x171E
(0910) 	case INV_FSR_2000DPS:
(0911) 		sens[0] = 16.4f;
    01711 EA0A      LDI	R16,0xAA
    01712 E010      LDI	R17,0
    01713 940E 409A CALL	elpm32
    01715 01F5      MOVW	R30,R10
    01716 8300      ST	Z,R16
    01717 8311      STD	Z+1,R17
    01718 8322      STD	Z+2,R18
    01719 8333      STD	Z+3,R19
(0912) 		break;
    0171A C003      RJMP	0x171E
(0913) 	default:
(0914) 		return -1;
    0171B EF0F      LDI	R16,0xFF
    0171C EF1F      LDI	R17,0xFF
    0171D C002      RJMP	0x1720
(0915) 	}
(0916) 	return 0;
    0171E 2700      CLR	R16
    0171F 2711      CLR	R17
    01720 940C 4122 JMP	pop_xgset300C
_mpu_get_accel_sens:
  sens                 --> R16
    01722 934A      ST	-Y,R20
    01723 935A      ST	-Y,R21
(0917) }
(0918) 
(0919) int mpu_get_accel_sens(unsigned short *sens)
(0920) {
(0921) 	switch (st.chip_cfg.accel_fsr) 
    01724 9140 01B5 LDS	R20,inv_mpu.c:st+5
    01726 2755      CLR	R21
    01727 3040      CPI	R20,0
    01728 0745      CPC	R20,R21
    01729 F069      BEQ	0x1737
    0172A 3041      CPI	R20,1
    0172B E0E0      LDI	R30,0
    0172C 075E      CPC	R21,R30
    0172D F079      BEQ	0x173D
    0172E 3042      CPI	R20,2
    0172F E0E0      LDI	R30,0
    01730 075E      CPC	R21,R30
    01731 F089      BEQ	0x1743
    01732 3043      CPI	R20,3
    01733 E0E0      LDI	R30,0
    01734 075E      CPC	R21,R30
    01735 F099      BEQ	0x1749
    01736 C018      RJMP	0x174F
(0922) 	{
(0923) 	case INV_FSR_2G:
(0924) 		sens[0] = 16384;
    01737 E080      LDI	R24,0
    01738 E490      LDI	R25,0x40
    01739 01F8      MOVW	R30,R16
    0173A 8391      STD	Z+1,R25
    0173B 8380      ST	Z,R24
(0925) 		break;
    0173C C015      RJMP	0x1752
(0926) 	case INV_FSR_4G:
(0927) 		sens[0] = 8092;
    0173D E98C      LDI	R24,0x9C
    0173E E19F      LDI	R25,0x1F
    0173F 01F8      MOVW	R30,R16
    01740 8391      STD	Z+1,R25
    01741 8380      ST	Z,R24
(0928) 		break;
    01742 C00F      RJMP	0x1752
(0929) 	case INV_FSR_8G:
(0930) 		sens[0] = 4096;
    01743 E080      LDI	R24,0
    01744 E190      LDI	R25,0x10
    01745 01F8      MOVW	R30,R16
    01746 8391      STD	Z+1,R25
    01747 8380      ST	Z,R24
(0931) 		break;
    01748 C009      RJMP	0x1752
(0932) 	case INV_FSR_16G:
(0933) 		sens[0] = 2048;
    01749 E080      LDI	R24,0
    0174A E098      LDI	R25,0x8
    0174B 01F8      MOVW	R30,R16
    0174C 8391      STD	Z+1,R25
    0174D 8380      ST	Z,R24
(0934) 		break;
    0174E C003      RJMP	0x1752
(0935) 	default:
(0936) 		return -1;
    0174F EF0F      LDI	R16,0xFF
    01750 EF1F      LDI	R17,0xFF
    01751 C00D      RJMP	0x175F
(0937) 	}
(0938) 	if (st.chip_cfg.accel_half)
    01752 9020 01BE LDS	R2,inv_mpu.c:st+14
    01754 2022      TST	R2
    01755 F039      BEQ	0x175D
(0939) 		sens[0] >>= 1;
    01756 01F8      MOVW	R30,R16
    01757 8020      LD	R2,Z
    01758 8031      LDD	R3,Z+1
    01759 9436      LSR	R3
    0175A 9427      ROR	R2
    0175B 8231      STD	Z+1,R3
    0175C 8220      ST	Z,R2
(0940) 	return 0;
    0175D 2700      CLR	R16
    0175E 2711      CLR	R17
    0175F 9159      LD	R21,Y+
    01760 9149      LD	R20,Y+
    01761 9508      RET
(0941) }
(0942) 
(0943) int mpu_get_fifo_config(unsigned char *sensors)
(0944) {
(0945) 	sensors[0] = st.chip_cfg.fifo_enable;
_mpu_get_fifo_config:
  sensors              --> R16
    01762 9020 01BB LDS	R2,inv_mpu.c:st+11
    01764 01F8      MOVW	R30,R16
    01765 8220      ST	Z,R2
(0946) 	return 0;
    01766 2700      CLR	R16
    01767 2711      CLR	R17
    01768 9508      RET
_mpu_configure_fifo:
  prev                 --> R10
  result               --> R20
  sensors              --> R22
    01769 940E 4131 CALL	push_xgsetF00C
    0176B 2F60      MOV	R22,R16
(0947) }
(0948) 
(0949) int mpu_configure_fifo(unsigned char sensors)
(0950) {
(0951) 	unsigned char prev;
(0952) 	int result = 0;
    0176C 2744      CLR	R20
    0176D 2755      CLR	R21
(0953) 
(0954) 	sensors &= ~INV_XYZ_COMPASS;
    0176E 7F6E      ANDI	R22,0xFE
(0955) 
(0956) 	if (st.chip_cfg.dmp_on)
    0176F 9020 01CD LDS	R2,inv_mpu.c:st+29
    01771 2022      TST	R2
    01772 F019      BEQ	0x1776
(0957) 		return 0;
    01773 2700      CLR	R16
    01774 2711      CLR	R17
    01775 C02F      RJMP	0x17A5
(0958) 	else {
(0959) 		if (!(st.chip_cfg.sensors))
    01776 9020 01B6 LDS	R2,inv_mpu.c:st+6
    01778 2022      TST	R2
    01779 F419      BNE	0x177D
(0960) 			return -1;
    0177A EF0F      LDI	R16,0xFF
    0177B EF1F      LDI	R17,0xFF
    0177C C028      RJMP	0x17A5
(0961) 		prev = st.chip_cfg.fifo_enable;
    0177D 90A0 01BB LDS	R10,inv_mpu.c:st+11
(0962) 		st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
    0177F 9020 01B6 LDS	R2,inv_mpu.c:st+6
    01781 2E36      MOV	R3,R22
    01782 2032      AND	R3,R2
    01783 9230 01BB STS	inv_mpu.c:st+11,R3
(0963) 		if (st.chip_cfg.fifo_enable != sensors)
    01785 1636      CP	R3,R22
    01786 F019      BEQ	0x178A
(0964) 
(0965) 			result = -1;
    01787 EF4F      LDI	R20,0xFF
    01788 EF5F      LDI	R21,0xFF
    01789 C002      RJMP	0x178C
(0966) 		else
(0967) 			result = 0;
    0178A 2744      CLR	R20
    0178B 2755      CLR	R21
(0968) 		if (sensors || st.chip_cfg.lp_accel_mode)
    0178C 2366      TST	R22
    0178D F421      BNE	0x1792
    0178E 9020 01BF LDS	R2,inv_mpu.c:st+15
    01790 2022      TST	R2
    01791 F021      BEQ	0x1796
(0969) 			set_int_enable(1);
    01792 E001      LDI	R16,1
    01793 940E 0ED2 CALL	inv_mpu.c:set_int_enable
    01795 C003      RJMP	0x1799
(0970) 		else
(0971) 			set_int_enable(0);
    01796 2700      CLR	R16
    01797 940E 0ED2 CALL	inv_mpu.c:set_int_enable
(0972) 		if (sensors) 
    01799 2366      TST	R22
    0179A F049      BEQ	0x17A4
(0973) 		{
(0974) 			if (mpu_reset_fifo()) 
    0179B DB9A      RCALL	_mpu_reset_fifo
    0179C 3000      CPI	R16,0
    0179D 0701      CPC	R16,R17
    0179E F029      BEQ	0x17A4
(0975) 			{
(0976) 				st.chip_cfg.fifo_enable = prev;
    0179F 92A0 01BB STS	inv_mpu.c:st+11,R10
(0977) 				return -1;
    017A1 EF0F      LDI	R16,0xFF
    017A2 EF1F      LDI	R17,0xFF
    017A3 C001      RJMP	0x17A5
(0978) 			}
(0979) 		}
(0980) 	}
(0981) 
(0982) 	return result;
    017A4 018A      MOVW	R16,R20
    017A5 940C 4138 JMP	pop_xgsetF00C
(0983) }
(0984) 
(0985) int mpu_get_power_state(unsigned char *power_on)
(0986) {
(0987) 	if (st.chip_cfg.sensors)
_mpu_get_power_state:
  power_on             --> R16
    017A7 9020 01B6 LDS	R2,inv_mpu.c:st+6
    017A9 2022      TST	R2
    017AA F021      BEQ	0x17AF
(0988) 		power_on[0] = 1;
    017AB E081      LDI	R24,1
    017AC 01F8      MOVW	R30,R16
    017AD 8380      ST	Z,R24
    017AE C003      RJMP	0x17B2
(0989) 	else
(0990) 		power_on[0] = 0;
    017AF 2422      CLR	R2
    017B0 01F8      MOVW	R30,R16
    017B1 8220      ST	Z,R2
(0991) 	return 0;
    017B2 2700      CLR	R16
    017B3 2711      CLR	R17
    017B4 9508      RET
_mpu_set_sensors:
  data                 --> Y,+4
  sensors              --> R20
    017B5 934A      ST	-Y,R20
    017B6 2F40      MOV	R20,R16
    017B7 9725      SBIW	R28,5
(0992) }
(0993) 
(0994) int mpu_set_sensors(unsigned char sensors)
(0995) {
(0996) 	unsigned char data;
(0997) 
(0998) 	if (sensors & INV_XYZ_GYRO)
    017B8 2F84      MOV	R24,R20
    017B9 7780      ANDI	R24,0x70
    017BA F019      BEQ	0x17BE
(0999) 		data = INV_CLK_PLL;
    017BB E081      LDI	R24,1
    017BC 838C      STD	Y+4,R24
    017BD C007      RJMP	0x17C5
(1000) 	else if (sensors)
    017BE 2344      TST	R20
    017BF F019      BEQ	0x17C3
(1001) 		data = 0;
    017C0 2422      CLR	R2
    017C1 822C      STD	Y+4,R2
    017C2 C002      RJMP	0x17C5
(1002) 	else
(1003) 		data = BIT_SLEEP;
    017C3 E480      LDI	R24,0x40
    017C4 838C      STD	Y+4,R24
(1004) 	if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) 
    017C5 01CE      MOVW	R24,R28
    017C6 9604      ADIW	R24,4
    017C7 839B      STD	Y+3,R25
    017C8 838A      STD	Y+2,R24
    017C9 E081      LDI	R24,1
    017CA 8388      ST	Y,R24
    017CB 91E0 01B0 LDS	R30,inv_mpu.c:st
    017CD 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    017CF 8922      LDD	R18,Z+18
    017D0 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    017D2 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    017D4 8100      LD	R16,Z
    017D5 940E 0E1B CALL	_i2cwrite
    017D7 2300      TST	R16
    017D8 F031      BEQ	0x17DF
(1005) 	{
(1006) 		st.chip_cfg.sensors = 0;
    017D9 2422      CLR	R2
    017DA 9220 01B6 STS	inv_mpu.c:st+6,R2
(1007) 		return -1;
    017DC EF0F      LDI	R16,0xFF
    017DD EF1F      LDI	R17,0xFF
    017DE C045      RJMP	0x1824
(1008) 	}
(1009) 	st.chip_cfg.clk_src = data & ~BIT_SLEEP;
    017DF 818C      LDD	R24,Y+4
    017E0 7B8F      ANDI	R24,0xBF
    017E1 9380 01B8 STS	inv_mpu.c:st+8,R24
(1010) 
(1011) 	data = 0;
    017E3 2422      CLR	R2
    017E4 822C      STD	Y+4,R2
(1012) 	if (!(sensors & INV_X_GYRO))
    017E5 FD46      SBRC	R20,6
    017E6 C003      RJMP	0x17EA
(1013) 		data |= BIT_STBY_XG;
    017E7 2D82      MOV	R24,R2
    017E8 6084      ORI	R24,4
    017E9 838C      STD	Y+4,R24
(1014) 	if (!(sensors & INV_Y_GYRO))
    017EA FD45      SBRC	R20,5
    017EB C003      RJMP	0x17EF
(1015) 		data |= BIT_STBY_YG;
    017EC 818C      LDD	R24,Y+4
    017ED 6082      ORI	R24,2
    017EE 838C      STD	Y+4,R24
(1016) 	if (!(sensors & INV_Z_GYRO))
    017EF FD44      SBRC	R20,4
    017F0 C003      RJMP	0x17F4
(1017) 		data |= BIT_STBY_ZG;
    017F1 818C      LDD	R24,Y+4
    017F2 6081      ORI	R24,1
    017F3 838C      STD	Y+4,R24
(1018) 	if (!(sensors & INV_XYZ_ACCEL))
    017F4 FD43      SBRC	R20,3
    017F5 C003      RJMP	0x17F9
(1019) 		data |= BIT_STBY_XYZA;
    017F6 818C      LDD	R24,Y+4
    017F7 6388      ORI	R24,0x38
    017F8 838C      STD	Y+4,R24
(1020) 	if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) 
    017F9 01CE      MOVW	R24,R28
    017FA 9604      ADIW	R24,4
    017FB 839B      STD	Y+3,R25
    017FC 838A      STD	Y+2,R24
    017FD E081      LDI	R24,1
    017FE 8388      ST	Y,R24
    017FF 91E0 01B0 LDS	R30,inv_mpu.c:st
    01801 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    01803 8923      LDD	R18,Z+19
    01804 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    01806 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    01808 8100      LD	R16,Z
    01809 940E 0E1B CALL	_i2cwrite
    0180B 2300      TST	R16
    0180C F031      BEQ	0x1813
(1021) 	{
(1022) 		st.chip_cfg.sensors = 0;
    0180D 2422      CLR	R2
    0180E 9220 01B6 STS	inv_mpu.c:st+6,R2
(1023) 		return -1;
    01810 EF0F      LDI	R16,0xFF
    01811 EF1F      LDI	R17,0xFF
    01812 C011      RJMP	0x1824
(1024) 	}
(1025) 
(1026) 	if (sensors && (sensors != INV_XYZ_ACCEL))
    01813 2344      TST	R20
    01814 F021      BEQ	0x1819
    01815 3048      CPI	R20,0x8
    01816 F011      BEQ	0x1819
(1027) 
(1028) 		mpu_set_int_latched(0);
    01817 2700      CLR	R16
    01818 D228      RCALL	_mpu_set_int_latched
(1029) 
(1030) 	st.chip_cfg.sensors = sensors;
    01819 9340 01B6 STS	inv_mpu.c:st+6,R20
(1031) 	st.chip_cfg.lp_accel_mode = 0;
    0181B 2422      CLR	R2
    0181C 9220 01BF STS	inv_mpu.c:st+15,R2
(1032) 	delay_ms(50);
    0181E E302      LDI	R16,0x32
    0181F E010      LDI	R17,0
    01820 940E 0D6E CALL	_delay_ms
(1033) 	return 0;
    01822 2700      CLR	R16
    01823 2711      CLR	R17
    01824 9625      ADIW	R28,5
    01825 9149      LD	R20,Y+
    01826 9508      RET
_mpu_get_int_status:
  tmp                  --> Y,+4
  status               --> R10
    01827 92AA      ST	-Y,R10
    01828 92BA      ST	-Y,R11
    01829 0158      MOVW	R10,R16
    0182A 9726      SBIW	R28,6
(1034) }
(1035) 
(1036) int mpu_get_int_status(short *status)
(1037) {
(1038) 	unsigned char tmp[2];
(1039) 	if (!st.chip_cfg.sensors)
    0182B 9020 01B6 LDS	R2,inv_mpu.c:st+6
    0182D 2022      TST	R2
    0182E F419      BNE	0x1832
(1040) 		return -1;
    0182F EF0F      LDI	R16,0xFF
    01830 EF1F      LDI	R17,0xFF
    01831 C01E      RJMP	0x1850
(1041) 	if (i2c_read(st.hw->addr, st.reg->dmp_int_status, 2, tmp))
    01832 01CE      MOVW	R24,R28
    01833 9604      ADIW	R24,4
    01834 839B      STD	Y+3,R25
    01835 838A      STD	Y+2,R24
    01836 E082      LDI	R24,2
    01837 8388      ST	Y,R24
    01838 91E0 01B0 LDS	R30,inv_mpu.c:st
    0183A 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    0183C 8920      LDD	R18,Z+16
    0183D 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    0183F 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    01841 8100      LD	R16,Z
    01842 940E 0E31 CALL	_i2cread
    01844 2300      TST	R16
    01845 F019      BEQ	0x1849
(1042) 		return -1;
    01846 EF0F      LDI	R16,0xFF
    01847 EF1F      LDI	R17,0xFF
    01848 C007      RJMP	0x1850
(1043) 	status[0] = (tmp[0] << 8) | tmp[1];
    01849 802D      LDD	R2,Y+5
    0184A 803C      LDD	R3,Y+4
    0184B 01F5      MOVW	R30,R10
    0184C 8231      STD	Z+1,R3
    0184D 8220      ST	Z,R2
(1044) 	return 0;
    0184E 2700      CLR	R16
    0184F 2711      CLR	R17
    01850 9626      ADIW	R28,6
    01851 90B9      LD	R11,Y+
    01852 90A9      LD	R10,Y+
    01853 9508      RET
_mpu_read_fifo:
  fifo_count           --> R14
  packet_size          --> R12
  data                 --> Y,+4
  index                --> R20
  more                 --> R22
  sensors              --> Y,+32
  timestamp            --> R10
  accel                --> Y,+28
  gyro                 --> Y,+26
    01854 940E 3FCD CALL	push_arg4
    01856 940E 4112 CALL	push_xgsetF0FC
    01858 9760      SBIW	R28,0x10
    01859 8CAE      LDD	R10,Y+30
    0185A 8CBF      LDD	R11,Y+31
    0185B A16A      LDD	R22,Y+34
    0185C A17B      LDD	R23,Y+35
(1045) }
(1046) 
(1047) int mpu_read_fifo(short *gyro, short *accel, unsigned long *timestamp,
(1048) 		unsigned char *sensors, unsigned char *more)
(1049) {
(1050) 	unsigned char data[MAX_PACKET_LENGTH];
(1051) 	unsigned char packet_size = 0;
    0185D 24CC      CLR	R12
(1052) 	unsigned short fifo_count, index = 0;
    0185E 2744      CLR	R20
    0185F 2755      CLR	R21
(1053) 
(1054) 	if (st.chip_cfg.dmp_on)
    01860 9020 01CD LDS	R2,inv_mpu.c:st+29
    01862 2022      TST	R2
    01863 F019      BEQ	0x1867
(1055) 		return -1;
    01864 EF0F      LDI	R16,0xFF
    01865 EF1F      LDI	R17,0xFF
    01866 C14C      RJMP	0x19B3
(1056) 
(1057) 	sensors[0] = 0;
    01867 2422      CLR	R2
    01868 A1E8      LDD	R30,Y+32
    01869 A1F9      LDD	R31,Y+33
    0186A 8220      ST	Z,R2
(1058) 	if (!st.chip_cfg.sensors)
    0186B 9020 01B6 LDS	R2,inv_mpu.c:st+6
    0186D 2022      TST	R2
    0186E F419      BNE	0x1872
(1059) 		return -1;
    0186F EF0F      LDI	R16,0xFF
    01870 EF1F      LDI	R17,0xFF
    01871 C141      RJMP	0x19B3
(1060) 	if (!st.chip_cfg.fifo_enable)
    01872 9020 01BB LDS	R2,inv_mpu.c:st+11
    01874 2022      TST	R2
    01875 F419      BNE	0x1879
(1061) 		return -1;
    01876 EF0F      LDI	R16,0xFF
    01877 EF1F      LDI	R17,0xFF
    01878 C13A      RJMP	0x19B3
(1062) 
(1063) 	if (st.chip_cfg.fifo_enable & INV_X_GYRO)
    01879 9020 01BB LDS	R2,inv_mpu.c:st+11
    0187B FE26      SBRS	R2,6
    0187C C003      RJMP	0x1880
(1064) 		packet_size += 2;
    0187D 2D8C      MOV	R24,R12
    0187E 5F8E      SUBI	R24,0xFE
    0187F 2EC8      MOV	R12,R24
(1065) 	if (st.chip_cfg.fifo_enable & INV_Y_GYRO)
    01880 9020 01BB LDS	R2,inv_mpu.c:st+11
    01882 FE25      SBRS	R2,5
    01883 C003      RJMP	0x1887
(1066) 		packet_size += 2;
    01884 2D8C      MOV	R24,R12
    01885 5F8E      SUBI	R24,0xFE
    01886 2EC8      MOV	R12,R24
(1067) 	if (st.chip_cfg.fifo_enable & INV_Z_GYRO)
    01887 9020 01BB LDS	R2,inv_mpu.c:st+11
    01889 FE24      SBRS	R2,4
    0188A C003      RJMP	0x188E
(1068) 		packet_size += 2;
    0188B 2D8C      MOV	R24,R12
    0188C 5F8E      SUBI	R24,0xFE
    0188D 2EC8      MOV	R12,R24
(1069) 	if (st.chip_cfg.fifo_enable & INV_XYZ_ACCEL)
    0188E 9020 01BB LDS	R2,inv_mpu.c:st+11
    01890 FE23      SBRS	R2,3
    01891 C003      RJMP	0x1895
(1070) 		packet_size += 6;
    01892 2D8C      MOV	R24,R12
    01893 5F8A      SUBI	R24,0xFA
    01894 2EC8      MOV	R12,R24
(1071) 
(1072) 	if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
    01895 01CE      MOVW	R24,R28
    01896 9604      ADIW	R24,4
    01897 839B      STD	Y+3,R25
    01898 838A      STD	Y+2,R24
    01899 E082      LDI	R24,2
    0189A 8388      ST	Y,R24
    0189B 91E0 01B0 LDS	R30,inv_mpu.c:st
    0189D 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    0189F 8522      LDD	R18,Z+10
    018A0 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    018A2 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    018A4 8100      LD	R16,Z
    018A5 940E 0E31 CALL	_i2cread
    018A7 2300      TST	R16
    018A8 F019      BEQ	0x18AC
(1073) 		return -1;
    018A9 EF0F      LDI	R16,0xFF
    018AA EF1F      LDI	R17,0xFF
    018AB C107      RJMP	0x19B3
(1074) 	fifo_count = (data[0] << 8) | data[1];
    018AC 802D      LDD	R2,Y+5
    018AD 803C      LDD	R3,Y+4
    018AE 2CF3      MOV	R15,R3
    018AF 2CE2      MOV	R14,R2
(1075) 	if (fifo_count < packet_size)
    018B0 2C2C      MOV	R2,R12
    018B1 2433      CLR	R3
    018B2 14E2      CP	R14,R2
    018B3 04F3      CPC	R15,R3
    018B4 F418      BCC	0x18B8
(1076) 		return 0;
    018B5 2700      CLR	R16
    018B6 2711      CLR	R17
    018B7 C0FB      RJMP	0x19B3
(1077) 	if (fifo_count > (st.hw->max_fifo >> 1)) 
    018B8 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    018BA 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    018BC 8021      LDD	R2,Z+1
    018BD 8032      LDD	R3,Z+2
    018BE 9436      LSR	R3
    018BF 9427      ROR	R2
    018C0 142E      CP	R2,R14
    018C1 043F      CPC	R3,R15
    018C2 F4F0      BCC	0x18E1
(1078) 	{
(1079) 		if (i2c_read(st.hw->addr, st.reg->int_status, 1, data))
    018C3 01CE      MOVW	R24,R28
    018C4 9604      ADIW	R24,4
    018C5 839B      STD	Y+3,R25
    018C6 838A      STD	Y+2,R24
    018C7 E081      LDI	R24,1
    018C8 8388      ST	Y,R24
    018C9 91E0 01B0 LDS	R30,inv_mpu.c:st
    018CB 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    018CD 8921      LDD	R18,Z+17
    018CE 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    018D0 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    018D2 8100      LD	R16,Z
    018D3 940E 0E31 CALL	_i2cread
    018D5 2300      TST	R16
    018D6 F019      BEQ	0x18DA
(1080) 				return -1;
    018D7 EF0F      LDI	R16,0xFF
    018D8 EF1F      LDI	R17,0xFF
    018D9 C0D9      RJMP	0x19B3
(1081) 		if (data[0] & BIT_FIFO_OVERFLOW) {
    018DA 802C      LDD	R2,Y+4
    018DB FE24      SBRS	R2,4
    018DC C004      RJMP	0x18E1
(1082) 				mpu_reset_fifo();
    018DD DA58      RCALL	_mpu_reset_fifo
(1083) 				return -2;
    018DE EF0E      LDI	R16,0xFE
    018DF EF1F      LDI	R17,0xFF
    018E0 C0D2      RJMP	0x19B3
(1084) 		}
(1085) 	}
(1086) 	get_ms((unsigned long*)timestamp);
    018E1 0185      MOVW	R16,R10
    018E2 940E 252B CALL	_get_ms
(1087) 
(1088) 	if (i2c_read(st.hw->addr, st.reg->fifo_r_w, packet_size, data))
    018E4 01CE      MOVW	R24,R28
    018E5 9604      ADIW	R24,4
    018E6 839B      STD	Y+3,R25
    018E7 838A      STD	Y+2,R24
    018E8 82C8      ST	Y,R12
    018E9 91E0 01B0 LDS	R30,inv_mpu.c:st
    018EB 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    018ED 8523      LDD	R18,Z+11
    018EE 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    018F0 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    018F2 8100      LD	R16,Z
    018F3 940E 0E31 CALL	_i2cread
    018F5 2EA0      MOV	R10,R16
    018F6 2300      TST	R16
    018F7 F019      BEQ	0x18FB
(1089) 		return -1;
    018F8 EF0F      LDI	R16,0xFF
    018F9 EF1F      LDI	R17,0xFF
    018FA C0B8      RJMP	0x19B3
(1090) 	more[0] = fifo_count / packet_size - 1;
    018FB 2D2C      MOV	R18,R12
    018FC 2733      CLR	R19
    018FD 0187      MOVW	R16,R14
    018FE 940E 3FFE CALL	div16u
    01900 01C8      MOVW	R24,R16
    01901 9701      SBIW	R24,1
    01902 01FB      MOVW	R30,R22
    01903 8380      ST	Z,R24
(1091) 	sensors[0] = 0;
    01904 2422      CLR	R2
    01905 A1E8      LDD	R30,Y+32
    01906 A1F9      LDD	R31,Y+33
    01907 8220      ST	Z,R2
(1092) 
(1093) 	if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_XYZ_ACCEL) 
    01908 2C2C      MOV	R2,R12
    01909 2433      CLR	R3
    0190A 1542      CP	R20,R2
    0190B 0553      CPC	R21,R3
    0190C F409      BNE	0x190E
    0190D C040      RJMP	0x194E
    0190E 9020 01BB LDS	R2,inv_mpu.c:st+11
    01910 FE23      SBRS	R2,3
    01911 C03C      RJMP	0x194E
(1094) 	{
(1095) 		accel[0] = (data[index+0] << 8) | data[index+1];
    01912 01CE      MOVW	R24,R28
    01913 9604      ADIW	R24,4
    01914 01FA      MOVW	R30,R20
    01915 9631      ADIW	R30,1
    01916 0FE8      ADD	R30,R24
    01917 1FF9      ADC	R31,R25
    01918 8020      LD	R2,Z
    01919 01CE      MOVW	R24,R28
    0191A 9604      ADIW	R24,4
    0191B 01FA      MOVW	R30,R20
    0191C 0FE8      ADD	R30,R24
    0191D 1FF9      ADC	R31,R25
    0191E 8030      LD	R3,Z
    0191F 8DEC      LDD	R30,Y+28
    01920 8DFD      LDD	R31,Y+29
    01921 8231      STD	Z+1,R3
    01922 8220      ST	Z,R2
(1096) 		accel[1] = (data[index+2] << 8) | data[index+3];
    01923 01CE      MOVW	R24,R28
    01924 9604      ADIW	R24,4
    01925 01FA      MOVW	R30,R20
    01926 9633      ADIW	R30,3
    01927 0FE8      ADD	R30,R24
    01928 1FF9      ADC	R31,R25
    01929 8020      LD	R2,Z
    0192A 01CE      MOVW	R24,R28
    0192B 9604      ADIW	R24,4
    0192C 01FA      MOVW	R30,R20
    0192D 9632      ADIW	R30,2
    0192E 0FE8      ADD	R30,R24
    0192F 1FF9      ADC	R31,R25
    01930 8030      LD	R3,Z
    01931 8DEC      LDD	R30,Y+28
    01932 8DFD      LDD	R31,Y+29
    01933 8233      STD	Z+3,R3
    01934 8222      STD	Z+2,R2
(1097) 		accel[2] = (data[index+4] << 8) | data[index+5];
    01935 01CE      MOVW	R24,R28
    01936 9604      ADIW	R24,4
    01937 01FA      MOVW	R30,R20
    01938 9635      ADIW	R30,5
    01939 0FE8      ADD	R30,R24
    0193A 1FF9      ADC	R31,R25
    0193B 8020      LD	R2,Z
    0193C 01CE      MOVW	R24,R28
    0193D 9604      ADIW	R24,4
    0193E 01FA      MOVW	R30,R20
    0193F 9634      ADIW	R30,4
    01940 0FE8      ADD	R30,R24
    01941 1FF9      ADC	R31,R25
    01942 8030      LD	R3,Z
    01943 8DEC      LDD	R30,Y+28
    01944 8DFD      LDD	R31,Y+29
    01945 8235      STD	Z+5,R3
    01946 8224      STD	Z+4,R2
(1098) 		sensors[0] |= INV_XYZ_ACCEL;
    01947 A1E8      LDD	R30,Y+32
    01948 A1F9      LDD	R31,Y+33
    01949 8180      LD	R24,Z
    0194A 6088      ORI	R24,0x8
    0194B 8380      ST	Z,R24
(1099) 		index += 6;
    0194C 5F4A      SUBI	R20,0xFA
    0194D 4F5F      SBCI	R21,0xFF
(1100) 	}
(1101) 	
(1102) 	if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_X_GYRO) 
    0194E 2C2C      MOV	R2,R12
    0194F 2433      CLR	R3
    01950 1542      CP	R20,R2
    01951 0553      CPC	R21,R3
    01952 F0E1      BEQ	0x196F
    01953 9020 01BB LDS	R2,inv_mpu.c:st+11
    01955 FE26      SBRS	R2,6
    01956 C018      RJMP	0x196F
(1103) 	{
(1104) 		gyro[0] = (data[index+0] << 8) | data[index+1];
    01957 01CE      MOVW	R24,R28
    01958 9604      ADIW	R24,4
    01959 01FA      MOVW	R30,R20
    0195A 9631      ADIW	R30,1
    0195B 0FE8      ADD	R30,R24
    0195C 1FF9      ADC	R31,R25
    0195D 8020      LD	R2,Z
    0195E 01CE      MOVW	R24,R28
    0195F 9604      ADIW	R24,4
    01960 01FA      MOVW	R30,R20
    01961 0FE8      ADD	R30,R24
    01962 1FF9      ADC	R31,R25
    01963 8030      LD	R3,Z
    01964 8DEA      LDD	R30,Y+26
    01965 8DFB      LDD	R31,Y+27
    01966 8231      STD	Z+1,R3
    01967 8220      ST	Z,R2
(1105) 		sensors[0] |= INV_X_GYRO;
    01968 A1E8      LDD	R30,Y+32
    01969 A1F9      LDD	R31,Y+33
    0196A 8180      LD	R24,Z
    0196B 6480      ORI	R24,0x40
    0196C 8380      ST	Z,R24
(1106) 		index += 2;
    0196D 5F4E      SUBI	R20,0xFE
    0196E 4F5F      SBCI	R21,0xFF
(1107) 	}
(1108) 	
(1109) 	if((index != packet_size) && st.chip_cfg.fifo_enable & INV_Y_GYRO) 
    0196F 2C2C      MOV	R2,R12
    01970 2433      CLR	R3
    01971 1542      CP	R20,R2
    01972 0553      CPC	R21,R3
    01973 F0E1      BEQ	0x1990
    01974 9020 01BB LDS	R2,inv_mpu.c:st+11
    01976 FE25      SBRS	R2,5
    01977 C018      RJMP	0x1990
(1110) 	{
(1111) 		gyro[1] = (data[index+0] << 8) | data[index+1];
    01978 01CE      MOVW	R24,R28
    01979 9604      ADIW	R24,4
    0197A 01FA      MOVW	R30,R20
    0197B 9631      ADIW	R30,1
    0197C 0FE8      ADD	R30,R24
    0197D 1FF9      ADC	R31,R25
    0197E 8020      LD	R2,Z
    0197F 01CE      MOVW	R24,R28
    01980 9604      ADIW	R24,4
    01981 01FA      MOVW	R30,R20
    01982 0FE8      ADD	R30,R24
    01983 1FF9      ADC	R31,R25
    01984 8030      LD	R3,Z
    01985 8DEA      LDD	R30,Y+26
    01986 8DFB      LDD	R31,Y+27
    01987 8233      STD	Z+3,R3
    01988 8222      STD	Z+2,R2
(1112) 		sensors[0] |= INV_Y_GYRO;
    01989 A1E8      LDD	R30,Y+32
    0198A A1F9      LDD	R31,Y+33
    0198B 8180      LD	R24,Z
    0198C 6280      ORI	R24,0x20
    0198D 8380      ST	Z,R24
(1113) 		index += 2;
    0198E 5F4E      SUBI	R20,0xFE
    0198F 4F5F      SBCI	R21,0xFF
(1114) 	}
(1115) 	
(1116) 	if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_Z_GYRO) 
    01990 2C2C      MOV	R2,R12
    01991 2433      CLR	R3
    01992 1542      CP	R20,R2
    01993 0553      CPC	R21,R3
    01994 F0E1      BEQ	0x19B1
    01995 9020 01BB LDS	R2,inv_mpu.c:st+11
    01997 FE24      SBRS	R2,4
    01998 C018      RJMP	0x19B1
(1117) 	{
(1118) 		gyro[2] = (data[index+0] << 8) | data[index+1];
    01999 01CE      MOVW	R24,R28
    0199A 9604      ADIW	R24,4
    0199B 01FA      MOVW	R30,R20
    0199C 9631      ADIW	R30,1
    0199D 0FE8      ADD	R30,R24
    0199E 1FF9      ADC	R31,R25
    0199F 8020      LD	R2,Z
    019A0 01CE      MOVW	R24,R28
    019A1 9604      ADIW	R24,4
    019A2 01FA      MOVW	R30,R20
    019A3 0FE8      ADD	R30,R24
    019A4 1FF9      ADC	R31,R25
    019A5 8030      LD	R3,Z
    019A6 8DEA      LDD	R30,Y+26
    019A7 8DFB      LDD	R31,Y+27
    019A8 8235      STD	Z+5,R3
    019A9 8224      STD	Z+4,R2
(1119) 		sensors[0] |= INV_Z_GYRO;
    019AA A1E8      LDD	R30,Y+32
    019AB A1F9      LDD	R31,Y+33
    019AC 8180      LD	R24,Z
    019AD 6180      ORI	R24,0x10
    019AE 8380      ST	Z,R24
(1120) 		index += 2;
    019AF 5F4E      SUBI	R20,0xFE
    019B0 4F5F      SBCI	R21,0xFF
(1121) 	}
(1122) 
(1123) 	return 0;
    019B1 2700      CLR	R16
    019B2 2711      CLR	R17
    019B3 9660      ADIW	R28,0x10
    019B4 940E 4107 CALL	pop_xgsetF0FC
    019B6 9624      ADIW	R28,4
    019B7 9508      RET
_mpu_read_fifo_stream:
  fifo_count           --> R12
  tmp                  --> Y,+4
  more                 --> R10
  data                 --> R20
  length               --> R14
    019B8 940E 4114 CALL	push_xgset30FC
    019BA 01A9      MOVW	R20,R18
    019BB 0178      MOVW	R14,R16
    019BC 9726      SBIW	R28,6
    019BD 84AE      LDD	R10,Y+14
    019BE 84BF      LDD	R11,Y+15
(1124) }
(1125) 
(1126) int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
(1127)     unsigned char *more)
(1128) {
(1129) 	unsigned char tmp[2];
(1130) 	unsigned short fifo_count;
(1131) 	if (!st.chip_cfg.dmp_on)
    019BF 9020 01CD LDS	R2,inv_mpu.c:st+29
    019C1 2022      TST	R2
    019C2 F419      BNE	0x19C6
(1132) 		return -1;
    019C3 EF0F      LDI	R16,0xFF
    019C4 EF1F      LDI	R17,0xFF
    019C5 C073      RJMP	0x1A39
(1133) 	if (!st.chip_cfg.sensors)
    019C6 9020 01B6 LDS	R2,inv_mpu.c:st+6
    019C8 2022      TST	R2
    019C9 F419      BNE	0x19CD
(1134) 		return -1;
    019CA EF0F      LDI	R16,0xFF
    019CB EF1F      LDI	R17,0xFF
    019CC C06C      RJMP	0x1A39
(1135) 
(1136) 	if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
    019CD 01CE      MOVW	R24,R28
    019CE 9604      ADIW	R24,4
    019CF 839B      STD	Y+3,R25
    019D0 838A      STD	Y+2,R24
    019D1 E082      LDI	R24,2
    019D2 8388      ST	Y,R24
    019D3 91E0 01B0 LDS	R30,inv_mpu.c:st
    019D5 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    019D7 8522      LDD	R18,Z+10
    019D8 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    019DA 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    019DC 8100      LD	R16,Z
    019DD 940E 0E31 CALL	_i2cread
    019DF 2300      TST	R16
    019E0 F019      BEQ	0x19E4
(1137) 		return -1;
    019E1 EF0F      LDI	R16,0xFF
    019E2 EF1F      LDI	R17,0xFF
    019E3 C055      RJMP	0x1A39
(1138) 	fifo_count = (tmp[0] << 8) | tmp[1];
    019E4 802D      LDD	R2,Y+5
    019E5 803C      LDD	R3,Y+4
    019E6 2CD3      MOV	R13,R3
    019E7 2CC2      MOV	R12,R2
(1139) 	if (fifo_count < length) {
    019E8 14CE      CP	R12,R14
    019E9 04DF      CPC	R13,R15
    019EA F430      BCC	0x19F1
(1140) 		more[0] = 0;
    019EB 2422      CLR	R2
    019EC 01F5      MOVW	R30,R10
    019ED 8220      ST	Z,R2
(1141) 		return -1;
    019EE EF0F      LDI	R16,0xFF
    019EF EF1F      LDI	R17,0xFF
    019F0 C048      RJMP	0x1A39
(1142) 	}
(1143) 	if (fifo_count > (st.hw->max_fifo >> 1)) {
    019F1 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    019F3 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    019F5 8021      LDD	R2,Z+1
    019F6 8032      LDD	R3,Z+2
    019F7 9436      LSR	R3
    019F8 9427      ROR	R2
    019F9 142C      CP	R2,R12
    019FA 043D      CPC	R3,R13
    019FB F4F0      BCC	0x1A1A
(1144) 
(1145) 		if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
    019FC 01CE      MOVW	R24,R28
    019FD 9604      ADIW	R24,4
    019FE 839B      STD	Y+3,R25
    019FF 838A      STD	Y+2,R24
    01A00 E081      LDI	R24,1
    01A01 8388      ST	Y,R24
    01A02 91E0 01B0 LDS	R30,inv_mpu.c:st
    01A04 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    01A06 8921      LDD	R18,Z+17
    01A07 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    01A09 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    01A0B 8100      LD	R16,Z
    01A0C 940E 0E31 CALL	_i2cread
    01A0E 2300      TST	R16
    01A0F F019      BEQ	0x1A13
(1146) 				return -1;
    01A10 EF0F      LDI	R16,0xFF
    01A11 EF1F      LDI	R17,0xFF
    01A12 C026      RJMP	0x1A39
(1147) 		if (tmp[0] & BIT_FIFO_OVERFLOW) {
    01A13 802C      LDD	R2,Y+4
    01A14 FE24      SBRS	R2,4
    01A15 C004      RJMP	0x1A1A
(1148) 				mpu_reset_fifo();
    01A16 D91F      RCALL	_mpu_reset_fifo
(1149) 				return -2;
    01A17 EF0E      LDI	R16,0xFE
    01A18 EF1F      LDI	R17,0xFF
    01A19 C01F      RJMP	0x1A39
(1150) 		}
(1151) 	}
(1152) 
(1153) 	if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
    01A1A 835B      STD	Y+3,R21
    01A1B 834A      STD	Y+2,R20
    01A1C 82E8      ST	Y,R14
    01A1D 91E0 01B0 LDS	R30,inv_mpu.c:st
    01A1F 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    01A21 8523      LDD	R18,Z+11
    01A22 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    01A24 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    01A26 8100      LD	R16,Z
    01A27 940E 0E31 CALL	_i2cread
    01A29 2F40      MOV	R20,R16
    01A2A 2300      TST	R16
    01A2B F019      BEQ	0x1A2F
(1154) 		return -1;
    01A2C EF0F      LDI	R16,0xFF
    01A2D EF1F      LDI	R17,0xFF
    01A2E C00A      RJMP	0x1A39
(1155) 	more[0] = fifo_count / length - 1;
    01A2F 0197      MOVW	R18,R14
    01A30 0186      MOVW	R16,R12
    01A31 940E 3FFE CALL	div16u
    01A33 01C8      MOVW	R24,R16
    01A34 9701      SBIW	R24,1
    01A35 01F5      MOVW	R30,R10
    01A36 8380      ST	Z,R24
(1156) 	return 0;
    01A37 2700      CLR	R16
    01A38 2711      CLR	R17
    01A39 9626      ADIW	R28,6
    01A3A 940C 40FE JMP	pop_xgset30FC
(1157) }
(1158) 
(1159) int mpu_set_int_level(unsigned char active_low)
(1160) {
(1161)     st.chip_cfg.active_low_int = active_low;
_mpu_set_int_level:
  active_low           --> R16
    01A3C 9300 01CB STS	inv_mpu.c:st+27,R16
(1162)     return 0;
    01A3E 2700      CLR	R16
    01A3F 2711      CLR	R17
    01A40 9508      RET
_mpu_set_int_latched:
  tmp                  --> Y,+4
  enable               --> R10
    01A41 92AA      ST	-Y,R10
    01A42 2EA0      MOV	R10,R16
    01A43 9725      SBIW	R28,5
(1163) }
(1164) 
(1165) int mpu_set_int_latched(unsigned char enable)
(1166) {
(1167)     unsigned char tmp;
(1168)     if (st.chip_cfg.latched_int == enable)
    01A44 9020 01CC LDS	R2,inv_mpu.c:st+28
    01A46 142A      CP	R2,R10
    01A47 F419      BNE	0x1A4B
(1169)         return 0;
    01A48 2700      CLR	R16
    01A49 2711      CLR	R17
    01A4A C030      RJMP	0x1A7B
(1170) 
(1171)     if (enable)
    01A4B 20AA      TST	R10
    01A4C F019      BEQ	0x1A50
(1172)         tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
    01A4D E380      LDI	R24,0x30
    01A4E 838C      STD	Y+4,R24
    01A4F C002      RJMP	0x1A52
(1173)     else
(1174)         tmp = 0;
    01A50 2422      CLR	R2
    01A51 822C      STD	Y+4,R2
(1175)     if (st.chip_cfg.bypass_mode)
    01A52 9020 01BD LDS	R2,inv_mpu.c:st+13
    01A54 2022      TST	R2
    01A55 F019      BEQ	0x1A59
(1176)         tmp |= BIT_BYPASS_EN;
    01A56 818C      LDD	R24,Y+4
    01A57 6082      ORI	R24,2
    01A58 838C      STD	Y+4,R24
(1177)     if (st.chip_cfg.active_low_int)
    01A59 9020 01CB LDS	R2,inv_mpu.c:st+27
    01A5B 2022      TST	R2
    01A5C F019      BEQ	0x1A60
(1178)         tmp |= BIT_ACTL;
    01A5D 818C      LDD	R24,Y+4
    01A5E 6880      ORI	R24,0x80
    01A5F 838C      STD	Y+4,R24
(1179)     if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
    01A60 01CE      MOVW	R24,R28
    01A61 9604      ADIW	R24,4
    01A62 839B      STD	Y+3,R25
    01A63 838A      STD	Y+2,R24
    01A64 E081      LDI	R24,1
    01A65 8388      ST	Y,R24
    01A66 91E0 01B0 LDS	R30,inv_mpu.c:st
    01A68 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    01A6A 8924      LDD	R18,Z+20
    01A6B 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    01A6D 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    01A6F 8100      LD	R16,Z
    01A70 940E 0E1B CALL	_i2cwrite
    01A72 2300      TST	R16
    01A73 F019      BEQ	0x1A77
(1180)         return -1;
    01A74 EF0F      LDI	R16,0xFF
    01A75 EF1F      LDI	R17,0xFF
    01A76 C004      RJMP	0x1A7B
(1181)     st.chip_cfg.latched_int = enable;
    01A77 92A0 01CC STS	inv_mpu.c:st+28,R10
(1182)     return 0;
    01A79 2700      CLR	R16
    01A7A 2711      CLR	R17
    01A7B 9625      ADIW	R28,5
    01A7C 90A9      LD	R10,Y+
    01A7D 9508      RET
inv_mpu.c:get_accel_prod_shift:
  tmp                  --> Y,+7
  shift_code           --> Y,+4
  ii                   --> R20
  st_shift             --> R10
    01A7E 940E 414D CALL	push_xgsetF03C
    01A80 0158      MOVW	R10,R16
    01A81 972B      SBIW	R28,0xB
(1183) }
(1184) 
(1185) static int get_accel_prod_shift(float *st_shift)
(1186) {
(1187) 	unsigned char tmp[4], shift_code[3], ii;
(1188) 
(1189) 	if (i2c_read(st.hw->addr, 0x0D, 4, tmp))
    01A82 01CE      MOVW	R24,R28
    01A83 9607      ADIW	R24,7
    01A84 839B      STD	Y+3,R25
    01A85 838A      STD	Y+2,R24
    01A86 E084      LDI	R24,4
    01A87 8388      ST	Y,R24
    01A88 E02D      LDI	R18,0xD
    01A89 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    01A8B 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    01A8D 8100      LD	R16,Z
    01A8E 940E 0E31 CALL	_i2cread
    01A90 2300      TST	R16
    01A91 F019      BEQ	0x1A95
(1190) 		return 0x07;
    01A92 E007      LDI	R16,7
    01A93 E010      LDI	R17,0
    01A94 C075      RJMP	0x1B0A
(1191) 
(1192) 	shift_code[0] = ((tmp[0] & 0xE0) >> 3) | ((tmp[3] & 0x30) >> 4);
    01A95 858A      LDD	R24,Y+10
    01A96 7380      ANDI	R24,0x30
    01A97 9582      SWAP	R24
    01A98 708F      ANDI	R24,0xF
    01A99 819F      LDD	R25,Y+7
    01A9A 7E90      ANDI	R25,0xE0
    01A9B 9596      LSR	R25
    01A9C 9596      LSR	R25
    01A9D 9596      LSR	R25
    01A9E 2B98      OR	R25,R24
    01A9F 839C      STD	Y+4,R25
(1193) 	shift_code[1] = ((tmp[1] & 0xE0) >> 3) | ((tmp[3] & 0x0C) >> 2);
    01AA0 858A      LDD	R24,Y+10
    01AA1 708C      ANDI	R24,0xC
    01AA2 2F98      MOV	R25,R24
    01AA3 9596      LSR	R25
    01AA4 9596      LSR	R25
    01AA5 8588      LDD	R24,Y+8
    01AA6 7E80      ANDI	R24,0xE0
    01AA7 9586      LSR	R24
    01AA8 9586      LSR	R24
    01AA9 9586      LSR	R24
    01AAA 2B89      OR	R24,R25
    01AAB 838D      STD	Y+5,R24
(1194) 	shift_code[2] = ((tmp[2] & 0xE0) >> 3) | (tmp[3] & 0x03);
    01AAC 858A      LDD	R24,Y+10
    01AAD 7083      ANDI	R24,3
    01AAE 8599      LDD	R25,Y+9
    01AAF 7E90      ANDI	R25,0xE0
    01AB0 9596      LSR	R25
    01AB1 9596      LSR	R25
    01AB2 9596      LSR	R25
    01AB3 2B98      OR	R25,R24
    01AB4 839E      STD	Y+6,R25
(1195) 	for (ii = 0; ii < 3; ii++) 
    01AB5 2744      CLR	R20
    01AB6 C04E      RJMP	0x1B05
(1196) 	{
(1197) 		if (!shift_code[ii]) 
    01AB7 01CE      MOVW	R24,R28
    01AB8 9604      ADIW	R24,4
    01AB9 2FE4      MOV	R30,R20
    01ABA 27FF      CLR	R31
    01ABB 0FE8      ADD	R30,R24
    01ABC 1FF9      ADC	R31,R25
    01ABD 8020      LD	R2,Z
    01ABE 2022      TST	R2
    01ABF F489      BNE	0x1AD1
(1198) 		{
(1199) 			st_shift[ii] = 0.f;
    01AC0 2FE4      MOV	R30,R20
    01AC1 27FF      CLR	R31
    01AC2 0FEE      LSL	R30
    01AC3 1FFF      ROL	R31
    01AC4 0FEE      LSL	R30
    01AC5 1FFF      ROL	R31
    01AC6 0DEA      ADD	R30,R10
    01AC7 1DFB      ADC	R31,R11
    01AC8 EA06      LDI	R16,0xA6
    01AC9 E010      LDI	R17,0
    01ACA 940E 409A CALL	elpm32
    01ACC 8300      ST	Z,R16
    01ACD 8311      STD	Z+1,R17
    01ACE 8322      STD	Z+2,R18
    01ACF 8333      STD	Z+3,R19
(1200) 			continue;
    01AD0 C033      RJMP	0x1B04
(1201) 		}
(1202) 
(1203) 		st_shift[ii] = 0.34f;
    01AD1 2FE4      MOV	R30,R20
    01AD2 27FF      CLR	R31
    01AD3 0FEE      LSL	R30
    01AD4 1FFF      ROL	R31
    01AD5 0FEE      LSL	R30
    01AD6 1FFF      ROL	R31
    01AD7 0DEA      ADD	R30,R10
    01AD8 1DFB      ADC	R31,R11
    01AD9 EA02      LDI	R16,0xA2
    01ADA E010      LDI	R17,0
    01ADB 940E 409A CALL	elpm32
    01ADD 8300      ST	Z,R16
    01ADE 8311      STD	Z+1,R17
    01ADF 8322      STD	Z+2,R18
    01AE0 8333      STD	Z+3,R19
    01AE1 C016      RJMP	0x1AF8
(1204) 		while (--shift_code[ii])
(1205) 			st_shift[ii] *= 1.034f;
    01AE2 2E24      MOV	R2,R20
    01AE3 2433      CLR	R3
    01AE4 0C22      LSL	R2
    01AE5 1C33      ROL	R3
    01AE6 0C22      LSL	R2
    01AE7 1C33      ROL	R3
    01AE8 0C2A      ADD	R2,R10
    01AE9 1C3B      ADC	R3,R11
    01AEA 0121      MOVW	R4,R2
    01AEB E90E      LDI	R16,0x9E
    01AEC E010      LDI	R17,0
    01AED 940E 409A CALL	elpm32
    01AEF 925A      ST	-Y,R5
    01AF0 924A      ST	-Y,R4
    01AF1 940E 445F CALL	fpmule1
    01AF3 01F2      MOVW	R30,R4
    01AF4 8300      ST	Z,R16
    01AF5 8311      STD	Z+1,R17
    01AF6 8322      STD	Z+2,R18
    01AF7 8333      STD	Z+3,R19
    01AF8 01CE      MOVW	R24,R28
    01AF9 9604      ADIW	R24,4
    01AFA 2EC4      MOV	R12,R20
    01AFB 24DD      CLR	R13
    01AFC 0EC8      ADD	R12,R24
    01AFD 1ED9      ADC	R13,R25
    01AFE 01F6      MOVW	R30,R12
    01AFF 8160      LD	R22,Z
    01B00 5061      SUBI	R22,1
    01B01 8360      ST	Z,R22
    01B02 2366      TST	R22
    01B03 F6F1      BNE	0x1AE2
    01B04 9543      INC	R20
    01B05 3043      CPI	R20,3
    01B06 F408      BCC	0x1B08
    01B07 CFAF      RJMP	0x1AB7
(1206) 	}
(1207) 	return 0;
    01B08 2700      CLR	R16
    01B09 2711      CLR	R17
    01B0A 962B      ADIW	R28,0xB
    01B0B 940C 4156 JMP	pop_xgsetF03C
inv_mpu.c:accel_self_test:
  result               --> R10
  st_shift_var         --> Y,+16
  st_shift             --> Y,+4
  st_shift_cust        --> Y,+0
  jj                   --> R20
  bias_st              --> R12
  bias_regular         --> R14
    01B0D 940E 4114 CALL	push_xgset30FC
    01B0F 0169      MOVW	R12,R18
    01B10 0178      MOVW	R14,R16
    01B11 9764      SBIW	R28,0x14
(1208) }
(1209) 
(1210) static int accel_self_test(long *bias_regular, long *bias_st)
(1211) {
(1212) 	int jj, result = 0;
    01B12 24AA      CLR	R10
    01B13 24BB      CLR	R11
(1213) 	float st_shift[3], st_shift_cust, st_shift_var;
(1214) 
(1215) 	get_accel_prod_shift(st_shift);
    01B14 018E      MOVW	R16,R28
    01B15 5F0C      SUBI	R16,0xFC
    01B16 4F1F      SBCI	R17,0xFF
    01B17 DF66      RCALL	inv_mpu.c:get_accel_prod_shift
(1216) 	for(jj = 0; jj < 3; jj++) 
    01B18 2744      CLR	R20
    01B19 2755      CLR	R21
(1217) 	{
(1218) 		st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
    01B1A 011A      MOVW	R2,R20
    01B1B 0C22      LSL	R2
    01B1C 1C33      ROL	R3
    01B1D 0C22      LSL	R2
    01B1E 1C33      ROL	R3
    01B1F 0131      MOVW	R6,R2
    01B20 01F1      MOVW	R30,R2
    01B21 0DEC      ADD	R30,R12
    01B22 1DFD      ADC	R31,R13
    01B23 8020      LD	R2,Z
    01B24 8031      LDD	R3,Z+1
    01B25 8042      LDD	R4,Z+2
    01B26 8053      LDD	R5,Z+3
    01B27 01F3      MOVW	R30,R6
    01B28 0DEE      ADD	R30,R14
    01B29 1DFF      ADC	R31,R15
    01B2A 8100      LD	R16,Z
    01B2B 8111      LDD	R17,Z+1
    01B2C 8122      LDD	R18,Z+2
    01B2D 8133      LDD	R19,Z+3
    01B2E 1902      SUB	R16,R2
    01B2F 0913      SBC	R17,R3
    01B30 0924      SBC	R18,R4
    01B31 0935      SBC	R19,R5
    01B32 940E 51DC CALL	_labs
    01B34 940E 42CF CALL	long2fp
    01B36 0118      MOVW	R2,R16
    01B37 0129      MOVW	R4,R18
    01B38 EB0E      LDI	R16,0xBE
    01B39 E010      LDI	R17,0
    01B3A 940E 409A CALL	elpm32
    01B3C 933A      ST	-Y,R19
    01B3D 932A      ST	-Y,R18
    01B3E 931A      ST	-Y,R17
    01B3F 930A      ST	-Y,R16
    01B40 0181      MOVW	R16,R2
    01B41 0192      MOVW	R18,R4
    01B42 940E 42EF CALL	fpdiv2
    01B44 8308      ST	Y,R16
    01B45 8319      STD	Y+1,R17
    01B46 832A      STD	Y+2,R18
    01B47 833B      STD	Y+3,R19
(1219) 		if (st_shift[jj]) 
    01B48 01CE      MOVW	R24,R28
    01B49 9604      ADIW	R24,4
    01B4A 01FA      MOVW	R30,R20
    01B4B 0FEE      LSL	R30
    01B4C 1FFF      ROL	R31
    01B4D 0FEE      LSL	R30
    01B4E 1FFF      ROL	R31
    01B4F 0FE8      ADD	R30,R24
    01B50 1FF9      ADC	R31,R25
    01B51 8020      LD	R2,Z
    01B52 8031      LDD	R3,Z+1
    01B53 8042      LDD	R4,Z+2
    01B54 8053      LDD	R5,Z+3
    01B55 EA06      LDI	R16,0xA6
    01B56 E010      LDI	R17,0
    01B57 940E 409A CALL	elpm32
    01B59 933A      ST	-Y,R19
    01B5A 932A      ST	-Y,R18
    01B5B 931A      ST	-Y,R17
    01B5C 930A      ST	-Y,R16
    01B5D 0181      MOVW	R16,R2
    01B5E 0192      MOVW	R18,R4
    01B5F 940E 44A7 CALL	fpcmp2
    01B61 F409      BNE	0x1B63
    01B62 C040      RJMP	0x1BA3
(1220) 		{
(1221) 			st_shift_var = st_shift_cust / st_shift[jj] - 1.f;
    01B63 8108      LD	R16,Y
    01B64 8119      LDD	R17,Y+1
    01B65 812A      LDD	R18,Y+2
    01B66 813B      LDD	R19,Y+3
    01B67 01CE      MOVW	R24,R28
    01B68 9604      ADIW	R24,4
    01B69 011A      MOVW	R2,R20
    01B6A 0C22      LSL	R2
    01B6B 1C33      ROL	R3
    01B6C 0C22      LSL	R2
    01B6D 1C33      ROL	R3
    01B6E 0E28      ADD	R2,R24
    01B6F 1E39      ADC	R3,R25
    01B70 923A      ST	-Y,R3
    01B71 922A      ST	-Y,R2
    01B72 940E 42E6 CALL	fpdiv1
    01B74 0118      MOVW	R2,R16
    01B75 0129      MOVW	R4,R18
    01B76 E90A      LDI	R16,0x9A
    01B77 E010      LDI	R17,0
    01B78 940E 409A CALL	elpm32
    01B7A 933A      ST	-Y,R19
    01B7B 932A      ST	-Y,R18
    01B7C 931A      ST	-Y,R17
    01B7D 930A      ST	-Y,R16
    01B7E 0181      MOVW	R16,R2
    01B7F 0192      MOVW	R18,R4
    01B80 940E 4278 CALL	fpsub2
    01B82 8B08      STD	Y+16,R16
    01B83 8B19      STD	Y+17,R17
    01B84 8B2A      STD	Y+18,R18
    01B85 8B3B      STD	Y+19,R19
(1222) 		
(1223) 			if (fabs(st_shift_var) > test.max_accel_var)
    01B86 8908      LDD	R16,Y+16
    01B87 8919      LDD	R17,Y+17
    01B88 892A      LDD	R18,Y+18
    01B89 893B      LDD	R19,Y+19
    01B8A 940E 4AEA CALL	_fabsf
    01B8C 933A      ST	-Y,R19
    01B8D 932A      ST	-Y,R18
    01B8E 931A      ST	-Y,R17
    01B8F 930A      ST	-Y,R16
    01B90 9120 01AE LDS	R18,test+37
    01B92 9130 01AF LDS	R19,test+38
    01B94 9100 01AC LDS	R16,test+35
    01B96 9110 01AD LDS	R17,test+36
    01B98 940E 44A7 CALL	fpcmp2
    01B9A F544      BGE	0x1BC3
(1224) 				result |= 1 << jj;
    01B9B E001      LDI	R16,1
    01B9C E010      LDI	R17,0
    01B9D 019A      MOVW	R18,R20
    01B9E 940E 4196 CALL	lsl16
    01BA0 2AA0      OR	R10,R16
    01BA1 2AB1      OR	R11,R17
(1225) 		} 
    01BA2 C020      RJMP	0x1BC3
(1226) 		else if ((st_shift_cust < test.min_g) ||
    01BA3 8108      LD	R16,Y
    01BA4 8119      LDD	R17,Y+1
    01BA5 812A      LDD	R18,Y+2
    01BA6 813B      LDD	R19,Y+3
    01BA7 EA84      LDI	R24,0xA4
    01BA8 E091      LDI	R25,1
    01BA9 939A      ST	-Y,R25
    01BAA 938A      ST	-Y,R24
    01BAB 940E 449C CALL	fpcmp1
    01BAD F074      BLT	0x1BBC
    01BAE 01CE      MOVW	R24,R28
    01BAF 9120 01AA LDS	R18,test+33
    01BB1 9130 01AB LDS	R19,test+34
    01BB3 9100 01A8 LDS	R16,test+31
    01BB5 9110 01A9 LDS	R17,test+32
    01BB7 939A      ST	-Y,R25
    01BB8 938A      ST	-Y,R24
    01BB9 940E 449C CALL	fpcmp1
    01BBB F43C      BGE	0x1BC3
(1227) 			(st_shift_cust > test.max_g))
(1228) 			result |= 1 << jj;
    01BBC E001      LDI	R16,1
    01BBD E010      LDI	R17,0
    01BBE 019A      MOVW	R18,R20
    01BBF 940E 4196 CALL	lsl16
    01BC1 2AA0      OR	R10,R16
    01BC2 2AB1      OR	R11,R17
    01BC3 5F4F      SUBI	R20,0xFF
    01BC4 4F5F      SBCI	R21,0xFF
    01BC5 3043      CPI	R20,3
    01BC6 E0E0      LDI	R30,0
    01BC7 075E      CPC	R21,R30
    01BC8 F40C      BGE	0x1BCA
    01BC9 CF50      RJMP	0x1B1A
(1229) 	}
(1230) 
(1231) 	return result;
    01BCA 0185      MOVW	R16,R10
    01BCB 9664      ADIW	R28,0x14
    01BCC 940C 40FE JMP	pop_xgset30FC
inv_mpu.c:gyro_self_test:
  result               --> R10
  st_shift_var         --> Y,+15
  st_shift_cust        --> Y,+11
  st_shift             --> Y,+7
  tmp                  --> Y,+4
  jj                   --> R20
  bias_st              --> R12
  bias_regular         --> Y,+29
    01BCE 940E 3FCD CALL	push_arg4
    01BD0 940E 4112 CALL	push_xgsetF0FC
    01BD2 0169      MOVW	R12,R18
    01BD3 9763      SBIW	R28,0x13
(1232) }
(1233) 
(1234) static int gyro_self_test(long *bias_regular, long *bias_st)
(1235) {
(1236) 	int jj, result = 0;
    01BD4 24AA      CLR	R10
    01BD5 24BB      CLR	R11
(1237) 	unsigned char tmp[3];
(1238) 	float st_shift, st_shift_cust, st_shift_var;
(1239) 
(1240) 	if (i2c_read(st.hw->addr, 0x0D, 3, tmp))
    01BD6 01CE      MOVW	R24,R28
    01BD7 9604      ADIW	R24,4
    01BD8 839B      STD	Y+3,R25
    01BD9 838A      STD	Y+2,R24
    01BDA E083      LDI	R24,3
    01BDB 8388      ST	Y,R24
    01BDC E02D      LDI	R18,0xD
    01BDD 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    01BDF 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    01BE1 8100      LD	R16,Z
    01BE2 940E 0E31 CALL	_i2cread
    01BE4 2300      TST	R16
    01BE5 F019      BEQ	0x1BE9
(1241) 		return 0x07;
    01BE6 E007      LDI	R16,7
    01BE7 E010      LDI	R17,0
    01BE8 C0DC      RJMP	0x1CC5
(1242) 
(1243) 	tmp[0] &= 0x1F;
    01BE9 818C      LDD	R24,Y+4
    01BEA 718F      ANDI	R24,0x1F
    01BEB 838C      STD	Y+4,R24
(1244) 	tmp[1] &= 0x1F;
    01BEC 818D      LDD	R24,Y+5
    01BED 718F      ANDI	R24,0x1F
    01BEE 838D      STD	Y+5,R24
(1245) 	tmp[2] &= 0x1F;
    01BEF 818E      LDD	R24,Y+6
    01BF0 718F      ANDI	R24,0x1F
    01BF1 838E      STD	Y+6,R24
(1246) 
(1247) 	for (jj = 0; jj < 3; jj++) {
    01BF2 2744      CLR	R20
    01BF3 2755      CLR	R21
(1248) 		st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
    01BF4 011A      MOVW	R2,R20
    01BF5 0C22      LSL	R2
    01BF6 1C33      ROL	R3
    01BF7 0C22      LSL	R2
    01BF8 1C33      ROL	R3
    01BF9 0131      MOVW	R6,R2
    01BFA 01F1      MOVW	R30,R2
    01BFB 0DEC      ADD	R30,R12
    01BFC 1DFD      ADC	R31,R13
    01BFD 8020      LD	R2,Z
    01BFE 8031      LDD	R3,Z+1
    01BFF 8042      LDD	R4,Z+2
    01C00 8053      LDD	R5,Z+3
    01C01 01F3      MOVW	R30,R6
    01C02 8C0D      LDD	R0,Y+29
    01C03 8C1E      LDD	R1,Y+30
    01C04 0DE0      ADD	R30,R0
    01C05 1DF1      ADC	R31,R1
    01C06 8100      LD	R16,Z
    01C07 8111      LDD	R17,Z+1
    01C08 8122      LDD	R18,Z+2
    01C09 8133      LDD	R19,Z+3
    01C0A 1902      SUB	R16,R2
    01C0B 0913      SBC	R17,R3
    01C0C 0924      SBC	R18,R4
    01C0D 0935      SBC	R19,R5
    01C0E 940E 51DC CALL	_labs
    01C10 940E 42CF CALL	long2fp
    01C12 0118      MOVW	R2,R16
    01C13 0129      MOVW	R4,R18
    01C14 EB0E      LDI	R16,0xBE
    01C15 E010      LDI	R17,0
    01C16 940E 409A CALL	elpm32
    01C18 933A      ST	-Y,R19
    01C19 932A      ST	-Y,R18
    01C1A 931A      ST	-Y,R17
    01C1B 930A      ST	-Y,R16
    01C1C 0181      MOVW	R16,R2
    01C1D 0192      MOVW	R18,R4
    01C1E 940E 42EF CALL	fpdiv2
    01C20 870B      STD	Y+11,R16
    01C21 871C      STD	Y+12,R17
    01C22 872D      STD	Y+13,R18
    01C23 873E      STD	Y+14,R19
(1249) 		if (tmp[jj]) 
    01C24 01CE      MOVW	R24,R28
    01C25 9604      ADIW	R24,4
    01C26 01FA      MOVW	R30,R20
    01C27 0FE8      ADD	R30,R24
    01C28 1FF9      ADC	R31,R25
    01C29 8020      LD	R2,Z
    01C2A 2022      TST	R2
    01C2B F409      BNE	0x1C2D
    01C2C C06F      RJMP	0x1C9C
(1250) 		{
(1251) 			st_shift = 3275.f / test.gyro_sens;
    01C2D E906      LDI	R16,0x96
    01C2E E010      LDI	R17,0
    01C2F 940E 409A CALL	elpm32
    01C31 0118      MOVW	R2,R16
    01C32 0129      MOVW	R4,R18
    01C33 9120 018B LDS	R18,test+2
    01C35 9130 018C LDS	R19,test+3
    01C37 9100 0189 LDS	R16,test
    01C39 9110 018A LDS	R17,test+1
    01C3B 940E 42CD CALL	ulong2fp
    01C3D 933A      ST	-Y,R19
    01C3E 932A      ST	-Y,R18
    01C3F 931A      ST	-Y,R17
    01C40 930A      ST	-Y,R16
    01C41 0181      MOVW	R16,R2
    01C42 0192      MOVW	R18,R4
    01C43 940E 42EF CALL	fpdiv2
    01C45 830F      STD	Y+7,R16
    01C46 8718      STD	Y+8,R17
    01C47 8729      STD	Y+9,R18
    01C48 873A      STD	Y+10,R19
    01C49 C00E      RJMP	0x1C58
(1252) 			while (--tmp[jj])
(1253) 				st_shift *= 1.046f;
    01C4A E902      LDI	R16,0x92
    01C4B E010      LDI	R17,0
    01C4C 940E 409A CALL	elpm32
    01C4E 01CE      MOVW	R24,R28
    01C4F 9607      ADIW	R24,7
    01C50 939A      ST	-Y,R25
    01C51 938A      ST	-Y,R24
    01C52 940E 445F CALL	fpmule1
    01C54 830F      STD	Y+7,R16
    01C55 8718      STD	Y+8,R17
    01C56 8729      STD	Y+9,R18
    01C57 873A      STD	Y+10,R19
    01C58 01CE      MOVW	R24,R28
    01C59 9604      ADIW	R24,4
    01C5A 017A      MOVW	R14,R20
    01C5B 0EE8      ADD	R14,R24
    01C5C 1EF9      ADC	R15,R25
    01C5D 01F7      MOVW	R30,R14
    01C5E 8160      LD	R22,Z
    01C5F 5061      SUBI	R22,1
    01C60 8360      ST	Z,R22
    01C61 2366      TST	R22
    01C62 F739      BNE	0x1C4A
(1254) 			st_shift_var = st_shift_cust / st_shift - 1.f;
    01C63 850B      LDD	R16,Y+11
    01C64 851C      LDD	R17,Y+12
    01C65 852D      LDD	R18,Y+13
    01C66 853E      LDD	R19,Y+14
    01C67 01CE      MOVW	R24,R28
    01C68 9607      ADIW	R24,7
    01C69 939A      ST	-Y,R25
    01C6A 938A      ST	-Y,R24
    01C6B 940E 42E6 CALL	fpdiv1
    01C6D 0118      MOVW	R2,R16
    01C6E 0129      MOVW	R4,R18
    01C6F E90A      LDI	R16,0x9A
    01C70 E010      LDI	R17,0
    01C71 940E 409A CALL	elpm32
    01C73 933A      ST	-Y,R19
    01C74 932A      ST	-Y,R18
    01C75 931A      ST	-Y,R17
    01C76 930A      ST	-Y,R16
    01C77 0181      MOVW	R16,R2
    01C78 0192      MOVW	R18,R4
    01C79 940E 4278 CALL	fpsub2
    01C7B 870F      STD	Y+15,R16
    01C7C 8B18      STD	Y+16,R17
    01C7D 8B29      STD	Y+17,R18
    01C7E 8B3A      STD	Y+18,R19
(1255) 			if (fabs(st_shift_var) > test.max_gyro_var)
    01C7F 850F      LDD	R16,Y+15
    01C80 8918      LDD	R17,Y+16
    01C81 8929      LDD	R18,Y+17
    01C82 893A      LDD	R19,Y+18
    01C83 940E 4AEA CALL	_fabsf
    01C85 933A      ST	-Y,R19
    01C86 932A      ST	-Y,R18
    01C87 931A      ST	-Y,R17
    01C88 930A      ST	-Y,R16
    01C89 9120 01A2 LDS	R18,test+25
    01C8B 9130 01A3 LDS	R19,test+26
    01C8D 9100 01A0 LDS	R16,test+23
    01C8F 9110 01A1 LDS	R17,test+24
    01C91 940E 44A7 CALL	fpcmp2
    01C93 F54C      BGE	0x1CBD
(1256) 				result |= 1 << jj;
    01C94 E001      LDI	R16,1
    01C95 E010      LDI	R17,0
    01C96 019A      MOVW	R18,R20
    01C97 940E 4196 CALL	lsl16
    01C99 2AA0      OR	R10,R16
    01C9A 2AB1      OR	R11,R17
(1257) 		} 
    01C9B C021      RJMP	0x1CBD
(1258) 		else if ((st_shift_cust < test.min_dps) ||
    01C9C 850B      LDD	R16,Y+11
    01C9D 851C      LDD	R17,Y+12
    01C9E 852D      LDD	R18,Y+13
    01C9F 853E      LDD	R19,Y+14
    01CA0 E988      LDI	R24,0x98
    01CA1 E091      LDI	R25,1
    01CA2 939A      ST	-Y,R25
    01CA3 938A      ST	-Y,R24
    01CA4 940E 449C CALL	fpcmp1
    01CA6 F07C      BLT	0x1CB6
    01CA7 01CE      MOVW	R24,R28
    01CA8 960B      ADIW	R24,0xB
    01CA9 9120 019E LDS	R18,test+21
    01CAB 9130 019F LDS	R19,test+22
    01CAD 9100 019C LDS	R16,test+19
    01CAF 9110 019D LDS	R17,test+20
    01CB1 939A      ST	-Y,R25
    01CB2 938A      ST	-Y,R24
    01CB3 940E 449C CALL	fpcmp1
    01CB5 F43C      BGE	0x1CBD
(1259) 			(st_shift_cust > test.max_dps))
(1260) 			result |= 1 << jj;
    01CB6 E001      LDI	R16,1
    01CB7 E010      LDI	R17,0
    01CB8 019A      MOVW	R18,R20
    01CB9 940E 4196 CALL	lsl16
    01CBB 2AA0      OR	R10,R16
    01CBC 2AB1      OR	R11,R17
    01CBD 5F4F      SUBI	R20,0xFF
    01CBE 4F5F      SBCI	R21,0xFF
    01CBF 3043      CPI	R20,3
    01CC0 E0E0      LDI	R30,0
    01CC1 075E      CPC	R21,R30
    01CC2 F40C      BGE	0x1CC4
    01CC3 CF30      RJMP	0x1BF4
(1261) 	}
(1262) 	return result;
    01CC4 0185      MOVW	R16,R10
    01CC5 9663      ADIW	R28,0x13
    01CC6 940E 4107 CALL	pop_xgsetF0FC
    01CC8 9624      ADIW	R28,4
    01CC9 9508      RET
inv_mpu.c:get_st_biases:
  gyro_cur             --> Y,+22
  accel_cur            --> Y,+16
  fifo_count           --> R10
  packet_count         --> R14
  ii                   --> R12
  data                 --> Y,+4
  hw_test              --> R10
  accel                --> Y,+40
  gyro                 --> Y,+38
    01CCA 940E 3FCD CALL	push_arg4
    01CCC 940E 4112 CALL	push_xgsetF0FC
    01CCE 976C      SBIW	R28,0x1C
    01CCF A4AA      LDD	R10,Y+42
(1263) }
(1264) 
(1265) static int get_st_biases(long *gyro, long *accel, unsigned char hw_test)
(1266) {
(1267) 	unsigned char data[MAX_PACKET_LENGTH];
(1268) 	unsigned char packet_count, ii;
(1269) 	unsigned short fifo_count;
(1270) 
(1271) 	data[0] = 0x01;
    01CD0 E081      LDI	R24,1
    01CD1 838C      STD	Y+4,R24
(1272) 	data[1] = 0;
    01CD2 2422      CLR	R2
    01CD3 822D      STD	Y+5,R2
(1273) 	if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
    01CD4 01CE      MOVW	R24,R28
    01CD5 9604      ADIW	R24,4
    01CD6 839B      STD	Y+3,R25
    01CD7 838A      STD	Y+2,R24
    01CD8 E082      LDI	R24,2
    01CD9 8388      ST	Y,R24
    01CDA 91E0 01B0 LDS	R30,inv_mpu.c:st
    01CDC 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    01CDE 8922      LDD	R18,Z+18
    01CDF 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    01CE1 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    01CE3 8100      LD	R16,Z
    01CE4 940E 0E1B CALL	_i2cwrite
    01CE6 2300      TST	R16
    01CE7 F019      BEQ	0x1CEB
(1274) 		return -1;
    01CE8 EF0F      LDI	R16,0xFF
    01CE9 EF1F      LDI	R17,0xFF
    01CEA C3C0      RJMP	0x20AB
(1275) 	delay_ms(200);
    01CEB EC08      LDI	R16,0xC8
    01CEC E010      LDI	R17,0
    01CED 940E 0D6E CALL	_delay_ms
(1276) 	data[0] = 0;
    01CEF 2422      CLR	R2
    01CF0 822C      STD	Y+4,R2
(1277) 	if (i2c_write(st.hw->addr, st.reg->int_enable, 1, data))
    01CF1 01CE      MOVW	R24,R28
    01CF2 9604      ADIW	R24,4
    01CF3 839B      STD	Y+3,R25
    01CF4 838A      STD	Y+2,R24
    01CF5 E081      LDI	R24,1
    01CF6 8388      ST	Y,R24
    01CF7 91E0 01B0 LDS	R30,inv_mpu.c:st
    01CF9 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    01CFB 8527      LDD	R18,Z+15
    01CFC 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    01CFE 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    01D00 8100      LD	R16,Z
    01D01 940E 0E1B CALL	_i2cwrite
    01D03 2300      TST	R16
    01D04 F019      BEQ	0x1D08
(1278) 		return -1;
    01D05 EF0F      LDI	R16,0xFF
    01D06 EF1F      LDI	R17,0xFF
    01D07 C3A3      RJMP	0x20AB
(1279) 	if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
    01D08 01CE      MOVW	R24,R28
    01D09 9604      ADIW	R24,4
    01D0A 839B      STD	Y+3,R25
    01D0B 838A      STD	Y+2,R24
    01D0C E081      LDI	R24,1
    01D0D 8388      ST	Y,R24
    01D0E 91E0 01B0 LDS	R30,inv_mpu.c:st
    01D10 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    01D12 8125      LDD	R18,Z+5
    01D13 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    01D15 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    01D17 8100      LD	R16,Z
    01D18 940E 0E1B CALL	_i2cwrite
    01D1A 2EC0      MOV	R12,R16
    01D1B 2300      TST	R16
    01D1C F019      BEQ	0x1D20
(1280) 		return -1;
    01D1D EF0F      LDI	R16,0xFF
    01D1E EF1F      LDI	R17,0xFF
    01D1F C38B      RJMP	0x20AB
(1281) 	if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
    01D20 01CE      MOVW	R24,R28
    01D21 9604      ADIW	R24,4
    01D22 839B      STD	Y+3,R25
    01D23 838A      STD	Y+2,R24
    01D24 E081      LDI	R24,1
    01D25 8388      ST	Y,R24
    01D26 91E0 01B0 LDS	R30,inv_mpu.c:st
    01D28 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    01D2A 8922      LDD	R18,Z+18
    01D2B 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    01D2D 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    01D2F 8100      LD	R16,Z
    01D30 940E 0E1B CALL	_i2cwrite
    01D32 2EC0      MOV	R12,R16
    01D33 2300      TST	R16
    01D34 F019      BEQ	0x1D38
(1282) 		return -1;
    01D35 EF0F      LDI	R16,0xFF
    01D36 EF1F      LDI	R17,0xFF
    01D37 C373      RJMP	0x20AB
(1283) 	if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
    01D38 01CE      MOVW	R24,R28
    01D39 9604      ADIW	R24,4
    01D3A 839B      STD	Y+3,R25
    01D3B 838A      STD	Y+2,R24
    01D3C E081      LDI	R24,1
    01D3D 8388      ST	Y,R24
    01D3E 91E0 01B0 LDS	R30,inv_mpu.c:st
    01D40 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    01D42 8927      LDD	R18,Z+23
    01D43 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    01D45 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    01D47 8100      LD	R16,Z
    01D48 940E 0E1B CALL	_i2cwrite
    01D4A 2EC0      MOV	R12,R16
    01D4B 2300      TST	R16
    01D4C F019      BEQ	0x1D50
(1284) 		return -1;
    01D4D EF0F      LDI	R16,0xFF
    01D4E EF1F      LDI	R17,0xFF
    01D4F C35B      RJMP	0x20AB
(1285) 	if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
    01D50 01CE      MOVW	R24,R28
    01D51 9604      ADIW	R24,4
    01D52 839B      STD	Y+3,R25
    01D53 838A      STD	Y+2,R24
    01D54 E081      LDI	R24,1
    01D55 8388      ST	Y,R24
    01D56 91E0 01B0 LDS	R30,inv_mpu.c:st
    01D58 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    01D5A 8124      LDD	R18,Z+4
    01D5B 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    01D5D 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    01D5F 8100      LD	R16,Z
    01D60 940E 0E1B CALL	_i2cwrite
    01D62 2EC0      MOV	R12,R16
    01D63 2300      TST	R16
    01D64 F019      BEQ	0x1D68
(1286) 		return -1;
    01D65 EF0F      LDI	R16,0xFF
    01D66 EF1F      LDI	R17,0xFF
    01D67 C343      RJMP	0x20AB
(1287) 	data[0] = BIT_FIFO_RST | BIT_DMP_RST;
    01D68 E08C      LDI	R24,0xC
    01D69 838C      STD	Y+4,R24
(1288) 	if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
    01D6A 01CE      MOVW	R24,R28
    01D6B 9604      ADIW	R24,4
    01D6C 839B      STD	Y+3,R25
    01D6D 838A      STD	Y+2,R24
    01D6E E081      LDI	R24,1
    01D6F 8388      ST	Y,R24
    01D70 91E0 01B0 LDS	R30,inv_mpu.c:st
    01D72 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    01D74 8124      LDD	R18,Z+4
    01D75 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    01D77 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    01D79 8100      LD	R16,Z
    01D7A 940E 0E1B CALL	_i2cwrite
    01D7C 2EC0      MOV	R12,R16
    01D7D 2300      TST	R16
    01D7E F019      BEQ	0x1D82
(1289) 		return -1;
    01D7F EF0F      LDI	R16,0xFF
    01D80 EF1F      LDI	R17,0xFF
    01D81 C329      RJMP	0x20AB
(1290) 	delay_ms(15);
    01D82 E00F      LDI	R16,0xF
    01D83 E010      LDI	R17,0
    01D84 940E 0D6E CALL	_delay_ms
(1291) 	data[0] = st.test->reg_lpf;
    01D86 91E0 01D1 LDS	R30,inv_mpu.c:st+33
    01D88 91F0 01D2 LDS	R31,inv_mpu.c:st+34
    01D8A 8421      LDD	R2,Z+9
    01D8B 822C      STD	Y+4,R2
(1292) 	if (i2c_write(st.hw->addr, st.reg->lpf, 1, data))
    01D8C 01CE      MOVW	R24,R28
    01D8D 9604      ADIW	R24,4
    01D8E 839B      STD	Y+3,R25
    01D8F 838A      STD	Y+2,R24
    01D90 E081      LDI	R24,1
    01D91 8388      ST	Y,R24
    01D92 91E0 01B0 LDS	R30,inv_mpu.c:st
    01D94 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    01D96 8122      LDD	R18,Z+2
    01D97 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    01D99 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    01D9B 8100      LD	R16,Z
    01D9C 940E 0E1B CALL	_i2cwrite
    01D9E 2EC0      MOV	R12,R16
    01D9F 2300      TST	R16
    01DA0 F019      BEQ	0x1DA4
(1293) 		return -1;
    01DA1 EF0F      LDI	R16,0xFF
    01DA2 EF1F      LDI	R17,0xFF
    01DA3 C307      RJMP	0x20AB
(1294) 	data[0] = st.test->reg_rate_div;
    01DA4 91E0 01D1 LDS	R30,inv_mpu.c:st+33
    01DA6 91F0 01D2 LDS	R31,inv_mpu.c:st+34
    01DA8 8420      LDD	R2,Z+8
    01DA9 822C      STD	Y+4,R2
(1295) 	if (i2c_write(st.hw->addr, st.reg->rate_div, 1, data))
    01DAA 01CE      MOVW	R24,R28
    01DAB 9604      ADIW	R24,4
    01DAC 839B      STD	Y+3,R25
    01DAD 838A      STD	Y+2,R24
    01DAE E081      LDI	R24,1
    01DAF 8388      ST	Y,R24
    01DB0 91E0 01B0 LDS	R30,inv_mpu.c:st
    01DB2 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    01DB4 8121      LDD	R18,Z+1
    01DB5 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    01DB7 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    01DB9 8100      LD	R16,Z
    01DBA 940E 0E1B CALL	_i2cwrite
    01DBC 2EC0      MOV	R12,R16
    01DBD 2300      TST	R16
    01DBE F019      BEQ	0x1DC2
(1296) 		return -1;
    01DBF EF0F      LDI	R16,0xFF
    01DC0 EF1F      LDI	R17,0xFF
    01DC1 C2E9      RJMP	0x20AB
(1297) 	if (hw_test)
    01DC2 20AA      TST	R10
    01DC3 F041      BEQ	0x1DCC
(1298) 		data[0] = st.test->reg_gyro_fsr | 0xE0;
    01DC4 91E0 01D1 LDS	R30,inv_mpu.c:st+33
    01DC6 91F0 01D2 LDS	R31,inv_mpu.c:st+34
    01DC8 8582      LDD	R24,Z+10
    01DC9 6E80      ORI	R24,0xE0
    01DCA 838C      STD	Y+4,R24
    01DCB C006      RJMP	0x1DD2
(1299) 	else
(1300) 		data[0] = st.test->reg_gyro_fsr;
    01DCC 91E0 01D1 LDS	R30,inv_mpu.c:st+33
    01DCE 91F0 01D2 LDS	R31,inv_mpu.c:st+34
    01DD0 8422      LDD	R2,Z+10
    01DD1 822C      STD	Y+4,R2
(1301) 	if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, data))
    01DD2 01CE      MOVW	R24,R28
    01DD3 9604      ADIW	R24,4
    01DD4 839B      STD	Y+3,R25
    01DD5 838A      STD	Y+2,R24
    01DD6 E081      LDI	R24,1
    01DD7 8388      ST	Y,R24
    01DD8 91E0 01B0 LDS	R30,inv_mpu.c:st
    01DDA 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    01DDC 8126      LDD	R18,Z+6
    01DDD 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    01DDF 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    01DE1 8100      LD	R16,Z
    01DE2 940E 0E1B CALL	_i2cwrite
    01DE4 2EC0      MOV	R12,R16
    01DE5 2300      TST	R16
    01DE6 F019      BEQ	0x1DEA
(1302) 		return -1;
    01DE7 EF0F      LDI	R16,0xFF
    01DE8 EF1F      LDI	R17,0xFF
    01DE9 C2C1      RJMP	0x20AB
(1303) 
(1304) 	if (hw_test)
    01DEA 20AA      TST	R10
    01DEB F041      BEQ	0x1DF4
(1305) 		data[0] = st.test->reg_accel_fsr | 0xE0;
    01DEC 91E0 01D1 LDS	R30,inv_mpu.c:st+33
    01DEE 91F0 01D2 LDS	R31,inv_mpu.c:st+34
    01DF0 8583      LDD	R24,Z+11
    01DF1 6E80      ORI	R24,0xE0
    01DF2 838C      STD	Y+4,R24
    01DF3 C003      RJMP	0x1DF7
(1306) 	else
(1307) 		data[0] = test.reg_accel_fsr;
    01DF4 9020 0194 LDS	R2,test+11
    01DF6 822C      STD	Y+4,R2
(1308) 	if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, data))
    01DF7 01CE      MOVW	R24,R28
    01DF8 9604      ADIW	R24,4
    01DF9 839B      STD	Y+3,R25
    01DFA 838A      STD	Y+2,R24
    01DFB E081      LDI	R24,1
    01DFC 8388      ST	Y,R24
    01DFD 91E0 01B0 LDS	R30,inv_mpu.c:st
    01DFF 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    01E01 8127      LDD	R18,Z+7
    01E02 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    01E04 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    01E06 8100      LD	R16,Z
    01E07 940E 0E1B CALL	_i2cwrite
    01E09 2EC0      MOV	R12,R16
    01E0A 2300      TST	R16
    01E0B F019      BEQ	0x1E0F
(1309) 		return -1;
    01E0C EF0F      LDI	R16,0xFF
    01E0D EF1F      LDI	R17,0xFF
    01E0E C29C      RJMP	0x20AB
(1310) 	if (hw_test)
    01E0F 20AA      TST	R10
    01E10 F021      BEQ	0x1E15
(1311) 		delay_ms(200);
    01E11 EC08      LDI	R16,0xC8
    01E12 E010      LDI	R17,0
    01E13 940E 0D6E CALL	_delay_ms
(1312) 
(1313) 	data[0] = BIT_FIFO_EN;
    01E15 E480      LDI	R24,0x40
    01E16 838C      STD	Y+4,R24
(1314) 	if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
    01E17 01CE      MOVW	R24,R28
    01E18 9604      ADIW	R24,4
    01E19 839B      STD	Y+3,R25
    01E1A 838A      STD	Y+2,R24
    01E1B E081      LDI	R24,1
    01E1C 8388      ST	Y,R24
    01E1D 91E0 01B0 LDS	R30,inv_mpu.c:st
    01E1F 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    01E21 8124      LDD	R18,Z+4
    01E22 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    01E24 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    01E26 8100      LD	R16,Z
    01E27 940E 0E1B CALL	_i2cwrite
    01E29 2EA0      MOV	R10,R16
    01E2A 2300      TST	R16
    01E2B F019      BEQ	0x1E2F
(1315) 		return -1;
    01E2C EF0F      LDI	R16,0xFF
    01E2D EF1F      LDI	R17,0xFF
    01E2E C27C      RJMP	0x20AB
(1316) 
(1317) 	data[0] = INV_XYZ_GYRO | INV_XYZ_ACCEL;
    01E2F E788      LDI	R24,0x78
    01E30 838C      STD	Y+4,R24
(1318) 	if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
    01E31 01CE      MOVW	R24,R28
    01E32 9604      ADIW	R24,4
    01E33 839B      STD	Y+3,R25
    01E34 838A      STD	Y+2,R24
    01E35 E081      LDI	R24,1
    01E36 8388      ST	Y,R24
    01E37 91E0 01B0 LDS	R30,inv_mpu.c:st
    01E39 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    01E3B 8125      LDD	R18,Z+5
    01E3C 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    01E3E 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    01E40 8100      LD	R16,Z
    01E41 940E 0E1B CALL	_i2cwrite
    01E43 2EA0      MOV	R10,R16
    01E44 2300      TST	R16
    01E45 F019      BEQ	0x1E49
(1319) 		return -1;
    01E46 EF0F      LDI	R16,0xFF
    01E47 EF1F      LDI	R17,0xFF
    01E48 C262      RJMP	0x20AB
(1320) 	delay_ms(test.wait_ms);
    01E49 9100 0195 LDS	R16,test+12
    01E4B 9110 0196 LDS	R17,test+13
    01E4D 940E 0D6E CALL	_delay_ms
(1321) 	data[0] = 0;
    01E4F 2422      CLR	R2
    01E50 822C      STD	Y+4,R2
(1322) 	if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
    01E51 01CE      MOVW	R24,R28
    01E52 9604      ADIW	R24,4
    01E53 839B      STD	Y+3,R25
    01E54 838A      STD	Y+2,R24
    01E55 E081      LDI	R24,1
    01E56 8388      ST	Y,R24
    01E57 91E0 01B0 LDS	R30,inv_mpu.c:st
    01E59 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    01E5B 8125      LDD	R18,Z+5
    01E5C 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    01E5E 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    01E60 8100      LD	R16,Z
    01E61 940E 0E1B CALL	_i2cwrite
    01E63 2EA0      MOV	R10,R16
    01E64 2300      TST	R16
    01E65 F019      BEQ	0x1E69
(1323) 		return -1;
    01E66 EF0F      LDI	R16,0xFF
    01E67 EF1F      LDI	R17,0xFF
    01E68 C242      RJMP	0x20AB
(1324) 
(1325) 	if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
    01E69 01CE      MOVW	R24,R28
    01E6A 9604      ADIW	R24,4
    01E6B 839B      STD	Y+3,R25
    01E6C 838A      STD	Y+2,R24
    01E6D E082      LDI	R24,2
    01E6E 8388      ST	Y,R24
    01E6F 91E0 01B0 LDS	R30,inv_mpu.c:st
    01E71 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    01E73 8522      LDD	R18,Z+10
    01E74 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    01E76 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    01E78 8100      LD	R16,Z
    01E79 940E 0E31 CALL	_i2cread
    01E7B 2EA0      MOV	R10,R16
    01E7C 2300      TST	R16
    01E7D F019      BEQ	0x1E81
(1326) 		return -1;
    01E7E EF0F      LDI	R16,0xFF
    01E7F EF1F      LDI	R17,0xFF
    01E80 C22A      RJMP	0x20AB
(1327) 
(1328) 	fifo_count = (data[0] << 8) | data[1];
    01E81 802D      LDD	R2,Y+5
    01E82 803C      LDD	R3,Y+4
    01E83 2CB3      MOV	R11,R3
    01E84 2CA2      MOV	R10,R2
(1329) 	packet_count = fifo_count / MAX_PACKET_LENGTH;
    01E85 E02C      LDI	R18,0xC
    01E86 E030      LDI	R19,0
    01E87 0185      MOVW	R16,R10
    01E88 940E 3FFE CALL	div16u
    01E8A 2EE0      MOV	R14,R16
(1330) 	gyro[0] = gyro[1] = gyro[2] = 0;
    01E8B A1EE      LDD	R30,Y+38
    01E8C A1FF      LDD	R31,Y+39
    01E8D 9638      ADIW	R30,0x8
    01E8E E080      LDI	R24,0
    01E8F 8380      ST	Z,R24
    01E90 8381      STD	Z+1,R24
    01E91 8382      STD	Z+2,R24
    01E92 8383      STD	Z+3,R24
    01E93 A1EE      LDD	R30,Y+38
    01E94 A1FF      LDD	R31,Y+39
    01E95 9634      ADIW	R30,4
    01E96 E080      LDI	R24,0
    01E97 8380      ST	Z,R24
    01E98 8381      STD	Z+1,R24
    01E99 8382      STD	Z+2,R24
    01E9A 8383      STD	Z+3,R24
    01E9B A1EE      LDD	R30,Y+38
    01E9C A1FF      LDD	R31,Y+39
    01E9D E080      LDI	R24,0
    01E9E 8380      ST	Z,R24
    01E9F 8381      STD	Z+1,R24
    01EA0 8382      STD	Z+2,R24
    01EA1 8383      STD	Z+3,R24
(1331) 	accel[0] = accel[1] = accel[2] = 0;
    01EA2 A5E8      LDD	R30,Y+40
    01EA3 A5F9      LDD	R31,Y+41
    01EA4 9638      ADIW	R30,0x8
    01EA5 E080      LDI	R24,0
    01EA6 8380      ST	Z,R24
    01EA7 8381      STD	Z+1,R24
    01EA8 8382      STD	Z+2,R24
    01EA9 8383      STD	Z+3,R24
    01EAA A5E8      LDD	R30,Y+40
    01EAB A5F9      LDD	R31,Y+41
    01EAC 9634      ADIW	R30,4
    01EAD E080      LDI	R24,0
    01EAE 8380      ST	Z,R24
    01EAF 8381      STD	Z+1,R24
    01EB0 8382      STD	Z+2,R24
    01EB1 8383      STD	Z+3,R24
    01EB2 A5E8      LDD	R30,Y+40
    01EB3 A5F9      LDD	R31,Y+41
    01EB4 E080      LDI	R24,0
    01EB5 8380      ST	Z,R24
    01EB6 8381      STD	Z+1,R24
    01EB7 8382      STD	Z+2,R24
    01EB8 8383      STD	Z+3,R24
(1332) 
(1333) 	for (ii = 0; ii < packet_count; ii++) {
    01EB9 24CC      CLR	R12
    01EBA C0C2      RJMP	0x1F7D
(1334) 		short accel_cur[3], gyro_cur[3];
(1335) 		if (i2c_read(st.hw->addr, st.reg->fifo_r_w, MAX_PACKET_LENGTH, data))
    01EBB 01CE      MOVW	R24,R28
    01EBC 9604      ADIW	R24,4
    01EBD 839B      STD	Y+3,R25
    01EBE 838A      STD	Y+2,R24
    01EBF E08C      LDI	R24,0xC
    01EC0 8388      ST	Y,R24
    01EC1 91E0 01B0 LDS	R30,inv_mpu.c:st
    01EC3 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    01EC5 8523      LDD	R18,Z+11
    01EC6 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    01EC8 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    01ECA 8100      LD	R16,Z
    01ECB 940E 0E31 CALL	_i2cread
    01ECD 2EA0      MOV	R10,R16
    01ECE 2300      TST	R16
    01ECF F019      BEQ	0x1ED3
(1336) 			return -1;
    01ED0 EF0F      LDI	R16,0xFF
    01ED1 EF1F      LDI	R17,0xFF
    01ED2 C1D8      RJMP	0x20AB
(1337) 		accel_cur[0] = ((short)data[0] << 8) | data[1];
    01ED3 802D      LDD	R2,Y+5
    01ED4 803C      LDD	R3,Y+4
    01ED5 2444      CLR	R4
    01ED6 8A39      STD	Y+17,R3
    01ED7 8A28      STD	Y+16,R2
(1338) 		accel_cur[1] = ((short)data[2] << 8) | data[3];
    01ED8 802F      LDD	R2,Y+7
    01ED9 803E      LDD	R3,Y+6
    01EDA 2444      CLR	R4
    01EDB 8A3B      STD	Y+19,R3
    01EDC 8A2A      STD	Y+18,R2
(1339) 		accel_cur[2] = ((short)data[4] << 8) | data[5];
    01EDD 8429      LDD	R2,Y+9
    01EDE 8438      LDD	R3,Y+8
    01EDF 2444      CLR	R4
    01EE0 8A3D      STD	Y+21,R3
    01EE1 8A2C      STD	Y+20,R2
(1340) 		accel[0] += (long)accel_cur[0];
    01EE2 8828      LDD	R2,Y+16
    01EE3 8839      LDD	R3,Y+17
    01EE4 2444      CLR	R4
    01EE5 FC37      SBRC	R3,7
    01EE6 9440      COM	R4
    01EE7 2455      CLR	R5
    01EE8 FC47      SBRC	R4,7
    01EE9 9450      COM	R5
    01EEA A5E8      LDD	R30,Y+40
    01EEB A5F9      LDD	R31,Y+41
    01EEC 8060      LD	R6,Z
    01EED 8071      LDD	R7,Z+1
    01EEE 8082      LDD	R8,Z+2
    01EEF 8093      LDD	R9,Z+3
    01EF0 0C62      ADD	R6,R2
    01EF1 1C73      ADC	R7,R3
    01EF2 1C84      ADC	R8,R4
    01EF3 1C95      ADC	R9,R5
    01EF4 8260      ST	Z,R6
    01EF5 8271      STD	Z+1,R7
    01EF6 8282      STD	Z+2,R8
    01EF7 8293      STD	Z+3,R9
(1341) 		accel[1] += (long)accel_cur[1];
    01EF8 01CF      MOVW	R24,R30
    01EF9 9604      ADIW	R24,4
    01EFA 882A      LDD	R2,Y+18
    01EFB 883B      LDD	R3,Y+19
    01EFC 2444      CLR	R4
    01EFD FC37      SBRC	R3,7
    01EFE 9440      COM	R4
    01EFF 2455      CLR	R5
    01F00 FC47      SBRC	R4,7
    01F01 9450      COM	R5
    01F02 01FC      MOVW	R30,R24
    01F03 8060      LD	R6,Z
    01F04 8071      LDD	R7,Z+1
    01F05 8082      LDD	R8,Z+2
    01F06 8093      LDD	R9,Z+3
    01F07 0C62      ADD	R6,R2
    01F08 1C73      ADC	R7,R3
    01F09 1C84      ADC	R8,R4
    01F0A 1C95      ADC	R9,R5
    01F0B 8260      ST	Z,R6
    01F0C 8271      STD	Z+1,R7
    01F0D 8282      STD	Z+2,R8
    01F0E 8293      STD	Z+3,R9
(1342) 		accel[2] += (long)accel_cur[2];
    01F0F A588      LDD	R24,Y+40
    01F10 A599      LDD	R25,Y+41
    01F11 9608      ADIW	R24,0x8
    01F12 882C      LDD	R2,Y+20
    01F13 883D      LDD	R3,Y+21
    01F14 2444      CLR	R4
    01F15 FC37      SBRC	R3,7
    01F16 9440      COM	R4
    01F17 2455      CLR	R5
    01F18 FC47      SBRC	R4,7
    01F19 9450      COM	R5
    01F1A 01FC      MOVW	R30,R24
    01F1B 8060      LD	R6,Z
    01F1C 8071      LDD	R7,Z+1
    01F1D 8082      LDD	R8,Z+2
    01F1E 8093      LDD	R9,Z+3
    01F1F 0C62      ADD	R6,R2
    01F20 1C73      ADC	R7,R3
    01F21 1C84      ADC	R8,R4
    01F22 1C95      ADC	R9,R5
    01F23 8260      ST	Z,R6
    01F24 8271      STD	Z+1,R7
    01F25 8282      STD	Z+2,R8
    01F26 8293      STD	Z+3,R9
(1343) 		gyro_cur[0] = (((short)data[6] << 8) | data[7]);
    01F27 842B      LDD	R2,Y+11
    01F28 843A      LDD	R3,Y+10
    01F29 2444      CLR	R4
    01F2A 8A3F      STD	Y+23,R3
    01F2B 8A2E      STD	Y+22,R2
(1344) 		gyro_cur[1] = (((short)data[8] << 8) | data[9]);
    01F2C 842D      LDD	R2,Y+13
    01F2D 843C      LDD	R3,Y+12
    01F2E 2444      CLR	R4
    01F2F 8E39      STD	Y+25,R3
    01F30 8E28      STD	Y+24,R2
(1345) 		gyro_cur[2] = (((short)data[10] << 8) | data[11]);
    01F31 842F      LDD	R2,Y+15
    01F32 843E      LDD	R3,Y+14
    01F33 2444      CLR	R4
    01F34 8E3B      STD	Y+27,R3
    01F35 8E2A      STD	Y+26,R2
(1346) 		gyro[0] += (long)gyro_cur[0];
    01F36 882E      LDD	R2,Y+22
    01F37 883F      LDD	R3,Y+23
    01F38 2444      CLR	R4
    01F39 FC37      SBRC	R3,7
    01F3A 9440      COM	R4
    01F3B 2455      CLR	R5
    01F3C FC47      SBRC	R4,7
    01F3D 9450      COM	R5
    01F3E A1EE      LDD	R30,Y+38
    01F3F A1FF      LDD	R31,Y+39
    01F40 8060      LD	R6,Z
    01F41 8071      LDD	R7,Z+1
    01F42 8082      LDD	R8,Z+2
    01F43 8093      LDD	R9,Z+3
    01F44 0C62      ADD	R6,R2
    01F45 1C73      ADC	R7,R3
    01F46 1C84      ADC	R8,R4
    01F47 1C95      ADC	R9,R5
    01F48 8260      ST	Z,R6
    01F49 8271      STD	Z+1,R7
    01F4A 8282      STD	Z+2,R8
    01F4B 8293      STD	Z+3,R9
(1347) 		gyro[1] += (long)gyro_cur[1];
    01F4C 01CF      MOVW	R24,R30
    01F4D 9604      ADIW	R24,4
    01F4E 8C28      LDD	R2,Y+24
    01F4F 8C39      LDD	R3,Y+25
    01F50 2444      CLR	R4
    01F51 FC37      SBRC	R3,7
    01F52 9440      COM	R4
    01F53 2455      CLR	R5
    01F54 FC47      SBRC	R4,7
    01F55 9450      COM	R5
    01F56 01FC      MOVW	R30,R24
    01F57 8060      LD	R6,Z
    01F58 8071      LDD	R7,Z+1
    01F59 8082      LDD	R8,Z+2
    01F5A 8093      LDD	R9,Z+3
    01F5B 0C62      ADD	R6,R2
    01F5C 1C73      ADC	R7,R3
    01F5D 1C84      ADC	R8,R4
    01F5E 1C95      ADC	R9,R5
    01F5F 8260      ST	Z,R6
    01F60 8271      STD	Z+1,R7
    01F61 8282      STD	Z+2,R8
    01F62 8293      STD	Z+3,R9
(1348) 		gyro[2] += (long)gyro_cur[2];
    01F63 A18E      LDD	R24,Y+38
    01F64 A19F      LDD	R25,Y+39
    01F65 9608      ADIW	R24,0x8
    01F66 015C      MOVW	R10,R24
    01F67 8C2A      LDD	R2,Y+26
    01F68 8C3B      LDD	R3,Y+27
    01F69 2444      CLR	R4
    01F6A FC37      SBRC	R3,7
    01F6B 9440      COM	R4
    01F6C 2455      CLR	R5
    01F6D FC47      SBRC	R4,7
    01F6E 9450      COM	R5
    01F6F 01FC      MOVW	R30,R24
    01F70 8060      LD	R6,Z
    01F71 8071      LDD	R7,Z+1
    01F72 8082      LDD	R8,Z+2
    01F73 8093      LDD	R9,Z+3
    01F74 0C62      ADD	R6,R2
    01F75 1C73      ADC	R7,R3
    01F76 1C84      ADC	R8,R4
    01F77 1C95      ADC	R9,R5
    01F78 8260      ST	Z,R6
    01F79 8271      STD	Z+1,R7
    01F7A 8282      STD	Z+2,R8
    01F7B 8293      STD	Z+3,R9
    01F7C 94C3      INC	R12
    01F7D 14CE      CP	R12,R14
    01F7E F408      BCC	0x1F80
    01F7F CF3B      RJMP	0x1EBB
(1349) 	}
(1350) 	#ifdef EMPL_NO_64BIT
(1351) 	gyro[0] = (long)(((float)gyro[0]*65536.f) / test.gyro_sens / packet_count);
(1352) 	gyro[1] = (long)(((float)gyro[1]*65536.f) / test.gyro_sens / packet_count);
(1353) 	gyro[2] = (long)(((float)gyro[2]*65536.f) / test.gyro_sens / packet_count);
(1354) 	if (has_accel) 
(1355) 	{
(1356) 		accel[0] = (long)(((float)accel[0]*65536.f) / test.accel_sens /
(1357) 			packet_count);
(1358) 		accel[1] = (long)(((float)accel[1]*65536.f) / test.accel_sens /
(1359) 			packet_count);
(1360) 		accel[2] = (long)(((float)accel[2]*65536.f) / test.accel_sens /
(1361) 			packet_count);
(1362) 		accel[2] -= 65536L;
(1363) 	}
(1364) 	#else
(1365) 	gyro[0] = (long)(((long long)gyro[0]<<16) / test.gyro_sens / packet_count);
    01F80 9040 018B LDS	R4,test+2
    01F82 9050 018C LDS	R5,test+3
    01F84 9020 0189 LDS	R2,test
    01F86 9030 018A LDS	R3,test+1
    01F88 A1EE      LDD	R30,Y+38
    01F89 A1FF      LDD	R31,Y+39
    01F8A 8100      LD	R16,Z
    01F8B 8111      LDD	R17,Z+1
    01F8C 8122      LDD	R18,Z+2
    01F8D 8133      LDD	R19,Z+3
    01F8E 0198      MOVW	R18,R16
    01F8F 2700      CLR	R16
    01F90 2711      CLR	R17
    01F91 925A      ST	-Y,R5
    01F92 924A      ST	-Y,R4
    01F93 923A      ST	-Y,R3
    01F94 922A      ST	-Y,R2
    01F95 940E 401E CALL	div32s
    01F97 2C2E      MOV	R2,R14
    01F98 2433      CLR	R3
    01F99 2444      CLR	R4
    01F9A 2455      CLR	R5
    01F9B 925A      ST	-Y,R5
    01F9C 924A      ST	-Y,R4
    01F9D 923A      ST	-Y,R3
    01F9E 922A      ST	-Y,R2
    01F9F 940E 401E CALL	div32s
    01FA1 A1EE      LDD	R30,Y+38
    01FA2 A1FF      LDD	R31,Y+39
    01FA3 8300      ST	Z,R16
    01FA4 8311      STD	Z+1,R17
    01FA5 8322      STD	Z+2,R18
    01FA6 8333      STD	Z+3,R19
(1366) 	gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / packet_count);
    01FA7 01CF      MOVW	R24,R30
    01FA8 9604      ADIW	R24,4
    01FA9 016C      MOVW	R12,R24
    01FAA 9040 018B LDS	R4,test+2
    01FAC 9050 018C LDS	R5,test+3
    01FAE 9020 0189 LDS	R2,test
    01FB0 9030 018A LDS	R3,test+1
    01FB2 01FC      MOVW	R30,R24
    01FB3 8100      LD	R16,Z
    01FB4 8111      LDD	R17,Z+1
    01FB5 8122      LDD	R18,Z+2
    01FB6 8133      LDD	R19,Z+3
    01FB7 0198      MOVW	R18,R16
    01FB8 2700      CLR	R16
    01FB9 2711      CLR	R17
    01FBA 925A      ST	-Y,R5
    01FBB 924A      ST	-Y,R4
    01FBC 923A      ST	-Y,R3
    01FBD 922A      ST	-Y,R2
    01FBE 940E 401E CALL	div32s
    01FC0 2C2E      MOV	R2,R14
    01FC1 2433      CLR	R3
    01FC2 2444      CLR	R4
    01FC3 2455      CLR	R5
    01FC4 925A      ST	-Y,R5
    01FC5 924A      ST	-Y,R4
    01FC6 923A      ST	-Y,R3
    01FC7 922A      ST	-Y,R2
    01FC8 940E 401E CALL	div32s
    01FCA 01F6      MOVW	R30,R12
    01FCB 8300      ST	Z,R16
    01FCC 8311      STD	Z+1,R17
    01FCD 8322      STD	Z+2,R18
    01FCE 8333      STD	Z+3,R19
(1367) 	gyro[2] = (long)(((long long)gyro[2]<<16) / test.gyro_sens / packet_count);
    01FCF A18E      LDD	R24,Y+38
    01FD0 A19F      LDD	R25,Y+39
    01FD1 9608      ADIW	R24,0x8
    01FD2 016C      MOVW	R12,R24
    01FD3 9040 018B LDS	R4,test+2
    01FD5 9050 018C LDS	R5,test+3
    01FD7 9020 0189 LDS	R2,test
    01FD9 9030 018A LDS	R3,test+1
    01FDB 01FC      MOVW	R30,R24
    01FDC 8100      LD	R16,Z
    01FDD 8111      LDD	R17,Z+1
    01FDE 8122      LDD	R18,Z+2
    01FDF 8133      LDD	R19,Z+3
    01FE0 0198      MOVW	R18,R16
    01FE1 2700      CLR	R16
    01FE2 2711      CLR	R17
    01FE3 925A      ST	-Y,R5
    01FE4 924A      ST	-Y,R4
    01FE5 923A      ST	-Y,R3
    01FE6 922A      ST	-Y,R2
    01FE7 940E 401E CALL	div32s
    01FE9 2C2E      MOV	R2,R14
    01FEA 2433      CLR	R3
    01FEB 2444      CLR	R4
    01FEC 2455      CLR	R5
    01FED 925A      ST	-Y,R5
    01FEE 924A      ST	-Y,R4
    01FEF 923A      ST	-Y,R3
    01FF0 922A      ST	-Y,R2
    01FF1 940E 401E CALL	div32s
    01FF3 01F6      MOVW	R30,R12
    01FF4 8300      ST	Z,R16
    01FF5 8311      STD	Z+1,R17
    01FF6 8322      STD	Z+2,R18
    01FF7 8333      STD	Z+3,R19
(1368) 	accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens /
    01FF8 9040 018F LDS	R4,test+6
    01FFA 9050 0190 LDS	R5,test+7
    01FFC 9020 018D LDS	R2,test+4
    01FFE 9030 018E LDS	R3,test+5
    02000 A5E8      LDD	R30,Y+40
    02001 A5F9      LDD	R31,Y+41
    02002 8100      LD	R16,Z
    02003 8111      LDD	R17,Z+1
    02004 8122      LDD	R18,Z+2
    02005 8133      LDD	R19,Z+3
    02006 0198      MOVW	R18,R16
    02007 2700      CLR	R16
    02008 2711      CLR	R17
    02009 925A      ST	-Y,R5
    0200A 924A      ST	-Y,R4
    0200B 923A      ST	-Y,R3
    0200C 922A      ST	-Y,R2
    0200D 940E 401E CALL	div32s
    0200F 2C2E      MOV	R2,R14
    02010 2433      CLR	R3
    02011 2444      CLR	R4
    02012 2455      CLR	R5
    02013 925A      ST	-Y,R5
    02014 924A      ST	-Y,R4
    02015 923A      ST	-Y,R3
    02016 922A      ST	-Y,R2
    02017 940E 401E CALL	div32s
    02019 A5E8      LDD	R30,Y+40
    0201A A5F9      LDD	R31,Y+41
    0201B 8300      ST	Z,R16
    0201C 8311      STD	Z+1,R17
    0201D 8322      STD	Z+2,R18
    0201E 8333      STD	Z+3,R19
(1369) 		packet_count);
(1370) 	accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens /
    0201F 01CF      MOVW	R24,R30
    02020 9604      ADIW	R24,4
    02021 016C      MOVW	R12,R24
    02022 9040 018F LDS	R4,test+6
    02024 9050 0190 LDS	R5,test+7
    02026 9020 018D LDS	R2,test+4
    02028 9030 018E LDS	R3,test+5
    0202A 01FC      MOVW	R30,R24
    0202B 8100      LD	R16,Z
    0202C 8111      LDD	R17,Z+1
    0202D 8122      LDD	R18,Z+2
    0202E 8133      LDD	R19,Z+3
    0202F 0198      MOVW	R18,R16
    02030 2700      CLR	R16
    02031 2711      CLR	R17
    02032 925A      ST	-Y,R5
    02033 924A      ST	-Y,R4
    02034 923A      ST	-Y,R3
    02035 922A      ST	-Y,R2
    02036 940E 401E CALL	div32s
    02038 2C2E      MOV	R2,R14
    02039 2433      CLR	R3
    0203A 2444      CLR	R4
    0203B 2455      CLR	R5
    0203C 925A      ST	-Y,R5
    0203D 924A      ST	-Y,R4
    0203E 923A      ST	-Y,R3
    0203F 922A      ST	-Y,R2
    02040 940E 401E CALL	div32s
    02042 01F6      MOVW	R30,R12
    02043 8300      ST	Z,R16
    02044 8311      STD	Z+1,R17
    02045 8322      STD	Z+2,R18
    02046 8333      STD	Z+3,R19
(1371) 		packet_count);
(1372) 	accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens /
    02047 A588      LDD	R24,Y+40
    02048 A599      LDD	R25,Y+41
    02049 9608      ADIW	R24,0x8
    0204A 016C      MOVW	R12,R24
    0204B 9040 018F LDS	R4,test+6
    0204D 9050 0190 LDS	R5,test+7
    0204F 9020 018D LDS	R2,test+4
    02051 9030 018E LDS	R3,test+5
    02053 01FC      MOVW	R30,R24
    02054 8100      LD	R16,Z
    02055 8111      LDD	R17,Z+1
    02056 8122      LDD	R18,Z+2
    02057 8133      LDD	R19,Z+3
    02058 0198      MOVW	R18,R16
    02059 2700      CLR	R16
    0205A 2711      CLR	R17
    0205B 925A      ST	-Y,R5
    0205C 924A      ST	-Y,R4
    0205D 923A      ST	-Y,R3
    0205E 922A      ST	-Y,R2
    0205F 940E 401E CALL	div32s
    02061 2C2E      MOV	R2,R14
    02062 2433      CLR	R3
    02063 2444      CLR	R4
    02064 2455      CLR	R5
    02065 925A      ST	-Y,R5
    02066 924A      ST	-Y,R4
    02067 923A      ST	-Y,R3
    02068 922A      ST	-Y,R2
    02069 940E 401E CALL	div32s
    0206B 01F6      MOVW	R30,R12
    0206C 8300      ST	Z,R16
    0206D 8311      STD	Z+1,R17
    0206E 8322      STD	Z+2,R18
    0206F 8333      STD	Z+3,R19
(1373) 		packet_count);
(1374) 	if (accel[2] > 0L)
    02070 E040      LDI	R20,0
    02071 E050      LDI	R21,0
    02072 E060      LDI	R22,0
    02073 E070      LDI	R23,0
    02074 A5E8      LDD	R30,Y+40
    02075 A5F9      LDD	R31,Y+41
    02076 8420      LDD	R2,Z+8
    02077 8431      LDD	R3,Z+9
    02078 8442      LDD	R4,Z+10
    02079 8453      LDD	R5,Z+11
    0207A 1542      CP	R20,R2
    0207B 0553      CPC	R21,R3
    0207C 0564      CPC	R22,R4
    0207D 0575      CPC	R23,R5
    0207E F4AC      BGE	0x2094
(1375) 		accel[2] -= 65536L;
    0207F 01CF      MOVW	R24,R30
    02080 9608      ADIW	R24,0x8
    02081 016C      MOVW	R12,R24
    02082 E040      LDI	R20,0
    02083 E050      LDI	R21,0
    02084 E061      LDI	R22,1
    02085 E070      LDI	R23,0
    02086 01FC      MOVW	R30,R24
    02087 8020      LD	R2,Z
    02088 8031      LDD	R3,Z+1
    02089 8042      LDD	R4,Z+2
    0208A 8053      LDD	R5,Z+3
    0208B 1A24      SUB	R2,R20
    0208C 0A35      SBC	R3,R21
    0208D 0A46      SBC	R4,R22
    0208E 0A57      SBC	R5,R23
    0208F 8220      ST	Z,R2
    02090 8231      STD	Z+1,R3
    02091 8242      STD	Z+2,R4
    02092 8253      STD	Z+3,R5
    02093 C015      RJMP	0x20A9
(1376) 	else
(1377) 		accel[2] += 65536L;
    02094 A588      LDD	R24,Y+40
    02095 A599      LDD	R25,Y+41
    02096 9608      ADIW	R24,0x8
    02097 015C      MOVW	R10,R24
    02098 E040      LDI	R20,0
    02099 E050      LDI	R21,0
    0209A E061      LDI	R22,1
    0209B E070      LDI	R23,0
    0209C 01FC      MOVW	R30,R24
    0209D 8020      LD	R2,Z
    0209E 8031      LDD	R3,Z+1
    0209F 8042      LDD	R4,Z+2
    020A0 8053      LDD	R5,Z+3
    020A1 0E24      ADD	R2,R20
    020A2 1E35      ADC	R3,R21
    020A3 1E46      ADC	R4,R22
    020A4 1E57      ADC	R5,R23
    020A5 8220      ST	Z,R2
    020A6 8231      STD	Z+1,R3
    020A7 8242      STD	Z+2,R4
    020A8 8253      STD	Z+3,R5
(1378) 	#endif
(1379) 
(1380) 	return 0;
    020A9 2700      CLR	R16
    020AA 2711      CLR	R17
    020AB 966C      ADIW	R28,0x1C
    020AC 940E 4107 CALL	pop_xgsetF0FC
    020AE 9624      ADIW	R28,4
    020AF 9508      RET
_mpu_run_self_test:
  dmp_was_on           --> R22
  lpf                  --> Y,+31
  sample_rate          --> Y,+29
  gyro_fsr             --> Y,+27
  sensors_on           --> R10
  fifo_sensors         --> Y,+26
  accel_fsr            --> Y,+25
  gyro_result          --> R14
  accel_result         --> R12
  result               --> R20
  accel_st             --> Y,+13
  gyro_st              --> Y,+1
  tries                --> R12
  ii                   --> R14
  accel                --> Y,+45
  gyro                 --> Y,+43
    020B0 940E 3FCD CALL	push_arg4
    020B2 940E 4112 CALL	push_xgsetF0FC
    020B4 97A1      SBIW	R28,0x21
(1381) }
(1382) 
(1383) int mpu_run_self_test(long *gyro, long *accel)
(1384) {
(1385) 	const unsigned char tries = 2;
    020B5 E082      LDI	R24,2
    020B6 2EC8      MOV	R12,R24
(1386) 	long gyro_st[3], accel_st[3];
(1387) 	unsigned char accel_result, gyro_result;
(1388) 	int ii;
(1389) 	int result;
(1390) 	unsigned char accel_fsr, fifo_sensors, sensors_on;
(1391) 	unsigned short gyro_fsr, sample_rate, lpf;
(1392) 	unsigned char dmp_was_on;
(1393) 
(1394) 	if (st.chip_cfg.dmp_on) 
    020B7 9020 01CD LDS	R2,inv_mpu.c:st+29
    020B9 2022      TST	R2
    020BA F021      BEQ	0x20BF
(1395) 	{
(1396) 		mpu_set_dmp_state(0);
    020BB 2700      CLR	R16
    020BC D2C4      RCALL	_mpu_set_dmp_state
(1397) 		dmp_was_on = 1;
    020BD E061      LDI	R22,1
(1398) 	} else
    020BE C001      RJMP	0x20C0
(1399) 		dmp_was_on = 0;
    020BF 2766      CLR	R22
(1400) 
(1401) 	mpu_get_gyro_fsr(&gyro_fsr);
    020C0 018E      MOVW	R16,R28
    020C1 5E05      SUBI	R16,0xE5
    020C2 4F1F      SBCI	R17,0xFF
    020C3 940E 1487 CALL	_mpu_get_gyro_fsr
(1402) 	mpu_get_accel_fsr(&accel_fsr);
    020C5 018E      MOVW	R16,R28
    020C6 5E07      SUBI	R16,0xE7
    020C7 4F1F      SBCI	R17,0xFF
    020C8 940E 1521 CALL	_mpu_get_accel_fsr
(1403) 	mpu_get_lpf(&lpf);
    020CA 018E      MOVW	R16,R28
    020CB 5E01      SUBI	R16,0xE1
    020CC 4F1F      SBCI	R17,0xFF
    020CD 940E 15B6 CALL	_mpu_get_lpf
(1404) 	mpu_get_sample_rate(&sample_rate);
    020CF 018E      MOVW	R16,R28
    020D0 5E03      SUBI	R16,0xE3
    020D1 4F1F      SBCI	R17,0xFF
    020D2 940E 1665 CALL	_mpu_get_sample_rate
(1405) 	sensors_on = st.chip_cfg.sensors;
    020D4 90A0 01B6 LDS	R10,inv_mpu.c:st+6
(1406) 	mpu_get_fifo_config(&fifo_sensors);
    020D6 018E      MOVW	R16,R28
    020D7 5E06      SUBI	R16,0xE6
    020D8 4F1F      SBCI	R17,0xFF
    020D9 940E 1762 CALL	_mpu_get_fifo_config
(1407) 
(1408) 	for (ii = 0; ii < tries; ii++)
    020DB 24EE      CLR	R14
    020DC 24FF      CLR	R15
    020DD C00E      RJMP	0x20EC
(1409) 		if (!get_st_biases(gyro, accel, 0))
    020DE 2422      CLR	R2
    020DF 8228      ST	Y,R2
    020E0 A52D      LDD	R18,Y+45
    020E1 A53E      LDD	R19,Y+46
    020E2 A50B      LDD	R16,Y+43
    020E3 A51C      LDD	R17,Y+44
    020E4 DBE5      RCALL	inv_mpu.c:get_st_biases
    020E5 3000      CPI	R16,0
    020E6 0701      CPC	R16,R17
    020E7 F409      BNE	0x20E9
(1410) 			break;
    020E8 C008      RJMP	0x20F1
    020E9 01C7      MOVW	R24,R14
    020EA 9601      ADIW	R24,1
    020EB 017C      MOVW	R14,R24
    020EC 2C2C      MOV	R2,R12
    020ED 2433      CLR	R3
    020EE 14E2      CP	R14,R2
    020EF 04F3      CPC	R15,R3
    020F0 F36C      BLT	0x20DE
(1411) 	if (ii == tries) {
    020F1 2C2C      MOV	R2,R12
    020F2 2433      CLR	R3
    020F3 14E2      CP	R14,R2
    020F4 04F3      CPC	R15,R3
    020F5 F411      BNE	0x20F8
(1412) 		result = 0;
    020F6 2744      CLR	R20
    020F7 2755      CLR	R21
(1413) 	}
(1414) 	for (ii = 0; ii < tries; ii++)
    020F8 24EE      CLR	R14
    020F9 24FF      CLR	R15
    020FA C010      RJMP	0x210B
(1415) 		if (!get_st_biases(gyro_st, accel_st, 1))
    020FB E081      LDI	R24,1
    020FC 8388      ST	Y,R24
    020FD 019E      MOVW	R18,R28
    020FE 5F23      SUBI	R18,0xF3
    020FF 4F3F      SBCI	R19,0xFF
    02100 018E      MOVW	R16,R28
    02101 5F0F      SUBI	R16,0xFF
    02102 4F1F      SBCI	R17,0xFF
    02103 DBC6      RCALL	inv_mpu.c:get_st_biases
    02104 3000      CPI	R16,0
    02105 0701      CPC	R16,R17
    02106 F409      BNE	0x2108
(1416) 			break;
    02107 C008      RJMP	0x2110
    02108 01C7      MOVW	R24,R14
    02109 9601      ADIW	R24,1
    0210A 017C      MOVW	R14,R24
    0210B 2C2C      MOV	R2,R12
    0210C 2433      CLR	R3
    0210D 14E2      CP	R14,R2
    0210E 04F3      CPC	R15,R3
    0210F F35C      BLT	0x20FB
(1417) 	if (ii == tries) 
    02110 2C2C      MOV	R2,R12
    02111 2433      CLR	R3
    02112 14E2      CP	R14,R2
    02113 04F3      CPC	R15,R3
    02114 F401      BNE	0x2115
(1418) 	{
(1419) 		result = 0;
(1420) 	}
(1421) 	accel_result = accel_self_test(accel, accel_st);
    02115 019E      MOVW	R18,R28
    02116 5F23      SUBI	R18,0xF3
    02117 4F3F      SBCI	R19,0xFF
    02118 A50D      LDD	R16,Y+45
    02119 A51E      LDD	R17,Y+46
    0211A D9F2      RCALL	inv_mpu.c:accel_self_test
    0211B 0168      MOVW	R12,R16
(1422) 	gyro_result = gyro_self_test(gyro, gyro_st);
    0211C 019E      MOVW	R18,R28
    0211D 5F2F      SUBI	R18,0xFF
    0211E 4F3F      SBCI	R19,0xFF
    0211F A50B      LDD	R16,Y+43
    02120 A51C      LDD	R17,Y+44
    02121 DAAC      RCALL	inv_mpu.c:gyro_self_test
    02122 0178      MOVW	R14,R16
(1423) 
(1424) 	result = 0;
    02123 2744      CLR	R20
    02124 2755      CLR	R21
(1425) 	if (!gyro_result)
    02125 2300      TST	R16
    02126 F409      BNE	0x2128
(1426) 		result |= 0x01;
    02127 6041      ORI	R20,1
(1427) 	if (!accel_result)
    02128 20CC      TST	R12
    02129 F409      BNE	0x212B
(1428) 		result |= 0x02;
    0212A 6042      ORI	R20,2
(1429) 	st.chip_cfg.gyro_fsr = 0xFF;
    0212B EF8F      LDI	R24,0xFF
    0212C 9380 01B4 STS	inv_mpu.c:st+4,R24
(1430) 	st.chip_cfg.accel_fsr = 0xFF;
    0212E 9380 01B5 STS	inv_mpu.c:st+5,R24
(1431) 	st.chip_cfg.lpf = 0xFF;
    02130 9380 01B7 STS	inv_mpu.c:st+7,R24
(1432) 	st.chip_cfg.sample_rate = 0xFFFF;
    02132 EF9F      LDI	R25,0xFF
    02133 9390 01BA STS	inv_mpu.c:st+10,R25
    02135 9380 01B9 STS	inv_mpu.c:st+9,R24
(1433) 	st.chip_cfg.sensors = 0xFF;
    02137 9380 01B6 STS	inv_mpu.c:st+6,R24
(1434) 	st.chip_cfg.fifo_enable = 0xFF;
    02139 9380 01BB STS	inv_mpu.c:st+11,R24
(1435) 	st.chip_cfg.clk_src = INV_CLK_PLL;
    0213B E081      LDI	R24,1
    0213C 9380 01B8 STS	inv_mpu.c:st+8,R24
(1436) 	mpu_set_gyro_fsr(gyro_fsr);
    0213E 8D0B      LDD	R16,Y+27
    0213F 8D1C      LDD	R17,Y+28
    02140 940E 14BE CALL	_mpu_set_gyro_fsr
(1437) 	mpu_set_accel_fsr(accel_fsr);
    02142 8D09      LDD	R16,Y+25
    02143 940E 1556 CALL	_mpu_set_accel_fsr
(1438) 	mpu_set_lpf(lpf);
    02145 8D0F      LDD	R16,Y+31
    02146 A118      LDD	R17,Y+32
    02147 940E 160D CALL	_mpu_set_lpf
(1439) 	mpu_set_sample_rate(sample_rate);
    02149 8D0D      LDD	R16,Y+29
    0214A 8D1E      LDD	R17,Y+30
    0214B 940E 1676 CALL	_mpu_set_sample_rate
(1440) 	mpu_set_sensors(sensors_on);
    0214D 2D0A      MOV	R16,R10
    0214E 940E 17B5 CALL	_mpu_set_sensors
(1441) 	mpu_configure_fifo(fifo_sensors);
    02150 8D0A      LDD	R16,Y+26
    02151 940E 1769 CALL	_mpu_configure_fifo
(1442) 
(1443) 	if (dmp_was_on)
    02153 2366      TST	R22
    02154 F011      BEQ	0x2157
(1444) 		mpu_set_dmp_state(1);
    02155 E001      LDI	R16,1
    02156 D22A      RCALL	_mpu_set_dmp_state
(1445) 
(1446) 	return result;
    02157 018A      MOVW	R16,R20
    02158 96A1      ADIW	R28,0x21
    02159 940E 4107 CALL	pop_xgsetF0FC
    0215B 9624      ADIW	R28,4
    0215C 9508      RET
_mpu_write_mem:
  tmp                  --> Y,+4
  data                 --> R12
  length               --> R10
  mem_addr             --> R20
    0215D 940E 413F CALL	push_xgset303C
    0215F 0159      MOVW	R10,R18
    02160 01A8      MOVW	R20,R16
    02161 9726      SBIW	R28,6
    02162 84CC      LDD	R12,Y+12
    02163 84DD      LDD	R13,Y+13
(1447) }
(1448) 
(1449) int mpu_write_mem(unsigned short mem_addr, unsigned short length,
(1450) 		unsigned char *data)
(1451) {
(1452) 	unsigned char tmp[2];
(1453) 
(1454) 	if (!data)
    02164 20CC      TST	R12
    02165 F429      BNE	0x216B
    02166 20DD      TST	R13
    02167 F419      BNE	0x216B
(1455) 		return -1;
    02168 EF0F      LDI	R16,0xFF
    02169 EF1F      LDI	R17,0xFF
    0216A C04B      RJMP	0x21B6
(1456) 	if (!st.chip_cfg.sensors)
    0216B 9020 01B6 LDS	R2,inv_mpu.c:st+6
    0216D 2022      TST	R2
    0216E F419      BNE	0x2172
(1457) 		return -1;
    0216F EF0F      LDI	R16,0xFF
    02170 EF1F      LDI	R17,0xFF
    02171 C044      RJMP	0x21B6
(1458) 
(1459) 	tmp[0] = (unsigned char)(mem_addr >> 8);
    02172 011A      MOVW	R2,R20
    02173 2C23      MOV	R2,R3
    02174 2433      CLR	R3
    02175 822C      STD	Y+4,R2
(1460) 	tmp[1] = (unsigned char)(mem_addr & 0xFF);
    02176 01CA      MOVW	R24,R20
    02177 7090      ANDI	R25,0
    02178 838D      STD	Y+5,R24
(1461) 
(1462) 	if (tmp[1] + length > st.hw->bank_size)
    02179 2E28      MOV	R2,R24
    0217A 2433      CLR	R3
    0217B 0C2A      ADD	R2,R10
    0217C 1C3B      ADC	R3,R11
    0217D 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    0217F 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    02181 8440      LDD	R4,Z+8
    02182 8451      LDD	R5,Z+9
    02183 1442      CP	R4,R2
    02184 0453      CPC	R5,R3
    02185 F418      BCC	0x2189
(1463) 		return -1;
    02186 EF0F      LDI	R16,0xFF
    02187 EF1F      LDI	R17,0xFF
    02188 C02D      RJMP	0x21B6
(1464) 
(1465) 	if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
    02189 01CE      MOVW	R24,R28
    0218A 9604      ADIW	R24,4
    0218B 839B      STD	Y+3,R25
    0218C 838A      STD	Y+2,R24
    0218D E082      LDI	R24,2
    0218E 8388      ST	Y,R24
    0218F 91E0 01B0 LDS	R30,inv_mpu.c:st
    02191 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    02193 8D20      LDD	R18,Z+24
    02194 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    02196 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    02198 8100      LD	R16,Z
    02199 940E 0E1B CALL	_i2cwrite
    0219B 2300      TST	R16
    0219C F019      BEQ	0x21A0
(1466) 		return -1;
    0219D EF0F      LDI	R16,0xFF
    0219E EF1F      LDI	R17,0xFF
    0219F C016      RJMP	0x21B6
(1467) 	if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
    021A0 82DB      STD	Y+3,R13
    021A1 82CA      STD	Y+2,R12
    021A2 82A8      ST	Y,R10
    021A3 91E0 01B0 LDS	R30,inv_mpu.c:st
    021A5 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    021A7 8925      LDD	R18,Z+21
    021A8 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    021AA 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    021AC 8100      LD	R16,Z
    021AD 940E 0E1B CALL	_i2cwrite
    021AF 2300      TST	R16
    021B0 F019      BEQ	0x21B4
(1468) 		return -1;
    021B1 EF0F      LDI	R16,0xFF
    021B2 EF1F      LDI	R17,0xFF
    021B3 C002      RJMP	0x21B6
(1469) 	return 0;
    021B4 2700      CLR	R16
    021B5 2711      CLR	R17
    021B6 9626      ADIW	R28,6
    021B7 940C 4146 JMP	pop_xgset303C
_mpu_read_mem:
  tmp                  --> Y,+4
  data                 --> R12
  length               --> R10
  mem_addr             --> R20
    021B9 940E 413F CALL	push_xgset303C
    021BB 0159      MOVW	R10,R18
    021BC 01A8      MOVW	R20,R16
    021BD 9726      SBIW	R28,6
    021BE 84CC      LDD	R12,Y+12
    021BF 84DD      LDD	R13,Y+13
(1470) }
(1471) 
(1472) int mpu_read_mem(unsigned short mem_addr, unsigned short length,
(1473)         unsigned char *data)
(1474) {
(1475) 	unsigned char tmp[2];
(1476) 
(1477) 	if (!data)
    021C0 20CC      TST	R12
    021C1 F429      BNE	0x21C7
    021C2 20DD      TST	R13
    021C3 F419      BNE	0x21C7
(1478) 		return -1;
    021C4 EF0F      LDI	R16,0xFF
    021C5 EF1F      LDI	R17,0xFF
    021C6 C04B      RJMP	0x2212
(1479) 	if (!st.chip_cfg.sensors)
    021C7 9020 01B6 LDS	R2,inv_mpu.c:st+6
    021C9 2022      TST	R2
    021CA F419      BNE	0x21CE
(1480) 		return -1;
    021CB EF0F      LDI	R16,0xFF
    021CC EF1F      LDI	R17,0xFF
    021CD C044      RJMP	0x2212
(1481) 
(1482) 	tmp[0] = (unsigned char)(mem_addr >> 8);
    021CE 011A      MOVW	R2,R20
    021CF 2C23      MOV	R2,R3
    021D0 2433      CLR	R3
    021D1 822C      STD	Y+4,R2
(1483) 	tmp[1] = (unsigned char)(mem_addr & 0xFF);
    021D2 01CA      MOVW	R24,R20
    021D3 7090      ANDI	R25,0
    021D4 838D      STD	Y+5,R24
(1484) 
(1485) 	if (tmp[1] + length > st.hw->bank_size)
    021D5 2E28      MOV	R2,R24
    021D6 2433      CLR	R3
    021D7 0C2A      ADD	R2,R10
    021D8 1C3B      ADC	R3,R11
    021D9 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    021DB 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    021DD 8440      LDD	R4,Z+8
    021DE 8451      LDD	R5,Z+9
    021DF 1442      CP	R4,R2
    021E0 0453      CPC	R5,R3
    021E1 F418      BCC	0x21E5
(1486) 		return -1;
    021E2 EF0F      LDI	R16,0xFF
    021E3 EF1F      LDI	R17,0xFF
    021E4 C02D      RJMP	0x2212
(1487) 
(1488) 	if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
    021E5 01CE      MOVW	R24,R28
    021E6 9604      ADIW	R24,4
    021E7 839B      STD	Y+3,R25
    021E8 838A      STD	Y+2,R24
    021E9 E082      LDI	R24,2
    021EA 8388      ST	Y,R24
    021EB 91E0 01B0 LDS	R30,inv_mpu.c:st
    021ED 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    021EF 8D20      LDD	R18,Z+24
    021F0 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    021F2 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    021F4 8100      LD	R16,Z
    021F5 940E 0E1B CALL	_i2cwrite
    021F7 2300      TST	R16
    021F8 F019      BEQ	0x21FC
(1489) 		return -1;
    021F9 EF0F      LDI	R16,0xFF
    021FA EF1F      LDI	R17,0xFF
    021FB C016      RJMP	0x2212
(1490) 	if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
    021FC 82DB      STD	Y+3,R13
    021FD 82CA      STD	Y+2,R12
    021FE 82A8      ST	Y,R10
    021FF 91E0 01B0 LDS	R30,inv_mpu.c:st
    02201 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    02203 8925      LDD	R18,Z+21
    02204 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    02206 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    02208 8100      LD	R16,Z
    02209 940E 0E31 CALL	_i2cread
    0220B 2300      TST	R16
    0220C F019      BEQ	0x2210
(1491) 		return -1;
    0220D EF0F      LDI	R16,0xFF
    0220E EF1F      LDI	R17,0xFF
    0220F C002      RJMP	0x2212
(1492) 	return 0;
    02210 2700      CLR	R16
    02211 2711      CLR	R17
    02212 9626      ADIW	R28,6
    02213 940C 4146 JMP	pop_xgset303C
_mpu_set_bypass:
  tmp                  --> Y,+4
  bypass_on            --> R10
    02215 92AA      ST	-Y,R10
    02216 92CA      ST	-Y,R12
    02217 2EA0      MOV	R10,R16
    02218 9725      SBIW	R28,5
(1493) }
(1494) 
(1495) int mpu_set_bypass(unsigned char bypass_on)
(1496) {
(1497)     unsigned char tmp;
(1498) 
(1499)     if (st.chip_cfg.bypass_mode == bypass_on)
    02219 9020 01BD LDS	R2,inv_mpu.c:st+13
    0221B 142A      CP	R2,R10
    0221C F419      BNE	0x2220
(1500)         return 0;
    0221D 2700      CLR	R16
    0221E 2711      CLR	R17
    0221F C0CB      RJMP	0x22EB
(1501) 
(1502)     if (bypass_on) {
    02220 20AA      TST	R10
    02221 F409      BNE	0x2223
    02222 C05D      RJMP	0x2280
(1503)         if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
    02223 01CE      MOVW	R24,R28
    02224 9604      ADIW	R24,4
    02225 839B      STD	Y+3,R25
    02226 838A      STD	Y+2,R24
    02227 E081      LDI	R24,1
    02228 8388      ST	Y,R24
    02229 91E0 01B0 LDS	R30,inv_mpu.c:st
    0222B 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    0222D 8124      LDD	R18,Z+4
    0222E 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    02230 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    02232 8100      LD	R16,Z
    02233 940E 0E31 CALL	_i2cread
    02235 2300      TST	R16
    02236 F019      BEQ	0x223A
(1504)             return -1;
    02237 EF0F      LDI	R16,0xFF
    02238 EF1F      LDI	R17,0xFF
    02239 C0B1      RJMP	0x22EB
(1505)         tmp &= ~BIT_AUX_IF_EN;
    0223A 818C      LDD	R24,Y+4
    0223B 7D8F      ANDI	R24,0xDF
    0223C 838C      STD	Y+4,R24
(1506)         if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
    0223D 01CE      MOVW	R24,R28
    0223E 9604      ADIW	R24,4
    0223F 839B      STD	Y+3,R25
    02240 838A      STD	Y+2,R24
    02241 E081      LDI	R24,1
    02242 8388      ST	Y,R24
    02243 91E0 01B0 LDS	R30,inv_mpu.c:st
    02245 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    02247 8124      LDD	R18,Z+4
    02248 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    0224A 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    0224C 8100      LD	R16,Z
    0224D 940E 0E1B CALL	_i2cwrite
    0224F 2300      TST	R16
    02250 F019      BEQ	0x2254
(1507)             return -1;
    02251 EF0F      LDI	R16,0xFF
    02252 EF1F      LDI	R17,0xFF
    02253 C097      RJMP	0x22EB
(1508)         delay_ms(3);
    02254 E003      LDI	R16,3
    02255 E010      LDI	R17,0
    02256 940E 0D6E CALL	_delay_ms
(1509)         tmp = BIT_BYPASS_EN;
    02258 E082      LDI	R24,2
    02259 838C      STD	Y+4,R24
(1510)         if (st.chip_cfg.active_low_int)
    0225A 9020 01CB LDS	R2,inv_mpu.c:st+27
    0225C 2022      TST	R2
    0225D F011      BEQ	0x2260
(1511)             tmp |= BIT_ACTL;
    0225E 6880      ORI	R24,0x80
    0225F 838C      STD	Y+4,R24
(1512)         if (st.chip_cfg.latched_int)
    02260 9020 01CC LDS	R2,inv_mpu.c:st+28
    02262 2022      TST	R2
    02263 F019      BEQ	0x2267
(1513)             tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
    02264 818C      LDD	R24,Y+4
    02265 6380      ORI	R24,0x30
    02266 838C      STD	Y+4,R24
(1514)         if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
    02267 01CE      MOVW	R24,R28
    02268 9604      ADIW	R24,4
    02269 839B      STD	Y+3,R25
    0226A 838A      STD	Y+2,R24
    0226B E081      LDI	R24,1
    0226C 8388      ST	Y,R24
    0226D 91E0 01B0 LDS	R30,inv_mpu.c:st
    0226F 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    02271 8924      LDD	R18,Z+20
    02272 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    02274 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    02276 8100      LD	R16,Z
    02277 940E 0E1B CALL	_i2cwrite
    02279 2EC0      MOV	R12,R16
    0227A 2300      TST	R16
    0227B F409      BNE	0x227D
    0227C C06A      RJMP	0x22E7
(1515)             return -1;
    0227D EF0F      LDI	R16,0xFF
    0227E EF1F      LDI	R17,0xFF
    0227F C06B      RJMP	0x22EB
(1516)     } else {
(1517)         /* Enable I2C master mode if compass is being used. */
(1518)         if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
    02280 01CE      MOVW	R24,R28
    02281 9604      ADIW	R24,4
    02282 839B      STD	Y+3,R25
    02283 838A      STD	Y+2,R24
    02284 E081      LDI	R24,1
    02285 8388      ST	Y,R24
    02286 91E0 01B0 LDS	R30,inv_mpu.c:st
    02288 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    0228A 8124      LDD	R18,Z+4
    0228B 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    0228D 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    0228F 8100      LD	R16,Z
    02290 940E 0E31 CALL	_i2cread
    02292 2EC0      MOV	R12,R16
    02293 2300      TST	R16
    02294 F019      BEQ	0x2298
(1519)             return -1;
    02295 EF0F      LDI	R16,0xFF
    02296 EF1F      LDI	R17,0xFF
    02297 C053      RJMP	0x22EB
(1520)         if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
    02298 9020 01B6 LDS	R2,inv_mpu.c:st+6
    0229A FE20      SBRS	R2,0
    0229B C004      RJMP	0x22A0
(1521)             tmp |= BIT_AUX_IF_EN;
    0229C 818C      LDD	R24,Y+4
    0229D 6280      ORI	R24,0x20
    0229E 838C      STD	Y+4,R24
    0229F C003      RJMP	0x22A3
(1522)         else
(1523)             tmp &= ~BIT_AUX_IF_EN;
    022A0 818C      LDD	R24,Y+4
    022A1 7D8F      ANDI	R24,0xDF
    022A2 838C      STD	Y+4,R24
(1524)         if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
    022A3 01CE      MOVW	R24,R28
    022A4 9604      ADIW	R24,4
    022A5 839B      STD	Y+3,R25
    022A6 838A      STD	Y+2,R24
    022A7 E081      LDI	R24,1
    022A8 8388      ST	Y,R24
    022A9 91E0 01B0 LDS	R30,inv_mpu.c:st
    022AB 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    022AD 8124      LDD	R18,Z+4
    022AE 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    022B0 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    022B2 8100      LD	R16,Z
    022B3 940E 0E1B CALL	_i2cwrite
    022B5 2EC0      MOV	R12,R16
    022B6 2300      TST	R16
    022B7 F019      BEQ	0x22BB
(1525)             return -1;
    022B8 EF0F      LDI	R16,0xFF
    022B9 EF1F      LDI	R17,0xFF
    022BA C030      RJMP	0x22EB
(1526)         delay_ms(3);
    022BB E003      LDI	R16,3
    022BC E010      LDI	R17,0
    022BD 940E 0D6E CALL	_delay_ms
(1527)         if (st.chip_cfg.active_low_int)
    022BF 9020 01CB LDS	R2,inv_mpu.c:st+27
    022C1 2022      TST	R2
    022C2 F019      BEQ	0x22C6
(1528)             tmp = BIT_ACTL;
    022C3 E880      LDI	R24,0x80
    022C4 838C      STD	Y+4,R24
    022C5 C002      RJMP	0x22C8
(1529)         else
(1530)             tmp = 0;
    022C6 2422      CLR	R2
    022C7 822C      STD	Y+4,R2
(1531)         if (st.chip_cfg.latched_int)
    022C8 9020 01CC LDS	R2,inv_mpu.c:st+28
    022CA 2022      TST	R2
    022CB F019      BEQ	0x22CF
(1532)             tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
    022CC 818C      LDD	R24,Y+4
    022CD 6380      ORI	R24,0x30
    022CE 838C      STD	Y+4,R24
(1533)         if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
    022CF 01CE      MOVW	R24,R28
    022D0 9604      ADIW	R24,4
    022D1 839B      STD	Y+3,R25
    022D2 838A      STD	Y+2,R24
    022D3 E081      LDI	R24,1
    022D4 8388      ST	Y,R24
    022D5 91E0 01B0 LDS	R30,inv_mpu.c:st
    022D7 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    022D9 8924      LDD	R18,Z+20
    022DA 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    022DC 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    022DE 8100      LD	R16,Z
    022DF 940E 0E1B CALL	_i2cwrite
    022E1 2EC0      MOV	R12,R16
    022E2 2300      TST	R16
    022E3 F019      BEQ	0x22E7
(1534)             return -1;
    022E4 EF0F      LDI	R16,0xFF
    022E5 EF1F      LDI	R17,0xFF
    022E6 C004      RJMP	0x22EB
(1535)     }
(1536)     st.chip_cfg.bypass_mode = bypass_on;
    022E7 92A0 01BD STS	inv_mpu.c:st+13,R10
(1537)     return 0;
    022E9 2700      CLR	R16
    022EA 2711      CLR	R17
    022EB 9625      ADIW	R28,5
    022EC 90C9      LD	R12,Y+
    022ED 90A9      LD	R10,Y+
    022EE 9508      RET
_mpu_load_firmware:
  tmp                  --> Y,+20
  cur                  --> Y,+4
  this_write           --> R14
  ii                   --> R12
  sample_rate          --> R10
  start_addr           --> R20
  firmware             --> Y,+34
  length               --> Y,+32
    022EF 940E 3FCD CALL	push_arg4
    022F1 940E 4112 CALL	push_xgsetF0FC
    022F3 9766      SBIW	R28,0x16
    022F4 A14C      LDD	R20,Y+36
    022F5 A15D      LDD	R21,Y+37
    022F6 A0AE      LDD	R10,Y+38
    022F7 A0BF      LDD	R11,Y+39
(1538) }
(1539) 
(1540) 
(1541) int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
(1542)     unsigned short start_addr, unsigned short sample_rate)
(1543) {
(1544) 	unsigned short ii;
(1545) 	unsigned short this_write;
(1546) 	#define LOAD_CHUNK  (16)
(1547) 	unsigned char cur[LOAD_CHUNK], tmp[2];
(1548) 
(1549) 	if (st.chip_cfg.dmp_loaded)
    022F8 9020 01CE LDS	R2,inv_mpu.c:st+30
    022FA 2022      TST	R2
    022FB F019      BEQ	0x22FF
(1550) 		return -1;
    022FC EF0F      LDI	R16,0xFF
    022FD EF1F      LDI	R17,0xFF
    022FE C07D      RJMP	0x237C
(1551) 
(1552) 	if (!firmware)
    022FF A00A      LDD	R0,Y+34
    02300 A01B      LDD	R1,Y+35
    02301 2000      TST	R0
    02302 F429      BNE	0x2308
    02303 2011      TST	R1
    02304 F419      BNE	0x2308
(1553) 		return -1;
    02305 EF0F      LDI	R16,0xFF
    02306 EF1F      LDI	R17,0xFF
    02307 C074      RJMP	0x237C
(1554) 	for (ii = 0; ii < length; ii += this_write) {
    02308 24CC      CLR	R12
    02309 24DD      CLR	R13
    0230A C043      RJMP	0x234E
(1555) 		this_write = min(LOAD_CHUNK, length - ii);
    0230B A028      LDD	R2,Y+32
    0230C A039      LDD	R3,Y+33
    0230D 182C      SUB	R2,R12
    0230E 083D      SBC	R3,R13
    0230F E180      LDI	R24,0x10
    02310 E090      LDI	R25,0
    02311 1582      CP	R24,R2
    02312 0593      CPC	R25,R3
    02313 F418      BCC	0x2317
    02314 E160      LDI	R22,0x10
    02315 E070      LDI	R23,0
    02316 C004      RJMP	0x231B
    02317 A168      LDD	R22,Y+32
    02318 A179      LDD	R23,Y+33
    02319 196C      SUB	R22,R12
    0231A 097D      SBC	R23,R13
    0231B 017B      MOVW	R14,R22
(1556) 		if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
    0231C 0116      MOVW	R2,R12
    0231D A00A      LDD	R0,Y+34
    0231E A01B      LDD	R1,Y+35
    0231F 0C20      ADD	R2,R0
    02320 1C31      ADC	R3,R1
    02321 8239      STD	Y+1,R3
    02322 8228      ST	Y,R2
    02323 0197      MOVW	R18,R14
    02324 0186      MOVW	R16,R12
    02325 DE37      RCALL	_mpu_write_mem
    02326 3000      CPI	R16,0
    02327 0701      CPC	R16,R17
    02328 F019      BEQ	0x232C
(1557) 				return -1;
    02329 EF0F      LDI	R16,0xFF
    0232A EF1F      LDI	R17,0xFF
    0232B C050      RJMP	0x237C
(1558) 		if (mpu_read_mem(ii, this_write, cur))
    0232C 01CE      MOVW	R24,R28
    0232D 9604      ADIW	R24,4
    0232E 8399      STD	Y+1,R25
    0232F 8388      ST	Y,R24
    02330 0197      MOVW	R18,R14
    02331 0186      MOVW	R16,R12
    02332 DE86      RCALL	_mpu_read_mem
    02333 3000      CPI	R16,0
    02334 0701      CPC	R16,R17
    02335 F019      BEQ	0x2339
(1559) 				return -1;
    02336 EF0F      LDI	R16,0xFF
    02337 EF1F      LDI	R17,0xFF
    02338 C043      RJMP	0x237C
(1560) 		if (memcmp((unsigned char*)firmware+ii, (unsigned char*)cur, this_write))
    02339 82F9      STD	Y+1,R15
    0233A 82E8      ST	Y,R14
    0233B 019E      MOVW	R18,R28
    0233C 5F2C      SUBI	R18,0xFC
    0233D 4F3F      SBCI	R19,0xFF
    0233E 0186      MOVW	R16,R12
    0233F A00A      LDD	R0,Y+34
    02340 A01B      LDD	R1,Y+35
    02341 0D00      ADD	R16,R0
    02342 1D11      ADC	R17,R1
    02343 940E 3F96 CALL	_memcmp
    02345 01B8      MOVW	R22,R16
    02346 3000      CPI	R16,0
    02347 0701      CPC	R16,R17
    02348 F019      BEQ	0x234C
(1561) 				return -2;
    02349 EF0E      LDI	R16,0xFE
    0234A EF1F      LDI	R17,0xFF
    0234B C030      RJMP	0x237C
    0234C 0CCE      ADD	R12,R14
    0234D 1CDF      ADC	R13,R15
    0234E A008      LDD	R0,Y+32
    0234F A019      LDD	R1,Y+33
    02350 14C0      CP	R12,R0
    02351 04D1      CPC	R13,R1
    02352 F408      BCC	0x2354
    02353 CFB7      RJMP	0x230B
(1562) 	}
(1563) 
(1564) 	tmp[0] = start_addr >> 8;
    02354 011A      MOVW	R2,R20
    02355 2C23      MOV	R2,R3
    02356 2433      CLR	R3
    02357 8A2C      STD	Y+20,R2
(1565) 	tmp[1] = start_addr & 0xFF;
    02358 01CA      MOVW	R24,R20
    02359 7090      ANDI	R25,0
    0235A 8B8D      STD	Y+21,R24
(1566) 	if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
    0235B 01CE      MOVW	R24,R28
    0235C 9644      ADIW	R24,0x14
    0235D 839B      STD	Y+3,R25
    0235E 838A      STD	Y+2,R24
    0235F E082      LDI	R24,2
    02360 8388      ST	Y,R24
    02361 91E0 01B0 LDS	R30,inv_mpu.c:st
    02363 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    02365 8D22      LDD	R18,Z+26
    02366 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    02368 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    0236A 8100      LD	R16,Z
    0236B 940E 0E1B CALL	_i2cwrite
    0236D 2EC0      MOV	R12,R16
    0236E 2300      TST	R16
    0236F F019      BEQ	0x2373
(1567) 		return -1;
    02370 EF0F      LDI	R16,0xFF
    02371 EF1F      LDI	R17,0xFF
    02372 C009      RJMP	0x237C
(1568) 
(1569) 	st.chip_cfg.dmp_loaded = 1;
    02373 E081      LDI	R24,1
    02374 9380 01CE STS	inv_mpu.c:st+30,R24
(1570) 	st.chip_cfg.dmp_sample_rate = sample_rate;
    02376 92B0 01D0 STS	inv_mpu.c:st+32,R11
    02378 92A0 01CF STS	inv_mpu.c:st+31,R10
(1571) 	return 0;
    0237A 2700      CLR	R16
    0237B 2711      CLR	R17
    0237C 9666      ADIW	R28,0x16
    0237D 940E 4107 CALL	pop_xgsetF0FC
    0237F 9624      ADIW	R28,4
    02380 9508      RET
_mpu_set_dmp_state:
  tmp                  --> Y,+4
  enable               --> R10
    02381 92AA      ST	-Y,R10
    02382 2EA0      MOV	R10,R16
    02383 9725      SBIW	R28,5
(1572) }
(1573) 
(1574) int mpu_set_dmp_state(unsigned char enable)
(1575) {
(1576) 	unsigned char tmp;
(1577) 	if (st.chip_cfg.dmp_on == enable)
    02384 9020 01CD LDS	R2,inv_mpu.c:st+29
    02386 142A      CP	R2,R10
    02387 F419      BNE	0x238B
(1578) 		return 0;
    02388 2700      CLR	R16
    02389 2711      CLR	R17
    0238A C048      RJMP	0x23D3
(1579) 
(1580) 	if (enable) {
    0238B 20AA      TST	R10
    0238C F159      BEQ	0x23B8
(1581) 		if (!st.chip_cfg.dmp_loaded)
    0238D 9020 01CE LDS	R2,inv_mpu.c:st+30
    0238F 2022      TST	R2
    02390 F419      BNE	0x2394
(1582) 				return -1;
    02391 EF0F      LDI	R16,0xFF
    02392 EF1F      LDI	R17,0xFF
    02393 C03F      RJMP	0x23D3
(1583) 		set_int_enable(0);
    02394 2700      CLR	R16
    02395 940E 0ED2 CALL	inv_mpu.c:set_int_enable
(1584) 		mpu_set_bypass(0);
    02397 2700      CLR	R16
    02398 DE7C      RCALL	_mpu_set_bypass
(1585) 
(1586) 		mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
    02399 9100 01CF LDS	R16,inv_mpu.c:st+31
    0239B 9110 01D0 LDS	R17,inv_mpu.c:st+32
    0239D 940E 1676 CALL	_mpu_set_sample_rate
(1587) 
(1588) 		tmp = 0;
    0239F 2422      CLR	R2
    023A0 822C      STD	Y+4,R2
(1589) 		i2c_write(st.hw->addr, 0x23, 1, &tmp);
    023A1 01CE      MOVW	R24,R28
    023A2 9604      ADIW	R24,4
    023A3 839B      STD	Y+3,R25
    023A4 838A      STD	Y+2,R24
    023A5 E081      LDI	R24,1
    023A6 8388      ST	Y,R24
    023A7 E223      LDI	R18,0x23
    023A8 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    023AA 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    023AC 8100      LD	R16,Z
    023AD 940E 0E1B CALL	_i2cwrite
(1590) 		st.chip_cfg.dmp_on = 1;
    023AF E081      LDI	R24,1
    023B0 9380 01CD STS	inv_mpu.c:st+29,R24
(1591) 
(1592) 		set_int_enable(1);
    023B2 E001      LDI	R16,1
    023B3 940E 0ED2 CALL	inv_mpu.c:set_int_enable
(1593) 		mpu_reset_fifo();
    023B5 940E 1336 CALL	_mpu_reset_fifo
(1594) 	} 
    023B7 C019      RJMP	0x23D1
(1595) 	else 
(1596) 	{
(1597) 		set_int_enable(0);
    023B8 2700      CLR	R16
    023B9 940E 0ED2 CALL	inv_mpu.c:set_int_enable
(1598) 		tmp = st.chip_cfg.fifo_enable;
    023BB 9020 01BB LDS	R2,inv_mpu.c:st+11
    023BD 822C      STD	Y+4,R2
(1599) 		i2c_write(st.hw->addr, 0x23, 1, &tmp);
    023BE 01CE      MOVW	R24,R28
    023BF 9604      ADIW	R24,4
    023C0 839B      STD	Y+3,R25
    023C1 838A      STD	Y+2,R24
    023C2 E081      LDI	R24,1
    023C3 8388      ST	Y,R24
    023C4 E223      LDI	R18,0x23
    023C5 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    023C7 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    023C9 8100      LD	R16,Z
    023CA 940E 0E1B CALL	_i2cwrite
(1600) 		st.chip_cfg.dmp_on = 0;
    023CC 2422      CLR	R2
    023CD 9220 01CD STS	inv_mpu.c:st+29,R2
(1601) 		mpu_reset_fifo();
    023CF 940E 1336 CALL	_mpu_reset_fifo
(1602) 	}
(1603) 	return 0;
    023D1 2700      CLR	R16
    023D2 2711      CLR	R17
    023D3 9625      ADIW	R28,5
    023D4 90A9      LD	R10,Y+
    023D5 9508      RET
(1604) }
(1605) 
(1606) int mpu_get_dmp_state(unsigned char *enabled)
(1607) {
(1608) 	enabled[0] = st.chip_cfg.dmp_on;
_mpu_get_dmp_state:
  enabled              --> R16
    023D6 9020 01CD LDS	R2,inv_mpu.c:st+29
    023D8 01F8      MOVW	R30,R16
    023D9 8220      ST	Z,R2
(1609) 	return 0;
    023DA 2700      CLR	R16
    023DB 2711      CLR	R17
    023DC 9508      RET
_mpu_lp_motion_interrupt:
  cache_ptr            --> R22
  ii                   --> R20
  thresh_hw            --> R10
  data                 --> Y,+4
  lpa_freq             --> R20
  time                 --> R22
  thresh               --> R12
    023DD 940E 414D CALL	push_xgsetF03C
    023DF 2F62      MOV	R22,R18
    023E0 0168      MOVW	R12,R16
    023E1 9727      SBIW	R28,7
    023E2 854F      LDD	R20,Y+15
(1610) }
(1611) 
(1612) int mpu_lp_motion_interrupt(unsigned short thresh, unsigned char time,
(1613)     unsigned char lpa_freq)
(1614) {
(1615) 	unsigned char data[3];
(1616) 
(1617) 	if (lpa_freq) 
    023E3 2344      TST	R20
    023E4 F409      BNE	0x23E6
    023E5 C0F1      RJMP	0x24D7
(1618) 	{
(1619) 	unsigned char thresh_hw;
(1620) 	if (thresh > 8160)
    023E6 EE80      LDI	R24,0xE0
    023E7 E19F      LDI	R25,0x1F
    023E8 158C      CP	R24,R12
    023E9 059D      CPC	R25,R13
    023EA F418      BCC	0x23EE
(1621) 		thresh_hw = 255;
    023EB EF8F      LDI	R24,0xFF
    023EC 2EA8      MOV	R10,R24
    023ED C00E      RJMP	0x23FC
(1622) 	else if (thresh < 32)
    023EE 01C6      MOVW	R24,R12
    023EF 3280      CPI	R24,0x20
    023F0 E0E0      LDI	R30,0
    023F1 079E      CPC	R25,R30
    023F2 F418      BCC	0x23F6
(1623) 		thresh_hw = 1;
    023F3 24AA      CLR	R10
    023F4 94A3      INC	R10
    023F5 C006      RJMP	0x23FC
(1624) 	else
(1625) 		thresh_hw = thresh >> 5;
    023F6 E025      LDI	R18,5
    023F7 E030      LDI	R19,0
    023F8 0186      MOVW	R16,R12
    023F9 940E 41A9 CALL	lsr16
    023FB 2EA0      MOV	R10,R16
(1626) 	if (!time)
    023FC 2366      TST	R22
    023FD F409      BNE	0x23FF
(1627) 		time = 1;
    023FE E061      LDI	R22,1
(1628) 
(1629) 	if (lpa_freq > 40)
    023FF E288      LDI	R24,0x28
    02400 1784      CP	R24,R20
    02401 F418      BCC	0x2405
(1630) 		return -1;
    02402 EF0F      LDI	R16,0xFF
    02403 EF1F      LDI	R17,0xFF
    02404 C123      RJMP	0x2528
(1631) 
(1632) 	if (!st.chip_cfg.int_motion_only) 
    02405 9020 01C0 LDS	R2,inv_mpu.c:st+16
    02407 2022      TST	R2
    02408 F529      BNE	0x242E
(1633) 	{
(1634) 		if (st.chip_cfg.dmp_on) 
    02409 9020 01CD LDS	R2,inv_mpu.c:st+29
    0240B 2022      TST	R2
    0240C F031      BEQ	0x2413
(1635) 		{
(1636) 				mpu_set_dmp_state(0);
    0240D 2700      CLR	R16
    0240E DF72      RCALL	_mpu_set_dmp_state
(1637) 				st.chip_cfg.cache.dmp_on = 1;
    0240F E081      LDI	R24,1
    02410 9380 01CA STS	inv_mpu.c:st+26,R24
(1638) 		}
    02412 C003      RJMP	0x2416
(1639) 		else
(1640) 			st.chip_cfg.cache.dmp_on = 0;
    02413 2422      CLR	R2
    02414 9220 01CA STS	inv_mpu.c:st+26,R2
(1641) 		mpu_get_gyro_fsr(&st.chip_cfg.cache.gyro_fsr);
    02416 EC01      LDI	R16,0xC1
    02417 E011      LDI	R17,1
    02418 940E 1487 CALL	_mpu_get_gyro_fsr
(1642) 		mpu_get_accel_fsr(&st.chip_cfg.cache.accel_fsr);
    0241A EC03      LDI	R16,0xC3
    0241B E011      LDI	R17,1
    0241C 940E 1521 CALL	_mpu_get_accel_fsr
(1643) 		mpu_get_lpf(&st.chip_cfg.cache.lpf);
    0241E EC04      LDI	R16,0xC4
    0241F E011      LDI	R17,1
    02420 940E 15B6 CALL	_mpu_get_lpf
(1644) 		mpu_get_sample_rate(&st.chip_cfg.cache.sample_rate);
    02422 EC06      LDI	R16,0xC6
    02423 E011      LDI	R17,1
    02424 940E 1665 CALL	_mpu_get_sample_rate
(1645) 		st.chip_cfg.cache.sensors_on = st.chip_cfg.sensors;
    02426 9020 01B6 LDS	R2,inv_mpu.c:st+6
    02428 9220 01C8 STS	inv_mpu.c:st+24,R2
(1646) 		mpu_get_fifo_config(&st.chip_cfg.cache.fifo_sensors);
    0242A EC09      LDI	R16,0xC9
    0242B E011      LDI	R17,1
    0242C 940E 1762 CALL	_mpu_get_fifo_config
(1647) 	}
(1648) 	set_int_enable(0);
    0242E 2700      CLR	R16
    0242F 940E 0ED2 CALL	inv_mpu.c:set_int_enable
(1649) 	mpu_lp_accel_mode(0);
    02431 2700      CLR	R16
    02432 940E 1088 CALL	_mpu_lp_accel_mode
(1650) 	data[0] = INV_FILTER_256HZ_NOLPF2;
    02434 2422      CLR	R2
    02435 822C      STD	Y+4,R2
(1651) 	if (i2c_write(st.hw->addr, st.reg->lpf, 1, data))
    02436 01CE      MOVW	R24,R28
    02437 9604      ADIW	R24,4
    02438 839B      STD	Y+3,R25
    02439 838A      STD	Y+2,R24
    0243A E081      LDI	R24,1
    0243B 8388      ST	Y,R24
    0243C 91E0 01B0 LDS	R30,inv_mpu.c:st
    0243E 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    02440 8122      LDD	R18,Z+2
    02441 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    02443 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    02445 8100      LD	R16,Z
    02446 940E 0E1B CALL	_i2cwrite
    02448 2300      TST	R16
    02449 F019      BEQ	0x244D
(1652) 			return -1;
    0244A EF0F      LDI	R16,0xFF
    0244B EF1F      LDI	R17,0xFF
    0244C C0DB      RJMP	0x2528
(1653) 	data[0] = BIT_MOT_INT_EN;
    0244D E480      LDI	R24,0x40
    0244E 838C      STD	Y+4,R24
(1654) 	if (i2c_write(st.hw->addr, st.reg->int_enable, 1, data))
    0244F 01CE      MOVW	R24,R28
    02450 9604      ADIW	R24,4
    02451 839B      STD	Y+3,R25
    02452 838A      STD	Y+2,R24
    02453 E081      LDI	R24,1
    02454 8388      ST	Y,R24
    02455 91E0 01B0 LDS	R30,inv_mpu.c:st
    02457 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    02459 8527      LDD	R18,Z+15
    0245A 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    0245C 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    0245E 8100      LD	R16,Z
    0245F 940E 0E1B CALL	_i2cwrite
    02461 2300      TST	R16
    02462 F009      BEQ	0x2464
(1655) 			goto lp_int_restore;
    02463 C088      RJMP	0x24EC
(1656) 
(1657) 	data[0] = thresh_hw;
    02464 82AC      STD	Y+4,R10
(1658) 	data[1] = time;
    02465 836D      STD	Y+5,R22
(1659) 	if (i2c_write(st.hw->addr, st.reg->motion_thr, 2, data))
    02466 01CE      MOVW	R24,R28
    02467 9604      ADIW	R24,4
    02468 839B      STD	Y+3,R25
    02469 838A      STD	Y+2,R24
    0246A E082      LDI	R24,2
    0246B 8388      ST	Y,R24
    0246C 91E0 01B0 LDS	R30,inv_mpu.c:st
    0246E 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    02470 8520      LDD	R18,Z+8
    02471 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    02473 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    02475 8100      LD	R16,Z
    02476 940E 0E1B CALL	_i2cwrite
    02478 2EA0      MOV	R10,R16
    02479 2300      TST	R16
    0247A F009      BEQ	0x247C
(1660) 		goto lp_int_restore;
    0247B C070      RJMP	0x24EC
(1661) 
(1662) 	delay_ms(5);
    0247C E005      LDI	R16,5
    0247D E010      LDI	R17,0
    0247E 940E 0D6E CALL	_delay_ms
(1663) 	data[0] = (st.chip_cfg.accel_fsr << 3) | BITS_HPF;
    02480 9180 01B5 LDS	R24,inv_mpu.c:st+5
    02482 0F88      LSL	R24
    02483 0F88      LSL	R24
    02484 0F88      LSL	R24
    02485 6087      ORI	R24,7
    02486 838C      STD	Y+4,R24
(1664) 	if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, data))
    02487 01CE      MOVW	R24,R28
    02488 9604      ADIW	R24,4
    02489 839B      STD	Y+3,R25
    0248A 838A      STD	Y+2,R24
    0248B E081      LDI	R24,1
    0248C 8388      ST	Y,R24
    0248D 91E0 01B0 LDS	R30,inv_mpu.c:st
    0248F 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    02491 8127      LDD	R18,Z+7
    02492 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    02494 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    02496 8100      LD	R16,Z
    02497 940E 0E1B CALL	_i2cwrite
    02499 2EA0      MOV	R10,R16
    0249A 2300      TST	R16
    0249B F009      BEQ	0x249D
(1665) 		goto lp_int_restore;
    0249C C04F      RJMP	0x24EC
(1666) 
(1667) 	data[0] = BIT_LPA_CYCLE;
    0249D E280      LDI	R24,0x20
    0249E 838C      STD	Y+4,R24
(1668) 	if (lpa_freq == 1)
    0249F 3041      CPI	R20,1
    024A0 F419      BNE	0x24A4
(1669) 		data[1] = INV_LPA_1_25HZ;
    024A1 2422      CLR	R2
    024A2 822D      STD	Y+5,R2
    024A3 C00E      RJMP	0x24B2
(1670) 	else if (lpa_freq <= 5)
    024A4 E085      LDI	R24,5
    024A5 1784      CP	R24,R20
    024A6 F018      BCS	0x24AA
(1671) 		data[1] = INV_LPA_5HZ;
    024A7 E081      LDI	R24,1
    024A8 838D      STD	Y+5,R24
    024A9 C008      RJMP	0x24B2
(1672) 	else if (lpa_freq <= 20)
    024AA E184      LDI	R24,0x14
    024AB 1784      CP	R24,R20
    024AC F018      BCS	0x24B0
(1673) 		data[1] = INV_LPA_20HZ;
    024AD E082      LDI	R24,2
    024AE 838D      STD	Y+5,R24
    024AF C002      RJMP	0x24B2
(1674) 	else
(1675) 		data[1] = INV_LPA_40HZ;
    024B0 E083      LDI	R24,3
    024B1 838D      STD	Y+5,R24
(1676) 	data[1] = (data[1] << 6) | BIT_STBY_XYZG;
    024B2 818D      LDD	R24,Y+5
    024B3 0F88      LSL	R24
    024B4 0F88      LSL	R24
    024B5 0F88      LSL	R24
    024B6 0F88      LSL	R24
    024B7 0F88      LSL	R24
    024B8 0F88      LSL	R24
    024B9 6087      ORI	R24,7
    024BA 838D      STD	Y+5,R24
(1677) 	if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
    024BB 01CE      MOVW	R24,R28
    024BC 9604      ADIW	R24,4
    024BD 839B      STD	Y+3,R25
    024BE 838A      STD	Y+2,R24
    024BF E082      LDI	R24,2
    024C0 8388      ST	Y,R24
    024C1 91E0 01B0 LDS	R30,inv_mpu.c:st
    024C3 91F0 01B1 LDS	R31,inv_mpu.c:st+1
    024C5 8922      LDD	R18,Z+18
    024C6 91E0 01B2 LDS	R30,inv_mpu.c:st+2
    024C8 91F0 01B3 LDS	R31,inv_mpu.c:st+3
    024CA 8100      LD	R16,Z
    024CB 940E 0E1B CALL	_i2cwrite
    024CD 2EA0      MOV	R10,R16
    024CE 2300      TST	R16
    024CF F009      BEQ	0x24D1
(1678) 		goto lp_int_restore;
    024D0 C01B      RJMP	0x24EC
(1679) 
(1680) 		st.chip_cfg.int_motion_only = 1;
    024D1 E081      LDI	R24,1
    024D2 9380 01C0 STS	inv_mpu.c:st+16,R24
(1681) 		return 0;
    024D4 2700      CLR	R16
    024D5 2711      CLR	R17
    024D6 C051      RJMP	0x2528
(1682) 	} 
(1683) 	else 
(1684) 		{
(1685) 		int ii;
(1686) 		char *cache_ptr = (char*)&st.chip_cfg.cache;
    024D7 EC61      LDI	R22,0xC1
    024D8 E071      LDI	R23,1
(1687) 		for (ii = 0; ii < sizeof(st.chip_cfg.cache); ii++) 
    024D9 2744      CLR	R20
    024DA 2755      CLR	R21
    024DB C009      RJMP	0x24E5
(1688) 		{
(1689) 				if (cache_ptr[ii] != 0)
    024DC 01FA      MOVW	R30,R20
    024DD 0FE6      ADD	R30,R22
    024DE 1FF7      ADC	R31,R23
    024DF 8020      LD	R2,Z
    024E0 2022      TST	R2
    024E1 F009      BEQ	0x24E3
(1690) 						goto lp_int_restore;
    024E2 C009      RJMP	0x24EC
    024E3 5F4F      SUBI	R20,0xFF
    024E4 4F5F      SBCI	R21,0xFF
    024E5 304A      CPI	R20,0xA
    024E6 E0E0      LDI	R30,0
    024E7 075E      CPC	R21,R30
    024E8 F398      BCS	0x24DC
(1691) 		}
(1692) 		return -1;
    024E9 EF0F      LDI	R16,0xFF
    024EA EF1F      LDI	R17,0xFF
    024EB C03C      RJMP	0x2528
(1693) 	}
(1694) 	lp_int_restore:
(1695) 	st.chip_cfg.gyro_fsr = 0xFF;
    024EC EF8F      LDI	R24,0xFF
    024ED 9380 01B4 STS	inv_mpu.c:st+4,R24
(1696) 	st.chip_cfg.accel_fsr = 0xFF;
    024EF 9380 01B5 STS	inv_mpu.c:st+5,R24
(1697) 	st.chip_cfg.lpf = 0xFF;
    024F1 9380 01B7 STS	inv_mpu.c:st+7,R24
(1698) 	st.chip_cfg.sample_rate = 0xFFFF;
    024F3 EF9F      LDI	R25,0xFF
    024F4 9390 01BA STS	inv_mpu.c:st+10,R25
    024F6 9380 01B9 STS	inv_mpu.c:st+9,R24
(1699) 	st.chip_cfg.sensors = 0xFF;
    024F8 9380 01B6 STS	inv_mpu.c:st+6,R24
(1700) 	st.chip_cfg.fifo_enable = 0xFF;
    024FA 9380 01BB STS	inv_mpu.c:st+11,R24
(1701) 	st.chip_cfg.clk_src = INV_CLK_PLL;
    024FC E081      LDI	R24,1
    024FD 9380 01B8 STS	inv_mpu.c:st+8,R24
(1702) 	mpu_set_sensors(st.chip_cfg.cache.sensors_on);
    024FF 9100 01C8 LDS	R16,inv_mpu.c:st+24
    02501 940E 17B5 CALL	_mpu_set_sensors
(1703) 	mpu_set_gyro_fsr(st.chip_cfg.cache.gyro_fsr);
    02503 9100 01C1 LDS	R16,inv_mpu.c:st+17
    02505 9110 01C2 LDS	R17,inv_mpu.c:st+18
    02507 940E 14BE CALL	_mpu_set_gyro_fsr
(1704) 	mpu_set_accel_fsr(st.chip_cfg.cache.accel_fsr);
    02509 9100 01C3 LDS	R16,inv_mpu.c:st+19
    0250B 940E 1556 CALL	_mpu_set_accel_fsr
(1705) 	mpu_set_lpf(st.chip_cfg.cache.lpf);
    0250D 9100 01C4 LDS	R16,inv_mpu.c:st+20
    0250F 9110 01C5 LDS	R17,inv_mpu.c:st+21
    02511 940E 160D CALL	_mpu_set_lpf
(1706) 	mpu_set_sample_rate(st.chip_cfg.cache.sample_rate);
    02513 9100 01C6 LDS	R16,inv_mpu.c:st+22
    02515 9110 01C7 LDS	R17,inv_mpu.c:st+23
    02517 940E 1676 CALL	_mpu_set_sample_rate
(1707) 	mpu_configure_fifo(st.chip_cfg.cache.fifo_sensors);
    02519 9100 01C9 LDS	R16,inv_mpu.c:st+25
    0251B 940E 1769 CALL	_mpu_configure_fifo
(1708) 
(1709) 	if (st.chip_cfg.cache.dmp_on)
    0251D 9020 01CA LDS	R2,inv_mpu.c:st+26
    0251F 2022      TST	R2
    02520 F011      BEQ	0x2523
(1710) 		mpu_set_dmp_state(1);
    02521 E001      LDI	R16,1
    02522 DE5E      RCALL	_mpu_set_dmp_state
(1711) 
(1712) 	st.chip_cfg.int_motion_only = 0;
    02523 2422      CLR	R2
    02524 9220 01C0 STS	inv_mpu.c:st+16,R2
(1713) 	return 0;
    02526 2700      CLR	R16
    02527 2711      CLR	R17
    02528 9627      ADIW	R28,7
    02529 940C 4156 JMP	pop_xgsetF03C
(1714) }
(1715) 
(1716) void get_ms(unsigned long *time)
(1717) {
_get_ms:
  time                 --> Y,+0
    0252B 9508      RET
_dmp_load_motion_driver_firmware:
    0252C 9724      SBIW	R28,4
FILE: E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu_dmp_motion_driver.c
(0001) /*
(0002)  $License:
(0003)     Copyright (C) 2011-2012 InvenSense Corporation, All Rights Reserved.
(0004)     See included License.txt for License information.
(0005)  $
(0006)  */
(0007) /**
(0008)  *  @addtogroup  DRIVERS Sensor Driver Layer
(0009)  *  @brief       Hardware drivers to communicate with sensors via I2C.
(0010)  *
(0011)  *  @{
(0012)  *      @file       inv_mpu_dmp_motion_driver.c
(0013)  *      @brief      DMP image and interface functions.
(0014)  *      @details    All functions are preceded by the dmp_ prefix to
(0015)  *                  differentiate among MPL and general driver function calls.
(0016)  */
(0017) #include "iom128v.h"
(0018) #include <stdio.h>
(0019) #include <stdlib.h>
(0020) #include <string.h>
(0021) #include <math.h>
(0022) #include "inv_mpu.h"
(0023) #include "inv_mpu_dmp_motion_driver.h"
(0024) #include "dmpKey.h"
(0025) #include "dmpmap.h"
(0026) 
(0027) #define EMPL_NO_64BIT
(0028) //#include "msp430.h"
(0029) //#include "msp430_clock.h"
(0030) #define delay_ms    delay_ms
(0031) #define get_ms      get_ms
(0032) #define log_i(...)     do {} while (0)
(0033) #define log_e(...)     do {} while (0)
(0034) 
(0035) /* These defines are copied from dmpDefaultMPU6050.c in the general MPL
(0036)  * releases. These defines may change for each DMP image, so be sure to modify
(0037)  * these values when switching to a new image.
(0038)  */
(0039) #define CFG_LP_QUAT             (2712)
(0040) #define END_ORIENT_TEMP         (1866)
(0041) #define CFG_27                  (2742)
(0042) #define CFG_20                  (2224)
(0043) #define CFG_23                  (2745)
(0044) #define CFG_FIFO_ON_EVENT       (2690)
(0045) #define END_PREDICTION_UPDATE   (1761)
(0046) #define CGNOTICE_INTR           (2620)
(0047) #define X_GRT_Y_TMP             (1358)
(0048) #define CFG_DR_INT              (1029)
(0049) #define CFG_AUTH                (1035)
(0050) #define UPDATE_PROP_ROT         (1835)
(0051) #define END_COMPARE_Y_X_TMP2    (1455)
(0052) #define SKIP_X_GRT_Y_TMP        (1359)
(0053) #define SKIP_END_COMPARE        (1435)
(0054) #define FCFG_3                  (1088)
(0055) #define FCFG_2                  (1066)
(0056) #define FCFG_1                  (1062)
(0057) #define END_COMPARE_Y_X_TMP3    (1434)
(0058) #define FCFG_7                  (1073)
(0059) #define FCFG_6                  (1106)
(0060) #define FLAT_STATE_END          (1713)
(0061) #define SWING_END_4             (1616)
(0062) #define SWING_END_2             (1565)
(0063) #define SWING_END_3             (1587)
(0064) #define SWING_END_1             (1550)
(0065) #define CFG_8                   (2718)
(0066) #define CFG_15                  (2727)
(0067) #define CFG_16                  (2746)
(0068) #define CFG_EXT_GYRO_BIAS       (1189)
(0069) #define END_COMPARE_Y_X_TMP     (1407)
(0070) #define DO_NOT_UPDATE_PROP_ROT  (1839)
(0071) #define CFG_7                   (1205)
(0072) #define FLAT_STATE_END_TEMP     (1683)
(0073) #define END_COMPARE_Y_X         (1484)
(0074) #define SKIP_SWING_END_1        (1551)
(0075) #define SKIP_SWING_END_3        (1588)
(0076) #define SKIP_SWING_END_2        (1566)
(0077) #define TILTG75_START           (1672)
(0078) #define CFG_6                   (2753)
(0079) #define TILTL75_END             (1669)
(0080) #define END_ORIENT              (1884)
(0081) #define CFG_FLICK_IN            (2573)
(0082) #define TILTL75_START           (1643)
(0083) #define CFG_MOTION_BIAS         (1208)
(0084) #define X_GRT_Y                 (1408)
(0085) #define TEMPLABEL               (2324)
(0086) #define CFG_ANDROID_ORIENT_INT  (1853)
(0087) #define CFG_GYRO_RAW_DATA       (2722)
(0088) #define X_GRT_Y_TMP2            (1379)
(0089) 
(0090) #define D_0_22                  (22+512)
(0091) #define D_0_24                  (24+512)
(0092) 
(0093) #define D_0_36                  (36)
(0094) #define D_0_52                  (52)
(0095) #define D_0_96                  (96)
(0096) #define D_0_104                 (104)
(0097) #define D_0_108                 (108)
(0098) #define D_0_163                 (163)
(0099) #define D_0_188                 (188)
(0100) #define D_0_192                 (192)
(0101) #define D_0_224                 (224)
(0102) #define D_0_228                 (228)
(0103) #define D_0_232                 (232)
(0104) #define D_0_236                 (236)
(0105) 
(0106) #define D_1_2                   (256 + 2)
(0107) #define D_1_4                   (256 + 4)
(0108) #define D_1_8                   (256 + 8)
(0109) #define D_1_10                  (256 + 10)
(0110) #define D_1_24                  (256 + 24)
(0111) #define D_1_28                  (256 + 28)
(0112) #define D_1_36                  (256 + 36)
(0113) #define D_1_40                  (256 + 40)
(0114) #define D_1_44                  (256 + 44)
(0115) #define D_1_72                  (256 + 72)
(0116) #define D_1_74                  (256 + 74)
(0117) #define D_1_79                  (256 + 79)
(0118) #define D_1_88                  (256 + 88)
(0119) #define D_1_90                  (256 + 90)
(0120) #define D_1_92                  (256 + 92)
(0121) #define D_1_96                  (256 + 96)
(0122) #define D_1_98                  (256 + 98)
(0123) #define D_1_106                 (256 + 106)
(0124) #define D_1_108                 (256 + 108)
(0125) #define D_1_112                 (256 + 112)
(0126) #define D_1_128                 (256 + 144)
(0127) #define D_1_152                 (256 + 12)
(0128) #define D_1_160                 (256 + 160)
(0129) #define D_1_176                 (256 + 176)
(0130) #define D_1_178                 (256 + 178)
(0131) #define D_1_218                 (256 + 218)
(0132) #define D_1_232                 (256 + 232)
(0133) #define D_1_236                 (256 + 236)
(0134) #define D_1_240                 (256 + 240)
(0135) #define D_1_244                 (256 + 244)
(0136) #define D_1_250                 (256 + 250)
(0137) #define D_1_252                 (256 + 252)
(0138) #define D_2_12                  (512 + 12)
(0139) #define D_2_96                  (512 + 96)
(0140) #define D_2_108                 (512 + 108)
(0141) #define D_2_208                 (512 + 208)
(0142) #define D_2_224                 (512 + 224)
(0143) #define D_2_236                 (512 + 236)
(0144) #define D_2_244                 (512 + 244)
(0145) #define D_2_248                 (512 + 248)
(0146) #define D_2_252                 (512 + 252)
(0147) 
(0148) #define CPASS_BIAS_X            (35 * 16 + 4)
(0149) #define CPASS_BIAS_Y            (35 * 16 + 8)
(0150) #define CPASS_BIAS_Z            (35 * 16 + 12)
(0151) #define CPASS_MTX_00            (36 * 16)
(0152) #define CPASS_MTX_01            (36 * 16 + 4)
(0153) #define CPASS_MTX_02            (36 * 16 + 8)
(0154) #define CPASS_MTX_10            (36 * 16 + 12)
(0155) #define CPASS_MTX_11            (37 * 16)
(0156) #define CPASS_MTX_12            (37 * 16 + 4)
(0157) #define CPASS_MTX_20            (37 * 16 + 8)
(0158) #define CPASS_MTX_21            (37 * 16 + 12)
(0159) #define CPASS_MTX_22            (43 * 16 + 12)
(0160) #define D_EXT_GYRO_BIAS_X       (61 * 16)
(0161) #define D_EXT_GYRO_BIAS_Y       (61 * 16) + 4
(0162) #define D_EXT_GYRO_BIAS_Z       (61 * 16) + 8
(0163) #define D_ACT0                  (40 * 16)
(0164) #define D_ACSX                  (40 * 16 + 4)
(0165) #define D_ACSY                  (40 * 16 + 8)
(0166) #define D_ACSZ                  (40 * 16 + 12)
(0167) 
(0168) #define FLICK_MSG               (45 * 16 + 4)
(0169) #define FLICK_COUNTER           (45 * 16 + 8)
(0170) #define FLICK_LOWER             (45 * 16 + 12)
(0171) #define FLICK_UPPER             (46 * 16 + 12)
(0172) 
(0173) #define D_AUTH_OUT              (992)
(0174) #define D_AUTH_IN               (996)
(0175) #define D_AUTH_A                (1000)
(0176) #define D_AUTH_B                (1004)
(0177) 
(0178) #define D_PEDSTD_BP_B           (768 + 0x1C)
(0179) #define D_PEDSTD_HP_A           (768 + 0x78)
(0180) #define D_PEDSTD_HP_B           (768 + 0x7C)
(0181) #define D_PEDSTD_BP_A4          (768 + 0x40)
(0182) #define D_PEDSTD_BP_A3          (768 + 0x44)
(0183) #define D_PEDSTD_BP_A2          (768 + 0x48)
(0184) #define D_PEDSTD_BP_A1          (768 + 0x4C)
(0185) #define D_PEDSTD_INT_THRSH      (768 + 0x68)
(0186) #define D_PEDSTD_CLIP           (768 + 0x6C)
(0187) #define D_PEDSTD_SB             (768 + 0x28)
(0188) #define D_PEDSTD_SB_TIME        (768 + 0x2C)
(0189) #define D_PEDSTD_PEAKTHRSH      (768 + 0x98)
(0190) #define D_PEDSTD_TIML           (768 + 0x2A)
(0191) #define D_PEDSTD_TIMH           (768 + 0x2E)
(0192) #define D_PEDSTD_PEAK           (768 + 0X94)
(0193) #define D_PEDSTD_STEPCTR        (768 + 0x60)
(0194) #define D_PEDSTD_TIMECTR        (964)
(0195) #define D_PEDSTD_DECI           (768 + 0xA0)
(0196) 
(0197) #define D_HOST_NO_MOT           (976)
(0198) #define D_ACCEL_BIAS            (660)
(0199) 
(0200) #define D_ORIENT_GAP            (76)
(0201) 
(0202) #define D_TILT0_H               (48)
(0203) #define D_TILT0_L               (50)
(0204) #define D_TILT1_H               (52)
(0205) #define D_TILT1_L               (54)
(0206) #define D_TILT2_H               (56)
(0207) #define D_TILT2_L               (58)
(0208) #define D_TILT3_H               (60)
(0209) #define D_TILT3_L               (62)
(0210) 
(0211) #define DMP_CODE_SIZE           (3062)
(0212) 
(0213) static const unsigned char dmp_memory[DMP_CODE_SIZE] = {
(0214)     /* bank # 0 */
(0215)     0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00,
(0216)     0x00, 0x65, 0x00, 0x54, 0xff, 0xef, 0x00, 0x00, 0xfa, 0x80, 0x00, 0x0b, 0x12, 0x82, 0x00, 0x01,
(0217)     0x03, 0x0c, 0x30, 0xc3, 0x0e, 0x8c, 0x8c, 0xe9, 0x14, 0xd5, 0x40, 0x02, 0x13, 0x71, 0x0f, 0x8e,
(0218)     0x38, 0x83, 0xf8, 0x83, 0x30, 0x00, 0xf8, 0x83, 0x25, 0x8e, 0xf8, 0x83, 0x30, 0x00, 0xf8, 0x83,
(0219)     0xff, 0xff, 0xff, 0xff, 0x0f, 0xfe, 0xa9, 0xd6, 0x24, 0x00, 0x04, 0x00, 0x1a, 0x82, 0x79, 0xa1,
(0220)     0x00, 0x00, 0x00, 0x3c, 0xff, 0xff, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x38, 0x83, 0x6f, 0xa2,
(0221)     0x00, 0x3e, 0x03, 0x30, 0x40, 0x00, 0x00, 0x00, 0x02, 0xca, 0xe3, 0x09, 0x3e, 0x80, 0x00, 0x00,
(0222)     0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
(0223)     0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x18, 0x6e, 0x00, 0x00, 0x06, 0x92, 0x0a, 0x16, 0xc0, 0xdf,
(0224)     0xff, 0xff, 0x02, 0x56, 0xfd, 0x8c, 0xd3, 0x77, 0xff, 0xe1, 0xc4, 0x96, 0xe0, 0xc5, 0xbe, 0xaa,
(0225)     0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x2b, 0x00, 0x00, 0x16, 0x57, 0x00, 0x00, 0x03, 0x59,
(0226)     0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0xfa, 0x00, 0x02, 0x6c, 0x1d, 0x00, 0x00, 0x00, 0x00,
(0227)     0x3f, 0xff, 0xdf, 0xeb, 0x00, 0x3e, 0xb3, 0xb6, 0x00, 0x0d, 0x22, 0x78, 0x00, 0x00, 0x2f, 0x3c,
(0228)     0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x42, 0xb5, 0x00, 0x00, 0x39, 0xa2, 0x00, 0x00, 0xb3, 0x65,
(0229)     0xd9, 0x0e, 0x9f, 0xc9, 0x1d, 0xcf, 0x4c, 0x34, 0x30, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,
(0230)     0x3b, 0xb6, 0x7a, 0xe8, 0x00, 0x64, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
(0231)     /* bank # 1 */
(0232)     0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0xfa, 0x92, 0x10, 0x00, 0x22, 0x5e, 0x00, 0x0d, 0x22, 0x9f,
(0233)     0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0xff, 0x46, 0x00, 0x00, 0x63, 0xd4, 0x00, 0x00,
(0234)     0x10, 0x00, 0x00, 0x00, 0x04, 0xd6, 0x00, 0x00, 0x04, 0xcc, 0x00, 0x00, 0x04, 0xcc, 0x00, 0x00,
(0235)     0x00, 0x00, 0x10, 0x72, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
(0236)     0x00, 0x06, 0x00, 0x02, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,
(0237)     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x64, 0x00, 0x20, 0x00, 0x00,
(0238)     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00,
(0239)     0x00, 0x00, 0x00, 0x32, 0xf8, 0x98, 0x00, 0x00, 0xff, 0x65, 0x00, 0x00, 0x83, 0x0f, 0x00, 0x00,
(0240)     0xff, 0x9b, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
(0241)     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
(0242)     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
(0243)     0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0xb2, 0x6a, 0x00, 0x02, 0x00, 0x00,
(0244)     0x00, 0x01, 0xfb, 0x83, 0x00, 0x68, 0x00, 0x00, 0x00, 0xd9, 0xfc, 0x00, 0x7c, 0xf1, 0xff, 0x83,
(0245)     0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x64, 0x03, 0xe8, 0x00, 0x64, 0x00, 0x28,
(0246)     0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x00, 0x16, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
(0247)     0x00, 0x00, 0x10, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf4, 0x00, 0x00, 0x10, 0x00,
(0248)     /* bank # 2 */
(0249)     0x00, 0x28, 0x00, 0x00, 0xff, 0xff, 0x45, 0x81, 0xff, 0xff, 0xfa, 0x72, 0x00, 0x00, 0x00, 0x00,
(0250)     0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 0x05, 0x00, 0x05, 0xba, 0xc6, 0x00, 0x47, 0x78, 0xa2,
(0251)     0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x14,
(0252)     0x00, 0x00, 0x25, 0x4d, 0x00, 0x2f, 0x70, 0x6d, 0x00, 0x00, 0x05, 0xae, 0x00, 0x0c, 0x02, 0xd0,
(0253)     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
(0254)     0x00, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
(0255)     0x00, 0x64, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
(0256)     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
(0257)     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
(0258)     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
(0259)     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
(0260)     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
(0261)     0x00, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x0e,
(0262)     0x00, 0x00, 0x0a, 0xc7, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0xff, 0xff, 0xff, 0x9c,
(0263)     0x00, 0x00, 0x0b, 0x2b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64,
(0264)     0xff, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
(0265)     /* bank # 3 */
(0266)     0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
(0267)     0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x24, 0x26, 0xd3,
(0268)     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x96, 0x00, 0x3c,
(0269)     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
(0270)     0x0c, 0x0a, 0x4e, 0x68, 0xcd, 0xcf, 0x77, 0x09, 0x50, 0x16, 0x67, 0x59, 0xc6, 0x19, 0xce, 0x82,
(0271)     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
(0272)     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0xd7, 0x84, 0x00, 0x03, 0x00, 0x00, 0x00,
(0273)     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x93, 0x8f, 0x9d, 0x1e, 0x1b, 0x1c, 0x19,
(0274)     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
(0275)     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03, 0x18, 0x85, 0x00, 0x00, 0x40, 0x00,
(0276)     0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
(0277)     0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
(0278)     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
(0279)     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
(0280)     0x00, 0x00, 0x00, 0x00, 0x67, 0x7d, 0xdf, 0x7e, 0x72, 0x90, 0x2e, 0x55, 0x4c, 0xf6, 0xe6, 0x88,
(0281)     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
(0282) 
(0283)     /* bank # 4 */
(0284)     0xd8, 0xdc, 0xb4, 0xb8, 0xb0, 0xd8, 0xb9, 0xab, 0xf3, 0xf8, 0xfa, 0xb3, 0xb7, 0xbb, 0x8e, 0x9e,
(0285)     0xae, 0xf1, 0x32, 0xf5, 0x1b, 0xf1, 0xb4, 0xb8, 0xb0, 0x80, 0x97, 0xf1, 0xa9, 0xdf, 0xdf, 0xdf,
(0286)     0xaa, 0xdf, 0xdf, 0xdf, 0xf2, 0xaa, 0xc5, 0xcd, 0xc7, 0xa9, 0x0c, 0xc9, 0x2c, 0x97, 0xf1, 0xa9,
(0287)     0x89, 0x26, 0x46, 0x66, 0xb2, 0x89, 0x99, 0xa9, 0x2d, 0x55, 0x7d, 0xb0, 0xb0, 0x8a, 0xa8, 0x96,
(0288)     0x36, 0x56, 0x76, 0xf1, 0xba, 0xa3, 0xb4, 0xb2, 0x80, 0xc0, 0xb8, 0xa8, 0x97, 0x11, 0xb2, 0x83,
(0289)     0x98, 0xba, 0xa3, 0xf0, 0x24, 0x08, 0x44, 0x10, 0x64, 0x18, 0xb2, 0xb9, 0xb4, 0x98, 0x83, 0xf1,
(0290)     0xa3, 0x29, 0x55, 0x7d, 0xba, 0xb5, 0xb1, 0xa3, 0x83, 0x93, 0xf0, 0x00, 0x28, 0x50, 0xf5, 0xb2,
(0291)     0xb6, 0xaa, 0x83, 0x93, 0x28, 0x54, 0x7c, 0xf1, 0xb9, 0xa3, 0x82, 0x93, 0x61, 0xba, 0xa2, 0xda,
(0292)     0xde, 0xdf, 0xdb, 0x81, 0x9a, 0xb9, 0xae, 0xf5, 0x60, 0x68, 0x70, 0xf1, 0xda, 0xba, 0xa2, 0xdf,
(0293)     0xd9, 0xba, 0xa2, 0xfa, 0xb9, 0xa3, 0x82, 0x92, 0xdb, 0x31, 0xba, 0xa2, 0xd9, 0xba, 0xa2, 0xf8,
(0294)     0xdf, 0x85, 0xa4, 0xd0, 0xc1, 0xbb, 0xad, 0x83, 0xc2, 0xc5, 0xc7, 0xb8, 0xa2, 0xdf, 0xdf, 0xdf,
(0295)     0xba, 0xa0, 0xdf, 0xdf, 0xdf, 0xd8, 0xd8, 0xf1, 0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35,
(0296)     0x5d, 0xb2, 0xb6, 0xba, 0xaf, 0x8c, 0x96, 0x19, 0x8f, 0x9f, 0xa7, 0x0e, 0x16, 0x1e, 0xb4, 0x9a,
(0297)     0xb8, 0xaa, 0x87, 0x2c, 0x54, 0x7c, 0xba, 0xa4, 0xb0, 0x8a, 0xb6, 0x91, 0x32, 0x56, 0x76, 0xb2,
(0298)     0x84, 0x94, 0xa4, 0xc8, 0x08, 0xcd, 0xd8, 0xb8, 0xb4, 0xb0, 0xf1, 0x99, 0x82, 0xa8, 0x2d, 0x55,
(0299)     0x7d, 0x98, 0xa8, 0x0e, 0x16, 0x1e, 0xa2, 0x2c, 0x54, 0x7c, 0x92, 0xa4, 0xf0, 0x2c, 0x50, 0x78,
(0300)     /* bank # 5 */
(0301)     0xf1, 0x84, 0xa8, 0x98, 0xc4, 0xcd, 0xfc, 0xd8, 0x0d, 0xdb, 0xa8, 0xfc, 0x2d, 0xf3, 0xd9, 0xba,
(0302)     0xa6, 0xf8, 0xda, 0xba, 0xa6, 0xde, 0xd8, 0xba, 0xb2, 0xb6, 0x86, 0x96, 0xa6, 0xd0, 0xf3, 0xc8,
(0303)     0x41, 0xda, 0xa6, 0xc8, 0xf8, 0xd8, 0xb0, 0xb4, 0xb8, 0x82, 0xa8, 0x92, 0xf5, 0x2c, 0x54, 0x88,
(0304)     0x98, 0xf1, 0x35, 0xd9, 0xf4, 0x18, 0xd8, 0xf1, 0xa2, 0xd0, 0xf8, 0xf9, 0xa8, 0x84, 0xd9, 0xc7,
(0305)     0xdf, 0xf8, 0xf8, 0x83, 0xc5, 0xda, 0xdf, 0x69, 0xdf, 0x83, 0xc1, 0xd8, 0xf4, 0x01, 0x14, 0xf1,
(0306)     0xa8, 0x82, 0x4e, 0xa8, 0x84, 0xf3, 0x11, 0xd1, 0x82, 0xf5, 0xd9, 0x92, 0x28, 0x97, 0x88, 0xf1,
(0307)     0x09, 0xf4, 0x1c, 0x1c, 0xd8, 0x84, 0xa8, 0xf3, 0xc0, 0xf9, 0xd1, 0xd9, 0x97, 0x82, 0xf1, 0x29,
(0308)     0xf4, 0x0d, 0xd8, 0xf3, 0xf9, 0xf9, 0xd1, 0xd9, 0x82, 0xf4, 0xc2, 0x03, 0xd8, 0xde, 0xdf, 0x1a,
(0309)     0xd8, 0xf1, 0xa2, 0xfa, 0xf9, 0xa8, 0x84, 0x98, 0xd9, 0xc7, 0xdf, 0xf8, 0xf8, 0xf8, 0x83, 0xc7,
(0310)     0xda, 0xdf, 0x69, 0xdf, 0xf8, 0x83, 0xc3, 0xd8, 0xf4, 0x01, 0x14, 0xf1, 0x98, 0xa8, 0x82, 0x2e,
(0311)     0xa8, 0x84, 0xf3, 0x11, 0xd1, 0x82, 0xf5, 0xd9, 0x92, 0x50, 0x97, 0x88, 0xf1, 0x09, 0xf4, 0x1c,
(0312)     0xd8, 0x84, 0xa8, 0xf3, 0xc0, 0xf8, 0xf9, 0xd1, 0xd9, 0x97, 0x82, 0xf1, 0x49, 0xf4, 0x0d, 0xd8,
(0313)     0xf3, 0xf9, 0xf9, 0xd1, 0xd9, 0x82, 0xf4, 0xc4, 0x03, 0xd8, 0xde, 0xdf, 0xd8, 0xf1, 0xad, 0x88,
(0314)     0x98, 0xcc, 0xa8, 0x09, 0xf9, 0xd9, 0x82, 0x92, 0xa8, 0xf5, 0x7c, 0xf1, 0x88, 0x3a, 0xcf, 0x94,
(0315)     0x4a, 0x6e, 0x98, 0xdb, 0x69, 0x31, 0xda, 0xad, 0xf2, 0xde, 0xf9, 0xd8, 0x87, 0x95, 0xa8, 0xf2,
(0316)     0x21, 0xd1, 0xda, 0xa5, 0xf9, 0xf4, 0x17, 0xd9, 0xf1, 0xae, 0x8e, 0xd0, 0xc0, 0xc3, 0xae, 0x82,
(0317)     /* bank # 6 */
(0318)     0xc6, 0x84, 0xc3, 0xa8, 0x85, 0x95, 0xc8, 0xa5, 0x88, 0xf2, 0xc0, 0xf1, 0xf4, 0x01, 0x0e, 0xf1,
(0319)     0x8e, 0x9e, 0xa8, 0xc6, 0x3e, 0x56, 0xf5, 0x54, 0xf1, 0x88, 0x72, 0xf4, 0x01, 0x15, 0xf1, 0x98,
(0320)     0x45, 0x85, 0x6e, 0xf5, 0x8e, 0x9e, 0x04, 0x88, 0xf1, 0x42, 0x98, 0x5a, 0x8e, 0x9e, 0x06, 0x88,
(0321)     0x69, 0xf4, 0x01, 0x1c, 0xf1, 0x98, 0x1e, 0x11, 0x08, 0xd0, 0xf5, 0x04, 0xf1, 0x1e, 0x97, 0x02,
(0322)     0x02, 0x98, 0x36, 0x25, 0xdb, 0xf9, 0xd9, 0x85, 0xa5, 0xf3, 0xc1, 0xda, 0x85, 0xa5, 0xf3, 0xdf,
(0323)     0xd8, 0x85, 0x95, 0xa8, 0xf3, 0x09, 0xda, 0xa5, 0xfa, 0xd8, 0x82, 0x92, 0xa8, 0xf5, 0x78, 0xf1,
(0324)     0x88, 0x1a, 0x84, 0x9f, 0x26, 0x88, 0x98, 0x21, 0xda, 0xf4, 0x1d, 0xf3, 0xd8, 0x87, 0x9f, 0x39,
(0325)     0xd1, 0xaf, 0xd9, 0xdf, 0xdf, 0xfb, 0xf9, 0xf4, 0x0c, 0xf3, 0xd8, 0xfa, 0xd0, 0xf8, 0xda, 0xf9,
(0326)     0xf9, 0xd0, 0xdf, 0xd9, 0xf9, 0xd8, 0xf4, 0x0b, 0xd8, 0xf3, 0x87, 0x9f, 0x39, 0xd1, 0xaf, 0xd9,
(0327)     0xdf, 0xdf, 0xf4, 0x1d, 0xf3, 0xd8, 0xfa, 0xfc, 0xa8, 0x69, 0xf9, 0xf9, 0xaf, 0xd0, 0xda, 0xde,
(0328)     0xfa, 0xd9, 0xf8, 0x8f, 0x9f, 0xa8, 0xf1, 0xcc, 0xf3, 0x98, 0xdb, 0x45, 0xd9, 0xaf, 0xdf, 0xd0,
(0329)     0xf8, 0xd8, 0xf1, 0x8f, 0x9f, 0xa8, 0xca, 0xf3, 0x88, 0x09, 0xda, 0xaf, 0x8f, 0xcb, 0xf8, 0xd8,
(0330)     0xf2, 0xad, 0x97, 0x8d, 0x0c, 0xd9, 0xa5, 0xdf, 0xf9, 0xba, 0xa6, 0xf3, 0xfa, 0xf4, 0x12, 0xf2,
(0331)     0xd8, 0x95, 0x0d, 0xd1, 0xd9, 0xba, 0xa6, 0xf3, 0xfa, 0xda, 0xa5, 0xf2, 0xc1, 0xba, 0xa6, 0xf3,
(0332)     0xdf, 0xd8, 0xf1, 0xba, 0xb2, 0xb6, 0x86, 0x96, 0xa6, 0xd0, 0xca, 0xf3, 0x49, 0xda, 0xa6, 0xcb,
(0333)     0xf8, 0xd8, 0xb0, 0xb4, 0xb8, 0xd8, 0xad, 0x84, 0xf2, 0xc0, 0xdf, 0xf1, 0x8f, 0xcb, 0xc3, 0xa8,
(0334)     /* bank # 7 */
(0335)     0xb2, 0xb6, 0x86, 0x96, 0xc8, 0xc1, 0xcb, 0xc3, 0xf3, 0xb0, 0xb4, 0x88, 0x98, 0xa8, 0x21, 0xdb,
(0336)     0x71, 0x8d, 0x9d, 0x71, 0x85, 0x95, 0x21, 0xd9, 0xad, 0xf2, 0xfa, 0xd8, 0x85, 0x97, 0xa8, 0x28,
(0337)     0xd9, 0xf4, 0x08, 0xd8, 0xf2, 0x8d, 0x29, 0xda, 0xf4, 0x05, 0xd9, 0xf2, 0x85, 0xa4, 0xc2, 0xf2,
(0338)     0xd8, 0xa8, 0x8d, 0x94, 0x01, 0xd1, 0xd9, 0xf4, 0x11, 0xf2, 0xd8, 0x87, 0x21, 0xd8, 0xf4, 0x0a,
(0339)     0xd8, 0xf2, 0x84, 0x98, 0xa8, 0xc8, 0x01, 0xd1, 0xd9, 0xf4, 0x11, 0xd8, 0xf3, 0xa4, 0xc8, 0xbb,
(0340)     0xaf, 0xd0, 0xf2, 0xde, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xd8, 0xf1, 0xb8, 0xf6,
(0341)     0xb5, 0xb9, 0xb0, 0x8a, 0x95, 0xa3, 0xde, 0x3c, 0xa3, 0xd9, 0xf8, 0xd8, 0x5c, 0xa3, 0xd9, 0xf8,
(0342)     0xd8, 0x7c, 0xa3, 0xd9, 0xf8, 0xd8, 0xf8, 0xf9, 0xd1, 0xa5, 0xd9, 0xdf, 0xda, 0xfa, 0xd8, 0xb1,
(0343)     0x85, 0x30, 0xf7, 0xd9, 0xde, 0xd8, 0xf8, 0x30, 0xad, 0xda, 0xde, 0xd8, 0xf2, 0xb4, 0x8c, 0x99,
(0344)     0xa3, 0x2d, 0x55, 0x7d, 0xa0, 0x83, 0xdf, 0xdf, 0xdf, 0xb5, 0x91, 0xa0, 0xf6, 0x29, 0xd9, 0xfb,
(0345)     0xd8, 0xa0, 0xfc, 0x29, 0xd9, 0xfa, 0xd8, 0xa0, 0xd0, 0x51, 0xd9, 0xf8, 0xd8, 0xfc, 0x51, 0xd9,
(0346)     0xf9, 0xd8, 0x79, 0xd9, 0xfb, 0xd8, 0xa0, 0xd0, 0xfc, 0x79, 0xd9, 0xfa, 0xd8, 0xa1, 0xf9, 0xf9,
(0347)     0xf9, 0xf9, 0xf9, 0xa0, 0xda, 0xdf, 0xdf, 0xdf, 0xd8, 0xa1, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xac,
(0348)     0xde, 0xf8, 0xad, 0xde, 0x83, 0x93, 0xac, 0x2c, 0x54, 0x7c, 0xf1, 0xa8, 0xdf, 0xdf, 0xdf, 0xf6,
(0349)     0x9d, 0x2c, 0xda, 0xa0, 0xdf, 0xd9, 0xfa, 0xdb, 0x2d, 0xf8, 0xd8, 0xa8, 0x50, 0xda, 0xa0, 0xd0,
(0350)     0xde, 0xd9, 0xd0, 0xf8, 0xf8, 0xf8, 0xdb, 0x55, 0xf8, 0xd8, 0xa8, 0x78, 0xda, 0xa0, 0xd0, 0xdf,
(0351)     /* bank # 8 */
(0352)     0xd9, 0xd0, 0xfa, 0xf8, 0xf8, 0xf8, 0xf8, 0xdb, 0x7d, 0xf8, 0xd8, 0x9c, 0xa8, 0x8c, 0xf5, 0x30,
(0353)     0xdb, 0x38, 0xd9, 0xd0, 0xde, 0xdf, 0xa0, 0xd0, 0xde, 0xdf, 0xd8, 0xa8, 0x48, 0xdb, 0x58, 0xd9,
(0354)     0xdf, 0xd0, 0xde, 0xa0, 0xdf, 0xd0, 0xde, 0xd8, 0xa8, 0x68, 0xdb, 0x70, 0xd9, 0xdf, 0xdf, 0xa0,
(0355)     0xdf, 0xdf, 0xd8, 0xf1, 0xa8, 0x88, 0x90, 0x2c, 0x54, 0x7c, 0x98, 0xa8, 0xd0, 0x5c, 0x38, 0xd1,
(0356)     0xda, 0xf2, 0xae, 0x8c, 0xdf, 0xf9, 0xd8, 0xb0, 0x87, 0xa8, 0xc1, 0xc1, 0xb1, 0x88, 0xa8, 0xc6,
(0357)     0xf9, 0xf9, 0xda, 0x36, 0xd8, 0xa8, 0xf9, 0xda, 0x36, 0xd8, 0xa8, 0xf9, 0xda, 0x36, 0xd8, 0xa8,
(0358)     0xf9, 0xda, 0x36, 0xd8, 0xa8, 0xf9, 0xda, 0x36, 0xd8, 0xf7, 0x8d, 0x9d, 0xad, 0xf8, 0x18, 0xda,
(0359)     0xf2, 0xae, 0xdf, 0xd8, 0xf7, 0xad, 0xfa, 0x30, 0xd9, 0xa4, 0xde, 0xf9, 0xd8, 0xf2, 0xae, 0xde,
(0360)     0xfa, 0xf9, 0x83, 0xa7, 0xd9, 0xc3, 0xc5, 0xc7, 0xf1, 0x88, 0x9b, 0xa7, 0x7a, 0xad, 0xf7, 0xde,
(0361)     0xdf, 0xa4, 0xf8, 0x84, 0x94, 0x08, 0xa7, 0x97, 0xf3, 0x00, 0xae, 0xf2, 0x98, 0x19, 0xa4, 0x88,
(0362)     0xc6, 0xa3, 0x94, 0x88, 0xf6, 0x32, 0xdf, 0xf2, 0x83, 0x93, 0xdb, 0x09, 0xd9, 0xf2, 0xaa, 0xdf,
(0363)     0xd8, 0xd8, 0xae, 0xf8, 0xf9, 0xd1, 0xda, 0xf3, 0xa4, 0xde, 0xa7, 0xf1, 0x88, 0x9b, 0x7a, 0xd8,
(0364)     0xf3, 0x84, 0x94, 0xae, 0x19, 0xf9, 0xda, 0xaa, 0xf1, 0xdf, 0xd8, 0xa8, 0x81, 0xc0, 0xc3, 0xc5,
(0365)     0xc7, 0xa3, 0x92, 0x83, 0xf6, 0x28, 0xad, 0xde, 0xd9, 0xf8, 0xd8, 0xa3, 0x50, 0xad, 0xd9, 0xf8,
(0366)     0xd8, 0xa3, 0x78, 0xad, 0xd9, 0xf8, 0xd8, 0xf8, 0xf9, 0xd1, 0xa1, 0xda, 0xde, 0xc3, 0xc5, 0xc7,
(0367)     0xd8, 0xa1, 0x81, 0x94, 0xf8, 0x18, 0xf2, 0xb0, 0x89, 0xac, 0xc3, 0xc5, 0xc7, 0xf1, 0xd8, 0xb8,
(0368)     /* bank # 9 */
(0369)     0xb4, 0xb0, 0x97, 0x86, 0xa8, 0x31, 0x9b, 0x06, 0x99, 0x07, 0xab, 0x97, 0x28, 0x88, 0x9b, 0xf0,
(0370)     0x0c, 0x20, 0x14, 0x40, 0xb0, 0xb4, 0xb8, 0xf0, 0xa8, 0x8a, 0x9a, 0x28, 0x50, 0x78, 0xb7, 0x9b,
(0371)     0xa8, 0x29, 0x51, 0x79, 0x24, 0x70, 0x59, 0x44, 0x69, 0x38, 0x64, 0x48, 0x31, 0xf1, 0xbb, 0xab,
(0372)     0x88, 0x00, 0x2c, 0x54, 0x7c, 0xf0, 0xb3, 0x8b, 0xb8, 0xa8, 0x04, 0x28, 0x50, 0x78, 0xf1, 0xb0,
(0373)     0x88, 0xb4, 0x97, 0x26, 0xa8, 0x59, 0x98, 0xbb, 0xab, 0xb3, 0x8b, 0x02, 0x26, 0x46, 0x66, 0xb0,
(0374)     0xb8, 0xf0, 0x8a, 0x9c, 0xa8, 0x29, 0x51, 0x79, 0x8b, 0x29, 0x51, 0x79, 0x8a, 0x24, 0x70, 0x59,
(0375)     0x8b, 0x20, 0x58, 0x71, 0x8a, 0x44, 0x69, 0x38, 0x8b, 0x39, 0x40, 0x68, 0x8a, 0x64, 0x48, 0x31,
(0376)     0x8b, 0x30, 0x49, 0x60, 0x88, 0xf1, 0xac, 0x00, 0x2c, 0x54, 0x7c, 0xf0, 0x8c, 0xa8, 0x04, 0x28,
(0377)     0x50, 0x78, 0xf1, 0x88, 0x97, 0x26, 0xa8, 0x59, 0x98, 0xac, 0x8c, 0x02, 0x26, 0x46, 0x66, 0xf0,
(0378)     0x89, 0x9c, 0xa8, 0x29, 0x51, 0x79, 0x24, 0x70, 0x59, 0x44, 0x69, 0x38, 0x64, 0x48, 0x31, 0xa9,
(0379)     0x88, 0x09, 0x20, 0x59, 0x70, 0xab, 0x11, 0x38, 0x40, 0x69, 0xa8, 0x19, 0x31, 0x48, 0x60, 0x8c,
(0380)     0xa8, 0x3c, 0x41, 0x5c, 0x20, 0x7c, 0x00, 0xf1, 0x87, 0x98, 0x19, 0x86, 0xa8, 0x6e, 0x76, 0x7e,
(0381)     0xa9, 0x99, 0x88, 0x2d, 0x55, 0x7d, 0xd8, 0xb1, 0xb5, 0xb9, 0xa3, 0xdf, 0xdf, 0xdf, 0xae, 0xd0,
(0382)     0xdf, 0xaa, 0xd0, 0xde, 0xf2, 0xab, 0xf8, 0xf9, 0xd9, 0xb0, 0x87, 0xc4, 0xaa, 0xf1, 0xdf, 0xdf,
(0383)     0xbb, 0xaf, 0xdf, 0xdf, 0xb9, 0xd8, 0xb1, 0xf1, 0xa3, 0x97, 0x8e, 0x60, 0xdf, 0xb0, 0x84, 0xf2,
(0384)     0xc8, 0xf8, 0xf9, 0xd9, 0xde, 0xd8, 0x93, 0x85, 0xf1, 0x4a, 0xb1, 0x83, 0xa3, 0x08, 0xb5, 0x83,
(0385)     /* bank # 10 */
(0386)     0x9a, 0x08, 0x10, 0xb7, 0x9f, 0x10, 0xd8, 0xf1, 0xb0, 0xba, 0xae, 0xb0, 0x8a, 0xc2, 0xb2, 0xb6,
(0387)     0x8e, 0x9e, 0xf1, 0xfb, 0xd9, 0xf4, 0x1d, 0xd8, 0xf9, 0xd9, 0x0c, 0xf1, 0xd8, 0xf8, 0xf8, 0xad,
(0388)     0x61, 0xd9, 0xae, 0xfb, 0xd8, 0xf4, 0x0c, 0xf1, 0xd8, 0xf8, 0xf8, 0xad, 0x19, 0xd9, 0xae, 0xfb,
(0389)     0xdf, 0xd8, 0xf4, 0x16, 0xf1, 0xd8, 0xf8, 0xad, 0x8d, 0x61, 0xd9, 0xf4, 0xf4, 0xac, 0xf5, 0x9c,
(0390)     0x9c, 0x8d, 0xdf, 0x2b, 0xba, 0xb6, 0xae, 0xfa, 0xf8, 0xf4, 0x0b, 0xd8, 0xf1, 0xae, 0xd0, 0xf8,
(0391)     0xad, 0x51, 0xda, 0xae, 0xfa, 0xf8, 0xf1, 0xd8, 0xb9, 0xb1, 0xb6, 0xa3, 0x83, 0x9c, 0x08, 0xb9,
(0392)     0xb1, 0x83, 0x9a, 0xb5, 0xaa, 0xc0, 0xfd, 0x30, 0x83, 0xb7, 0x9f, 0x10, 0xb5, 0x8b, 0x93, 0xf2,
(0393)     0x02, 0x02, 0xd1, 0xab, 0xda, 0xde, 0xd8, 0xf1, 0xb0, 0x80, 0xba, 0xab, 0xc0, 0xc3, 0xb2, 0x84,
(0394)     0xc1, 0xc3, 0xd8, 0xb1, 0xb9, 0xf3, 0x8b, 0xa3, 0x91, 0xb6, 0x09, 0xb4, 0xd9, 0xab, 0xde, 0xb0,
(0395)     0x87, 0x9c, 0xb9, 0xa3, 0xdd, 0xf1, 0xb3, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0xb0, 0x87, 0xa3, 0xa3,
(0396)     0xa3, 0xa3, 0xb2, 0x8b, 0xb6, 0x9b, 0xf2, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
(0397)     0xa3, 0xf1, 0xb0, 0x87, 0xb5, 0x9a, 0xa3, 0xf3, 0x9b, 0xa3, 0xa3, 0xdc, 0xba, 0xac, 0xdf, 0xb9,
(0398)     0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
(0399)     0xd8, 0xd8, 0xd8, 0xbb, 0xb3, 0xb7, 0xf1, 0xaa, 0xf9, 0xda, 0xff, 0xd9, 0x80, 0x9a, 0xaa, 0x28,
(0400)     0xb4, 0x80, 0x98, 0xa7, 0x20, 0xb7, 0x97, 0x87, 0xa8, 0x66, 0x88, 0xf0, 0x79, 0x51, 0xf1, 0x90,
(0401)     0x2c, 0x87, 0x0c, 0xa7, 0x81, 0x97, 0x62, 0x93, 0xf0, 0x71, 0x71, 0x60, 0x85, 0x94, 0x01, 0x29,
(0402)     /* bank # 11 */
(0403)     0x51, 0x79, 0x90, 0xa5, 0xf1, 0x28, 0x4c, 0x6c, 0x87, 0x0c, 0x95, 0x18, 0x85, 0x78, 0xa3, 0x83,
(0404)     0x90, 0x28, 0x4c, 0x6c, 0x88, 0x6c, 0xd8, 0xf3, 0xa2, 0x82, 0x00, 0xf2, 0x10, 0xa8, 0x92, 0x19,
(0405)     0x80, 0xa2, 0xf2, 0xd9, 0x26, 0xd8, 0xf1, 0x88, 0xa8, 0x4d, 0xd9, 0x48, 0xd8, 0x96, 0xa8, 0x39,
(0406)     0x80, 0xd9, 0x3c, 0xd8, 0x95, 0x80, 0xa8, 0x39, 0xa6, 0x86, 0x98, 0xd9, 0x2c, 0xda, 0x87, 0xa7,
(0407)     0x2c, 0xd8, 0xa8, 0x89, 0x95, 0x19, 0xa9, 0x80, 0xd9, 0x38, 0xd8, 0xa8, 0x89, 0x39, 0xa9, 0x80,
(0408)     0xda, 0x3c, 0xd8, 0xa8, 0x2e, 0xa8, 0x39, 0x90, 0xd9, 0x0c, 0xd8, 0xa8, 0x95, 0x31, 0x98, 0xd9,
(0409)     0x0c, 0xd8, 0xa8, 0x09, 0xd9, 0xff, 0xd8, 0x01, 0xda, 0xff, 0xd8, 0x95, 0x39, 0xa9, 0xda, 0x26,
(0410)     0xff, 0xd8, 0x90, 0xa8, 0x0d, 0x89, 0x99, 0xa8, 0x10, 0x80, 0x98, 0x21, 0xda, 0x2e, 0xd8, 0x89,
(0411)     0x99, 0xa8, 0x31, 0x80, 0xda, 0x2e, 0xd8, 0xa8, 0x86, 0x96, 0x31, 0x80, 0xda, 0x2e, 0xd8, 0xa8,
(0412)     0x87, 0x31, 0x80, 0xda, 0x2e, 0xd8, 0xa8, 0x82, 0x92, 0xf3, 0x41, 0x80, 0xf1, 0xd9, 0x2e, 0xd8,
(0413)     0xa8, 0x82, 0xf3, 0x19, 0x80, 0xf1, 0xd9, 0x2e, 0xd8, 0x82, 0xac, 0xf3, 0xc0, 0xa2, 0x80, 0x22,
(0414)     0xf1, 0xa6, 0x2e, 0xa7, 0x2e, 0xa9, 0x22, 0x98, 0xa8, 0x29, 0xda, 0xac, 0xde, 0xff, 0xd8, 0xa2,
(0415)     0xf2, 0x2a, 0xf1, 0xa9, 0x2e, 0x82, 0x92, 0xa8, 0xf2, 0x31, 0x80, 0xa6, 0x96, 0xf1, 0xd9, 0x00,
(0416)     0xac, 0x8c, 0x9c, 0x0c, 0x30, 0xac, 0xde, 0xd0, 0xde, 0xff, 0xd8, 0x8c, 0x9c, 0xac, 0xd0, 0x10,
(0417)     0xac, 0xde, 0x80, 0x92, 0xa2, 0xf2, 0x4c, 0x82, 0xa8, 0xf1, 0xca, 0xf2, 0x35, 0xf1, 0x96, 0x88,
(0418)     0xa6, 0xd9, 0x00, 0xd8, 0xf1, 0xff
(0419) };
(0420) 
(0421) static const unsigned short sStartAddress = 0x0400;
(0422) 
(0423) /* END OF SECTION COPIED FROM dmpDefaultMPU6050.c */
(0424) 
(0425) #define INT_SRC_TAP             (0x01)
(0426) #define INT_SRC_ANDROID_ORIENT  (0x08)
(0427) 
(0428) #define DMP_FEATURE_SEND_ANY_GYRO   (DMP_FEATURE_SEND_RAW_GYRO | \
(0429)                                      DMP_FEATURE_SEND_CAL_GYRO)
(0430) 
(0431) #define MAX_PACKET_LENGTH   (32)
(0432) 
(0433) #define DMP_SAMPLE_RATE (200)
(0434) #define GYRO_SF             (46850825)
(0435) 
(0436) #define FIFO_CORRUPTION_CHECK
(0437) #ifdef FIFO_CORRUPTION_CHECK
(0438) #define QUAT_ERROR_THRESH       (1L<<24)
(0439) #define QUAT_MAG_SQ_NORMALIZED  (1L<<28)
(0440) #define QUAT_MAG_SQ_MIN         (QUAT_MAG_SQ_NORMALIZED - QUAT_ERROR_THRESH)
(0441) #define QUAT_MAG_SQ_MAX         (QUAT_MAG_SQ_NORMALIZED + QUAT_ERROR_THRESH)
(0442) #endif
(0443) 
(0444) struct dmp_s {
(0445)     void (*tap_cb)(unsigned char count, unsigned char direction);
(0446)     void (*android_orient_cb)(unsigned char orientation);
(0447)     unsigned short orient;
(0448)     unsigned short feature_mask;
(0449)     unsigned short fifo_rate;
(0450)     unsigned char packet_length;
(0451) };
(0452) 
(0453) static struct dmp_s dmp={
(0454)   NULL,
(0455)   NULL,
(0456)   0,
(0457)   0,
(0458)   0,
(0459)   0
(0460) };
(0461) /**
(0462)  *  @brief  Load the DMP with this image.
(0463)  *  @return 0 if successful.
(0464)  */
(0465) int dmp_load_motion_driver_firmware(void)
(0466) {
(0467)     return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
    0252D EC88      LDI	R24,0xC8
    0252E E090      LDI	R25,0
    0252F 839B      STD	Y+3,R25
    02530 838A      STD	Y+2,R24
    02531 9020 0DC9 LDS	R2,inv_mpu_dmp_motion_driver.c:sStartAddress
    02533 9030 0DCA LDS	R3,inv_mpu_dmp_motion_driver.c:sStartAddress+1
    02535 8239      STD	Y+1,R3
    02536 8228      ST	Y,R2
    02537 ED23      LDI	R18,0xD3
    02538 E031      LDI	R19,1
    02539 EF06      LDI	R16,0xF6
    0253A E01B      LDI	R17,0xB
    0253B 940E 22EF CALL	_mpu_load_firmware
    0253D 9624      ADIW	R28,4
    0253E 9508      RET
_dmp_set_orientation:
  accel_sign           --> Y,+17
  gyro_sign            --> Y,+14
  accel_axes           --> Y,+11
  gyro_axes            --> Y,+8
  accel_regs           --> Y,+5
  gyro_regs            --> Y,+2
  orient               --> R20
    0253F 940E 411D CALL	push_xgset300C
    02541 01A8      MOVW	R20,R16
    02542 9764      SBIW	R28,0x14
(0468)         DMP_SAMPLE_RATE);
(0469) }
(0470) 
(0471) /**
(0472)  *  @brief      Push gyro and accel orientation to the DMP.
(0473)  *  The orientation is represented here as the output of
(0474)  *  @e inv_orientation_matrix_to_scalar.
(0475)  *  @param[in]  orient  Gyro and accel orientation in body frame.
(0476)  *  @return     0 if successful.
(0477)  */
(0478) int dmp_set_orientation(unsigned short orient)
(0479) {
(0480)     unsigned char gyro_regs[3], accel_regs[3];
(0481)     const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
    02543 ED86      LDI	R24,0xD6
    02544 E09D      LDI	R25,0xD
    02545 01FE      MOVW	R30,R28
    02546 9638      ADIW	R30,0x8
    02547 E003      LDI	R16,3
    02548 E010      LDI	R17,0
    02549 93FA      ST	-Y,R31
    0254A 93EA      ST	-Y,R30
    0254B 939A      ST	-Y,R25
    0254C 938A      ST	-Y,R24
    0254D 940E 41BC CALL	asgnblk
(0482)     const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
    0254F ED89      LDI	R24,0xD9
    02550 E09D      LDI	R25,0xD
    02551 01FE      MOVW	R30,R28
    02552 963B      ADIW	R30,0xB
    02553 E003      LDI	R16,3
    02554 E010      LDI	R17,0
    02555 93FA      ST	-Y,R31
    02556 93EA      ST	-Y,R30
    02557 939A      ST	-Y,R25
    02558 938A      ST	-Y,R24
    02559 940E 41BC CALL	asgnblk
(0483)     const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
    0255B ED8C      LDI	R24,0xDC
    0255C E09D      LDI	R25,0xD
    0255D 01FE      MOVW	R30,R28
    0255E 963E      ADIW	R30,0xE
    0255F E003      LDI	R16,3
    02560 E010      LDI	R17,0
    02561 93FA      ST	-Y,R31
    02562 93EA      ST	-Y,R30
    02563 939A      ST	-Y,R25
    02564 938A      ST	-Y,R24
    02565 940E 41BC CALL	asgnblk
(0484)     const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
    02567 ED8F      LDI	R24,0xDF
    02568 E09D      LDI	R25,0xD
    02569 01FE      MOVW	R30,R28
    0256A 9671      ADIW	R30,0x11
    0256B E003      LDI	R16,3
    0256C E010      LDI	R17,0
    0256D 93FA      ST	-Y,R31
    0256E 93EA      ST	-Y,R30
    0256F 939A      ST	-Y,R25
    02570 938A      ST	-Y,R24
    02571 940E 41BC CALL	asgnblk
(0485) 
(0486)     gyro_regs[0] = gyro_axes[orient & 3];
    02573 01CE      MOVW	R24,R28
    02574 9608      ADIW	R24,0x8
    02575 01FA      MOVW	R30,R20
    02576 70E3      ANDI	R30,3
    02577 70F0      ANDI	R31,0
    02578 0FE8      ADD	R30,R24
    02579 1FF9      ADC	R31,R25
    0257A 8020      LD	R2,Z
    0257B 822A      STD	Y+2,R2
(0487)     gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
    0257C 01CE      MOVW	R24,R28
    0257D 9608      ADIW	R24,0x8
    0257E 01FA      MOVW	R30,R20
    0257F 95F6      LSR	R31
    02580 95E7      ROR	R30
    02581 95F6      LSR	R31
    02582 95E7      ROR	R30
    02583 95F6      LSR	R31
    02584 95E7      ROR	R30
    02585 70E3      ANDI	R30,3
    02586 70F0      ANDI	R31,0
    02587 0FE8      ADD	R30,R24
    02588 1FF9      ADC	R31,R25
    02589 8020      LD	R2,Z
    0258A 822B      STD	Y+3,R2
(0488)     gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
    0258B E026      LDI	R18,6
    0258C E030      LDI	R19,0
    0258D 018A      MOVW	R16,R20
    0258E 940E 41A9 CALL	lsr16
    02590 01F8      MOVW	R30,R16
    02591 70E3      ANDI	R30,3
    02592 70F0      ANDI	R31,0
    02593 01CE      MOVW	R24,R28
    02594 9608      ADIW	R24,0x8
    02595 0FE8      ADD	R30,R24
    02596 1FF9      ADC	R31,R25
    02597 8020      LD	R2,Z
    02598 822C      STD	Y+4,R2
(0489)     accel_regs[0] = accel_axes[orient & 3];
    02599 01CE      MOVW	R24,R28
    0259A 960B      ADIW	R24,0xB
    0259B 01FA      MOVW	R30,R20
    0259C 70E3      ANDI	R30,3
    0259D 70F0      ANDI	R31,0
    0259E 0FE8      ADD	R30,R24
    0259F 1FF9      ADC	R31,R25
    025A0 8020      LD	R2,Z
    025A1 822D      STD	Y+5,R2
(0490)     accel_regs[1] = accel_axes[(orient >> 3) & 3];
    025A2 01CE      MOVW	R24,R28
    025A3 960B      ADIW	R24,0xB
    025A4 01FA      MOVW	R30,R20
    025A5 95F6      LSR	R31
    025A6 95E7      ROR	R30
    025A7 95F6      LSR	R31
    025A8 95E7      ROR	R30
    025A9 95F6      LSR	R31
    025AA 95E7      ROR	R30
    025AB 70E3      ANDI	R30,3
    025AC 70F0      ANDI	R31,0
    025AD 0FE8      ADD	R30,R24
    025AE 1FF9      ADC	R31,R25
    025AF 8020      LD	R2,Z
    025B0 822E      STD	Y+6,R2
(0491)     accel_regs[2] = accel_axes[(orient >> 6) & 3];
    025B1 E026      LDI	R18,6
    025B2 E030      LDI	R19,0
    025B3 018A      MOVW	R16,R20
    025B4 940E 41A9 CALL	lsr16
    025B6 01F8      MOVW	R30,R16
    025B7 70E3      ANDI	R30,3
    025B8 70F0      ANDI	R31,0
    025B9 01CE      MOVW	R24,R28
    025BA 960B      ADIW	R24,0xB
    025BB 0FE8      ADD	R30,R24
    025BC 1FF9      ADC	R31,R25
    025BD 8020      LD	R2,Z
    025BE 822F      STD	Y+7,R2
(0492) 
(0493)     /* Chip-to-body, axes only. */
(0494)     if (mpu_write_mem(FCFG_1, 3, gyro_regs))
    025BF 01CE      MOVW	R24,R28
    025C0 9602      ADIW	R24,2
    025C1 8399      STD	Y+1,R25
    025C2 8388      ST	Y,R24
    025C3 E023      LDI	R18,3
    025C4 E030      LDI	R19,0
    025C5 E206      LDI	R16,0x26
    025C6 E014      LDI	R17,4
    025C7 940E 215D CALL	_mpu_write_mem
    025C9 3000      CPI	R16,0
    025CA 0701      CPC	R16,R17
    025CB F019      BEQ	0x25CF
(0495)         return -1;
    025CC EF0F      LDI	R16,0xFF
    025CD EF1F      LDI	R17,0xFF
    025CE C068      RJMP	0x2637
(0496)     if (mpu_write_mem(FCFG_2, 3, accel_regs))
    025CF 01CE      MOVW	R24,R28
    025D0 9605      ADIW	R24,5
    025D1 8399      STD	Y+1,R25
    025D2 8388      ST	Y,R24
    025D3 E023      LDI	R18,3
    025D4 E030      LDI	R19,0
    025D5 E20A      LDI	R16,0x2A
    025D6 E014      LDI	R17,4
    025D7 940E 215D CALL	_mpu_write_mem
    025D9 3000      CPI	R16,0
    025DA 0701      CPC	R16,R17
    025DB F019      BEQ	0x25DF
(0497)         return -1;
    025DC EF0F      LDI	R16,0xFF
    025DD EF1F      LDI	R17,0xFF
    025DE C058      RJMP	0x2637
(0498) 
(0499)     memcpy(gyro_regs, gyro_sign, 3);
    025DF E083      LDI	R24,3
    025E0 E090      LDI	R25,0
    025E1 8399      STD	Y+1,R25
    025E2 8388      ST	Y,R24
    025E3 019E      MOVW	R18,R28
    025E4 5F22      SUBI	R18,0xF2
    025E5 4F3F      SBCI	R19,0xFF
    025E6 018E      MOVW	R16,R28
    025E7 5F0E      SUBI	R16,0xFE
    025E8 4F1F      SBCI	R17,0xFF
    025E9 940E 3FA8 CALL	_memcpy
(0500)     memcpy(accel_regs, accel_sign, 3);
    025EB E083      LDI	R24,3
    025EC E090      LDI	R25,0
    025ED 8399      STD	Y+1,R25
    025EE 8388      ST	Y,R24
    025EF 019E      MOVW	R18,R28
    025F0 5E2F      SUBI	R18,0xEF
    025F1 4F3F      SBCI	R19,0xFF
    025F2 018E      MOVW	R16,R28
    025F3 5F0B      SUBI	R16,0xFB
    025F4 4F1F      SBCI	R17,0xFF
    025F5 940E 3FA8 CALL	_memcpy
(0501)     if (orient & 4) {
    025F7 FF42      SBRS	R20,2
    025F8 C006      RJMP	0x25FF
(0502)         gyro_regs[0] |= 1;
    025F9 818A      LDD	R24,Y+2
    025FA 6081      ORI	R24,1
    025FB 838A      STD	Y+2,R24
(0503)         accel_regs[0] |= 1;
    025FC 818D      LDD	R24,Y+5
    025FD 6081      ORI	R24,1
    025FE 838D      STD	Y+5,R24
(0504)     }
(0505)     if (orient & 0x20) {
    025FF FF45      SBRS	R20,5
    02600 C006      RJMP	0x2607
(0506)         gyro_regs[1] |= 1;
    02601 818B      LDD	R24,Y+3
    02602 6081      ORI	R24,1
    02603 838B      STD	Y+3,R24
(0507)         accel_regs[1] |= 1;
    02604 818E      LDD	R24,Y+6
    02605 6081      ORI	R24,1
    02606 838E      STD	Y+6,R24
(0508)     }
(0509)     if (orient & 0x100) {
    02607 FF50      SBRS	R21,0
    02608 C006      RJMP	0x260F
(0510)         gyro_regs[2] |= 1;
    02609 818C      LDD	R24,Y+4
    0260A 6081      ORI	R24,1
    0260B 838C      STD	Y+4,R24
(0511)         accel_regs[2] |= 1;
    0260C 818F      LDD	R24,Y+7
    0260D 6081      ORI	R24,1
    0260E 838F      STD	Y+7,R24
(0512)     }
(0513) 
(0514)     /* Chip-to-body, sign only. */
(0515)     if (mpu_write_mem(FCFG_3, 3, gyro_regs))
    0260F 01CE      MOVW	R24,R28
    02610 9602      ADIW	R24,2
    02611 8399      STD	Y+1,R25
    02612 8388      ST	Y,R24
    02613 E023      LDI	R18,3
    02614 E030      LDI	R19,0
    02615 E400      LDI	R16,0x40
    02616 E014      LDI	R17,4
    02617 940E 215D CALL	_mpu_write_mem
    02619 0158      MOVW	R10,R16
    0261A 3000      CPI	R16,0
    0261B 0701      CPC	R16,R17
    0261C F019      BEQ	0x2620
(0516)         return -1;
    0261D EF0F      LDI	R16,0xFF
    0261E EF1F      LDI	R17,0xFF
    0261F C017      RJMP	0x2637
(0517)     if (mpu_write_mem(FCFG_7, 3, accel_regs))
    02620 01CE      MOVW	R24,R28
    02621 9605      ADIW	R24,5
    02622 8399      STD	Y+1,R25
    02623 8388      ST	Y,R24
    02624 E023      LDI	R18,3
    02625 E030      LDI	R19,0
    02626 E301      LDI	R16,0x31
    02627 E014      LDI	R17,4
    02628 940E 215D CALL	_mpu_write_mem
    0262A 0158      MOVW	R10,R16
    0262B 3000      CPI	R16,0
    0262C 0701      CPC	R16,R17
    0262D F019      BEQ	0x2631
(0518)         return -1;
    0262E EF0F      LDI	R16,0xFF
    0262F EF1F      LDI	R17,0xFF
    02630 C006      RJMP	0x2637
(0519)     dmp.orient = orient;
    02631 9350 0DD0 STS	inv_mpu_dmp_motion_driver.c:dmp+5,R21
    02633 9340 0DCF STS	inv_mpu_dmp_motion_driver.c:dmp+4,R20
(0520)     return 0;
    02635 2700      CLR	R16
    02636 2711      CLR	R17
    02637 9664      ADIW	R28,0x14
    02638 940C 4122 JMP	pop_xgset300C
_dmp_set_gyro_bias:
  regs                 --> Y,+14
  gyro_bias_body       --> Y,+2
  bias                 --> R10
    0263A 940E 4131 CALL	push_xgsetF00C
    0263C 0158      MOVW	R10,R16
    0263D 9762      SBIW	R28,0x12
(0521) }
(0522) 
(0523) /**
(0524)  *  @brief      Push gyro biases to the DMP.
(0525)  *  Because the gyro integration is handled in the DMP, any gyro biases
(0526)  *  calculated by the MPL should be pushed down to DMP memory to remove
(0527)  *  3-axis quaternion drift.
(0528)  *  \n NOTE: If the DMP-based gyro calibration is enabled, the DMP will
(0529)  *  overwrite the biases written to this location once a new one is computed.
(0530)  *  @param[in]  bias    Gyro biases in q16.
(0531)  *  @return     0 if successful.
(0532)  */
(0533) int dmp_set_gyro_bias(long *bias)
(0534) {
(0535)     long gyro_bias_body[3];
(0536)     unsigned char regs[4];
(0537) 
(0538)     gyro_bias_body[0] = bias[dmp.orient & 3];
    0263E 91E0 0DCF LDS	R30,inv_mpu_dmp_motion_driver.c:dmp+4
    02640 91F0 0DD0 LDS	R31,inv_mpu_dmp_motion_driver.c:dmp+5
    02642 70E3      ANDI	R30,3
    02643 70F0      ANDI	R31,0
    02644 0FEE      LSL	R30
    02645 1FFF      ROL	R31
    02646 0FEE      LSL	R30
    02647 1FFF      ROL	R31
    02648 0DEA      ADD	R30,R10
    02649 1DFB      ADC	R31,R11
    0264A 8020      LD	R2,Z
    0264B 8031      LDD	R3,Z+1
    0264C 8042      LDD	R4,Z+2
    0264D 8053      LDD	R5,Z+3
    0264E 822A      STD	Y+2,R2
    0264F 823B      STD	Y+3,R3
    02650 824C      STD	Y+4,R4
    02651 825D      STD	Y+5,R5
(0539)     if (dmp.orient & 4)
    02652 9020 0DCF LDS	R2,inv_mpu_dmp_motion_driver.c:dmp+4
    02654 9030 0DD0 LDS	R3,inv_mpu_dmp_motion_driver.c:dmp+5
    02656 FE22      SBRS	R2,2
    02657 C014      RJMP	0x266C
(0540)         gyro_bias_body[0] *= -1;
    02658 802A      LDD	R2,Y+2
    02659 803B      LDD	R3,Y+3
    0265A 804C      LDD	R4,Y+4
    0265B 805D      LDD	R5,Y+5
    0265C EF4F      LDI	R20,0xFF
    0265D EF5F      LDI	R21,0xFF
    0265E EF6F      LDI	R22,0xFF
    0265F EF7F      LDI	R23,0xFF
    02660 925A      ST	-Y,R5
    02661 924A      ST	-Y,R4
    02662 923A      ST	-Y,R3
    02663 922A      ST	-Y,R2
    02664 018A      MOVW	R16,R20
    02665 019B      MOVW	R18,R22
    02666 940E 40BE CALL	empy32u|empy32s
    02668 830A      STD	Y+2,R16
    02669 831B      STD	Y+3,R17
    0266A 832C      STD	Y+4,R18
    0266B 833D      STD	Y+5,R19
(0541)     gyro_bias_body[1] = bias[(dmp.orient >> 3) & 3];
    0266C 91E0 0DCF LDS	R30,inv_mpu_dmp_motion_driver.c:dmp+4
    0266E 91F0 0DD0 LDS	R31,inv_mpu_dmp_motion_driver.c:dmp+5
    02670 95F6      LSR	R31
    02671 95E7      ROR	R30
    02672 95F6      LSR	R31
    02673 95E7      ROR	R30
    02674 95F6      LSR	R31
    02675 95E7      ROR	R30
    02676 70E3      ANDI	R30,3
    02677 70F0      ANDI	R31,0
    02678 0FEE      LSL	R30
    02679 1FFF      ROL	R31
    0267A 0FEE      LSL	R30
    0267B 1FFF      ROL	R31
    0267C 0DEA      ADD	R30,R10
    0267D 1DFB      ADC	R31,R11
    0267E 8020      LD	R2,Z
    0267F 8031      LDD	R3,Z+1
    02680 8042      LDD	R4,Z+2
    02681 8053      LDD	R5,Z+3
    02682 822E      STD	Y+6,R2
    02683 823F      STD	Y+7,R3
    02684 8648      STD	Y+8,R4
    02685 8659      STD	Y+9,R5
(0542)     if (dmp.orient & 0x20)
    02686 9020 0DCF LDS	R2,inv_mpu_dmp_motion_driver.c:dmp+4
    02688 9030 0DD0 LDS	R3,inv_mpu_dmp_motion_driver.c:dmp+5
    0268A FE25      SBRS	R2,5
    0268B C014      RJMP	0x26A0
(0543)         gyro_bias_body[1] *= -1;
    0268C 802E      LDD	R2,Y+6
    0268D 803F      LDD	R3,Y+7
    0268E 8448      LDD	R4,Y+8
    0268F 8459      LDD	R5,Y+9
    02690 EF4F      LDI	R20,0xFF
    02691 EF5F      LDI	R21,0xFF
    02692 EF6F      LDI	R22,0xFF
    02693 EF7F      LDI	R23,0xFF
    02694 925A      ST	-Y,R5
    02695 924A      ST	-Y,R4
    02696 923A      ST	-Y,R3
    02697 922A      ST	-Y,R2
    02698 018A      MOVW	R16,R20
    02699 019B      MOVW	R18,R22
    0269A 940E 40BE CALL	empy32u|empy32s
    0269C 830E      STD	Y+6,R16
    0269D 831F      STD	Y+7,R17
    0269E 8728      STD	Y+8,R18
    0269F 8739      STD	Y+9,R19
(0544)     gyro_bias_body[2] = bias[(dmp.orient >> 6) & 3];
    026A0 E026      LDI	R18,6
    026A1 E030      LDI	R19,0
    026A2 9100 0DCF LDS	R16,inv_mpu_dmp_motion_driver.c:dmp+4
    026A4 9110 0DD0 LDS	R17,inv_mpu_dmp_motion_driver.c:dmp+5
    026A6 940E 41A9 CALL	lsr16
    026A8 01F8      MOVW	R30,R16
    026A9 70E3      ANDI	R30,3
    026AA 70F0      ANDI	R31,0
    026AB 0FEE      LSL	R30
    026AC 1FFF      ROL	R31
    026AD 0FEE      LSL	R30
    026AE 1FFF      ROL	R31
    026AF 0DEA      ADD	R30,R10
    026B0 1DFB      ADC	R31,R11
    026B1 8020      LD	R2,Z
    026B2 8031      LDD	R3,Z+1
    026B3 8042      LDD	R4,Z+2
    026B4 8053      LDD	R5,Z+3
    026B5 862A      STD	Y+10,R2
    026B6 863B      STD	Y+11,R3
    026B7 864C      STD	Y+12,R4
    026B8 865D      STD	Y+13,R5
(0545)     if (dmp.orient & 0x100)
    026B9 9020 0DCF LDS	R2,inv_mpu_dmp_motion_driver.c:dmp+4
    026BB 9030 0DD0 LDS	R3,inv_mpu_dmp_motion_driver.c:dmp+5
    026BD FE30      SBRS	R3,0
    026BE C014      RJMP	0x26D3
(0546)         gyro_bias_body[2] *= -1;
    026BF 842A      LDD	R2,Y+10
    026C0 843B      LDD	R3,Y+11
    026C1 844C      LDD	R4,Y+12
    026C2 845D      LDD	R5,Y+13
    026C3 EF4F      LDI	R20,0xFF
    026C4 EF5F      LDI	R21,0xFF
    026C5 EF6F      LDI	R22,0xFF
    026C6 EF7F      LDI	R23,0xFF
    026C7 925A      ST	-Y,R5
    026C8 924A      ST	-Y,R4
    026C9 923A      ST	-Y,R3
    026CA 922A      ST	-Y,R2
    026CB 018A      MOVW	R16,R20
    026CC 019B      MOVW	R18,R22
    026CD 940E 40BE CALL	empy32u|empy32s
    026CF 870A      STD	Y+10,R16
    026D0 871B      STD	Y+11,R17
    026D1 872C      STD	Y+12,R18
    026D2 873D      STD	Y+13,R19
(0547) 
(0548) #ifdef EMPL_NO_64BIT
(0549)     gyro_bias_body[0] = (long)(((float)gyro_bias_body[0] * GYRO_SF) / 1073741824.f);
    026D3 EE0A      LDI	R16,0xEA
    026D4 E010      LDI	R17,0
    026D5 940E 409A CALL	elpm32
    026D7 0118      MOVW	R2,R16
    026D8 0129      MOVW	R4,R18
    026D9 810A      LDD	R16,Y+2
    026DA 811B      LDD	R17,Y+3
    026DB 812C      LDD	R18,Y+4
    026DC 813D      LDD	R19,Y+5
    026DD 940E 42CF CALL	long2fp
    026DF 933A      ST	-Y,R19
    026E0 932A      ST	-Y,R18
    026E1 931A      ST	-Y,R17
    026E2 930A      ST	-Y,R16
    026E3 0181      MOVW	R16,R2
    026E4 0192      MOVW	R18,R4
    026E5 940E 4469 CALL	fpmule2
    026E7 0118      MOVW	R2,R16
    026E8 0129      MOVW	R4,R18
    026E9 EE06      LDI	R16,0xE6
    026EA E010      LDI	R17,0
    026EB 940E 409A CALL	elpm32
    026ED 933A      ST	-Y,R19
    026EE 932A      ST	-Y,R18
    026EF 931A      ST	-Y,R17
    026F0 930A      ST	-Y,R16
    026F1 0181      MOVW	R16,R2
    026F2 0192      MOVW	R18,R4
    026F3 940E 42EF CALL	fpdiv2
    026F5 940E 4290 CALL	fpint
    026F7 830A      STD	Y+2,R16
    026F8 831B      STD	Y+3,R17
    026F9 832C      STD	Y+4,R18
    026FA 833D      STD	Y+5,R19
(0550)     gyro_bias_body[1] = (long)(((float)gyro_bias_body[1] * GYRO_SF) / 1073741824.f);
    026FB EE0A      LDI	R16,0xEA
    026FC E010      LDI	R17,0
    026FD 940E 409A CALL	elpm32
    026FF 0118      MOVW	R2,R16
    02700 0129      MOVW	R4,R18
    02701 810E      LDD	R16,Y+6
    02702 811F      LDD	R17,Y+7
    02703 8528      LDD	R18,Y+8
    02704 8539      LDD	R19,Y+9
    02705 940E 42CF CALL	long2fp
    02707 933A      ST	-Y,R19
    02708 932A      ST	-Y,R18
    02709 931A      ST	-Y,R17
    0270A 930A      ST	-Y,R16
    0270B 0181      MOVW	R16,R2
    0270C 0192      MOVW	R18,R4
    0270D 940E 4469 CALL	fpmule2
    0270F 0118      MOVW	R2,R16
    02710 0129      MOVW	R4,R18
    02711 EE06      LDI	R16,0xE6
    02712 E010      LDI	R17,0
    02713 940E 409A CALL	elpm32
    02715 933A      ST	-Y,R19
    02716 932A      ST	-Y,R18
    02717 931A      ST	-Y,R17
    02718 930A      ST	-Y,R16
    02719 0181      MOVW	R16,R2
    0271A 0192      MOVW	R18,R4
    0271B 940E 42EF CALL	fpdiv2
    0271D 940E 4290 CALL	fpint
    0271F 830E      STD	Y+6,R16
    02720 831F      STD	Y+7,R17
    02721 8728      STD	Y+8,R18
    02722 8739      STD	Y+9,R19
(0551)     gyro_bias_body[2] = (long)(((float)gyro_bias_body[2] * GYRO_SF) / 1073741824.f);
    02723 EE0A      LDI	R16,0xEA
    02724 E010      LDI	R17,0
    02725 940E 409A CALL	elpm32
    02727 0118      MOVW	R2,R16
    02728 0129      MOVW	R4,R18
    02729 850A      LDD	R16,Y+10
    0272A 851B      LDD	R17,Y+11
    0272B 852C      LDD	R18,Y+12
    0272C 853D      LDD	R19,Y+13
    0272D 940E 42CF CALL	long2fp
    0272F 933A      ST	-Y,R19
    02730 932A      ST	-Y,R18
    02731 931A      ST	-Y,R17
    02732 930A      ST	-Y,R16
    02733 0181      MOVW	R16,R2
    02734 0192      MOVW	R18,R4
    02735 940E 4469 CALL	fpmule2
    02737 0118      MOVW	R2,R16
    02738 0129      MOVW	R4,R18
    02739 EE06      LDI	R16,0xE6
    0273A E010      LDI	R17,0
    0273B 940E 409A CALL	elpm32
    0273D 933A      ST	-Y,R19
    0273E 932A      ST	-Y,R18
    0273F 931A      ST	-Y,R17
    02740 930A      ST	-Y,R16
    02741 0181      MOVW	R16,R2
    02742 0192      MOVW	R18,R4
    02743 940E 42EF CALL	fpdiv2
    02745 940E 4290 CALL	fpint
    02747 870A      STD	Y+10,R16
    02748 871B      STD	Y+11,R17
    02749 872C      STD	Y+12,R18
    0274A 873D      STD	Y+13,R19
(0552) #else
(0553)     gyro_bias_body[0] = (long)(((long long)gyro_bias_body[0] * GYRO_SF) >> 30);
(0554)     gyro_bias_body[1] = (long)(((long long)gyro_bias_body[1] * GYRO_SF) >> 30);
(0555)     gyro_bias_body[2] = (long)(((long long)gyro_bias_body[2] * GYRO_SF) >> 30);
(0556) #endif
(0557) 
(0558)     regs[0] = (unsigned char)((gyro_bias_body[0] >> 24) & 0xFF);
    0274B E188      LDI	R24,0x18
    0274C E090      LDI	R25,0
    0274D 810A      LDD	R16,Y+2
    0274E 811B      LDD	R17,Y+3
    0274F 812C      LDD	R18,Y+4
    02750 813D      LDD	R19,Y+5
    02751 938A      ST	-Y,R24
    02752 940E 3FD2 CALL	asr32
    02754 0118      MOVW	R2,R16
    02755 0129      MOVW	R4,R18
    02756 EF4F      LDI	R20,0xFF
    02757 E050      LDI	R21,0
    02758 E060      LDI	R22,0
    02759 E070      LDI	R23,0
    0275A 2224      AND	R2,R20
    0275B 2235      AND	R3,R21
    0275C 2246      AND	R4,R22
    0275D 2257      AND	R5,R23
    0275E 862E      STD	Y+14,R2
(0559)     regs[1] = (unsigned char)((gyro_bias_body[0] >> 16) & 0xFF);
    0275F EF4F      LDI	R20,0xFF
    02760 E050      LDI	R21,0
    02761 E060      LDI	R22,0
    02762 E070      LDI	R23,0
    02763 802A      LDD	R2,Y+2
    02764 803B      LDD	R3,Y+3
    02765 804C      LDD	R4,Y+4
    02766 805D      LDD	R5,Y+5
    02767 0112      MOVW	R2,R4
    02768 2444      CLR	R4
    02769 FC37      SBRC	R3,7
    0276A 9440      COM	R4
    0276B 2455      CLR	R5
    0276C FC47      SBRC	R4,7
    0276D 9450      COM	R5
    0276E 2224      AND	R2,R20
    0276F 2235      AND	R3,R21
    02770 2246      AND	R4,R22
    02771 2257      AND	R5,R23
    02772 862F      STD	Y+15,R2
(0560)     regs[2] = (unsigned char)((gyro_bias_body[0] >> 8) & 0xFF);
    02773 E088      LDI	R24,0x8
    02774 E090      LDI	R25,0
    02775 810A      LDD	R16,Y+2
    02776 811B      LDD	R17,Y+3
    02777 812C      LDD	R18,Y+4
    02778 813D      LDD	R19,Y+5
    02779 938A      ST	-Y,R24
    0277A 940E 3FD2 CALL	asr32
    0277C 0118      MOVW	R2,R16
    0277D 0129      MOVW	R4,R18
    0277E EF4F      LDI	R20,0xFF
    0277F E050      LDI	R21,0
    02780 E060      LDI	R22,0
    02781 E070      LDI	R23,0
    02782 2224      AND	R2,R20
    02783 2235      AND	R3,R21
    02784 2246      AND	R4,R22
    02785 2257      AND	R5,R23
    02786 8A28      STD	Y+16,R2
(0561)     regs[3] = (unsigned char)(gyro_bias_body[0] & 0xFF);
    02787 EF4F      LDI	R20,0xFF
    02788 E050      LDI	R21,0
    02789 E060      LDI	R22,0
    0278A E070      LDI	R23,0
    0278B 802A      LDD	R2,Y+2
    0278C 803B      LDD	R3,Y+3
    0278D 804C      LDD	R4,Y+4
    0278E 805D      LDD	R5,Y+5
    0278F 2224      AND	R2,R20
    02790 2235      AND	R3,R21
    02791 2246      AND	R4,R22
    02792 2257      AND	R5,R23
    02793 8A29      STD	Y+17,R2
(0562)     if (mpu_write_mem(D_EXT_GYRO_BIAS_X, 4, regs))
    02794 01CE      MOVW	R24,R28
    02795 960E      ADIW	R24,0xE
    02796 8399      STD	Y+1,R25
    02797 8388      ST	Y,R24
    02798 E024      LDI	R18,4
    02799 E030      LDI	R19,0
    0279A ED00      LDI	R16,0xD0
    0279B E013      LDI	R17,3
    0279C 940E 215D CALL	_mpu_write_mem
    0279E 3000      CPI	R16,0
    0279F 0701      CPC	R16,R17
    027A0 F019      BEQ	0x27A4
(0563)         return -1;
    027A1 EF0F      LDI	R16,0xFF
    027A2 EF1F      LDI	R17,0xFF
    027A3 C0AD      RJMP	0x2851
(0564) 
(0565)     regs[0] = (unsigned char)((gyro_bias_body[1] >> 24) & 0xFF);
    027A4 E188      LDI	R24,0x18
    027A5 E090      LDI	R25,0
    027A6 810E      LDD	R16,Y+6
    027A7 811F      LDD	R17,Y+7
    027A8 8528      LDD	R18,Y+8
    027A9 8539      LDD	R19,Y+9
    027AA 938A      ST	-Y,R24
    027AB 940E 3FD2 CALL	asr32
    027AD 0118      MOVW	R2,R16
    027AE 0129      MOVW	R4,R18
    027AF EF4F      LDI	R20,0xFF
    027B0 E050      LDI	R21,0
    027B1 E060      LDI	R22,0
    027B2 E070      LDI	R23,0
    027B3 2224      AND	R2,R20
    027B4 2235      AND	R3,R21
    027B5 2246      AND	R4,R22
    027B6 2257      AND	R5,R23
    027B7 862E      STD	Y+14,R2
(0566)     regs[1] = (unsigned char)((gyro_bias_body[1] >> 16) & 0xFF);
    027B8 EF4F      LDI	R20,0xFF
    027B9 E050      LDI	R21,0
    027BA E060      LDI	R22,0
    027BB E070      LDI	R23,0
    027BC 802E      LDD	R2,Y+6
    027BD 803F      LDD	R3,Y+7
    027BE 8448      LDD	R4,Y+8
    027BF 8459      LDD	R5,Y+9
    027C0 0112      MOVW	R2,R4
    027C1 2444      CLR	R4
    027C2 FC37      SBRC	R3,7
    027C3 9440      COM	R4
    027C4 2455      CLR	R5
    027C5 FC47      SBRC	R4,7
    027C6 9450      COM	R5
    027C7 2224      AND	R2,R20
    027C8 2235      AND	R3,R21
    027C9 2246      AND	R4,R22
    027CA 2257      AND	R5,R23
    027CB 862F      STD	Y+15,R2
(0567)     regs[2] = (unsigned char)((gyro_bias_body[1] >> 8) & 0xFF);
    027CC E088      LDI	R24,0x8
    027CD E090      LDI	R25,0
    027CE 810E      LDD	R16,Y+6
    027CF 811F      LDD	R17,Y+7
    027D0 8528      LDD	R18,Y+8
    027D1 8539      LDD	R19,Y+9
    027D2 938A      ST	-Y,R24
    027D3 940E 3FD2 CALL	asr32
    027D5 0118      MOVW	R2,R16
    027D6 0129      MOVW	R4,R18
    027D7 EF4F      LDI	R20,0xFF
    027D8 E050      LDI	R21,0
    027D9 E060      LDI	R22,0
    027DA E070      LDI	R23,0
    027DB 2224      AND	R2,R20
    027DC 2235      AND	R3,R21
    027DD 2246      AND	R4,R22
    027DE 2257      AND	R5,R23
    027DF 8A28      STD	Y+16,R2
(0568)     regs[3] = (unsigned char)(gyro_bias_body[1] & 0xFF);
    027E0 EF4F      LDI	R20,0xFF
    027E1 E050      LDI	R21,0
    027E2 E060      LDI	R22,0
    027E3 E070      LDI	R23,0
    027E4 802E      LDD	R2,Y+6
    027E5 803F      LDD	R3,Y+7
    027E6 8448      LDD	R4,Y+8
    027E7 8459      LDD	R5,Y+9
    027E8 2224      AND	R2,R20
    027E9 2235      AND	R3,R21
    027EA 2246      AND	R4,R22
    027EB 2257      AND	R5,R23
    027EC 8A29      STD	Y+17,R2
(0569)     if (mpu_write_mem(D_EXT_GYRO_BIAS_Y, 4, regs))
    027ED 01CE      MOVW	R24,R28
    027EE 960E      ADIW	R24,0xE
    027EF 8399      STD	Y+1,R25
    027F0 8388      ST	Y,R24
    027F1 E024      LDI	R18,4
    027F2 E030      LDI	R19,0
    027F3 ED04      LDI	R16,0xD4
    027F4 E013      LDI	R17,3
    027F5 940E 215D CALL	_mpu_write_mem
    027F7 3000      CPI	R16,0
    027F8 0701      CPC	R16,R17
    027F9 F019      BEQ	0x27FD
(0570)         return -1;
    027FA EF0F      LDI	R16,0xFF
    027FB EF1F      LDI	R17,0xFF
    027FC C054      RJMP	0x2851
(0571) 
(0572)     regs[0] = (unsigned char)((gyro_bias_body[2] >> 24) & 0xFF);
    027FD E188      LDI	R24,0x18
    027FE E090      LDI	R25,0
    027FF 850A      LDD	R16,Y+10
    02800 851B      LDD	R17,Y+11
    02801 852C      LDD	R18,Y+12
    02802 853D      LDD	R19,Y+13
    02803 938A      ST	-Y,R24
    02804 940E 3FD2 CALL	asr32
    02806 0118      MOVW	R2,R16
    02807 0129      MOVW	R4,R18
    02808 EF4F      LDI	R20,0xFF
    02809 E050      LDI	R21,0
    0280A E060      LDI	R22,0
    0280B E070      LDI	R23,0
    0280C 2224      AND	R2,R20
    0280D 2235      AND	R3,R21
    0280E 2246      AND	R4,R22
    0280F 2257      AND	R5,R23
    02810 862E      STD	Y+14,R2
(0573)     regs[1] = (unsigned char)((gyro_bias_body[2] >> 16) & 0xFF);
    02811 EF4F      LDI	R20,0xFF
    02812 E050      LDI	R21,0
    02813 E060      LDI	R22,0
    02814 E070      LDI	R23,0
    02815 842A      LDD	R2,Y+10
    02816 843B      LDD	R3,Y+11
    02817 844C      LDD	R4,Y+12
    02818 845D      LDD	R5,Y+13
    02819 0112      MOVW	R2,R4
    0281A 2444      CLR	R4
    0281B FC37      SBRC	R3,7
    0281C 9440      COM	R4
    0281D 2455      CLR	R5
    0281E FC47      SBRC	R4,7
    0281F 9450      COM	R5
    02820 2224      AND	R2,R20
    02821 2235      AND	R3,R21
    02822 2246      AND	R4,R22
    02823 2257      AND	R5,R23
    02824 862F      STD	Y+15,R2
(0574)     regs[2] = (unsigned char)((gyro_bias_body[2] >> 8) & 0xFF);
    02825 E088      LDI	R24,0x8
    02826 E090      LDI	R25,0
    02827 850A      LDD	R16,Y+10
    02828 851B      LDD	R17,Y+11
    02829 852C      LDD	R18,Y+12
    0282A 853D      LDD	R19,Y+13
    0282B 938A      ST	-Y,R24
    0282C 940E 3FD2 CALL	asr32
    0282E 0118      MOVW	R2,R16
    0282F 0129      MOVW	R4,R18
    02830 EF4F      LDI	R20,0xFF
    02831 E050      LDI	R21,0
    02832 E060      LDI	R22,0
    02833 E070      LDI	R23,0
    02834 2224      AND	R2,R20
    02835 2235      AND	R3,R21
    02836 2246      AND	R4,R22
    02837 2257      AND	R5,R23
    02838 8A28      STD	Y+16,R2
(0575)     regs[3] = (unsigned char)(gyro_bias_body[2] & 0xFF);
    02839 EF4F      LDI	R20,0xFF
    0283A E050      LDI	R21,0
    0283B E060      LDI	R22,0
    0283C E070      LDI	R23,0
    0283D 842A      LDD	R2,Y+10
    0283E 843B      LDD	R3,Y+11
    0283F 844C      LDD	R4,Y+12
    02840 845D      LDD	R5,Y+13
    02841 2224      AND	R2,R20
    02842 2235      AND	R3,R21
    02843 2246      AND	R4,R22
    02844 2257      AND	R5,R23
    02845 8A29      STD	Y+17,R2
(0576)     return mpu_write_mem(D_EXT_GYRO_BIAS_Z, 4, regs);
    02846 01CE      MOVW	R24,R28
    02847 960E      ADIW	R24,0xE
    02848 8399      STD	Y+1,R25
    02849 8388      ST	Y,R24
    0284A E024      LDI	R18,4
    0284B E030      LDI	R19,0
    0284C ED08      LDI	R16,0xD8
    0284D E013      LDI	R17,3
    0284E 940E 215D CALL	_mpu_write_mem
    02850 0158      MOVW	R10,R16
    02851 9662      ADIW	R28,0x12
    02852 940C 4138 JMP	pop_xgsetF00C
_dmp_set_accel_bias:
  accel_sens           --> Y,+30
  accel_sf             --> Y,+26
  regs                 --> Y,+14
  accel_bias_body      --> Y,+2
  bias                 --> R10
    02854 940E 4131 CALL	push_xgsetF00C
    02856 0158      MOVW	R10,R16
    02857 97A0      SBIW	R28,0x20
(0577) }
(0578) 
(0579) /**
(0580)  *  @brief      Push accel biases to the DMP.
(0581)  *  These biases will be removed from the DMP 6-axis quaternion.
(0582)  *  @param[in]  bias    Accel biases in q16.
(0583)  *  @return     0 if successful.
(0584)  */
(0585) int dmp_set_accel_bias(long *bias)
(0586) {
(0587)     long accel_bias_body[3];
(0588)     unsigned char regs[12];
(0589)     long long accel_sf;
(0590)     unsigned short accel_sens;
(0591) 
(0592)     mpu_get_accel_sens(&accel_sens);
    02858 018E      MOVW	R16,R28
    02859 5E02      SUBI	R16,0xE2
    0285A 4F1F      SBCI	R17,0xFF
    0285B 940E 1722 CALL	_mpu_get_accel_sens
(0593)     accel_sf = (long long)accel_sens << 15;
    0285D E08F      LDI	R24,0xF
    0285E E090      LDI	R25,0
    0285F 8D0E      LDD	R16,Y+30
    02860 8D1F      LDD	R17,Y+31
    02861 2722      CLR	R18
    02862 2733      CLR	R19
    02863 938A      ST	-Y,R24
    02864 940E 419D CALL	lsl32
    02866 8F0A      STD	Y+26,R16
    02867 8F1B      STD	Y+27,R17
    02868 8F2C      STD	Y+28,R18
    02869 8F3D      STD	Y+29,R19
(0594)     //__no_operation();
(0595) 
(0596)     accel_bias_body[0] = bias[dmp.orient & 3];
    0286A 91E0 0DCF LDS	R30,inv_mpu_dmp_motion_driver.c:dmp+4
    0286C 91F0 0DD0 LDS	R31,inv_mpu_dmp_motion_driver.c:dmp+5
    0286E 70E3      ANDI	R30,3
    0286F 70F0      ANDI	R31,0
    02870 0FEE      LSL	R30
    02871 1FFF      ROL	R31
    02872 0FEE      LSL	R30
    02873 1FFF      ROL	R31
    02874 0DEA      ADD	R30,R10
    02875 1DFB      ADC	R31,R11
    02876 8020      LD	R2,Z
    02877 8031      LDD	R3,Z+1
    02878 8042      LDD	R4,Z+2
    02879 8053      LDD	R5,Z+3
    0287A 822A      STD	Y+2,R2
    0287B 823B      STD	Y+3,R3
    0287C 824C      STD	Y+4,R4
    0287D 825D      STD	Y+5,R5
(0597)     if (dmp.orient & 4)
    0287E 9020 0DCF LDS	R2,inv_mpu_dmp_motion_driver.c:dmp+4
    02880 9030 0DD0 LDS	R3,inv_mpu_dmp_motion_driver.c:dmp+5
    02882 FE22      SBRS	R2,2
    02883 C014      RJMP	0x2898
(0598)         accel_bias_body[0] *= -1;
    02884 802A      LDD	R2,Y+2
    02885 803B      LDD	R3,Y+3
    02886 804C      LDD	R4,Y+4
    02887 805D      LDD	R5,Y+5
    02888 EF4F      LDI	R20,0xFF
    02889 EF5F      LDI	R21,0xFF
    0288A EF6F      LDI	R22,0xFF
    0288B EF7F      LDI	R23,0xFF
    0288C 925A      ST	-Y,R5
    0288D 924A      ST	-Y,R4
    0288E 923A      ST	-Y,R3
    0288F 922A      ST	-Y,R2
    02890 018A      MOVW	R16,R20
    02891 019B      MOVW	R18,R22
    02892 940E 40BE CALL	empy32u|empy32s
    02894 830A      STD	Y+2,R16
    02895 831B      STD	Y+3,R17
    02896 832C      STD	Y+4,R18
    02897 833D      STD	Y+5,R19
(0599)     accel_bias_body[1] = bias[(dmp.orient >> 3) & 3];
    02898 91E0 0DCF LDS	R30,inv_mpu_dmp_motion_driver.c:dmp+4
    0289A 91F0 0DD0 LDS	R31,inv_mpu_dmp_motion_driver.c:dmp+5
    0289C 95F6      LSR	R31
    0289D 95E7      ROR	R30
    0289E 95F6      LSR	R31
    0289F 95E7      ROR	R30
    028A0 95F6      LSR	R31
    028A1 95E7      ROR	R30
    028A2 70E3      ANDI	R30,3
    028A3 70F0      ANDI	R31,0
    028A4 0FEE      LSL	R30
    028A5 1FFF      ROL	R31
    028A6 0FEE      LSL	R30
    028A7 1FFF      ROL	R31
    028A8 0DEA      ADD	R30,R10
    028A9 1DFB      ADC	R31,R11
    028AA 8020      LD	R2,Z
    028AB 8031      LDD	R3,Z+1
    028AC 8042      LDD	R4,Z+2
    028AD 8053      LDD	R5,Z+3
    028AE 822E      STD	Y+6,R2
    028AF 823F      STD	Y+7,R3
    028B0 8648      STD	Y+8,R4
    028B1 8659      STD	Y+9,R5
(0600)     if (dmp.orient & 0x20)
    028B2 9020 0DCF LDS	R2,inv_mpu_dmp_motion_driver.c:dmp+4
    028B4 9030 0DD0 LDS	R3,inv_mpu_dmp_motion_driver.c:dmp+5
    028B6 FE25      SBRS	R2,5
    028B7 C014      RJMP	0x28CC
(0601)         accel_bias_body[1] *= -1;
    028B8 802E      LDD	R2,Y+6
    028B9 803F      LDD	R3,Y+7
    028BA 8448      LDD	R4,Y+8
    028BB 8459      LDD	R5,Y+9
    028BC EF4F      LDI	R20,0xFF
    028BD EF5F      LDI	R21,0xFF
    028BE EF6F      LDI	R22,0xFF
    028BF EF7F      LDI	R23,0xFF
    028C0 925A      ST	-Y,R5
    028C1 924A      ST	-Y,R4
    028C2 923A      ST	-Y,R3
    028C3 922A      ST	-Y,R2
    028C4 018A      MOVW	R16,R20
    028C5 019B      MOVW	R18,R22
    028C6 940E 40BE CALL	empy32u|empy32s
    028C8 830E      STD	Y+6,R16
    028C9 831F      STD	Y+7,R17
    028CA 8728      STD	Y+8,R18
    028CB 8739      STD	Y+9,R19
(0602)     accel_bias_body[2] = bias[(dmp.orient >> 6) & 3];
    028CC E026      LDI	R18,6
    028CD E030      LDI	R19,0
    028CE 9100 0DCF LDS	R16,inv_mpu_dmp_motion_driver.c:dmp+4
    028D0 9110 0DD0 LDS	R17,inv_mpu_dmp_motion_driver.c:dmp+5
    028D2 940E 41A9 CALL	lsr16
    028D4 01F8      MOVW	R30,R16
    028D5 70E3      ANDI	R30,3
    028D6 70F0      ANDI	R31,0
    028D7 0FEE      LSL	R30
    028D8 1FFF      ROL	R31
    028D9 0FEE      LSL	R30
    028DA 1FFF      ROL	R31
    028DB 0DEA      ADD	R30,R10
    028DC 1DFB      ADC	R31,R11
    028DD 8020      LD	R2,Z
    028DE 8031      LDD	R3,Z+1
    028DF 8042      LDD	R4,Z+2
    028E0 8053      LDD	R5,Z+3
    028E1 862A      STD	Y+10,R2
    028E2 863B      STD	Y+11,R3
    028E3 864C      STD	Y+12,R4
    028E4 865D      STD	Y+13,R5
(0603)     if (dmp.orient & 0x100)
    028E5 9020 0DCF LDS	R2,inv_mpu_dmp_motion_driver.c:dmp+4
    028E7 9030 0DD0 LDS	R3,inv_mpu_dmp_motion_driver.c:dmp+5
    028E9 FE30      SBRS	R3,0
    028EA C014      RJMP	0x28FF
(0604)         accel_bias_body[2] *= -1;
    028EB 842A      LDD	R2,Y+10
    028EC 843B      LDD	R3,Y+11
    028ED 844C      LDD	R4,Y+12
    028EE 845D      LDD	R5,Y+13
    028EF EF4F      LDI	R20,0xFF
    028F0 EF5F      LDI	R21,0xFF
    028F1 EF6F      LDI	R22,0xFF
    028F2 EF7F      LDI	R23,0xFF
    028F3 925A      ST	-Y,R5
    028F4 924A      ST	-Y,R4
    028F5 923A      ST	-Y,R3
    028F6 922A      ST	-Y,R2
    028F7 018A      MOVW	R16,R20
    028F8 019B      MOVW	R18,R22
    028F9 940E 40BE CALL	empy32u|empy32s
    028FB 870A      STD	Y+10,R16
    028FC 871B      STD	Y+11,R17
    028FD 872C      STD	Y+12,R18
    028FE 873D      STD	Y+13,R19
(0605) 
(0606) #ifdef EMPL_NO_64BIT
(0607)     accel_bias_body[0] = (long)(((float)accel_bias_body[0] * accel_sf) / 1073741824.f);
    028FF 810A      LDD	R16,Y+2
    02900 811B      LDD	R17,Y+3
    02901 812C      LDD	R18,Y+4
    02902 813D      LDD	R19,Y+5
    02903 940E 42CF CALL	long2fp
    02905 0118      MOVW	R2,R16
    02906 0129      MOVW	R4,R18
    02907 8D0A      LDD	R16,Y+26
    02908 8D1B      LDD	R17,Y+27
    02909 8D2C      LDD	R18,Y+28
    0290A 8D3D      LDD	R19,Y+29
    0290B 940E 42CF CALL	long2fp
    0290D 933A      ST	-Y,R19
    0290E 932A      ST	-Y,R18
    0290F 931A      ST	-Y,R17
    02910 930A      ST	-Y,R16
    02911 0181      MOVW	R16,R2
    02912 0192      MOVW	R18,R4
    02913 940E 4469 CALL	fpmule2
    02915 0118      MOVW	R2,R16
    02916 0129      MOVW	R4,R18
    02917 EE06      LDI	R16,0xE6
    02918 E010      LDI	R17,0
    02919 940E 409A CALL	elpm32
    0291B 933A      ST	-Y,R19
    0291C 932A      ST	-Y,R18
    0291D 931A      ST	-Y,R17
    0291E 930A      ST	-Y,R16
    0291F 0181      MOVW	R16,R2
    02920 0192      MOVW	R18,R4
    02921 940E 42EF CALL	fpdiv2
    02923 940E 4290 CALL	fpint
    02925 830A      STD	Y+2,R16
    02926 831B      STD	Y+3,R17
    02927 832C      STD	Y+4,R18
    02928 833D      STD	Y+5,R19
(0608)     accel_bias_body[1] = (long)(((float)accel_bias_body[1] * accel_sf) / 1073741824.f);
    02929 810E      LDD	R16,Y+6
    0292A 811F      LDD	R17,Y+7
    0292B 8528      LDD	R18,Y+8
    0292C 8539      LDD	R19,Y+9
    0292D 940E 42CF CALL	long2fp
    0292F 0118      MOVW	R2,R16
    02930 0129      MOVW	R4,R18
    02931 8D0A      LDD	R16,Y+26
    02932 8D1B      LDD	R17,Y+27
    02933 8D2C      LDD	R18,Y+28
    02934 8D3D      LDD	R19,Y+29
    02935 940E 42CF CALL	long2fp
    02937 933A      ST	-Y,R19
    02938 932A      ST	-Y,R18
    02939 931A      ST	-Y,R17
    0293A 930A      ST	-Y,R16
    0293B 0181      MOVW	R16,R2
    0293C 0192      MOVW	R18,R4
    0293D 940E 4469 CALL	fpmule2
    0293F 0118      MOVW	R2,R16
    02940 0129      MOVW	R4,R18
    02941 EE06      LDI	R16,0xE6
    02942 E010      LDI	R17,0
    02943 940E 409A CALL	elpm32
    02945 933A      ST	-Y,R19
    02946 932A      ST	-Y,R18
    02947 931A      ST	-Y,R17
    02948 930A      ST	-Y,R16
    02949 0181      MOVW	R16,R2
    0294A 0192      MOVW	R18,R4
    0294B 940E 42EF CALL	fpdiv2
    0294D 940E 4290 CALL	fpint
    0294F 830E      STD	Y+6,R16
    02950 831F      STD	Y+7,R17
    02951 8728      STD	Y+8,R18
    02952 8739      STD	Y+9,R19
(0609)     accel_bias_body[2] = (long)(((float)accel_bias_body[2] * accel_sf) / 1073741824.f);
    02953 850A      LDD	R16,Y+10
    02954 851B      LDD	R17,Y+11
    02955 852C      LDD	R18,Y+12
    02956 853D      LDD	R19,Y+13
    02957 940E 42CF CALL	long2fp
    02959 0118      MOVW	R2,R16
    0295A 0129      MOVW	R4,R18
    0295B 8D0A      LDD	R16,Y+26
    0295C 8D1B      LDD	R17,Y+27
    0295D 8D2C      LDD	R18,Y+28
    0295E 8D3D      LDD	R19,Y+29
    0295F 940E 42CF CALL	long2fp
    02961 933A      ST	-Y,R19
    02962 932A      ST	-Y,R18
    02963 931A      ST	-Y,R17
    02964 930A      ST	-Y,R16
    02965 0181      MOVW	R16,R2
    02966 0192      MOVW	R18,R4
    02967 940E 4469 CALL	fpmule2
    02969 0118      MOVW	R2,R16
    0296A 0129      MOVW	R4,R18
    0296B EE06      LDI	R16,0xE6
    0296C E010      LDI	R17,0
    0296D 940E 409A CALL	elpm32
    0296F 933A      ST	-Y,R19
    02970 932A      ST	-Y,R18
    02971 931A      ST	-Y,R17
    02972 930A      ST	-Y,R16
    02973 0181      MOVW	R16,R2
    02974 0192      MOVW	R18,R4
    02975 940E 42EF CALL	fpdiv2
    02977 940E 4290 CALL	fpint
    02979 870A      STD	Y+10,R16
    0297A 871B      STD	Y+11,R17
    0297B 872C      STD	Y+12,R18
    0297C 873D      STD	Y+13,R19
(0610) #else
(0611)     accel_bias_body[0] = (long)(((long long)accel_bias_body[0] * accel_sf) >> 30);
(0612)     accel_bias_body[1] = (long)(((long long)accel_bias_body[1] * accel_sf) >> 30);
(0613)     accel_bias_body[2] = (long)(((long long)accel_bias_body[2] * accel_sf) >> 30);
(0614) #endif
(0615) 
(0616)     regs[0] = (unsigned char)((accel_bias_body[0] >> 24) & 0xFF);
    0297D E188      LDI	R24,0x18
    0297E E090      LDI	R25,0
    0297F 810A      LDD	R16,Y+2
    02980 811B      LDD	R17,Y+3
    02981 812C      LDD	R18,Y+4
    02982 813D      LDD	R19,Y+5
    02983 938A      ST	-Y,R24
    02984 940E 3FD2 CALL	asr32
    02986 0118      MOVW	R2,R16
    02987 0129      MOVW	R4,R18
    02988 EF4F      LDI	R20,0xFF
    02989 E050      LDI	R21,0
    0298A E060      LDI	R22,0
    0298B E070      LDI	R23,0
    0298C 2224      AND	R2,R20
    0298D 2235      AND	R3,R21
    0298E 2246      AND	R4,R22
    0298F 2257      AND	R5,R23
    02990 862E      STD	Y+14,R2
(0617)     regs[1] = (unsigned char)((accel_bias_body[0] >> 16) & 0xFF);
    02991 EF4F      LDI	R20,0xFF
    02992 E050      LDI	R21,0
    02993 E060      LDI	R22,0
    02994 E070      LDI	R23,0
    02995 802A      LDD	R2,Y+2
    02996 803B      LDD	R3,Y+3
    02997 804C      LDD	R4,Y+4
    02998 805D      LDD	R5,Y+5
    02999 0112      MOVW	R2,R4
    0299A 2444      CLR	R4
    0299B FC37      SBRC	R3,7
    0299C 9440      COM	R4
    0299D 2455      CLR	R5
    0299E FC47      SBRC	R4,7
    0299F 9450      COM	R5
    029A0 2224      AND	R2,R20
    029A1 2235      AND	R3,R21
    029A2 2246      AND	R4,R22
    029A3 2257      AND	R5,R23
    029A4 862F      STD	Y+15,R2
(0618)     regs[2] = (unsigned char)((accel_bias_body[0] >> 8) & 0xFF);
    029A5 E088      LDI	R24,0x8
    029A6 E090      LDI	R25,0
    029A7 810A      LDD	R16,Y+2
    029A8 811B      LDD	R17,Y+3
    029A9 812C      LDD	R18,Y+4
    029AA 813D      LDD	R19,Y+5
    029AB 938A      ST	-Y,R24
    029AC 940E 3FD2 CALL	asr32
    029AE 0118      MOVW	R2,R16
    029AF 0129      MOVW	R4,R18
    029B0 EF4F      LDI	R20,0xFF
    029B1 E050      LDI	R21,0
    029B2 E060      LDI	R22,0
    029B3 E070      LDI	R23,0
    029B4 2224      AND	R2,R20
    029B5 2235      AND	R3,R21
    029B6 2246      AND	R4,R22
    029B7 2257      AND	R5,R23
    029B8 8A28      STD	Y+16,R2
(0619)     regs[3] = (unsigned char)(accel_bias_body[0] & 0xFF);
    029B9 EF4F      LDI	R20,0xFF
    029BA E050      LDI	R21,0
    029BB E060      LDI	R22,0
    029BC E070      LDI	R23,0
    029BD 802A      LDD	R2,Y+2
    029BE 803B      LDD	R3,Y+3
    029BF 804C      LDD	R4,Y+4
    029C0 805D      LDD	R5,Y+5
    029C1 2224      AND	R2,R20
    029C2 2235      AND	R3,R21
    029C3 2246      AND	R4,R22
    029C4 2257      AND	R5,R23
    029C5 8A29      STD	Y+17,R2
(0620)     regs[4] = (unsigned char)((accel_bias_body[1] >> 24) & 0xFF);
    029C6 E188      LDI	R24,0x18
    029C7 E090      LDI	R25,0
    029C8 810E      LDD	R16,Y+6
    029C9 811F      LDD	R17,Y+7
    029CA 8528      LDD	R18,Y+8
    029CB 8539      LDD	R19,Y+9
    029CC 938A      ST	-Y,R24
    029CD 940E 3FD2 CALL	asr32
    029CF 0118      MOVW	R2,R16
    029D0 0129      MOVW	R4,R18
    029D1 EF4F      LDI	R20,0xFF
    029D2 E050      LDI	R21,0
    029D3 E060      LDI	R22,0
    029D4 E070      LDI	R23,0
    029D5 2224      AND	R2,R20
    029D6 2235      AND	R3,R21
    029D7 2246      AND	R4,R22
    029D8 2257      AND	R5,R23
    029D9 8A2A      STD	Y+18,R2
(0621)     regs[5] = (unsigned char)((accel_bias_body[1] >> 16) & 0xFF);
    029DA EF4F      LDI	R20,0xFF
    029DB E050      LDI	R21,0
    029DC E060      LDI	R22,0
    029DD E070      LDI	R23,0
    029DE 802E      LDD	R2,Y+6
    029DF 803F      LDD	R3,Y+7
    029E0 8448      LDD	R4,Y+8
    029E1 8459      LDD	R5,Y+9
    029E2 0112      MOVW	R2,R4
    029E3 2444      CLR	R4
    029E4 FC37      SBRC	R3,7
    029E5 9440      COM	R4
    029E6 2455      CLR	R5
    029E7 FC47      SBRC	R4,7
    029E8 9450      COM	R5
    029E9 2224      AND	R2,R20
    029EA 2235      AND	R3,R21
    029EB 2246      AND	R4,R22
    029EC 2257      AND	R5,R23
    029ED 8A2B      STD	Y+19,R2
(0622)     regs[6] = (unsigned char)((accel_bias_body[1] >> 8) & 0xFF);
    029EE E088      LDI	R24,0x8
    029EF E090      LDI	R25,0
    029F0 810E      LDD	R16,Y+6
    029F1 811F      LDD	R17,Y+7
    029F2 8528      LDD	R18,Y+8
    029F3 8539      LDD	R19,Y+9
    029F4 938A      ST	-Y,R24
    029F5 940E 3FD2 CALL	asr32
    029F7 0118      MOVW	R2,R16
    029F8 0129      MOVW	R4,R18
    029F9 EF4F      LDI	R20,0xFF
    029FA E050      LDI	R21,0
    029FB E060      LDI	R22,0
    029FC E070      LDI	R23,0
    029FD 2224      AND	R2,R20
    029FE 2235      AND	R3,R21
    029FF 2246      AND	R4,R22
    02A00 2257      AND	R5,R23
    02A01 8A2C      STD	Y+20,R2
(0623)     regs[7] = (unsigned char)(accel_bias_body[1] & 0xFF);
    02A02 EF4F      LDI	R20,0xFF
    02A03 E050      LDI	R21,0
    02A04 E060      LDI	R22,0
    02A05 E070      LDI	R23,0
    02A06 802E      LDD	R2,Y+6
    02A07 803F      LDD	R3,Y+7
    02A08 8448      LDD	R4,Y+8
    02A09 8459      LDD	R5,Y+9
    02A0A 2224      AND	R2,R20
    02A0B 2235      AND	R3,R21
    02A0C 2246      AND	R4,R22
    02A0D 2257      AND	R5,R23
    02A0E 8A2D      STD	Y+21,R2
(0624)     regs[8] = (unsigned char)((accel_bias_body[2] >> 24) & 0xFF);
    02A0F E188      LDI	R24,0x18
    02A10 E090      LDI	R25,0
    02A11 850A      LDD	R16,Y+10
    02A12 851B      LDD	R17,Y+11
    02A13 852C      LDD	R18,Y+12
    02A14 853D      LDD	R19,Y+13
    02A15 938A      ST	-Y,R24
    02A16 940E 3FD2 CALL	asr32
    02A18 0118      MOVW	R2,R16
    02A19 0129      MOVW	R4,R18
    02A1A EF4F      LDI	R20,0xFF
    02A1B E050      LDI	R21,0
    02A1C E060      LDI	R22,0
    02A1D E070      LDI	R23,0
    02A1E 2224      AND	R2,R20
    02A1F 2235      AND	R3,R21
    02A20 2246      AND	R4,R22
    02A21 2257      AND	R5,R23
    02A22 8A2E      STD	Y+22,R2
(0625)     regs[9] = (unsigned char)((accel_bias_body[2] >> 16) & 0xFF);
    02A23 EF4F      LDI	R20,0xFF
    02A24 E050      LDI	R21,0
    02A25 E060      LDI	R22,0
    02A26 E070      LDI	R23,0
    02A27 842A      LDD	R2,Y+10
    02A28 843B      LDD	R3,Y+11
    02A29 844C      LDD	R4,Y+12
    02A2A 845D      LDD	R5,Y+13
    02A2B 0112      MOVW	R2,R4
    02A2C 2444      CLR	R4
    02A2D FC37      SBRC	R3,7
    02A2E 9440      COM	R4
    02A2F 2455      CLR	R5
    02A30 FC47      SBRC	R4,7
    02A31 9450      COM	R5
    02A32 2224      AND	R2,R20
    02A33 2235      AND	R3,R21
    02A34 2246      AND	R4,R22
    02A35 2257      AND	R5,R23
    02A36 8A2F      STD	Y+23,R2
(0626)     regs[10] = (unsigned char)((accel_bias_body[2] >> 8) & 0xFF);
    02A37 E088      LDI	R24,0x8
    02A38 E090      LDI	R25,0
    02A39 850A      LDD	R16,Y+10
    02A3A 851B      LDD	R17,Y+11
    02A3B 852C      LDD	R18,Y+12
    02A3C 853D      LDD	R19,Y+13
    02A3D 938A      ST	-Y,R24
    02A3E 940E 3FD2 CALL	asr32
    02A40 0118      MOVW	R2,R16
    02A41 0129      MOVW	R4,R18
    02A42 EF4F      LDI	R20,0xFF
    02A43 E050      LDI	R21,0
    02A44 E060      LDI	R22,0
    02A45 E070      LDI	R23,0
    02A46 2224      AND	R2,R20
    02A47 2235      AND	R3,R21
    02A48 2246      AND	R4,R22
    02A49 2257      AND	R5,R23
    02A4A 8E28      STD	Y+24,R2
(0627)     regs[11] = (unsigned char)(accel_bias_body[2] & 0xFF);
    02A4B EF4F      LDI	R20,0xFF
    02A4C E050      LDI	R21,0
    02A4D E060      LDI	R22,0
    02A4E E070      LDI	R23,0
    02A4F 842A      LDD	R2,Y+10
    02A50 843B      LDD	R3,Y+11
    02A51 844C      LDD	R4,Y+12
    02A52 845D      LDD	R5,Y+13
    02A53 2224      AND	R2,R20
    02A54 2235      AND	R3,R21
    02A55 2246      AND	R4,R22
    02A56 2257      AND	R5,R23
    02A57 8E29      STD	Y+25,R2
(0628)     return mpu_write_mem(D_ACCEL_BIAS, 12, regs);
    02A58 01CE      MOVW	R24,R28
    02A59 960E      ADIW	R24,0xE
    02A5A 8399      STD	Y+1,R25
    02A5B 8388      ST	Y,R24
    02A5C E02C      LDI	R18,0xC
    02A5D E030      LDI	R19,0
    02A5E E904      LDI	R16,0x94
    02A5F E012      LDI	R17,2
    02A60 940E 215D CALL	_mpu_write_mem
    02A62 96A0      ADIW	R28,0x20
    02A63 940C 4138 JMP	pop_xgsetF00C
_dmp_set_fifo_rate:
  regs_end             --> Y,+10
  tmp                  --> Y,+2
  div                  --> R20
  rate                 --> R10
    02A65 940E 411D CALL	push_xgset300C
    02A67 0158      MOVW	R10,R16
    02A68 9766      SBIW	R28,0x16
(0629) }
(0630) 
(0631) /**
(0632)  *  @brief      Set DMP output rate.
(0633)  *  Only used when DMP is on.
(0634)  *  @param[in]  rate    Desired fifo rate (Hz).
(0635)  *  @return     0 if successful.
(0636)  */
(0637) int dmp_set_fifo_rate(unsigned short rate)
(0638) {
(0639)     const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
    02A69 EE82      LDI	R24,0xE2
    02A6A E09D      LDI	R25,0xD
    02A6B 01FE      MOVW	R30,R28
    02A6C 963A      ADIW	R30,0xA
    02A6D E00C      LDI	R16,0xC
    02A6E E010      LDI	R17,0
    02A6F 93FA      ST	-Y,R31
    02A70 93EA      ST	-Y,R30
    02A71 939A      ST	-Y,R25
    02A72 938A      ST	-Y,R24
    02A73 940E 41BC CALL	asgnblk
(0640)         0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
(0641)     unsigned short div;
(0642)     unsigned char tmp[8];
(0643) 
(0644)     if (rate > DMP_SAMPLE_RATE)
    02A75 EC88      LDI	R24,0xC8
    02A76 E090      LDI	R25,0
    02A77 158A      CP	R24,R10
    02A78 059B      CPC	R25,R11
    02A79 F418      BCC	0x2A7D
(0645)         return -1;
    02A7A EF0F      LDI	R16,0xFF
    02A7B EF1F      LDI	R17,0xFF
    02A7C C036      RJMP	0x2AB3
(0646)     div = DMP_SAMPLE_RATE / rate - 1;
    02A7D EC08      LDI	R16,0xC8
    02A7E E010      LDI	R17,0
    02A7F 0195      MOVW	R18,R10
    02A80 940E 3FFE CALL	div16u
    02A82 01A8      MOVW	R20,R16
    02A83 5041      SUBI	R20,1
    02A84 4050      SBCI	R21,0
(0647)     tmp[0] = (unsigned char)((div >> 8) & 0xFF);
    02A85 01CA      MOVW	R24,R20
    02A86 2F89      MOV	R24,R25
    02A87 2799      CLR	R25
    02A88 7090      ANDI	R25,0
    02A89 838A      STD	Y+2,R24
(0648)     tmp[1] = (unsigned char)(div & 0xFF);
    02A8A 01CA      MOVW	R24,R20
    02A8B 7090      ANDI	R25,0
    02A8C 838B      STD	Y+3,R24
(0649)     if (mpu_write_mem(D_0_22, 2, tmp))
    02A8D 01CE      MOVW	R24,R28
    02A8E 9602      ADIW	R24,2
    02A8F 8399      STD	Y+1,R25
    02A90 8388      ST	Y,R24
    02A91 E022      LDI	R18,2
    02A92 E030      LDI	R19,0
    02A93 E106      LDI	R16,0x16
    02A94 E012      LDI	R17,2
    02A95 940E 215D CALL	_mpu_write_mem
    02A97 3000      CPI	R16,0
    02A98 0701      CPC	R16,R17
    02A99 F019      BEQ	0x2A9D
(0650)         return -1;
    02A9A EF0F      LDI	R16,0xFF
    02A9B EF1F      LDI	R17,0xFF
    02A9C C016      RJMP	0x2AB3
(0651)     if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
    02A9D 01CE      MOVW	R24,R28
    02A9E 960A      ADIW	R24,0xA
    02A9F 8399      STD	Y+1,R25
    02AA0 8388      ST	Y,R24
    02AA1 E02C      LDI	R18,0xC
    02AA2 E030      LDI	R19,0
    02AA3 EC01      LDI	R16,0xC1
    02AA4 E01A      LDI	R17,0xA
    02AA5 940E 215D CALL	_mpu_write_mem
    02AA7 3000      CPI	R16,0
    02AA8 0701      CPC	R16,R17
    02AA9 F019      BEQ	0x2AAD
(0652)         return -1;
    02AAA EF0F      LDI	R16,0xFF
    02AAB EF1F      LDI	R17,0xFF
    02AAC C006      RJMP	0x2AB3
(0653) 
(0654)     dmp.fifo_rate = rate;
    02AAD 92B0 0DD4 STS	inv_mpu_dmp_motion_driver.c:dmp+9,R11
    02AAF 92A0 0DD3 STS	inv_mpu_dmp_motion_driver.c:dmp+8,R10
(0655)     return 0;
    02AB1 2700      CLR	R16
    02AB2 2711      CLR	R17
    02AB3 9666      ADIW	R28,0x16
    02AB4 940C 4122 JMP	pop_xgset300C
(0656) }
(0657) 
(0658) /**
(0659)  *  @brief      Get DMP output rate.
(0660)  *  @param[out] rate    Current fifo rate (Hz).
(0661)  *  @return     0 if successful.
(0662)  */
(0663) int dmp_get_fifo_rate(unsigned short *rate)
(0664) {
(0665)     rate[0] = dmp.fifo_rate;
_dmp_get_fifo_rate:
  rate                 --> R16
    02AB6 9020 0DD3 LDS	R2,inv_mpu_dmp_motion_driver.c:dmp+8
    02AB8 9030 0DD4 LDS	R3,inv_mpu_dmp_motion_driver.c:dmp+9
    02ABA 01F8      MOVW	R30,R16
    02ABB 8231      STD	Z+1,R3
    02ABC 8220      ST	Z,R2
(0666)     return 0;
    02ABD 2700      CLR	R16
    02ABE 2711      CLR	R17
    02ABF 9508      RET
_dmp_set_tap_thresh:
  scaled_thresh        --> Y,+7
  accel_fsr            --> Y,+6
  dmp_thresh_2         --> R22
  dmp_thresh           --> R10
  tmp                  --> Y,+2
  thresh               --> R10
  axis                 --> R20
    02AC0 940E 4131 CALL	push_xgsetF00C
    02AC2 0159      MOVW	R10,R18
    02AC3 2F40      MOV	R20,R16
    02AC4 972B      SBIW	R28,0xB
(0667) }
(0668) 
(0669) /**
(0670)  *  @brief      Set tap threshold for a specific axis.
(0671)  *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
(0672)  *  @param[in]  thresh  Tap threshold, in mg/ms.
(0673)  *  @return     0 if successful.
(0674)  */
(0675) int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
(0676) {
(0677)     unsigned char tmp[4], accel_fsr;
(0678)     float scaled_thresh;
(0679)     unsigned short dmp_thresh, dmp_thresh_2;
(0680)     if (!(axis & TAP_XYZ) || thresh > 1600)
    02AC5 2F84      MOV	R24,R20
    02AC6 7087      ANDI	R24,7
    02AC7 F029      BEQ	0x2ACD
    02AC8 E480      LDI	R24,0x40
    02AC9 E096      LDI	R25,6
    02ACA 158A      CP	R24,R10
    02ACB 059B      CPC	R25,R11
    02ACC F418      BCC	0x2AD0
(0681)         return -1;
    02ACD EF0F      LDI	R16,0xFF
    02ACE EF1F      LDI	R17,0xFF
    02ACF C11E      RJMP	0x2BEE
(0682) 
(0683)     scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
    02AD0 0185      MOVW	R16,R10
    02AD1 940E 42C2 CALL	uint2fp
    02AD3 0118      MOVW	R2,R16
    02AD4 0129      MOVW	R4,R18
    02AD5 EE02      LDI	R16,0xE2
    02AD6 E010      LDI	R17,0
    02AD7 940E 409A CALL	elpm32
    02AD9 933A      ST	-Y,R19
    02ADA 932A      ST	-Y,R18
    02ADB 931A      ST	-Y,R17
    02ADC 930A      ST	-Y,R16
    02ADD 0181      MOVW	R16,R2
    02ADE 0192      MOVW	R18,R4
    02ADF 940E 42EF CALL	fpdiv2
    02AE1 830F      STD	Y+7,R16
    02AE2 8718      STD	Y+8,R17
    02AE3 8729      STD	Y+9,R18
    02AE4 873A      STD	Y+10,R19
(0684) 
(0685)     mpu_get_accel_fsr(&accel_fsr);
    02AE5 018E      MOVW	R16,R28
    02AE6 5F0A      SUBI	R16,0xFA
    02AE7 4F1F      SBCI	R17,0xFF
    02AE8 940E 1521 CALL	_mpu_get_accel_fsr
(0686)     switch (accel_fsr) {
    02AEA 816E      LDD	R22,Y+6
    02AEB 2777      CLR	R23
    02AEC 3068      CPI	R22,0x8
    02AED E0E0      LDI	R30,0
    02AEE 077E      CPC	R23,R30
    02AEF F409      BNE	0x2AF1
    02AF0 C04A      RJMP	0x2B3B
    02AF1 E088      LDI	R24,0x8
    02AF2 E090      LDI	R25,0
    02AF3 1786      CP	R24,R22
    02AF4 0797      CPC	R25,R23
    02AF5 F04C      BLT	0x2AFF
    02AF6 3062      CPI	R22,2
    02AF7 E0E0      LDI	R30,0
    02AF8 077E      CPC	R23,R30
    02AF9 F059      BEQ	0x2B05
    02AFA 3064      CPI	R22,4
    02AFB E0E0      LDI	R30,0
    02AFC 077E      CPC	R23,R30
    02AFD F111      BEQ	0x2B20
    02AFE C072      RJMP	0x2B71
    02AFF 3160      CPI	R22,0x10
    02B00 E0E0      LDI	R30,0
    02B01 077E      CPC	R23,R30
    02B02 F409      BNE	0x2B04
    02B03 C052      RJMP	0x2B56
    02B04 C06C      RJMP	0x2B71
(0687)     case 2:
(0688)         dmp_thresh = (unsigned short)(scaled_thresh * 16384);
    02B05 ED0E      LDI	R16,0xDE
    02B06 E010      LDI	R17,0
    02B07 940E 409A CALL	elpm32
    02B09 01CE      MOVW	R24,R28
    02B0A 9607      ADIW	R24,7
    02B0B 939A      ST	-Y,R25
    02B0C 938A      ST	-Y,R24
    02B0D 940E 445F CALL	fpmule1
    02B0F 940E 4290 CALL	fpint
    02B11 0158      MOVW	R10,R16
(0689)         /* dmp_thresh * 0.75 */
(0690)         dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
    02B12 ED0A      LDI	R16,0xDA
    02B13 E010      LDI	R17,0
    02B14 940E 409A CALL	elpm32
    02B16 01CE      MOVW	R24,R28
    02B17 9607      ADIW	R24,7
    02B18 939A      ST	-Y,R25
    02B19 938A      ST	-Y,R24
    02B1A 940E 445F CALL	fpmule1
    02B1C 940E 4290 CALL	fpint
    02B1E 01B8      MOVW	R22,R16
(0691)         break;
    02B1F C054      RJMP	0x2B74
(0692)     case 4:
(0693)         dmp_thresh = (unsigned short)(scaled_thresh * 8192);
    02B20 ED06      LDI	R16,0xD6
    02B21 E010      LDI	R17,0
    02B22 940E 409A CALL	elpm32
    02B24 01CE      MOVW	R24,R28
    02B25 9607      ADIW	R24,7
    02B26 939A      ST	-Y,R25
    02B27 938A      ST	-Y,R24
    02B28 940E 445F CALL	fpmule1
    02B2A 940E 4290 CALL	fpint
    02B2C 0158      MOVW	R10,R16
(0694)         /* dmp_thresh * 0.75 */
(0695)         dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
    02B2D ED02      LDI	R16,0xD2
    02B2E E010      LDI	R17,0
    02B2F 940E 409A CALL	elpm32
    02B31 01CE      MOVW	R24,R28
    02B32 9607      ADIW	R24,7
    02B33 939A      ST	-Y,R25
    02B34 938A      ST	-Y,R24
    02B35 940E 445F CALL	fpmule1
    02B37 940E 4290 CALL	fpint
    02B39 01B8      MOVW	R22,R16
(0696)         break;
    02B3A C039      RJMP	0x2B74
(0697)     case 8:
(0698)         dmp_thresh = (unsigned short)(scaled_thresh * 4096);
    02B3B EC0E      LDI	R16,0xCE
    02B3C E010      LDI	R17,0
    02B3D 940E 409A CALL	elpm32
    02B3F 01CE      MOVW	R24,R28
    02B40 9607      ADIW	R24,7
    02B41 939A      ST	-Y,R25
    02B42 938A      ST	-Y,R24
    02B43 940E 445F CALL	fpmule1
    02B45 940E 4290 CALL	fpint
    02B47 0158      MOVW	R10,R16
(0699)         /* dmp_thresh * 0.75 */
(0700)         dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
    02B48 EC0A      LDI	R16,0xCA
    02B49 E010      LDI	R17,0
    02B4A 940E 409A CALL	elpm32
    02B4C 01CE      MOVW	R24,R28
    02B4D 9607      ADIW	R24,7
    02B4E 939A      ST	-Y,R25
    02B4F 938A      ST	-Y,R24
    02B50 940E 445F CALL	fpmule1
    02B52 940E 4290 CALL	fpint
    02B54 01B8      MOVW	R22,R16
(0701)         break;
    02B55 C01E      RJMP	0x2B74
(0702)     case 16:
(0703)         dmp_thresh = (unsigned short)(scaled_thresh * 2048);
    02B56 EC06      LDI	R16,0xC6
    02B57 E010      LDI	R17,0
    02B58 940E 409A CALL	elpm32
    02B5A 01CE      MOVW	R24,R28
    02B5B 9607      ADIW	R24,7
    02B5C 939A      ST	-Y,R25
    02B5D 938A      ST	-Y,R24
    02B5E 940E 445F CALL	fpmule1
    02B60 940E 4290 CALL	fpint
    02B62 0158      MOVW	R10,R16
(0704)         /* dmp_thresh * 0.75 */
(0705)         dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
    02B63 EC02      LDI	R16,0xC2
    02B64 E010      LDI	R17,0
    02B65 940E 409A CALL	elpm32
    02B67 01CE      MOVW	R24,R28
    02B68 9607      ADIW	R24,7
    02B69 939A      ST	-Y,R25
    02B6A 938A      ST	-Y,R24
    02B6B 940E 445F CALL	fpmule1
    02B6D 940E 4290 CALL	fpint
    02B6F 01B8      MOVW	R22,R16
(0706)         break;
    02B70 C003      RJMP	0x2B74
(0707)     default:
(0708)         return -1;
    02B71 EF0F      LDI	R16,0xFF
    02B72 EF1F      LDI	R17,0xFF
    02B73 C07A      RJMP	0x2BEE
(0709)     }
(0710)     tmp[0] = (unsigned char)(dmp_thresh >> 8);
    02B74 0115      MOVW	R2,R10
    02B75 2C23      MOV	R2,R3
    02B76 2433      CLR	R3
    02B77 822A      STD	Y+2,R2
(0711)     tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
    02B78 01C5      MOVW	R24,R10
    02B79 7090      ANDI	R25,0
    02B7A 838B      STD	Y+3,R24
(0712)     tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
    02B7B 011B      MOVW	R2,R22
    02B7C 2C23      MOV	R2,R3
    02B7D 2433      CLR	R3
    02B7E 822C      STD	Y+4,R2
(0713)     tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
    02B7F 01CB      MOVW	R24,R22
    02B80 7090      ANDI	R25,0
    02B81 838D      STD	Y+5,R24
(0714) 
(0715)     if (axis & TAP_X) {
    02B82 FF40      SBRS	R20,0
    02B83 C020      RJMP	0x2BA4
(0716)         if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
    02B84 01CE      MOVW	R24,R28
    02B85 9602      ADIW	R24,2
    02B86 8399      STD	Y+1,R25
    02B87 8388      ST	Y,R24
    02B88 E022      LDI	R18,2
    02B89 E030      LDI	R19,0
    02B8A ED04      LDI	R16,0xD4
    02B8B E011      LDI	R17,1
    02B8C 940E 215D CALL	_mpu_write_mem
    02B8E 3000      CPI	R16,0
    02B8F 0701      CPC	R16,R17
    02B90 F019      BEQ	0x2B94
(0717)             return -1;
    02B91 EF0F      LDI	R16,0xFF
    02B92 EF1F      LDI	R17,0xFF
    02B93 C05A      RJMP	0x2BEE
(0718)         if (mpu_write_mem(D_1_36, 2, tmp+2))
    02B94 01CE      MOVW	R24,R28
    02B95 9604      ADIW	R24,4
    02B96 8399      STD	Y+1,R25
    02B97 8388      ST	Y,R24
    02B98 E022      LDI	R18,2
    02B99 E030      LDI	R19,0
    02B9A E204      LDI	R16,0x24
    02B9B E011      LDI	R17,1
    02B9C 940E 215D CALL	_mpu_write_mem
    02B9E 3000      CPI	R16,0
    02B9F 0701      CPC	R16,R17
    02BA0 F019      BEQ	0x2BA4
(0719)             return -1;
    02BA1 EF0F      LDI	R16,0xFF
    02BA2 EF1F      LDI	R17,0xFF
    02BA3 C04A      RJMP	0x2BEE
(0720)     }
(0721)     if (axis & TAP_Y) {
    02BA4 FF41      SBRS	R20,1
    02BA5 C022      RJMP	0x2BC8
(0722)         if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
    02BA6 01CE      MOVW	R24,R28
    02BA7 9602      ADIW	R24,2
    02BA8 8399      STD	Y+1,R25
    02BA9 8388      ST	Y,R24
    02BAA E022      LDI	R18,2
    02BAB E030      LDI	R19,0
    02BAC ED08      LDI	R16,0xD8
    02BAD E011      LDI	R17,1
    02BAE 940E 215D CALL	_mpu_write_mem
    02BB0 0158      MOVW	R10,R16
    02BB1 3000      CPI	R16,0
    02BB2 0701      CPC	R16,R17
    02BB3 F019      BEQ	0x2BB7
(0723)             return -1;
    02BB4 EF0F      LDI	R16,0xFF
    02BB5 EF1F      LDI	R17,0xFF
    02BB6 C037      RJMP	0x2BEE
(0724)         if (mpu_write_mem(D_1_40, 2, tmp+2))
    02BB7 01CE      MOVW	R24,R28
    02BB8 9604      ADIW	R24,4
    02BB9 8399      STD	Y+1,R25
    02BBA 8388      ST	Y,R24
    02BBB E022      LDI	R18,2
    02BBC E030      LDI	R19,0
    02BBD E208      LDI	R16,0x28
    02BBE E011      LDI	R17,1
    02BBF 940E 215D CALL	_mpu_write_mem
    02BC1 0158      MOVW	R10,R16
    02BC2 3000      CPI	R16,0
    02BC3 0701      CPC	R16,R17
    02BC4 F019      BEQ	0x2BC8
(0725)             return -1;
    02BC5 EF0F      LDI	R16,0xFF
    02BC6 EF1F      LDI	R17,0xFF
    02BC7 C026      RJMP	0x2BEE
(0726)     }
(0727)     if (axis & TAP_Z) {
    02BC8 FF42      SBRS	R20,2
    02BC9 C022      RJMP	0x2BEC
(0728)         if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
    02BCA 01CE      MOVW	R24,R28
    02BCB 9602      ADIW	R24,2
    02BCC 8399      STD	Y+1,R25
    02BCD 8388      ST	Y,R24
    02BCE E022      LDI	R18,2
    02BCF E030      LDI	R19,0
    02BD0 ED0C      LDI	R16,0xDC
    02BD1 E011      LDI	R17,1
    02BD2 940E 215D CALL	_mpu_write_mem
    02BD4 0158      MOVW	R10,R16
    02BD5 3000      CPI	R16,0
    02BD6 0701      CPC	R16,R17
    02BD7 F019      BEQ	0x2BDB
(0729)             return -1;
    02BD8 EF0F      LDI	R16,0xFF
    02BD9 EF1F      LDI	R17,0xFF
    02BDA C013      RJMP	0x2BEE
(0730)         if (mpu_write_mem(D_1_44, 2, tmp+2))
    02BDB 01CE      MOVW	R24,R28
    02BDC 9604      ADIW	R24,4
    02BDD 8399      STD	Y+1,R25
    02BDE 8388      ST	Y,R24
    02BDF E022      LDI	R18,2
    02BE0 E030      LDI	R19,0
    02BE1 E20C      LDI	R16,0x2C
    02BE2 E011      LDI	R17,1
    02BE3 940E 215D CALL	_mpu_write_mem
    02BE5 0158      MOVW	R10,R16
    02BE6 3000      CPI	R16,0
    02BE7 0701      CPC	R16,R17
    02BE8 F019      BEQ	0x2BEC
(0731)             return -1;
    02BE9 EF0F      LDI	R16,0xFF
    02BEA EF1F      LDI	R17,0xFF
    02BEB C002      RJMP	0x2BEE
(0732)     }
(0733)     return 0;
    02BEC 2700      CLR	R16
    02BED 2711      CLR	R17
    02BEE 962B      ADIW	R28,0xB
    02BEF 940C 4138 JMP	pop_xgsetF00C
_dmp_set_tap_axes:
  tmp                  --> Y,+2
  axis                 --> R10
    02BF1 92AA      ST	-Y,R10
    02BF2 2EA0      MOV	R10,R16
    02BF3 9723      SBIW	R28,3
(0734) }
(0735) 
(0736) /**
(0737)  *  @brief      Set which axes will register a tap.
(0738)  *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
(0739)  *  @return     0 if successful.
(0740)  */
(0741) int dmp_set_tap_axes(unsigned char axis)
(0742) {
(0743)     unsigned char tmp = 0;
    02BF4 2422      CLR	R2
    02BF5 822A      STD	Y+2,R2
(0744) 
(0745)     if (axis & TAP_X)
    02BF6 FEA0      SBRS	R10,0
    02BF7 C003      RJMP	0x2BFB
(0746)         tmp |= 0x30;
    02BF8 2D82      MOV	R24,R2
    02BF9 6380      ORI	R24,0x30
    02BFA 838A      STD	Y+2,R24
(0747)     if (axis & TAP_Y)
    02BFB FEA1      SBRS	R10,1
    02BFC C003      RJMP	0x2C00
(0748)         tmp |= 0x0C;
    02BFD 818A      LDD	R24,Y+2
    02BFE 608C      ORI	R24,0xC
    02BFF 838A      STD	Y+2,R24
(0749)     if (axis & TAP_Z)
    02C00 FEA2      SBRS	R10,2
    02C01 C003      RJMP	0x2C05
(0750)         tmp |= 0x03;
    02C02 818A      LDD	R24,Y+2
    02C03 6083      ORI	R24,3
    02C04 838A      STD	Y+2,R24
(0751)     return mpu_write_mem(D_1_72, 1, &tmp);
    02C05 01CE      MOVW	R24,R28
    02C06 9602      ADIW	R24,2
    02C07 8399      STD	Y+1,R25
    02C08 8388      ST	Y,R24
    02C09 E021      LDI	R18,1
    02C0A E030      LDI	R19,0
    02C0B E408      LDI	R16,0x48
    02C0C E011      LDI	R17,1
    02C0D 940E 215D CALL	_mpu_write_mem
    02C0F 9623      ADIW	R28,3
    02C10 90A9      LD	R10,Y+
    02C11 9508      RET
_dmp_set_tap_count:
  tmp                  --> Y,+2
  min_taps             --> R20
    02C12 934A      ST	-Y,R20
    02C13 2F40      MOV	R20,R16
    02C14 9723      SBIW	R28,3
(0752) }
(0753) 
(0754) /**
(0755)  *  @brief      Set minimum number of taps needed for an interrupt.
(0756)  *  @param[in]  min_taps    Minimum consecutive taps (1-4).
(0757)  *  @return     0 if successful.
(0758)  */
(0759) int dmp_set_tap_count(unsigned char min_taps)
(0760) {
(0761)     unsigned char tmp;
(0762) 
(0763)     if (min_taps < 1)
    02C15 3041      CPI	R20,1
    02C16 F410      BCC	0x2C19
(0764)         min_taps = 1;
    02C17 E041      LDI	R20,1
    02C18 C004      RJMP	0x2C1D
(0765)     else if (min_taps > 4)
    02C19 E084      LDI	R24,4
    02C1A 1784      CP	R24,R20
    02C1B F408      BCC	0x2C1D
(0766)         min_taps = 4;
    02C1C E044      LDI	R20,4
(0767) 
(0768)     tmp = min_taps - 1;
    02C1D 2F84      MOV	R24,R20
    02C1E 5081      SUBI	R24,1
    02C1F 838A      STD	Y+2,R24
(0769)     return mpu_write_mem(D_1_79, 1, &tmp);
    02C20 01CE      MOVW	R24,R28
    02C21 9602      ADIW	R24,2
    02C22 8399      STD	Y+1,R25
    02C23 8388      ST	Y,R24
    02C24 E021      LDI	R18,1
    02C25 E030      LDI	R19,0
    02C26 E40F      LDI	R16,0x4F
    02C27 E011      LDI	R17,1
    02C28 940E 215D CALL	_mpu_write_mem
    02C2A 9623      ADIW	R28,3
    02C2B 9149      LD	R20,Y+
    02C2C 9508      RET
_dmp_set_tap_time:
  tmp                  --> Y,+2
  dmp_time             --> R20
  time                 --> R10
    02C2D 940E 411D CALL	push_xgset300C
    02C2F 0158      MOVW	R10,R16
    02C30 9724      SBIW	R28,4
(0770) }
(0771) 
(0772) /**
(0773)  *  @brief      Set length between valid taps.
(0774)  *  @param[in]  time    Milliseconds between taps.
(0775)  *  @return     0 if successful.
(0776)  */
(0777) int dmp_set_tap_time(unsigned short time)
(0778) {
(0779)     unsigned short dmp_time;
(0780)     unsigned char tmp[2];
(0781) 
(0782)     dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    02C31 E025      LDI	R18,5
    02C32 E030      LDI	R19,0
    02C33 0185      MOVW	R16,R10
    02C34 940E 3FFE CALL	div16u
    02C36 01A8      MOVW	R20,R16
(0783)     tmp[0] = (unsigned char)(dmp_time >> 8);
    02C37 011A      MOVW	R2,R20
    02C38 2C23      MOV	R2,R3
    02C39 2433      CLR	R3
    02C3A 822A      STD	Y+2,R2
(0784)     tmp[1] = (unsigned char)(dmp_time & 0xFF);
    02C3B 01CA      MOVW	R24,R20
    02C3C 7090      ANDI	R25,0
    02C3D 838B      STD	Y+3,R24
(0785)     return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
    02C3E 01CE      MOVW	R24,R28
    02C3F 9602      ADIW	R24,2
    02C40 8399      STD	Y+1,R25
    02C41 8388      ST	Y,R24
    02C42 E022      LDI	R18,2
    02C43 E030      LDI	R19,0
    02C44 ED0E      LDI	R16,0xDE
    02C45 E011      LDI	R17,1
    02C46 940E 215D CALL	_mpu_write_mem
    02C48 9624      ADIW	R28,4
    02C49 940C 4122 JMP	pop_xgset300C
_dmp_set_tap_time_multi:
  tmp                  --> Y,+2
  dmp_time             --> R20
  time                 --> R10
    02C4B 940E 411D CALL	push_xgset300C
    02C4D 0158      MOVW	R10,R16
    02C4E 9724      SBIW	R28,4
(0786) }
(0787) 
(0788) /**
(0789)  *  @brief      Set max time between taps to register as a multi-tap.
(0790)  *  @param[in]  time    Max milliseconds between taps.
(0791)  *  @return     0 if successful.
(0792)  */
(0793) int dmp_set_tap_time_multi(unsigned short time)
(0794) {
(0795)     unsigned short dmp_time;
(0796)     unsigned char tmp[2];
(0797) 
(0798)     dmp_time = time / (1000 / DMP_SAMPLE_RATE);
    02C4F E025      LDI	R18,5
    02C50 E030      LDI	R19,0
    02C51 0185      MOVW	R16,R10
    02C52 940E 3FFE CALL	div16u
    02C54 01A8      MOVW	R20,R16
(0799)     tmp[0] = (unsigned char)(dmp_time >> 8);
    02C55 011A      MOVW	R2,R20
    02C56 2C23      MOV	R2,R3
    02C57 2433      CLR	R3
    02C58 822A      STD	Y+2,R2
(0800)     tmp[1] = (unsigned char)(dmp_time & 0xFF);
    02C59 01CA      MOVW	R24,R20
    02C5A 7090      ANDI	R25,0
    02C5B 838B      STD	Y+3,R24
(0801)     return mpu_write_mem(D_1_218, 2, tmp);
    02C5C 01CE      MOVW	R24,R28
    02C5D 9602      ADIW	R24,2
    02C5E 8399      STD	Y+1,R25
    02C5F 8388      ST	Y,R24
    02C60 E022      LDI	R18,2
    02C61 E030      LDI	R19,0
    02C62 ED0A      LDI	R16,0xDA
    02C63 E011      LDI	R17,1
    02C64 940E 215D CALL	_mpu_write_mem
    02C66 9624      ADIW	R28,4
    02C67 940C 4122 JMP	pop_xgset300C
_dmp_set_shake_reject_thresh:
  thresh_scaled        --> Y,+6
  tmp                  --> Y,+2
  thresh               --> R10
  sf                   --> Y,+16
    02C69 940E 3FCD CALL	push_arg4
    02C6B 940E 4131 CALL	push_xgsetF00C
    02C6D 972A      SBIW	R28,0xA
    02C6E 88AC      LDD	R10,Y+20
    02C6F 88BD      LDD	R11,Y+21
(0802) }
(0803) 
(0804) /**
(0805)  *  @brief      Set shake rejection threshold.
(0806)  *  If the DMP detects a gyro sample larger than @e thresh, taps are rejected.
(0807)  *  @param[in]  sf      Gyro scale factor.
(0808)  *  @param[in]  thresh  Gyro threshold in dps.
(0809)  *  @return     0 if successful.
(0810)  */
(0811) int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
(0812) {
(0813)     unsigned char tmp[4];
(0814)     long thresh_scaled = sf / 1000 * thresh;
    02C70 EE48      LDI	R20,0xE8
    02C71 E053      LDI	R21,3
    02C72 E060      LDI	R22,0
    02C73 E070      LDI	R23,0
    02C74 8908      LDD	R16,Y+16
    02C75 8919      LDD	R17,Y+17
    02C76 892A      LDD	R18,Y+18
    02C77 893B      LDD	R19,Y+19
    02C78 937A      ST	-Y,R23
    02C79 936A      ST	-Y,R22
    02C7A 935A      ST	-Y,R21
    02C7B 934A      ST	-Y,R20
    02C7C 940E 401E CALL	div32s
    02C7E 0115      MOVW	R2,R10
    02C7F 2444      CLR	R4
    02C80 2455      CLR	R5
    02C81 925A      ST	-Y,R5
    02C82 924A      ST	-Y,R4
    02C83 923A      ST	-Y,R3
    02C84 922A      ST	-Y,R2
    02C85 940E 40BE CALL	empy32u|empy32s
    02C87 830E      STD	Y+6,R16
    02C88 831F      STD	Y+7,R17
    02C89 8728      STD	Y+8,R18
    02C8A 8739      STD	Y+9,R19
(0815)     tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
    02C8B E188      LDI	R24,0x18
    02C8C E090      LDI	R25,0
    02C8D 810E      LDD	R16,Y+6
    02C8E 811F      LDD	R17,Y+7
    02C8F 8528      LDD	R18,Y+8
    02C90 8539      LDD	R19,Y+9
    02C91 938A      ST	-Y,R24
    02C92 940E 3FD2 CALL	asr32
    02C94 0118      MOVW	R2,R16
    02C95 0129      MOVW	R4,R18
    02C96 EF4F      LDI	R20,0xFF
    02C97 E050      LDI	R21,0
    02C98 E060      LDI	R22,0
    02C99 E070      LDI	R23,0
    02C9A 2224      AND	R2,R20
    02C9B 2235      AND	R3,R21
    02C9C 2246      AND	R4,R22
    02C9D 2257      AND	R5,R23
    02C9E 822A      STD	Y+2,R2
(0816)     tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
    02C9F EF4F      LDI	R20,0xFF
    02CA0 E050      LDI	R21,0
    02CA1 E060      LDI	R22,0
    02CA2 E070      LDI	R23,0
    02CA3 802E      LDD	R2,Y+6
    02CA4 803F      LDD	R3,Y+7
    02CA5 8448      LDD	R4,Y+8
    02CA6 8459      LDD	R5,Y+9
    02CA7 0112      MOVW	R2,R4
    02CA8 2444      CLR	R4
    02CA9 FC37      SBRC	R3,7
    02CAA 9440      COM	R4
    02CAB 2455      CLR	R5
    02CAC FC47      SBRC	R4,7
    02CAD 9450      COM	R5
    02CAE 2224      AND	R2,R20
    02CAF 2235      AND	R3,R21
    02CB0 2246      AND	R4,R22
    02CB1 2257      AND	R5,R23
    02CB2 822B      STD	Y+3,R2
(0817)     tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
    02CB3 E088      LDI	R24,0x8
    02CB4 E090      LDI	R25,0
    02CB5 810E      LDD	R16,Y+6
    02CB6 811F      LDD	R17,Y+7
    02CB7 8528      LDD	R18,Y+8
    02CB8 8539      LDD	R19,Y+9
    02CB9 938A      ST	-Y,R24
    02CBA 940E 3FD2 CALL	asr32
    02CBC 0118      MOVW	R2,R16
    02CBD 0129      MOVW	R4,R18
    02CBE EF4F      LDI	R20,0xFF
    02CBF E050      LDI	R21,0
    02CC0 E060      LDI	R22,0
    02CC1 E070      LDI	R23,0
    02CC2 2224      AND	R2,R20
    02CC3 2235      AND	R3,R21
    02CC4 2246      AND	R4,R22
    02CC5 2257      AND	R5,R23
    02CC6 822C      STD	Y+4,R2
(0818)     tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
    02CC7 EF4F      LDI	R20,0xFF
    02CC8 E050      LDI	R21,0
    02CC9 E060      LDI	R22,0
    02CCA E070      LDI	R23,0
    02CCB 802E      LDD	R2,Y+6
    02CCC 803F      LDD	R3,Y+7
    02CCD 8448      LDD	R4,Y+8
    02CCE 8459      LDD	R5,Y+9
    02CCF 2224      AND	R2,R20
    02CD0 2235      AND	R3,R21
    02CD1 2246      AND	R4,R22
    02CD2 2257      AND	R5,R23
    02CD3 822D      STD	Y+5,R2
(0819)     return mpu_write_mem(D_1_92, 4, tmp);
    02CD4 01CE      MOVW	R24,R28
    02CD5 9602      ADIW	R24,2
    02CD6 8399      STD	Y+1,R25
    02CD7 8388      ST	Y,R24
    02CD8 E024      LDI	R18,4
    02CD9 E030      LDI	R19,0
    02CDA E50C      LDI	R16,0x5C
    02CDB E011      LDI	R17,1
    02CDC 940E 215D CALL	_mpu_write_mem
    02CDE 962A      ADIW	R28,0xA
    02CDF 940E 4138 CALL	pop_xgsetF00C
    02CE1 9624      ADIW	R28,4
    02CE2 9508      RET
_dmp_set_shake_reject_time:
  tmp                  --> Y,+2
  time                 --> R20
    02CE3 934A      ST	-Y,R20
    02CE4 935A      ST	-Y,R21
    02CE5 01A8      MOVW	R20,R16
    02CE6 9724      SBIW	R28,4
(0820) }
(0821) 
(0822) /**
(0823)  *  @brief      Set shake rejection time.
(0824)  *  Sets the length of time that the gyro must be outside of the threshold set
(0825)  *  by @e gyro_set_shake_reject_thresh before taps are rejected. A mandatory
(0826)  *  60 ms is added to this parameter.
(0827)  *  @param[in]  time    Time in milliseconds.
(0828)  *  @return     0 if successful.
(0829)  */
(0830) int dmp_set_shake_reject_time(unsigned short time)
(0831) {
(0832)     unsigned char tmp[2];
(0833) 
(0834)     time /= (1000 / DMP_SAMPLE_RATE);
    02CE7 E025      LDI	R18,5
    02CE8 E030      LDI	R19,0
    02CE9 018A      MOVW	R16,R20
    02CEA 940E 3FFE CALL	div16u
    02CEC 01A8      MOVW	R20,R16
(0835)     tmp[0] = time >> 8;
    02CED 011A      MOVW	R2,R20
    02CEE 2C23      MOV	R2,R3
    02CEF 2433      CLR	R3
    02CF0 822A      STD	Y+2,R2
(0836)     tmp[1] = time & 0xFF;
    02CF1 01CA      MOVW	R24,R20
    02CF2 7090      ANDI	R25,0
    02CF3 838B      STD	Y+3,R24
(0837)     return mpu_write_mem(D_1_90,2,tmp);
    02CF4 01CE      MOVW	R24,R28
    02CF5 9602      ADIW	R24,2
    02CF6 8399      STD	Y+1,R25
    02CF7 8388      ST	Y,R24
    02CF8 E022      LDI	R18,2
    02CF9 E030      LDI	R19,0
    02CFA E50A      LDI	R16,0x5A
    02CFB E011      LDI	R17,1
    02CFC 940E 215D CALL	_mpu_write_mem
    02CFE 9624      ADIW	R28,4
    02CFF 9159      LD	R21,Y+
    02D00 9149      LD	R20,Y+
    02D01 9508      RET
_dmp_set_shake_reject_timeout:
  tmp                  --> Y,+2
  time                 --> R20
    02D02 934A      ST	-Y,R20
    02D03 935A      ST	-Y,R21
    02D04 01A8      MOVW	R20,R16
    02D05 9724      SBIW	R28,4
(0838) }
(0839) 
(0840) /**
(0841)  *  @brief      Set shake rejection timeout.
(0842)  *  Sets the length of time after a shake rejection that the gyro must stay
(0843)  *  inside of the threshold before taps can be detected again. A mandatory
(0844)  *  60 ms is added to this parameter.
(0845)  *  @param[in]  time    Time in milliseconds.
(0846)  *  @return     0 if successful.
(0847)  */
(0848) int dmp_set_shake_reject_timeout(unsigned short time)
(0849) {
(0850)     unsigned char tmp[2];
(0851) 
(0852)     time /= (1000 / DMP_SAMPLE_RATE);
    02D06 E025      LDI	R18,5
    02D07 E030      LDI	R19,0
    02D08 018A      MOVW	R16,R20
    02D09 940E 3FFE CALL	div16u
    02D0B 01A8      MOVW	R20,R16
(0853)     tmp[0] = time >> 8;
    02D0C 011A      MOVW	R2,R20
    02D0D 2C23      MOV	R2,R3
    02D0E 2433      CLR	R3
    02D0F 822A      STD	Y+2,R2
(0854)     tmp[1] = time & 0xFF;
    02D10 01CA      MOVW	R24,R20
    02D11 7090      ANDI	R25,0
    02D12 838B      STD	Y+3,R24
(0855)     return mpu_write_mem(D_1_88,2,tmp);
    02D13 01CE      MOVW	R24,R28
    02D14 9602      ADIW	R24,2
    02D15 8399      STD	Y+1,R25
    02D16 8388      ST	Y,R24
    02D17 E022      LDI	R18,2
    02D18 E030      LDI	R19,0
    02D19 E508      LDI	R16,0x58
    02D1A E011      LDI	R17,1
    02D1B 940E 215D CALL	_mpu_write_mem
    02D1D 9624      ADIW	R28,4
    02D1E 9159      LD	R21,Y+
    02D1F 9149      LD	R20,Y+
    02D20 9508      RET
_dmp_get_pedometer_step_count:
  tmp                  --> Y,+2
  count                --> R10
    02D21 92AA      ST	-Y,R10
    02D22 92BA      ST	-Y,R11
    02D23 0158      MOVW	R10,R16
    02D24 9726      SBIW	R28,6
(0856) }
(0857) 
(0858) /**
(0859)  *  @brief      Get current step count.
(0860)  *  @param[out] count   Number of steps detected.
(0861)  *  @return     0 if successful.
(0862)  */
(0863) int dmp_get_pedometer_step_count(unsigned long *count)
(0864) {
(0865)     unsigned char tmp[4];
(0866)     if (!count)
    02D25 20AA      TST	R10
    02D26 F429      BNE	0x2D2C
    02D27 20BB      TST	R11
    02D28 F419      BNE	0x2D2C
(0867)         return -1;
    02D29 EF0F      LDI	R16,0xFF
    02D2A EF1F      LDI	R17,0xFF
    02D2B C042      RJMP	0x2D6E
(0868) 
(0869)     if (mpu_read_mem(D_PEDSTD_STEPCTR, 4, tmp))
    02D2C 01CE      MOVW	R24,R28
    02D2D 9602      ADIW	R24,2
    02D2E 8399      STD	Y+1,R25
    02D2F 8388      ST	Y,R24
    02D30 E024      LDI	R18,4
    02D31 E030      LDI	R19,0
    02D32 E600      LDI	R16,0x60
    02D33 E013      LDI	R17,3
    02D34 940E 21B9 CALL	_mpu_read_mem
    02D36 3000      CPI	R16,0
    02D37 0701      CPC	R16,R17
    02D38 F019      BEQ	0x2D3C
(0870)         return -1;
    02D39 EF0F      LDI	R16,0xFF
    02D3A EF1F      LDI	R17,0xFF
    02D3B C032      RJMP	0x2D6E
(0871) 
(0872)     count[0] = ((unsigned long)tmp[0] << 24) | ((unsigned long)tmp[1] << 16) |
    02D3C E188      LDI	R24,0x18
    02D3D E090      LDI	R25,0
    02D3E 810A      LDD	R16,Y+2
    02D3F 2711      CLR	R17
    02D40 2722      CLR	R18
    02D41 2733      CLR	R19
    02D42 938A      ST	-Y,R24
    02D43 940E 419D CALL	lsl32
    02D45 0118      MOVW	R2,R16
    02D46 0129      MOVW	R4,R18
    02D47 806B      LDD	R6,Y+3
    02D48 2477      CLR	R7
    02D49 2488      CLR	R8
    02D4A 2499      CLR	R9
    02D4B 0143      MOVW	R8,R6
    02D4C 2466      CLR	R6
    02D4D 2477      CLR	R7
    02D4E 2826      OR	R2,R6
    02D4F 2837      OR	R3,R7
    02D50 2848      OR	R4,R8
    02D51 2859      OR	R5,R9
    02D52 E088      LDI	R24,0x8
    02D53 E090      LDI	R25,0
    02D54 810C      LDD	R16,Y+4
    02D55 2711      CLR	R17
    02D56 2722      CLR	R18
    02D57 2733      CLR	R19
    02D58 938A      ST	-Y,R24
    02D59 940E 419D CALL	lsl32
    02D5B 2A20      OR	R2,R16
    02D5C 2A31      OR	R3,R17
    02D5D 2A42      OR	R4,R18
    02D5E 2A53      OR	R5,R19
    02D5F 806D      LDD	R6,Y+5
    02D60 2477      CLR	R7
    02D61 2488      CLR	R8
    02D62 2499      CLR	R9
    02D63 2826      OR	R2,R6
    02D64 2837      OR	R3,R7
    02D65 2848      OR	R4,R8
    02D66 2859      OR	R5,R9
    02D67 01F5      MOVW	R30,R10
    02D68 8220      ST	Z,R2
    02D69 8231      STD	Z+1,R3
    02D6A 8242      STD	Z+2,R4
    02D6B 8253      STD	Z+3,R5
(0873)         ((unsigned long)tmp[2] << 8) | tmp[3];
(0874)     return 0;
    02D6C 2700      CLR	R16
    02D6D 2711      CLR	R17
    02D6E 9626      ADIW	R28,6
    02D6F 90B9      LD	R11,Y+
    02D70 90A9      LD	R10,Y+
    02D71 9508      RET
_dmp_set_pedometer_step_count:
  tmp                  --> Y,+2
  count                --> Y,+6
    02D72 940E 3FCD CALL	push_arg4
    02D74 9726      SBIW	R28,6
(0875) }
(0876) 
(0877) /**
(0878)  *  @brief      Overwrite current step count.
(0879)  *  WARNING: This function writes to DMP memory and could potentially encounter
(0880)  *  a race condition if called while the pedometer is enabled.
(0881)  *  @param[in]  count   New step count.
(0882)  *  @return     0 if successful.
(0883)  */
(0884) int dmp_set_pedometer_step_count(unsigned long count)
(0885) {
(0886)     unsigned char tmp[4];
(0887) 
(0888)     tmp[0] = (unsigned char)((count >> 24) & 0xFF);
    02D75 E188      LDI	R24,0x18
    02D76 E090      LDI	R25,0
    02D77 810E      LDD	R16,Y+6
    02D78 811F      LDD	R17,Y+7
    02D79 8528      LDD	R18,Y+8
    02D7A 8539      LDD	R19,Y+9
    02D7B 938A      ST	-Y,R24
    02D7C 940E 41B0 CALL	lsr32
    02D7E 0118      MOVW	R2,R16
    02D7F 0129      MOVW	R4,R18
    02D80 EF8F      LDI	R24,0xFF
    02D81 E090      LDI	R25,0
    02D82 E0A0      LDI	R26,0
    02D83 E0B0      LDI	R27,0
    02D84 2228      AND	R2,R24
    02D85 2239      AND	R3,R25
    02D86 224A      AND	R4,R26
    02D87 225B      AND	R5,R27
    02D88 822A      STD	Y+2,R2
(0889)     tmp[1] = (unsigned char)((count >> 16) & 0xFF);
    02D89 EF8F      LDI	R24,0xFF
    02D8A E090      LDI	R25,0
    02D8B E0A0      LDI	R26,0
    02D8C E0B0      LDI	R27,0
    02D8D 802E      LDD	R2,Y+6
    02D8E 803F      LDD	R3,Y+7
    02D8F 8448      LDD	R4,Y+8
    02D90 8459      LDD	R5,Y+9
    02D91 0112      MOVW	R2,R4
    02D92 2444      CLR	R4
    02D93 2455      CLR	R5
    02D94 2228      AND	R2,R24
    02D95 2239      AND	R3,R25
    02D96 224A      AND	R4,R26
    02D97 225B      AND	R5,R27
    02D98 822B      STD	Y+3,R2
(0890)     tmp[2] = (unsigned char)((count >> 8) & 0xFF);
    02D99 E088      LDI	R24,0x8
    02D9A E090      LDI	R25,0
    02D9B 810E      LDD	R16,Y+6
    02D9C 811F      LDD	R17,Y+7
    02D9D 8528      LDD	R18,Y+8
    02D9E 8539      LDD	R19,Y+9
    02D9F 938A      ST	-Y,R24
    02DA0 940E 41B0 CALL	lsr32
    02DA2 0118      MOVW	R2,R16
    02DA3 0129      MOVW	R4,R18
    02DA4 EF8F      LDI	R24,0xFF
    02DA5 E090      LDI	R25,0
    02DA6 E0A0      LDI	R26,0
    02DA7 E0B0      LDI	R27,0
    02DA8 2228      AND	R2,R24
    02DA9 2239      AND	R3,R25
    02DAA 224A      AND	R4,R26
    02DAB 225B      AND	R5,R27
    02DAC 822C      STD	Y+4,R2
(0891)     tmp[3] = (unsigned char)(count & 0xFF);
    02DAD EF8F      LDI	R24,0xFF
    02DAE E090      LDI	R25,0
    02DAF E0A0      LDI	R26,0
    02DB0 E0B0      LDI	R27,0
    02DB1 802E      LDD	R2,Y+6
    02DB2 803F      LDD	R3,Y+7
    02DB3 8448      LDD	R4,Y+8
    02DB4 8459      LDD	R5,Y+9
    02DB5 2228      AND	R2,R24
    02DB6 2239      AND	R3,R25
    02DB7 224A      AND	R4,R26
    02DB8 225B      AND	R5,R27
    02DB9 822D      STD	Y+5,R2
(0892)     return mpu_write_mem(D_PEDSTD_STEPCTR, 4, tmp);
    02DBA 01CE      MOVW	R24,R28
    02DBB 9602      ADIW	R24,2
    02DBC 8399      STD	Y+1,R25
    02DBD 8388      ST	Y,R24
    02DBE E024      LDI	R18,4
    02DBF E030      LDI	R19,0
    02DC0 E600      LDI	R16,0x60
    02DC1 E013      LDI	R17,3
    02DC2 940E 215D CALL	_mpu_write_mem
    02DC4 962A      ADIW	R28,0xA
    02DC5 9508      RET
_dmp_get_pedometer_walk_time:
  tmp                  --> Y,+2
  time                 --> R10
    02DC6 940E 4131 CALL	push_xgsetF00C
    02DC8 0158      MOVW	R10,R16
    02DC9 9726      SBIW	R28,6
(0893) }
(0894) 
(0895) /**
(0896)  *  @brief      Get duration of walking time.
(0897)  *  @param[in]  time    Walk time in milliseconds.
(0898)  *  @return     0 if successful.
(0899)  */
(0900) int dmp_get_pedometer_walk_time(unsigned long *time)
(0901) {
(0902)     unsigned char tmp[4];
(0903)     if (!time)
    02DCA 20AA      TST	R10
    02DCB F429      BNE	0x2DD1
    02DCC 20BB      TST	R11
    02DCD F419      BNE	0x2DD1
(0904)         return -1;
    02DCE EF0F      LDI	R16,0xFF
    02DCF EF1F      LDI	R17,0xFF
    02DD0 C04E      RJMP	0x2E1F
(0905) 
(0906)     if (mpu_read_mem(D_PEDSTD_TIMECTR, 4, tmp))
    02DD1 01CE      MOVW	R24,R28
    02DD2 9602      ADIW	R24,2
    02DD3 8399      STD	Y+1,R25
    02DD4 8388      ST	Y,R24
    02DD5 E024      LDI	R18,4
    02DD6 E030      LDI	R19,0
    02DD7 EC04      LDI	R16,0xC4
    02DD8 E013      LDI	R17,3
    02DD9 940E 21B9 CALL	_mpu_read_mem
    02DDB 3000      CPI	R16,0
    02DDC 0701      CPC	R16,R17
    02DDD F019      BEQ	0x2DE1
(0907)         return -1;
    02DDE EF0F      LDI	R16,0xFF
    02DDF EF1F      LDI	R17,0xFF
    02DE0 C03E      RJMP	0x2E1F
(0908) 
(0909)     time[0] = (((unsigned long)tmp[0] << 24) | ((unsigned long)tmp[1] << 16) |
    02DE1 E188      LDI	R24,0x18
    02DE2 E090      LDI	R25,0
    02DE3 810A      LDD	R16,Y+2
    02DE4 2711      CLR	R17
    02DE5 2722      CLR	R18
    02DE6 2733      CLR	R19
    02DE7 938A      ST	-Y,R24
    02DE8 940E 419D CALL	lsl32
    02DEA 0118      MOVW	R2,R16
    02DEB 0129      MOVW	R4,R18
    02DEC 806B      LDD	R6,Y+3
    02DED 2477      CLR	R7
    02DEE 2488      CLR	R8
    02DEF 2499      CLR	R9
    02DF0 0143      MOVW	R8,R6
    02DF1 2466      CLR	R6
    02DF2 2477      CLR	R7
    02DF3 2826      OR	R2,R6
    02DF4 2837      OR	R3,R7
    02DF5 2848      OR	R4,R8
    02DF6 2859      OR	R5,R9
    02DF7 E088      LDI	R24,0x8
    02DF8 E090      LDI	R25,0
    02DF9 810C      LDD	R16,Y+4
    02DFA 2711      CLR	R17
    02DFB 2722      CLR	R18
    02DFC 2733      CLR	R19
    02DFD 938A      ST	-Y,R24
    02DFE 940E 419D CALL	lsl32
    02E00 2A20      OR	R2,R16
    02E01 2A31      OR	R3,R17
    02E02 2A42      OR	R4,R18
    02E03 2A53      OR	R5,R19
    02E04 806D      LDD	R6,Y+5
    02E05 2477      CLR	R7
    02E06 2488      CLR	R8
    02E07 2499      CLR	R9
    02E08 2826      OR	R2,R6
    02E09 2837      OR	R3,R7
    02E0A 2848      OR	R4,R8
    02E0B 2859      OR	R5,R9
    02E0C E144      LDI	R20,0x14
    02E0D E050      LDI	R21,0
    02E0E E060      LDI	R22,0
    02E0F E070      LDI	R23,0
    02E10 925A      ST	-Y,R5
    02E11 924A      ST	-Y,R4
    02E12 923A      ST	-Y,R3
    02E13 922A      ST	-Y,R2
    02E14 018A      MOVW	R16,R20
    02E15 019B      MOVW	R18,R22
    02E16 940E 40BE CALL	empy32u|empy32s
    02E18 01F5      MOVW	R30,R10
    02E19 8300      ST	Z,R16
    02E1A 8311      STD	Z+1,R17
    02E1B 8322      STD	Z+2,R18
    02E1C 8333      STD	Z+3,R19
(0910)         ((unsigned long)tmp[2] << 8) | tmp[3]) * 20;
(0911)     return 0;
    02E1D 2700      CLR	R16
    02E1E 2711      CLR	R17
    02E1F 9626      ADIW	R28,6
    02E20 940C 4138 JMP	pop_xgsetF00C
_dmp_set_pedometer_walk_time:
  tmp                  --> Y,+2
  time                 --> Y,+6
    02E22 940E 3FCD CALL	push_arg4
    02E24 9726      SBIW	R28,6
(0912) }
(0913) 
(0914) /**
(0915)  *  @brief      Overwrite current walk time.
(0916)  *  WARNING: This function writes to DMP memory and could potentially encounter
(0917)  *  a race condition if called while the pedometer is enabled.
(0918)  *  @param[in]  time    New walk time in milliseconds.
(0919)  */
(0920) int dmp_set_pedometer_walk_time(unsigned long time)
(0921) {
(0922)     unsigned char tmp[4];
(0923) 
(0924)     time /= 20;
    02E25 E184      LDI	R24,0x14
    02E26 E090      LDI	R25,0
    02E27 E0A0      LDI	R26,0
    02E28 E0B0      LDI	R27,0
    02E29 810E      LDD	R16,Y+6
    02E2A 811F      LDD	R17,Y+7
    02E2B 8528      LDD	R18,Y+8
    02E2C 8539      LDD	R19,Y+9
    02E2D 93BA      ST	-Y,R27
    02E2E 93AA      ST	-Y,R26
    02E2F 939A      ST	-Y,R25
    02E30 938A      ST	-Y,R24
    02E31 940E 4018 CALL	div32u
    02E33 830E      STD	Y+6,R16
    02E34 831F      STD	Y+7,R17
    02E35 8728      STD	Y+8,R18
    02E36 8739      STD	Y+9,R19
(0925) 
(0926)     tmp[0] = (unsigned char)((time >> 24) & 0xFF);
    02E37 E188      LDI	R24,0x18
    02E38 E090      LDI	R25,0
    02E39 810E      LDD	R16,Y+6
    02E3A 811F      LDD	R17,Y+7
    02E3B 8528      LDD	R18,Y+8
    02E3C 8539      LDD	R19,Y+9
    02E3D 938A      ST	-Y,R24
    02E3E 940E 41B0 CALL	lsr32
    02E40 0118      MOVW	R2,R16
    02E41 0129      MOVW	R4,R18
    02E42 EF8F      LDI	R24,0xFF
    02E43 E090      LDI	R25,0
    02E44 E0A0      LDI	R26,0
    02E45 E0B0      LDI	R27,0
    02E46 2228      AND	R2,R24
    02E47 2239      AND	R3,R25
    02E48 224A      AND	R4,R26
    02E49 225B      AND	R5,R27
    02E4A 822A      STD	Y+2,R2
(0927)     tmp[1] = (unsigned char)((time >> 16) & 0xFF);
    02E4B EF8F      LDI	R24,0xFF
    02E4C E090      LDI	R25,0
    02E4D E0A0      LDI	R26,0
    02E4E E0B0      LDI	R27,0
    02E4F 802E      LDD	R2,Y+6
    02E50 803F      LDD	R3,Y+7
    02E51 8448      LDD	R4,Y+8
    02E52 8459      LDD	R5,Y+9
    02E53 0112      MOVW	R2,R4
    02E54 2444      CLR	R4
    02E55 2455      CLR	R5
    02E56 2228      AND	R2,R24
    02E57 2239      AND	R3,R25
    02E58 224A      AND	R4,R26
    02E59 225B      AND	R5,R27
    02E5A 822B      STD	Y+3,R2
(0928)     tmp[2] = (unsigned char)((time >> 8) & 0xFF);
    02E5B E088      LDI	R24,0x8
    02E5C E090      LDI	R25,0
    02E5D 810E      LDD	R16,Y+6
    02E5E 811F      LDD	R17,Y+7
    02E5F 8528      LDD	R18,Y+8
    02E60 8539      LDD	R19,Y+9
    02E61 938A      ST	-Y,R24
    02E62 940E 41B0 CALL	lsr32
    02E64 0118      MOVW	R2,R16
    02E65 0129      MOVW	R4,R18
    02E66 EF8F      LDI	R24,0xFF
    02E67 E090      LDI	R25,0
    02E68 E0A0      LDI	R26,0
    02E69 E0B0      LDI	R27,0
    02E6A 2228      AND	R2,R24
    02E6B 2239      AND	R3,R25
    02E6C 224A      AND	R4,R26
    02E6D 225B      AND	R5,R27
    02E6E 822C      STD	Y+4,R2
(0929)     tmp[3] = (unsigned char)(time & 0xFF);
    02E6F EF8F      LDI	R24,0xFF
    02E70 E090      LDI	R25,0
    02E71 E0A0      LDI	R26,0
    02E72 E0B0      LDI	R27,0
    02E73 802E      LDD	R2,Y+6
    02E74 803F      LDD	R3,Y+7
    02E75 8448      LDD	R4,Y+8
    02E76 8459      LDD	R5,Y+9
    02E77 2228      AND	R2,R24
    02E78 2239      AND	R3,R25
    02E79 224A      AND	R4,R26
    02E7A 225B      AND	R5,R27
    02E7B 822D      STD	Y+5,R2
(0930)     return mpu_write_mem(D_PEDSTD_TIMECTR, 4, tmp);
    02E7C 01CE      MOVW	R24,R28
    02E7D 9602      ADIW	R24,2
    02E7E 8399      STD	Y+1,R25
    02E7F 8388      ST	Y,R24
    02E80 E024      LDI	R18,4
    02E81 E030      LDI	R19,0
    02E82 EC04      LDI	R16,0xC4
    02E83 E013      LDI	R17,3
    02E84 940E 215D CALL	_mpu_write_mem
    02E86 962A      ADIW	R28,0xA
    02E87 9508      RET
_dmp_enable_feature:
  tmp                  --> Y,+2
  mask                 --> R20
    02E88 934A      ST	-Y,R20
    02E89 935A      ST	-Y,R21
    02E8A 01A8      MOVW	R20,R16
    02E8B 972C      SBIW	R28,0xC
(0931) }
(0932) 
(0933) /**
(0934)  *  @brief      Enable DMP features.
(0935)  *  The following \#define's are used in the input mask:
(0936)  *  \n DMP_FEATURE_TAP
(0937)  *  \n DMP_FEATURE_ANDROID_ORIENT
(0938)  *  \n DMP_FEATURE_LP_QUAT
(0939)  *  \n DMP_FEATURE_6X_LP_QUAT
(0940)  *  \n DMP_FEATURE_GYRO_CAL
(0941)  *  \n DMP_FEATURE_SEND_RAW_ACCEL
(0942)  *  \n DMP_FEATURE_SEND_RAW_GYRO
(0943)  *  \n NOTE: DMP_FEATURE_LP_QUAT and DMP_FEATURE_6X_LP_QUAT are mutually
(0944)  *  exclusive.
(0945)  *  \n NOTE: DMP_FEATURE_SEND_RAW_GYRO and DMP_FEATURE_SEND_CAL_GYRO are also
(0946)  *  mutually exclusive.
(0947)  *  @param[in]  mask    Mask of features to enable.
(0948)  *  @return     0 if successful.
(0949)  */
(0950) int dmp_enable_feature(unsigned short mask)
(0951) {
(0952)     unsigned char tmp[10];
(0953) 
(0954)     /* TODO: All of these settings can probably be integrated into the default
(0955)      * DMP image.
(0956)      */
(0957)     /* Set integration scale factor. */
(0958)     tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
    02E8C E082      LDI	R24,2
    02E8D 838A      STD	Y+2,R24
(0959)     tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
    02E8E EC8A      LDI	R24,0xCA
    02E8F 838B      STD	Y+3,R24
(0960)     tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
    02E90 EE83      LDI	R24,0xE3
    02E91 838C      STD	Y+4,R24
(0961)     tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
    02E92 E089      LDI	R24,0x9
    02E93 838D      STD	Y+5,R24
(0962)     mpu_write_mem(D_0_104, 4, tmp);
    02E94 01CE      MOVW	R24,R28
    02E95 9602      ADIW	R24,2
    02E96 8399      STD	Y+1,R25
    02E97 8388      ST	Y,R24
    02E98 E024      LDI	R18,4
    02E99 E030      LDI	R19,0
    02E9A E608      LDI	R16,0x68
    02E9B E010      LDI	R17,0
    02E9C 940E 215D CALL	_mpu_write_mem
(0963) 
(0964)     /* Send sensor data to the FIFO. */
(0965)     tmp[0] = 0xA3;
    02E9E EA83      LDI	R24,0xA3
    02E9F 838A      STD	Y+2,R24
(0966)     if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
    02EA0 FF46      SBRS	R20,6
    02EA1 C007      RJMP	0x2EA9
(0967)         tmp[1] = 0xC0;
    02EA2 EC80      LDI	R24,0xC0
    02EA3 838B      STD	Y+3,R24
(0968)         tmp[2] = 0xC8;
    02EA4 EC88      LDI	R24,0xC8
    02EA5 838C      STD	Y+4,R24
(0969)         tmp[3] = 0xC2;
    02EA6 EC82      LDI	R24,0xC2
    02EA7 838D      STD	Y+5,R24
(0970)     } else {
    02EA8 C004      RJMP	0x2EAD
(0971)         tmp[1] = 0xA3;
    02EA9 EA83      LDI	R24,0xA3
    02EAA 838B      STD	Y+3,R24
(0972)         tmp[2] = 0xA3;
    02EAB 838C      STD	Y+4,R24
(0973)         tmp[3] = 0xA3;
    02EAC 838D      STD	Y+5,R24
(0974)     }
(0975)     if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
    02EAD 01CA      MOVW	R24,R20
    02EAE 7880      ANDI	R24,0x80
    02EAF 7091      ANDI	R25,1
    02EB0 3080      CPI	R24,0
    02EB1 0789      CPC	R24,R25
    02EB2 F039      BEQ	0x2EBA
(0976)         tmp[4] = 0xC4;
    02EB3 EC84      LDI	R24,0xC4
    02EB4 838E      STD	Y+6,R24
(0977)         tmp[5] = 0xCC;
    02EB5 EC8C      LDI	R24,0xCC
    02EB6 838F      STD	Y+7,R24
(0978)         tmp[6] = 0xC6;
    02EB7 EC86      LDI	R24,0xC6
    02EB8 8788      STD	Y+8,R24
(0979)     } else {
    02EB9 C004      RJMP	0x2EBE
(0980)         tmp[4] = 0xA3;
    02EBA EA83      LDI	R24,0xA3
    02EBB 838E      STD	Y+6,R24
(0981)         tmp[5] = 0xA3;
    02EBC 838F      STD	Y+7,R24
(0982)         tmp[6] = 0xA3;
    02EBD 8788      STD	Y+8,R24
(0983)     }
(0984)     tmp[7] = 0xA3;
    02EBE EA83      LDI	R24,0xA3
    02EBF 8789      STD	Y+9,R24
(0985)     tmp[8] = 0xA3;
    02EC0 878A      STD	Y+10,R24
(0986)     tmp[9] = 0xA3;
    02EC1 878B      STD	Y+11,R24
(0987)     mpu_write_mem(CFG_15,10,tmp);
    02EC2 01CE      MOVW	R24,R28
    02EC3 9602      ADIW	R24,2
    02EC4 8399      STD	Y+1,R25
    02EC5 8388      ST	Y,R24
    02EC6 E02A      LDI	R18,0xA
    02EC7 E030      LDI	R19,0
    02EC8 EA07      LDI	R16,0xA7
    02EC9 E01A      LDI	R17,0xA
    02ECA 940E 215D CALL	_mpu_write_mem
(0988) 
(0989)     /* Send gesture data to the FIFO. */
(0990)     if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
    02ECC 01CA      MOVW	R24,R20
    02ECD 7083      ANDI	R24,3
    02ECE 7090      ANDI	R25,0
    02ECF 3080      CPI	R24,0
    02ED0 0789      CPC	R24,R25
    02ED1 F019      BEQ	0x2ED5
(0991)         tmp[0] = DINA20;
    02ED2 E280      LDI	R24,0x20
    02ED3 838A      STD	Y+2,R24
    02ED4 C002      RJMP	0x2ED7
(0992)     else
(0993)         tmp[0] = 0xD8;
    02ED5 ED88      LDI	R24,0xD8
    02ED6 838A      STD	Y+2,R24
(0994)     mpu_write_mem(CFG_27,1,tmp);
    02ED7 01CE      MOVW	R24,R28
    02ED8 9602      ADIW	R24,2
    02ED9 8399      STD	Y+1,R25
    02EDA 8388      ST	Y,R24
    02EDB E021      LDI	R18,1
    02EDC E030      LDI	R19,0
    02EDD EB06      LDI	R16,0xB6
    02EDE E01A      LDI	R17,0xA
    02EDF 940E 215D CALL	_mpu_write_mem
(0995) 
(0996)     if (mask & DMP_FEATURE_GYRO_CAL)
    02EE1 FF45      SBRS	R20,5
    02EE2 C003      RJMP	0x2EE6
(0997)         dmp_enable_gyro_cal(1);
    02EE3 E001      LDI	R16,1
    02EE4 D0BF      RCALL	_dmp_enable_gyro_cal
    02EE5 C002      RJMP	0x2EE8
(0998)     else
(0999)         dmp_enable_gyro_cal(0);
    02EE6 2700      CLR	R16
    02EE7 D0BC      RCALL	_dmp_enable_gyro_cal
(1000) 
(1001)     if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
    02EE8 01CA      MOVW	R24,R20
    02EE9 7880      ANDI	R24,0x80
    02EEA 7091      ANDI	R25,1
    02EEB 3080      CPI	R24,0
    02EEC 0789      CPC	R24,R25
    02EED F0E9      BEQ	0x2F0B
(1002)         if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
    02EEE FF50      SBRS	R21,0
    02EEF C009      RJMP	0x2EF9
(1003)             tmp[0] = 0xB2;
    02EF0 EB82      LDI	R24,0xB2
    02EF1 838A      STD	Y+2,R24
(1004)             tmp[1] = 0x8B;
    02EF2 E88B      LDI	R24,0x8B
    02EF3 838B      STD	Y+3,R24
(1005)             tmp[2] = 0xB6;
    02EF4 EB86      LDI	R24,0xB6
    02EF5 838C      STD	Y+4,R24
(1006)             tmp[3] = 0x9B;
    02EF6 E98B      LDI	R24,0x9B
    02EF7 838D      STD	Y+5,R24
(1007)         } else {
    02EF8 C008      RJMP	0x2F01
(1008)             tmp[0] = DINAC0;
    02EF9 EB80      LDI	R24,0xB0
    02EFA 838A      STD	Y+2,R24
(1009)             tmp[1] = DINA80;
    02EFB E880      LDI	R24,0x80
    02EFC 838B      STD	Y+3,R24
(1010)             tmp[2] = DINAC2;
    02EFD EB84      LDI	R24,0xB4
    02EFE 838C      STD	Y+4,R24
(1011)             tmp[3] = DINA90;
    02EFF E980      LDI	R24,0x90
    02F00 838D      STD	Y+5,R24
(1012)         }
(1013)         mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
    02F01 01CE      MOVW	R24,R28
    02F02 9602      ADIW	R24,2
    02F03 8399      STD	Y+1,R25
    02F04 8388      ST	Y,R24
    02F05 E024      LDI	R18,4
    02F06 E030      LDI	R19,0
    02F07 EA02      LDI	R16,0xA2
    02F08 E01A      LDI	R17,0xA
    02F09 940E 215D CALL	_mpu_write_mem
(1014)     }
(1015) 
(1016)     if (mask & DMP_FEATURE_TAP) {
    02F0B FF40      SBRS	R20,0
    02F0C C02A      RJMP	0x2F37
(1017)         /* Enable tap. */
(1018)         tmp[0] = 0xF8;
    02F0D EF88      LDI	R24,0xF8
    02F0E 838A      STD	Y+2,R24
(1019)         mpu_write_mem(CFG_20, 1, tmp);
    02F0F 01CE      MOVW	R24,R28
    02F10 9602      ADIW	R24,2
    02F11 8399      STD	Y+1,R25
    02F12 8388      ST	Y,R24
    02F13 E021      LDI	R18,1
    02F14 E030      LDI	R19,0
    02F15 EB00      LDI	R16,0xB0
    02F16 E018      LDI	R17,0x8
    02F17 940E 215D CALL	_mpu_write_mem
(1020)         dmp_set_tap_thresh(TAP_XYZ, 250);
    02F19 EF2A      LDI	R18,0xFA
    02F1A E030      LDI	R19,0
    02F1B E007      LDI	R16,7
    02F1C DBA3      RCALL	_dmp_set_tap_thresh
(1021)         dmp_set_tap_axes(TAP_XYZ);
    02F1D E007      LDI	R16,7
    02F1E DCD2      RCALL	_dmp_set_tap_axes
(1022)         dmp_set_tap_count(1);
    02F1F E001      LDI	R16,1
    02F20 DCF1      RCALL	_dmp_set_tap_count
(1023)         dmp_set_tap_time(100);
    02F21 E604      LDI	R16,0x64
    02F22 E010      LDI	R17,0
    02F23 DD09      RCALL	_dmp_set_tap_time
(1024)         dmp_set_tap_time_multi(500);
    02F24 EF04      LDI	R16,0xF4
    02F25 E011      LDI	R17,1
    02F26 DD24      RCALL	_dmp_set_tap_time_multi
(1025) 
(1026)         dmp_set_shake_reject_thresh(GYRO_SF, 200);
    02F27 EC88      LDI	R24,0xC8
    02F28 E090      LDI	R25,0
    02F29 8399      STD	Y+1,R25
    02F2A 8388      ST	Y,R24
    02F2B E009      LDI	R16,0x9
    02F2C EE13      LDI	R17,0xE3
    02F2D EC2A      LDI	R18,0xCA
    02F2E E032      LDI	R19,2
    02F2F DD39      RCALL	_dmp_set_shake_reject_thresh
(1027)         dmp_set_shake_reject_time(40);
    02F30 E208      LDI	R16,0x28
    02F31 E010      LDI	R17,0
    02F32 DDB0      RCALL	_dmp_set_shake_reject_time
(1028)         dmp_set_shake_reject_timeout(10);
    02F33 E00A      LDI	R16,0xA
    02F34 E010      LDI	R17,0
    02F35 DDCC      RCALL	_dmp_set_shake_reject_timeout
(1029)     } else {
    02F36 C00C      RJMP	0x2F43
(1030)         tmp[0] = 0xD8;
    02F37 ED88      LDI	R24,0xD8
    02F38 838A      STD	Y+2,R24
(1031)         mpu_write_mem(CFG_20, 1, tmp);
    02F39 01CE      MOVW	R24,R28
    02F3A 9602      ADIW	R24,2
    02F3B 8399      STD	Y+1,R25
    02F3C 8388      ST	Y,R24
    02F3D E021      LDI	R18,1
    02F3E E030      LDI	R19,0
    02F3F EB00      LDI	R16,0xB0
    02F40 E018      LDI	R17,0x8
    02F41 940E 215D CALL	_mpu_write_mem
(1032)     }
(1033) 
(1034)     if (mask & DMP_FEATURE_ANDROID_ORIENT) {
    02F43 FF41      SBRS	R20,1
    02F44 C003      RJMP	0x2F48
(1035)         tmp[0] = 0xD9;
    02F45 ED89      LDI	R24,0xD9
    02F46 838A      STD	Y+2,R24
(1036)     } else
    02F47 C002      RJMP	0x2F4A
(1037)         tmp[0] = 0xD8;
    02F48 ED88      LDI	R24,0xD8
    02F49 838A      STD	Y+2,R24
(1038)     mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
    02F4A 01CE      MOVW	R24,R28
    02F4B 9602      ADIW	R24,2
    02F4C 8399      STD	Y+1,R25
    02F4D 8388      ST	Y,R24
    02F4E E021      LDI	R18,1
    02F4F E030      LDI	R19,0
    02F50 E30D      LDI	R16,0x3D
    02F51 E017      LDI	R17,7
    02F52 940E 215D CALL	_mpu_write_mem
(1039) 
(1040)     if (mask & DMP_FEATURE_LP_QUAT)
    02F54 FF42      SBRS	R20,2
    02F55 C003      RJMP	0x2F59
(1041)         dmp_enable_lp_quat(1);
    02F56 E001      LDI	R16,1
    02F57 D081      RCALL	_dmp_enable_lp_quat
    02F58 C002      RJMP	0x2F5B
(1042)     else
(1043)         dmp_enable_lp_quat(0);
    02F59 2700      CLR	R16
    02F5A D07E      RCALL	_dmp_enable_lp_quat
(1044) 
(1045)     if (mask & DMP_FEATURE_6X_LP_QUAT)
    02F5B FF44      SBRS	R20,4
    02F5C C003      RJMP	0x2F60
(1046)         dmp_enable_6x_lp_quat(1);
    02F5D E001      LDI	R16,1
    02F5E D0A2      RCALL	_dmp_enable_6x_lp_quat
    02F5F C002      RJMP	0x2F62
(1047)     else
(1048)         dmp_enable_6x_lp_quat(0);
    02F60 2700      CLR	R16
    02F61 D09F      RCALL	_dmp_enable_6x_lp_quat
(1049) 
(1050)     /* Pedometer is always enabled. */
(1051)     dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
    02F62 01CA      MOVW	R24,R20
    02F63 6088      ORI	R24,0x8
    02F64 9390 0DD2 STS	inv_mpu_dmp_motion_driver.c:dmp+7,R25
    02F66 9380 0DD1 STS	inv_mpu_dmp_motion_driver.c:dmp+6,R24
(1052)     mpu_reset_fifo();
    02F68 940E 1336 CALL	_mpu_reset_fifo
(1053) 
(1054)     dmp.packet_length = 0;
    02F6A 2422      CLR	R2
    02F6B 9220 0DD5 STS	inv_mpu_dmp_motion_driver.c:dmp+10,R2
(1055)     if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
    02F6D FF46      SBRS	R20,6
    02F6E C004      RJMP	0x2F73
(1056)         dmp.packet_length += 6;
    02F6F 2D82      MOV	R24,R2
    02F70 5F8A      SUBI	R24,0xFA
    02F71 9380 0DD5 STS	inv_mpu_dmp_motion_driver.c:dmp+10,R24
(1057)     if (mask & DMP_FEATURE_SEND_ANY_GYRO)
    02F73 01CA      MOVW	R24,R20
    02F74 7880      ANDI	R24,0x80
    02F75 7091      ANDI	R25,1
    02F76 3080      CPI	R24,0
    02F77 0789      CPC	R24,R25
    02F78 F029      BEQ	0x2F7E
(1058)         dmp.packet_length += 6;
    02F79 9180 0DD5 LDS	R24,inv_mpu_dmp_motion_driver.c:dmp+10
    02F7B 5F8A      SUBI	R24,0xFA
    02F7C 9380 0DD5 STS	inv_mpu_dmp_motion_driver.c:dmp+10,R24
(1059)     if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
    02F7E 01CA      MOVW	R24,R20
    02F7F 7184      ANDI	R24,0x14
    02F80 7090      ANDI	R25,0
    02F81 3080      CPI	R24,0
    02F82 0789      CPC	R24,R25
    02F83 F029      BEQ	0x2F89
(1060)         dmp.packet_length += 16;
    02F84 9180 0DD5 LDS	R24,inv_mpu_dmp_motion_driver.c:dmp+10
    02F86 5F80      SUBI	R24,0xF0
    02F87 9380 0DD5 STS	inv_mpu_dmp_motion_driver.c:dmp+10,R24
(1061)     if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
    02F89 01CA      MOVW	R24,R20
    02F8A 7083      ANDI	R24,3
    02F8B 7090      ANDI	R25,0
    02F8C 3080      CPI	R24,0
    02F8D 0789      CPC	R24,R25
    02F8E F029      BEQ	0x2F94
(1062)         dmp.packet_length += 4;
    02F8F 9180 0DD5 LDS	R24,inv_mpu_dmp_motion_driver.c:dmp+10
    02F91 5F8C      SUBI	R24,0xFC
    02F92 9380 0DD5 STS	inv_mpu_dmp_motion_driver.c:dmp+10,R24
(1063) 
(1064)     return 0;
    02F94 2700      CLR	R16
    02F95 2711      CLR	R17
    02F96 962C      ADIW	R28,0xC
    02F97 9159      LD	R21,Y+
    02F98 9149      LD	R20,Y+
    02F99 9508      RET
(1065) }
(1066) 
(1067) /**
(1068)  *  @brief      Get list of currently enabled DMP features.
(1069)  *  @param[out] Mask of enabled features.
(1070)  *  @return     0 if successful.
(1071)  */
(1072) int dmp_get_enabled_features(unsigned short *mask)
(1073) {
(1074)     mask[0] = dmp.feature_mask;
_dmp_get_enabled_features:
  mask                 --> R16
    02F9A 9020 0DD1 LDS	R2,inv_mpu_dmp_motion_driver.c:dmp+6
    02F9C 9030 0DD2 LDS	R3,inv_mpu_dmp_motion_driver.c:dmp+7
    02F9E 01F8      MOVW	R30,R16
    02F9F 8231      STD	Z+1,R3
    02FA0 8220      ST	Z,R2
(1075)     return 0;
    02FA1 2700      CLR	R16
    02FA2 2711      CLR	R17
    02FA3 9508      RET
_dmp_enable_gyro_cal:
  regs                 --> Y,+2
  regs                 --> Y,+2
  enable               --> R10
    02FA4 92AA      ST	-Y,R10
    02FA5 2EA0      MOV	R10,R16
    02FA6 972B      SBIW	R28,0xB
(1076) }
(1077) 
(1078) /**
(1079)  *  @brief      Calibrate the gyro data in the DMP.
(1080)  *  After eight seconds of no motion, the DMP will compute gyro biases and
(1081)  *  subtract them from the quaternion output. If @e dmp_enable_feature is
(1082)  *  called with @e DMP_FEATURE_SEND_CAL_GYRO, the biases will also be
(1083)  *  subtracted from the gyro output.
(1084)  *  @param[in]  enable  1 to enable gyro calibration.
(1085)  *  @return     0 if successful.
(1086)  */
(1087) int dmp_enable_gyro_cal(unsigned char enable)
(1088) {
(1089)     if (enable) {
    02FA7 20AA      TST	R10
    02FA8 F0B9      BEQ	0x2FC0
(1090)         unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
    02FA9 EE8E      LDI	R24,0xEE
    02FAA E09D      LDI	R25,0xD
    02FAB 01FE      MOVW	R30,R28
    02FAC 9632      ADIW	R30,2
    02FAD E009      LDI	R16,0x9
    02FAE E010      LDI	R17,0
    02FAF 93FA      ST	-Y,R31
    02FB0 93EA      ST	-Y,R30
    02FB1 939A      ST	-Y,R25
    02FB2 938A      ST	-Y,R24
    02FB3 940E 41BC CALL	asgnblk
(1091)         return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
    02FB5 01CE      MOVW	R24,R28
    02FB6 9602      ADIW	R24,2
    02FB7 8399      STD	Y+1,R25
    02FB8 8388      ST	Y,R24
    02FB9 E029      LDI	R18,0x9
    02FBA E030      LDI	R19,0
    02FBB EB08      LDI	R16,0xB8
    02FBC E014      LDI	R17,4
    02FBD 940E 215D CALL	_mpu_write_mem
    02FBF C016      RJMP	0x2FD6
(1092)     } else {
(1093)         unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
    02FC0 EF87      LDI	R24,0xF7
    02FC1 E09D      LDI	R25,0xD
    02FC2 01FE      MOVW	R30,R28
    02FC3 9632      ADIW	R30,2
    02FC4 E009      LDI	R16,0x9
    02FC5 E010      LDI	R17,0
    02FC6 93FA      ST	-Y,R31
    02FC7 93EA      ST	-Y,R30
    02FC8 939A      ST	-Y,R25
    02FC9 938A      ST	-Y,R24
    02FCA 940E 41BC CALL	asgnblk
(1094)         return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
    02FCC 01CE      MOVW	R24,R28
    02FCD 9602      ADIW	R24,2
    02FCE 8399      STD	Y+1,R25
    02FCF 8388      ST	Y,R24
    02FD0 E029      LDI	R18,0x9
    02FD1 E030      LDI	R19,0
    02FD2 EB08      LDI	R16,0xB8
    02FD3 E014      LDI	R17,4
    02FD4 940E 215D CALL	_mpu_write_mem
    02FD6 962B      ADIW	R28,0xB
    02FD7 90A9      LD	R10,Y+
    02FD8 9508      RET
_dmp_enable_lp_quat:
  regs                 --> Y,+2
  enable               --> R10
    02FD9 92AA      ST	-Y,R10
    02FDA 2EA0      MOV	R10,R16
    02FDB 9726      SBIW	R28,6
(1095)     }
(1096) }
(1097) 
(1098) /**
(1099)  *  @brief      Generate 3-axis quaternions from the DMP.
(1100)  *  In this driver, the 3-axis and 6-axis DMP quaternion features are mutually
(1101)  *  exclusive.
(1102)  *  @param[in]  enable  1 to enable 3-axis quaternion.
(1103)  *  @return     0 if successful.
(1104)  */
(1105) int dmp_enable_lp_quat(unsigned char enable)
(1106) {
(1107)     unsigned char regs[4];
(1108)     if (enable) {
    02FDC 20AA      TST	R10
    02FDD F049      BEQ	0x2FE7
(1109)         regs[0] = DINBC0;
    02FDE EC80      LDI	R24,0xC0
    02FDF 838A      STD	Y+2,R24
(1110)         regs[1] = DINBC2;
    02FE0 EC82      LDI	R24,0xC2
    02FE1 838B      STD	Y+3,R24
(1111)         regs[2] = DINBC4;
    02FE2 EC84      LDI	R24,0xC4
    02FE3 838C      STD	Y+4,R24
(1112)         regs[3] = DINBC6;
    02FE4 EC86      LDI	R24,0xC6
    02FE5 838D      STD	Y+5,R24
(1113)     }
    02FE6 C00B      RJMP	0x2FF2
(1114)     else
(1115)         memset(regs, 0x8B, 4);
    02FE7 E084      LDI	R24,4
    02FE8 E090      LDI	R25,0
    02FE9 8399      STD	Y+1,R25
    02FEA 8388      ST	Y,R24
    02FEB E82B      LDI	R18,0x8B
    02FEC E030      LDI	R19,0
    02FED 018E      MOVW	R16,R28
    02FEE 5F0E      SUBI	R16,0xFE
    02FEF 4F1F      SBCI	R17,0xFF
    02FF0 940E 3FB6 CALL	_memset
(1116) 
(1117)     mpu_write_mem(CFG_LP_QUAT, 4, regs);
    02FF2 01CE      MOVW	R24,R28
    02FF3 9602      ADIW	R24,2
    02FF4 8399      STD	Y+1,R25
    02FF5 8388      ST	Y,R24
    02FF6 E024      LDI	R18,4
    02FF7 E030      LDI	R19,0
    02FF8 E908      LDI	R16,0x98
    02FF9 E01A      LDI	R17,0xA
    02FFA 940E 215D CALL	_mpu_write_mem
(1118) 
(1119)     return mpu_reset_fifo();
    02FFC 940E 1336 CALL	_mpu_reset_fifo
    02FFE 9626      ADIW	R28,6
    02FFF 90A9      LD	R10,Y+
    03000 9508      RET
_dmp_enable_6x_lp_quat:
  regs                 --> Y,+2
  enable               --> R10
    03001 92AA      ST	-Y,R10
    03002 2EA0      MOV	R10,R16
    03003 9726      SBIW	R28,6
(1120) }
(1121) 
(1122) /**
(1123)  *  @brief       Generate 6-axis quaternions from the DMP.
(1124)  *  In this driver, the 3-axis and 6-axis DMP quaternion features are mutually
(1125)  *  exclusive.
(1126)  *  @param[in]   enable  1 to enable 6-axis quaternion.
(1127)  *  @return      0 if successful.
(1128)  */
(1129) int dmp_enable_6x_lp_quat(unsigned char enable)
(1130) {
(1131)     unsigned char regs[4];
(1132)     if (enable) {
    03004 20AA      TST	R10
    03005 F049      BEQ	0x300F
(1133)         regs[0] = DINA20;
    03006 E280      LDI	R24,0x20
    03007 838A      STD	Y+2,R24
(1134)         regs[1] = DINA28;
    03008 E288      LDI	R24,0x28
    03009 838B      STD	Y+3,R24
(1135)         regs[2] = DINA30;
    0300A E380      LDI	R24,0x30
    0300B 838C      STD	Y+4,R24
(1136)         regs[3] = DINA38;
    0300C E388      LDI	R24,0x38
    0300D 838D      STD	Y+5,R24
(1137)     } else
    0300E C00B      RJMP	0x301A
(1138)         memset(regs, 0xA3, 4);
    0300F E084      LDI	R24,4
    03010 E090      LDI	R25,0
    03011 8399      STD	Y+1,R25
    03012 8388      ST	Y,R24
    03013 EA23      LDI	R18,0xA3
    03014 E030      LDI	R19,0
    03015 018E      MOVW	R16,R28
    03016 5F0E      SUBI	R16,0xFE
    03017 4F1F      SBCI	R17,0xFF
    03018 940E 3FB6 CALL	_memset
(1139) 
(1140)     mpu_write_mem(CFG_8, 4, regs);
    0301A 01CE      MOVW	R24,R28
    0301B 9602      ADIW	R24,2
    0301C 8399      STD	Y+1,R25
    0301D 8388      ST	Y,R24
    0301E E024      LDI	R18,4
    0301F E030      LDI	R19,0
    03020 E90E      LDI	R16,0x9E
    03021 E01A      LDI	R17,0xA
    03022 940E 215D CALL	_mpu_write_mem
(1141) 
(1142)     return mpu_reset_fifo();
    03024 940E 1336 CALL	_mpu_reset_fifo
    03026 9626      ADIW	R28,6
    03027 90A9      LD	R10,Y+
    03028 9508      RET
inv_mpu_dmp_motion_driver.c:decode_gesture:
  count                --> R12
  direction            --> R10
  android_orient       --> R20
  tap                  --> R12
  gesture              --> R22
    03029 940E 414D CALL	push_xgsetF03C
    0302B 01B8      MOVW	R22,R16
(1143) }
(1144) 
(1145) /**
(1146)  *  @brief      Decode the four-byte gesture data and execute any callbacks.
(1147)  *  @param[in]  gesture Gesture data from DMP packet.
(1148)  *  @return     0 if successful.
(1149)  */
(1150) static int decode_gesture(unsigned char *gesture)
(1151) {
(1152)     unsigned char tap, android_orient;
(1153) 
(1154)     android_orient = gesture[3] & 0xC0;
    0302C 01FB      MOVW	R30,R22
    0302D 8143      LDD	R20,Z+3
    0302E 7C40      ANDI	R20,0xC0
(1155)     tap = 0x3F & gesture[3];
    0302F 8183      LDD	R24,Z+3
    03030 738F      ANDI	R24,0x3F
    03031 2EC8      MOV	R12,R24
(1156) 
(1157)     if (gesture[1] & INT_SRC_TAP) {
    03032 8021      LDD	R2,Z+1
    03033 FE20      SBRS	R2,0
    03034 C018      RJMP	0x304D
(1158)         unsigned char direction, count;
(1159)         direction = tap >> 3;
    03035 2EA8      MOV	R10,R24
    03036 94A6      LSR	R10
    03037 94A6      LSR	R10
    03038 94A6      LSR	R10
(1160)         count = (tap % 8) + 1;
    03039 E018      LDI	R17,0x8
    0303A 2F08      MOV	R16,R24
    0303B 940E 4082 CALL	mod8u
    0303D 2F80      MOV	R24,R16
    0303E 5F8F      SUBI	R24,0xFF
    0303F 2EC8      MOV	R12,R24
(1161)         if (dmp.tap_cb)
    03040 9020 0DCB LDS	R2,inv_mpu_dmp_motion_driver.c:dmp
    03042 9030 0DCC LDS	R3,inv_mpu_dmp_motion_driver.c:dmp+1
    03044 2022      TST	R2
    03045 F411      BNE	0x3048
    03046 2033      TST	R3
    03047 F029      BEQ	0x304D
(1162)             dmp.tap_cb(direction, count);
    03048 2F28      MOV	R18,R24
    03049 2D0A      MOV	R16,R10
    0304A 01F1      MOVW	R30,R2
    0304B 940E 415F CALL	xicallx
(1163)     }
(1164) 
(1165)     if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
    0304D 01FB      MOVW	R30,R22
    0304E 8021      LDD	R2,Z+1
    0304F FE23      SBRS	R2,3
    03050 C012      RJMP	0x3063
(1166)         if (dmp.android_orient_cb)
    03051 9020 0DCD LDS	R2,inv_mpu_dmp_motion_driver.c:dmp+2
    03053 9030 0DCE LDS	R3,inv_mpu_dmp_motion_driver.c:dmp+3
    03055 2022      TST	R2
    03056 F411      BNE	0x3059
    03057 2033      TST	R3
    03058 F051      BEQ	0x3063
(1167)             dmp.android_orient_cb(android_orient >> 6);
    03059 2F04      MOV	R16,R20
    0305A 9506      LSR	R16
    0305B 9506      LSR	R16
    0305C 9506      LSR	R16
    0305D 9506      LSR	R16
    0305E 9506      LSR	R16
    0305F 9506      LSR	R16
    03060 01F1      MOVW	R30,R2
    03061 940E 415F CALL	xicallx
(1168)     }
(1169) 
(1170)     return 0;
    03063 2700      CLR	R16
    03064 2711      CLR	R17
    03065 940C 4156 JMP	pop_xgsetF03C
_dmp_set_interrupt_mode:
  regs_gesture         --> Y,+13
  regs_continuous      --> Y,+2
  mode                 --> R10
    03067 940E 411D CALL	push_xgset300C
    03069 2EA0      MOV	R10,R16
    0306A 9768      SBIW	R28,0x18
(1171) }
(1172) 
(1173) /**
(1174)  *  @brief      Specify when a DMP interrupt should occur.
(1175)  *  A DMP interrupt can be configured to trigger on either of the two
(1176)  *  conditions below:
(1177)  *  \n a. One FIFO period has elapsed (set by @e mpu_set_sample_rate).
(1178)  *  \n b. A tap event has been detected.
(1179)  *  @param[in]  mode    DMP_INT_GESTURE or DMP_INT_CONTINUOUS.
(1180)  *  @return     0 if successful.
(1181)  */
(1182) int dmp_set_interrupt_mode(unsigned char mode)
(1183) {
(1184)     const unsigned char regs_continuous[11] =
(1185)         {0xd8, 0xb1, 0xb9, 0xf3, 0x8b, 0xa3, 0x91, 0xb6, 0x09, 0xb4, 0xd9};
    0306B E080      LDI	R24,0
    0306C E09E      LDI	R25,0xE
    0306D 01FE      MOVW	R30,R28
    0306E 9632      ADIW	R30,2
    0306F E00B      LDI	R16,0xB
    03070 E010      LDI	R17,0
    03071 93FA      ST	-Y,R31
    03072 93EA      ST	-Y,R30
    03073 939A      ST	-Y,R25
    03074 938A      ST	-Y,R24
    03075 940E 41BC CALL	asgnblk
(1186)     const unsigned char regs_gesture[11] =
(1187)         {0xda, 0xb1, 0xb9, 0xf3, 0x8b, 0xa3, 0x91, 0xb6, 0xda, 0xb4, 0xda};
    03077 E08B      LDI	R24,0xB
    03078 E09E      LDI	R25,0xE
    03079 01FE      MOVW	R30,R28
    0307A 963D      ADIW	R30,0xD
    0307B E00B      LDI	R16,0xB
    0307C E010      LDI	R17,0
    0307D 93FA      ST	-Y,R31
    0307E 93EA      ST	-Y,R30
    0307F 939A      ST	-Y,R25
    03080 938A      ST	-Y,R24
    03081 940E 41BC CALL	asgnblk
(1188) 
(1189)     switch (mode) {
    03083 2D4A      MOV	R20,R10
    03084 2755      CLR	R21
    03085 3041      CPI	R20,1
    03086 E0E0      LDI	R30,0
    03087 075E      CPC	R21,R30
    03088 F081      BEQ	0x3099
    03089 3042      CPI	R20,2
    0308A E0E0      LDI	R30,0
    0308B 075E      CPC	R21,R30
    0308C F009      BEQ	0x308E
    0308D C016      RJMP	0x30A4
(1190)     case DMP_INT_CONTINUOUS:
(1191)         return mpu_write_mem(CFG_FIFO_ON_EVENT, 11,
    0308E 01CE      MOVW	R24,R28
    0308F 9602      ADIW	R24,2
    03090 8399      STD	Y+1,R25
    03091 8388      ST	Y,R24
    03092 E02B      LDI	R18,0xB
    03093 E030      LDI	R19,0
    03094 E802      LDI	R16,0x82
    03095 E01A      LDI	R17,0xA
    03096 940E 215D CALL	_mpu_write_mem
    03098 C00D      RJMP	0x30A6
(1192)             (unsigned char*)regs_continuous);
(1193)     case DMP_INT_GESTURE:
(1194)         return mpu_write_mem(CFG_FIFO_ON_EVENT, 11,
    03099 01CE      MOVW	R24,R28
    0309A 960D      ADIW	R24,0xD
    0309B 8399      STD	Y+1,R25
    0309C 8388      ST	Y,R24
    0309D E02B      LDI	R18,0xB
    0309E E030      LDI	R19,0
    0309F E802      LDI	R16,0x82
    030A0 E01A      LDI	R17,0xA
    030A1 940E 215D CALL	_mpu_write_mem
    030A3 C002      RJMP	0x30A6
(1195)             (unsigned char*)regs_gesture);
(1196)     default:
(1197)         return -1;
    030A4 EF0F      LDI	R16,0xFF
    030A5 EF1F      LDI	R17,0xFF
    030A6 9668      ADIW	R28,0x18
    030A7 940C 4122 JMP	pop_xgset300C
_dmp_read_fifo:
  quat_mag_sq          --> Y,+50
  quat_q14             --> Y,+34
  ii                   --> R12
  fifo_data            --> Y,+2
  more                 --> R10
  sensors              --> R14
  timestamp            --> Y,+70
  quat                 --> Y,+68
  accel                --> Y,+66
  gyro                 --> Y,+64
    030A9 940E 3FCD CALL	push_arg4
    030AB 940E 4112 CALL	push_xgsetF0FC
    030AD 97E6      SBIW	R28,0x36
    030AE 01FE      MOVW	R30,R28
    030AF 5BE8      SUBI	R30,0xB8
    030B0 4FFF      SBCI	R31,0xFF
    030B1 80E0      LD	R14,Z
    030B2 80F1      LDD	R15,Z+1
    030B3 01FE      MOVW	R30,R28
    030B4 5BE6      SUBI	R30,0xB6
    030B5 4FFF      SBCI	R31,0xFF
    030B6 80A0      LD	R10,Z
    030B7 80B1      LDD	R11,Z+1
(1198)     }
(1199) }
(1200) 
(1201) /**
(1202)  *  @brief      Get one packet from the FIFO.
(1203)  *  If @e sensors does not contain a particular sensor, disregard the data
(1204)  *  returned to that pointer.
(1205)  *  \n @e sensors can contain a combination of the following flags:
(1206)  *  \n INV_X_GYRO, INV_Y_GYRO, INV_Z_GYRO
(1207)  *  \n INV_XYZ_GYRO
(1208)  *  \n INV_XYZ_ACCEL
(1209)  *  \n INV_WXYZ_QUAT
(1210)  *  \n If the FIFO has no new data, @e sensors will be zero.
(1211)  *  \n If the FIFO is disabled, @e sensors will be zero and this function will
(1212)  *  return a non-zero error code.
(1213)  *  @param[out] gyro        Gyro data in hardware units.
(1214)  *  @param[out] accel       Accel data in hardware units.
(1215)  *  @param[out] quat        3-axis quaternion data in hardware units.
(1216)  *  @param[out] timestamp   Timestamp in milliseconds.
(1217)  *  @param[out] sensors     Mask of sensors read from FIFO.
(1218)  *  @param[out] more        Number of remaining packets.
(1219)  *  @return     0 if successful.
(1220)  */
(1221) int dmp_read_fifo(short *gyro, short *accel, long *quat,
(1222)     unsigned long *timestamp, short *sensors, unsigned char *more)
(1223) {
(1224)     unsigned char fifo_data[MAX_PACKET_LENGTH];
(1225)     unsigned char ii = 0;
    030B8 24CC      CLR	R12
(1226) 
(1227)     /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
(1228)      * cache this value and save some cycles.
(1229)      */
(1230)     sensors[0] = 0;
    030B9 2422      CLR	R2
    030BA 2433      CLR	R3
    030BB 01F7      MOVW	R30,R14
    030BC 8231      STD	Z+1,R3
    030BD 8220      ST	Z,R2
(1231) 
(1232)     /* Get a packet. */
(1233)     if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
    030BE 82B9      STD	Y+1,R11
    030BF 82A8      ST	Y,R10
    030C0 019E      MOVW	R18,R28
    030C1 5F2E      SUBI	R18,0xFE
    030C2 4F3F      SBCI	R19,0xFF
    030C3 9100 0DD5 LDS	R16,inv_mpu_dmp_motion_driver.c:dmp+10
    030C5 2711      CLR	R17
    030C6 940E 19B8 CALL	_mpu_read_fifo_stream
    030C8 3000      CPI	R16,0
    030C9 0701      CPC	R16,R17
    030CA F019      BEQ	0x30CE
(1234)         return -1;
    030CB EF0F      LDI	R16,0xFF
    030CC EF1F      LDI	R17,0xFF
    030CD C254      RJMP	0x3322
(1235) 
(1236)     /* Parse DMP packet. */
(1237)     if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
    030CE 9180 0DD1 LDS	R24,inv_mpu_dmp_motion_driver.c:dmp+6
    030D0 9190 0DD2 LDS	R25,inv_mpu_dmp_motion_driver.c:dmp+7
    030D2 7184      ANDI	R24,0x14
    030D3 7090      ANDI	R25,0
    030D4 3080      CPI	R24,0
    030D5 0789      CPC	R24,R25
    030D6 F409      BNE	0x30D8
    030D7 C18B      RJMP	0x3263
(1238) #ifdef FIFO_CORRUPTION_CHECK
(1239)         long quat_q14[4], quat_mag_sq;
(1240) #endif
(1241)         quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
    030D8 E188      LDI	R24,0x18
    030D9 E090      LDI	R25,0
    030DA 810A      LDD	R16,Y+2
    030DB 2711      CLR	R17
    030DC 2722      CLR	R18
    030DD 2733      CLR	R19
    030DE 938A      ST	-Y,R24
    030DF 940E 419D CALL	lsl32
    030E1 0118      MOVW	R2,R16
    030E2 0129      MOVW	R4,R18
    030E3 806B      LDD	R6,Y+3
    030E4 2477      CLR	R7
    030E5 2488      CLR	R8
    030E6 2499      CLR	R9
    030E7 0143      MOVW	R8,R6
    030E8 2466      CLR	R6
    030E9 2477      CLR	R7
    030EA 2826      OR	R2,R6
    030EB 2837      OR	R3,R7
    030EC 2848      OR	R4,R8
    030ED 2859      OR	R5,R9
    030EE E088      LDI	R24,0x8
    030EF E090      LDI	R25,0
    030F0 810C      LDD	R16,Y+4
    030F1 2711      CLR	R17
    030F2 2722      CLR	R18
    030F3 2733      CLR	R19
    030F4 938A      ST	-Y,R24
    030F5 940E 419D CALL	lsl32
    030F7 2A20      OR	R2,R16
    030F8 2A31      OR	R3,R17
    030F9 2A42      OR	R4,R18
    030FA 2A53      OR	R5,R19
    030FB 806D      LDD	R6,Y+5
    030FC 2477      CLR	R7
    030FD 2488      CLR	R8
    030FE 2499      CLR	R9
    030FF 2826      OR	R2,R6
    03100 2837      OR	R3,R7
    03101 2848      OR	R4,R8
    03102 2859      OR	R5,R9
    03103 01DE      MOVW	R26,R28
    03104 5BAC      SUBI	R26,0xBC
    03105 4FBF      SBCI	R27,0xFF
    03106 91ED      LD	R30,X+
    03107 91FC      LD	R31,X
    03108 8220      ST	Z,R2
    03109 8231      STD	Z+1,R3
    0310A 8242      STD	Z+2,R4
    0310B 8253      STD	Z+3,R5
(1242)             ((long)fifo_data[2] << 8) | fifo_data[3];
(1243)         quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
    0310C E188      LDI	R24,0x18
    0310D E090      LDI	R25,0
    0310E 810E      LDD	R16,Y+6
    0310F 2711      CLR	R17
    03110 2722      CLR	R18
    03111 2733      CLR	R19
    03112 938A      ST	-Y,R24
    03113 940E 419D CALL	lsl32
    03115 0118      MOVW	R2,R16
    03116 0129      MOVW	R4,R18
    03117 806F      LDD	R6,Y+7
    03118 2477      CLR	R7
    03119 2488      CLR	R8
    0311A 2499      CLR	R9
    0311B 0143      MOVW	R8,R6
    0311C 2466      CLR	R6
    0311D 2477      CLR	R7
    0311E 2826      OR	R2,R6
    0311F 2837      OR	R3,R7
    03120 2848      OR	R4,R8
    03121 2859      OR	R5,R9
    03122 E088      LDI	R24,0x8
    03123 E090      LDI	R25,0
    03124 8508      LDD	R16,Y+8
    03125 2711      CLR	R17
    03126 2722      CLR	R18
    03127 2733      CLR	R19
    03128 938A      ST	-Y,R24
    03129 940E 419D CALL	lsl32
    0312B 2A20      OR	R2,R16
    0312C 2A31      OR	R3,R17
    0312D 2A42      OR	R4,R18
    0312E 2A53      OR	R5,R19
    0312F 8469      LDD	R6,Y+9
    03130 2477      CLR	R7
    03131 2488      CLR	R8
    03132 2499      CLR	R9
    03133 2826      OR	R2,R6
    03134 2837      OR	R3,R7
    03135 2848      OR	R4,R8
    03136 2859      OR	R5,R9
    03137 01DE      MOVW	R26,R28
    03138 5BAC      SUBI	R26,0xBC
    03139 4FBF      SBCI	R27,0xFF
    0313A 91ED      LD	R30,X+
    0313B 91FC      LD	R31,X
    0313C 8224      STD	Z+4,R2
    0313D 8235      STD	Z+5,R3
    0313E 8246      STD	Z+6,R4
    0313F 8257      STD	Z+7,R5
(1244)             ((long)fifo_data[6] << 8) | fifo_data[7];
(1245)         quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
    03140 E188      LDI	R24,0x18
    03141 E090      LDI	R25,0
    03142 850A      LDD	R16,Y+10
    03143 2711      CLR	R17
    03144 2722      CLR	R18
    03145 2733      CLR	R19
    03146 938A      ST	-Y,R24
    03147 940E 419D CALL	lsl32
    03149 0118      MOVW	R2,R16
    0314A 0129      MOVW	R4,R18
    0314B 846B      LDD	R6,Y+11
    0314C 2477      CLR	R7
    0314D 2488      CLR	R8
    0314E 2499      CLR	R9
    0314F 0143      MOVW	R8,R6
    03150 2466      CLR	R6
    03151 2477      CLR	R7
    03152 2826      OR	R2,R6
    03153 2837      OR	R3,R7
    03154 2848      OR	R4,R8
    03155 2859      OR	R5,R9
    03156 E088      LDI	R24,0x8
    03157 E090      LDI	R25,0
    03158 850C      LDD	R16,Y+12
    03159 2711      CLR	R17
    0315A 2722      CLR	R18
    0315B 2733      CLR	R19
    0315C 938A      ST	-Y,R24
    0315D 940E 419D CALL	lsl32
    0315F 2A20      OR	R2,R16
    03160 2A31      OR	R3,R17
    03161 2A42      OR	R4,R18
    03162 2A53      OR	R5,R19
    03163 846D      LDD	R6,Y+13
    03164 2477      CLR	R7
    03165 2488      CLR	R8
    03166 2499      CLR	R9
    03167 2826      OR	R2,R6
    03168 2837      OR	R3,R7
    03169 2848      OR	R4,R8
    0316A 2859      OR	R5,R9
    0316B 01DE      MOVW	R26,R28
    0316C 5BAC      SUBI	R26,0xBC
    0316D 4FBF      SBCI	R27,0xFF
    0316E 91ED      LD	R30,X+
    0316F 91FC      LD	R31,X
    03170 8620      STD	Z+8,R2
    03171 8631      STD	Z+9,R3
    03172 8642      STD	Z+10,R4
    03173 8653      STD	Z+11,R5
(1246)             ((long)fifo_data[10] << 8) | fifo_data[11];
(1247)         quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
    03174 E188      LDI	R24,0x18
    03175 E090      LDI	R25,0
    03176 850E      LDD	R16,Y+14
    03177 2711      CLR	R17
    03178 2722      CLR	R18
    03179 2733      CLR	R19
    0317A 938A      ST	-Y,R24
    0317B 940E 419D CALL	lsl32
    0317D 0118      MOVW	R2,R16
    0317E 0129      MOVW	R4,R18
    0317F 846F      LDD	R6,Y+15
    03180 2477      CLR	R7
    03181 2488      CLR	R8
    03182 2499      CLR	R9
    03183 0143      MOVW	R8,R6
    03184 2466      CLR	R6
    03185 2477      CLR	R7
    03186 2826      OR	R2,R6
    03187 2837      OR	R3,R7
    03188 2848      OR	R4,R8
    03189 2859      OR	R5,R9
    0318A E088      LDI	R24,0x8
    0318B E090      LDI	R25,0
    0318C 8908      LDD	R16,Y+16
    0318D 2711      CLR	R17
    0318E 2722      CLR	R18
    0318F 2733      CLR	R19
    03190 938A      ST	-Y,R24
    03191 940E 419D CALL	lsl32
    03193 2A20      OR	R2,R16
    03194 2A31      OR	R3,R17
    03195 2A42      OR	R4,R18
    03196 2A53      OR	R5,R19
    03197 8869      LDD	R6,Y+17
    03198 2477      CLR	R7
    03199 2488      CLR	R8
    0319A 2499      CLR	R9
    0319B 2826      OR	R2,R6
    0319C 2837      OR	R3,R7
    0319D 2848      OR	R4,R8
    0319E 2859      OR	R5,R9
    0319F 01DE      MOVW	R26,R28
    031A0 5BAC      SUBI	R26,0xBC
    031A1 4FBF      SBCI	R27,0xFF
    031A2 91ED      LD	R30,X+
    031A3 91FC      LD	R31,X
    031A4 8624      STD	Z+12,R2
    031A5 8635      STD	Z+13,R3
    031A6 8646      STD	Z+14,R4
    031A7 8657      STD	Z+15,R5
(1248)             ((long)fifo_data[14] << 8) | fifo_data[15];
(1249)         ii += 16;
    031A8 2D8C      MOV	R24,R12
    031A9 5F80      SUBI	R24,0xF0
    031AA 2EC8      MOV	R12,R24
(1250) #ifdef FIFO_CORRUPTION_CHECK
(1251)         /* We can detect a corrupted FIFO by monitoring the quaternion data and
(1252)          * ensuring that the magnitude is always normalized to one. This
(1253)          * shouldn't happen in normal operation, but if an I2C error occurs,
(1254)          * the FIFO reads might become misaligned.
(1255)          *
(1256)          * Let's start by scaling down the quaternion data to avoid long long
(1257)          * math.
(1258)          */
(1259)         quat_q14[0] = quat[0] >> 16;
    031AB 8020      LD	R2,Z
    031AC 8031      LDD	R3,Z+1
    031AD 8042      LDD	R4,Z+2
    031AE 8053      LDD	R5,Z+3
    031AF 0112      MOVW	R2,R4
    031B0 2444      CLR	R4
    031B1 FC37      SBRC	R3,7
    031B2 9440      COM	R4
    031B3 2455      CLR	R5
    031B4 FC47      SBRC	R4,7
    031B5 9450      COM	R5
    031B6 A22A      STD	Y+34,R2
    031B7 A23B      STD	Y+35,R3
    031B8 A24C      STD	Y+36,R4
    031B9 A25D      STD	Y+37,R5
(1260)         quat_q14[1] = quat[1] >> 16;
    031BA 01DE      MOVW	R26,R28
    031BB 5BAC      SUBI	R26,0xBC
    031BC 4FBF      SBCI	R27,0xFF
    031BD 91ED      LD	R30,X+
    031BE 91FC      LD	R31,X
    031BF 9634      ADIW	R30,4
    031C0 8020      LD	R2,Z
    031C1 8031      LDD	R3,Z+1
    031C2 8042      LDD	R4,Z+2
    031C3 8053      LDD	R5,Z+3
    031C4 0112      MOVW	R2,R4
    031C5 2444      CLR	R4
    031C6 FC37      SBRC	R3,7
    031C7 9440      COM	R4
    031C8 2455      CLR	R5
    031C9 FC47      SBRC	R4,7
    031CA 9450      COM	R5
    031CB A22E      STD	Y+38,R2
    031CC A23F      STD	Y+39,R3
    031CD A648      STD	Y+40,R4
    031CE A659      STD	Y+41,R5
(1261)         quat_q14[2] = quat[2] >> 16;
    031CF 01DE      MOVW	R26,R28
    031D0 5BAC      SUBI	R26,0xBC
    031D1 4FBF      SBCI	R27,0xFF
    031D2 91ED      LD	R30,X+
    031D3 91FC      LD	R31,X
    031D4 9638      ADIW	R30,0x8
    031D5 8020      LD	R2,Z
    031D6 8031      LDD	R3,Z+1
    031D7 8042      LDD	R4,Z+2
    031D8 8053      LDD	R5,Z+3
    031D9 0112      MOVW	R2,R4
    031DA 2444      CLR	R4
    031DB FC37      SBRC	R3,7
    031DC 9440      COM	R4
    031DD 2455      CLR	R5
    031DE FC47      SBRC	R4,7
    031DF 9450      COM	R5
    031E0 A62A      STD	Y+42,R2
    031E1 A63B      STD	Y+43,R3
    031E2 A64C      STD	Y+44,R4
    031E3 A65D      STD	Y+45,R5
(1262)         quat_q14[3] = quat[3] >> 16;
    031E4 01DE      MOVW	R26,R28
    031E5 5BAC      SUBI	R26,0xBC
    031E6 4FBF      SBCI	R27,0xFF
    031E7 91ED      LD	R30,X+
    031E8 91FC      LD	R31,X
    031E9 963C      ADIW	R30,0xC
    031EA 8020      LD	R2,Z
    031EB 8031      LDD	R3,Z+1
    031EC 8042      LDD	R4,Z+2
    031ED 8053      LDD	R5,Z+3
    031EE 0112      MOVW	R2,R4
    031EF 2444      CLR	R4
    031F0 FC37      SBRC	R3,7
    031F1 9440      COM	R4
    031F2 2455      CLR	R5
    031F3 FC47      SBRC	R4,7
    031F4 9450      COM	R5
    031F5 A62E      STD	Y+46,R2
    031F6 A63F      STD	Y+47,R3
    031F7 AA48      STD	Y+48,R4
    031F8 AA59      STD	Y+49,R5
(1263)         quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
    031F9 A02E      LDD	R2,Y+38
    031FA A03F      LDD	R3,Y+39
    031FB A448      LDD	R4,Y+40
    031FC A459      LDD	R5,Y+41
    031FD 0181      MOVW	R16,R2
    031FE 0192      MOVW	R18,R4
    031FF 933A      ST	-Y,R19
    03200 932A      ST	-Y,R18
    03201 931A      ST	-Y,R17
    03202 930A      ST	-Y,R16
    03203 940E 40BE CALL	empy32u|empy32s
    03205 0118      MOVW	R2,R16
    03206 0129      MOVW	R4,R18
    03207 A06A      LDD	R6,Y+34
    03208 A07B      LDD	R7,Y+35
    03209 A08C      LDD	R8,Y+36
    0320A A09D      LDD	R9,Y+37
    0320B 0183      MOVW	R16,R6
    0320C 0194      MOVW	R18,R8
    0320D 933A      ST	-Y,R19
    0320E 932A      ST	-Y,R18
    0320F 931A      ST	-Y,R17
    03210 930A      ST	-Y,R16
    03211 940E 40BE CALL	empy32u|empy32s
    03213 0138      MOVW	R6,R16
    03214 0149      MOVW	R8,R18
    03215 0C62      ADD	R6,R2
    03216 1C73      ADC	R7,R3
    03217 1C84      ADC	R8,R4
    03218 1C95      ADC	R9,R5
    03219 A42A      LDD	R2,Y+42
    0321A A43B      LDD	R3,Y+43
    0321B A44C      LDD	R4,Y+44
    0321C A45D      LDD	R5,Y+45
    0321D 0181      MOVW	R16,R2
    0321E 0192      MOVW	R18,R4
    0321F 933A      ST	-Y,R19
    03220 932A      ST	-Y,R18
    03221 931A      ST	-Y,R17
    03222 930A      ST	-Y,R16
    03223 940E 40BE CALL	empy32u|empy32s
    03225 0E60      ADD	R6,R16
    03226 1E71      ADC	R7,R17
    03227 1E82      ADC	R8,R18
    03228 1E93      ADC	R9,R19
    03229 A42E      LDD	R2,Y+46
    0322A A43F      LDD	R3,Y+47
    0322B A848      LDD	R4,Y+48
    0322C A859      LDD	R5,Y+49
    0322D 0181      MOVW	R16,R2
    0322E 0192      MOVW	R18,R4
    0322F 933A      ST	-Y,R19
    03230 932A      ST	-Y,R18
    03231 931A      ST	-Y,R17
    03232 930A      ST	-Y,R16
    03233 940E 40BE CALL	empy32u|empy32s
    03235 0E60      ADD	R6,R16
    03236 1E71      ADC	R7,R17
    03237 1E82      ADC	R8,R18
    03238 1E93      ADC	R9,R19
    03239 AA6A      STD	Y+50,R6
    0323A AA7B      STD	Y+51,R7
    0323B AA8C      STD	Y+52,R8
    0323C AA9D      STD	Y+53,R9
(1264)             quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
(1265)         if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
    0323D E040      LDI	R20,0
    0323E E050      LDI	R21,0
    0323F E060      LDI	R22,0
    03240 E07F      LDI	R23,0xF
    03241 A82A      LDD	R2,Y+50
    03242 A83B      LDD	R3,Y+51
    03243 A84C      LDD	R4,Y+52
    03244 A85D      LDD	R5,Y+53
    03245 1624      CP	R2,R20
    03246 0635      CPC	R3,R21
    03247 0646      CPC	R4,R22
    03248 0657      CPC	R5,R23
    03249 F04C      BLT	0x3253
    0324A E040      LDI	R20,0
    0324B E050      LDI	R21,0
    0324C E060      LDI	R22,0
    0324D E171      LDI	R23,0x11
    0324E 1542      CP	R20,R2
    0324F 0553      CPC	R21,R3
    03250 0564      CPC	R22,R4
    03251 0575      CPC	R23,R5
    03252 F454      BGE	0x325D
(1266)             (quat_mag_sq > QUAT_MAG_SQ_MAX)) 
(1267) 			{
(1268)             /* Quaternion is outside of the acceptable threshold. */
(1269)             mpu_reset_fifo();
    03253 940E 1336 CALL	_mpu_reset_fifo
(1270)             sensors[0] = 0;
    03255 2422      CLR	R2
    03256 2433      CLR	R3
    03257 01F7      MOVW	R30,R14
    03258 8231      STD	Z+1,R3
    03259 8220      ST	Z,R2
(1271)             return -1;
    0325A EF0F      LDI	R16,0xFF
    0325B EF1F      LDI	R17,0xFF
    0325C C0C5      RJMP	0x3322
(1272)         }
(1273)         sensors[0] |= INV_WXYZ_QUAT;
    0325D 01F7      MOVW	R30,R14
    0325E 8180      LD	R24,Z
    0325F 8191      LDD	R25,Z+1
    03260 6091      ORI	R25,1
    03261 8391      STD	Z+1,R25
    03262 8380      ST	Z,R24
(1274) #endif
(1275)     }
(1276) 
(1277)     if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) 
    03263 9020 0DD1 LDS	R2,inv_mpu_dmp_motion_driver.c:dmp+6
    03265 9030 0DD2 LDS	R3,inv_mpu_dmp_motion_driver.c:dmp+7
    03267 FE26      SBRS	R2,6
    03268 C04B      RJMP	0x32B4
(1278) 	{
(1279)         accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
    03269 01CE      MOVW	R24,R28
    0326A 9603      ADIW	R24,3
    0326B 2DEC      MOV	R30,R12
    0326C 27FF      CLR	R31
    0326D 0FE8      ADD	R30,R24
    0326E 1FF9      ADC	R31,R25
    0326F 8020      LD	R2,Z
    03270 01CE      MOVW	R24,R28
    03271 9602      ADIW	R24,2
    03272 2DEC      MOV	R30,R12
    03273 27FF      CLR	R31
    03274 0FE8      ADD	R30,R24
    03275 1FF9      ADC	R31,R25
    03276 8030      LD	R3,Z
    03277 2444      CLR	R4
    03278 01DE      MOVW	R26,R28
    03279 5BAE      SUBI	R26,0xBE
    0327A 4FBF      SBCI	R27,0xFF
    0327B 91ED      LD	R30,X+
    0327C 91FC      LD	R31,X
    0327D 8231      STD	Z+1,R3
    0327E 8220      ST	Z,R2
(1280)         accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
    0327F 01CE      MOVW	R24,R28
    03280 9605      ADIW	R24,5
    03281 2DEC      MOV	R30,R12
    03282 27FF      CLR	R31
    03283 0FE8      ADD	R30,R24
    03284 1FF9      ADC	R31,R25
    03285 8020      LD	R2,Z
    03286 01CE      MOVW	R24,R28
    03287 9604      ADIW	R24,4
    03288 2DEC      MOV	R30,R12
    03289 27FF      CLR	R31
    0328A 0FE8      ADD	R30,R24
    0328B 1FF9      ADC	R31,R25
    0328C 8030      LD	R3,Z
    0328D 2444      CLR	R4
    0328E 01DE      MOVW	R26,R28
    0328F 5BAE      SUBI	R26,0xBE
    03290 4FBF      SBCI	R27,0xFF
    03291 91ED      LD	R30,X+
    03292 91FC      LD	R31,X
    03293 8233      STD	Z+3,R3
    03294 8222      STD	Z+2,R2
(1281)         accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
    03295 01CE      MOVW	R24,R28
    03296 9607      ADIW	R24,7
    03297 2DEC      MOV	R30,R12
    03298 27FF      CLR	R31
    03299 0FE8      ADD	R30,R24
    0329A 1FF9      ADC	R31,R25
    0329B 8020      LD	R2,Z
    0329C 01CE      MOVW	R24,R28
    0329D 9606      ADIW	R24,6
    0329E 2DEC      MOV	R30,R12
    0329F 27FF      CLR	R31
    032A0 0FE8      ADD	R30,R24
    032A1 1FF9      ADC	R31,R25
    032A2 8030      LD	R3,Z
    032A3 2444      CLR	R4
    032A4 01DE      MOVW	R26,R28
    032A5 5BAE      SUBI	R26,0xBE
    032A6 4FBF      SBCI	R27,0xFF
    032A7 91ED      LD	R30,X+
    032A8 91FC      LD	R31,X
    032A9 8235      STD	Z+5,R3
    032AA 8224      STD	Z+4,R2
(1282)         ii += 6;
    032AB 2D8C      MOV	R24,R12
    032AC 5F8A      SUBI	R24,0xFA
    032AD 2EC8      MOV	R12,R24
(1283)         sensors[0] |= INV_XYZ_ACCEL;
    032AE 01F7      MOVW	R30,R14
    032AF 8180      LD	R24,Z
    032B0 8191      LDD	R25,Z+1
    032B1 6088      ORI	R24,0x8
    032B2 8391      STD	Z+1,R25
    032B3 8380      ST	Z,R24
(1284)     }
(1285) 
(1286)     if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) 
    032B4 9180 0DD1 LDS	R24,inv_mpu_dmp_motion_driver.c:dmp+6
    032B6 9190 0DD2 LDS	R25,inv_mpu_dmp_motion_driver.c:dmp+7
    032B8 7880      ANDI	R24,0x80
    032B9 7091      ANDI	R25,1
    032BA 3080      CPI	R24,0
    032BB 0789      CPC	R24,R25
    032BC F409      BNE	0x32BE
    032BD C04B      RJMP	0x3309
(1287) 	{
(1288)         gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
    032BE 01CE      MOVW	R24,R28
    032BF 9603      ADIW	R24,3
    032C0 2DEC      MOV	R30,R12
    032C1 27FF      CLR	R31
    032C2 0FE8      ADD	R30,R24
    032C3 1FF9      ADC	R31,R25
    032C4 8020      LD	R2,Z
    032C5 01CE      MOVW	R24,R28
    032C6 9602      ADIW	R24,2
    032C7 2DEC      MOV	R30,R12
    032C8 27FF      CLR	R31
    032C9 0FE8      ADD	R30,R24
    032CA 1FF9      ADC	R31,R25
    032CB 8030      LD	R3,Z
    032CC 2444      CLR	R4
    032CD 01DE      MOVW	R26,R28
    032CE 5CA0      SUBI	R26,0xC0
    032CF 4FBF      SBCI	R27,0xFF
    032D0 91ED      LD	R30,X+
    032D1 91FC      LD	R31,X
    032D2 8231      STD	Z+1,R3
    032D3 8220      ST	Z,R2
(1289)         gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
    032D4 01CE      MOVW	R24,R28
    032D5 9605      ADIW	R24,5
    032D6 2DEC      MOV	R30,R12
    032D7 27FF      CLR	R31
    032D8 0FE8      ADD	R30,R24
    032D9 1FF9      ADC	R31,R25
    032DA 8020      LD	R2,Z
    032DB 01CE      MOVW	R24,R28
    032DC 9604      ADIW	R24,4
    032DD 2DEC      MOV	R30,R12
    032DE 27FF      CLR	R31
    032DF 0FE8      ADD	R30,R24
    032E0 1FF9      ADC	R31,R25
    032E1 8030      LD	R3,Z
    032E2 2444      CLR	R4
    032E3 01DE      MOVW	R26,R28
    032E4 5CA0      SUBI	R26,0xC0
    032E5 4FBF      SBCI	R27,0xFF
    032E6 91ED      LD	R30,X+
    032E7 91FC      LD	R31,X
    032E8 8233      STD	Z+3,R3
    032E9 8222      STD	Z+2,R2
(1290)         gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
    032EA 01CE      MOVW	R24,R28
    032EB 9607      ADIW	R24,7
    032EC 2DEC      MOV	R30,R12
    032ED 27FF      CLR	R31
    032EE 0FE8      ADD	R30,R24
    032EF 1FF9      ADC	R31,R25
    032F0 8020      LD	R2,Z
    032F1 01CE      MOVW	R24,R28
    032F2 9606      ADIW	R24,6
    032F3 2DEC      MOV	R30,R12
    032F4 27FF      CLR	R31
    032F5 0FE8      ADD	R30,R24
    032F6 1FF9      ADC	R31,R25
    032F7 8030      LD	R3,Z
    032F8 2444      CLR	R4
    032F9 01DE      MOVW	R26,R28
    032FA 5CA0      SUBI	R26,0xC0
    032FB 4FBF      SBCI	R27,0xFF
    032FC 91ED      LD	R30,X+
    032FD 91FC      LD	R31,X
    032FE 8235      STD	Z+5,R3
    032FF 8224      STD	Z+4,R2
(1291)         ii += 6;
    03300 2D8C      MOV	R24,R12
    03301 5F8A      SUBI	R24,0xFA
    03302 2EC8      MOV	R12,R24
(1292)         sensors[0] |= INV_XYZ_GYRO;
    03303 01F7      MOVW	R30,R14
    03304 8180      LD	R24,Z
    03305 8191      LDD	R25,Z+1
    03306 6780      ORI	R24,0x70
    03307 8391      STD	Z+1,R25
    03308 8380      ST	Z,R24
(1293)     }
(1294) 
(1295)     /* Gesture data is at the end of the DMP packet. Parse it and call
(1296)      * the gesture callbacks (if registered).
(1297)      */
(1298)     if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
    03309 9180 0DD1 LDS	R24,inv_mpu_dmp_motion_driver.c:dmp+6
    0330B 9190 0DD2 LDS	R25,inv_mpu_dmp_motion_driver.c:dmp+7
    0330D 7083      ANDI	R24,3
    0330E 7090      ANDI	R25,0
    0330F 3080      CPI	R24,0
    03310 0789      CPC	R24,R25
    03311 F039      BEQ	0x3319
(1299)         decode_gesture(fifo_data + ii);
    03312 01CE      MOVW	R24,R28
    03313 9602      ADIW	R24,2
    03314 2D0C      MOV	R16,R12
    03315 2711      CLR	R17
    03316 0F08      ADD	R16,R24
    03317 1F19      ADC	R17,R25
    03318 DD10      RCALL	inv_mpu_dmp_motion_driver.c:decode_gesture
(1300) 
(1301)     get_ms(timestamp);
    03319 01FE      MOVW	R30,R28
    0331A 5BEA      SUBI	R30,0xBA
    0331B 4FFF      SBCI	R31,0xFF
    0331C 8100      LD	R16,Z
    0331D 8111      LDD	R17,Z+1
    0331E 940E 252B CALL	_get_ms
(1302)     return 0;
    03320 2700      CLR	R16
    03321 2711      CLR	R17
    03322 96E6      ADIW	R28,0x36
    03323 940E 4107 CALL	pop_xgsetF0FC
    03325 9624      ADIW	R28,4
    03326 9508      RET
(1303) }
(1304) 
(1305) /**
(1306)  *  @brief      Register a function to be executed on a tap event.
(1307)  *  The tap direction is represented by one of the following:
(1308)  *  \n TAP_X_UP
(1309)  *  \n TAP_X_DOWN
(1310)  *  \n TAP_Y_UP
(1311)  *  \n TAP_Y_DOWN
(1312)  *  \n TAP_Z_UP
(1313)  *  \n TAP_Z_DOWN
(1314)  *  @param[in]  func    Callback function.
(1315)  *  @return     0 if successful.
(1316)  */
(1317) int dmp_register_tap_cb(void (*func)(unsigned char, unsigned char))
(1318) {
(1319)     dmp.tap_cb = func;
_dmp_register_tap_cb:
  func                 --> R16
    03327 9310 0DCC STS	inv_mpu_dmp_motion_driver.c:dmp+1,R17
    03329 9300 0DCB STS	inv_mpu_dmp_motion_driver.c:dmp,R16
(1320)     return 0;
    0332B 2700      CLR	R16
    0332C 2711      CLR	R17
    0332D 9508      RET
(1321) }
(1322) 
(1323) /**
(1324)  *  @brief      Register a function to be executed on a android orientation event.
(1325)  *  @param[in]  func    Callback function.
(1326)  *  @return     0 if successful.
(1327)  */
(1328) int dmp_register_android_orient_cb(void (*func)(unsigned char))
(1329) {
(1330)     dmp.android_orient_cb = func;
_dmp_register_android_orient_cb:
  func                 --> R16
    0332E 9310 0DCE STS	inv_mpu_dmp_motion_driver.c:dmp+3,R17
    03330 9300 0DCD STS	inv_mpu_dmp_motion_driver.c:dmp+2,R16
(1331)     return 0;
    03332 2700      CLR	R16
    03333 2711      CLR	R17
    03334 9508      RET
_inv_row_2_scale:
  b                    --> R20
  row                  --> R16
    03335 934A      ST	-Y,R20
    03336 935A      ST	-Y,R21
FILE: E:\大学课程\平衡小车设计\平衡小车程序final\mpu6050.c
(0001) #include "mpu6050.h"
(0002) #include "inv_mpu_dmp_motion_driver.h"
(0003) #include "inv_mpu.h"
(0004) #include "stdio.h"
(0005) #include "i2c.h"
(0006) #include "math.h"
(0007) #include "upload.h"
(0008) 
(0009) #define q30  1073741824.0f
(0010) 
(0011) signed char gyro_orientation[9] = {-1, 0, 0,0,-1, 0,0, 0, 1};
(0012) short gyro[3], accel[3],sensors;	
(0013) 
(0014) struct rx_s 
(0015) {
(0016)     unsigned char header[3];
(0017)     unsigned char cmd;
(0018) };
(0019) struct hal_s 
(0020) {
(0021)     unsigned char sensors;
(0022)     unsigned char dmp_on;
(0023)     unsigned char wait_for_tap;
(0024)     volatile unsigned char new_gyro;
(0025)     unsigned short report;
(0026)     unsigned short dmp_features;
(0027)     unsigned char motion_int_mode;
(0028)     struct rx_s rx;
(0029) };
(0030) 
(0031) struct hal_s hal = {0};
(0032) 
(0033) volatile unsigned char rx_new;
(0034) 
(0035) enum packet_type_e 
(0036) {
(0037)     PACKET_TYPE_ACCEL,
(0038)     PACKET_TYPE_GYRO,
(0039)     PACKET_TYPE_QUAT,
(0040)     PACKET_TYPE_TAP,
(0041)     PACKET_TYPE_ANDROID_ORIENT,
(0042)     PACKET_TYPE_PEDO,
(0043)     PACKET_TYPE_MISC
(0044) };
(0045) 
(0046) unsigned short inv_row_2_scale(const signed char *row)
(0047) {
(0048)     unsigned short b;
(0049) 
(0050)     if (row[0] > 0)
    03337 2422      CLR	R2
    03338 01F8      MOVW	R30,R16
    03339 8030      LD	R3,Z
    0333A 1423      CP	R2,R3
    0333B F41C      BGE	0x333F
(0051)         b = 0;
    0333C 2744      CLR	R20
    0333D 2755      CLR	R21
    0333E C027      RJMP	0x3366
(0052)     else if (row[0] < 0)
    0333F 01F8      MOVW	R30,R16
    03340 8180      LD	R24,Z
    03341 3080      CPI	R24,0
    03342 F41C      BGE	0x3346
(0053)         b = 4;
    03343 E044      LDI	R20,4
    03344 E050      LDI	R21,0
    03345 C020      RJMP	0x3366
(0054)     else if (row[1] > 0)
    03346 2422      CLR	R2
    03347 01F8      MOVW	R30,R16
    03348 8031      LDD	R3,Z+1
    03349 1423      CP	R2,R3
    0334A F41C      BGE	0x334E
(0055)         b = 1;
    0334B E041      LDI	R20,1
    0334C E050      LDI	R21,0
    0334D C018      RJMP	0x3366
(0056)     else if (row[1] < 0)
    0334E 01F8      MOVW	R30,R16
    0334F 8181      LDD	R24,Z+1
    03350 3080      CPI	R24,0
    03351 F41C      BGE	0x3355
(0057)         b = 5;
    03352 E045      LDI	R20,5
    03353 E050      LDI	R21,0
    03354 C011      RJMP	0x3366
(0058)     else if (row[2] > 0)
    03355 2422      CLR	R2
    03356 01F8      MOVW	R30,R16
    03357 8032      LDD	R3,Z+2
    03358 1423      CP	R2,R3
    03359 F41C      BGE	0x335D
(0059)         b = 2;
    0335A E042      LDI	R20,2
    0335B E050      LDI	R21,0
    0335C C009      RJMP	0x3366
(0060)     else if (row[2] < 0)
    0335D 01F8      MOVW	R30,R16
    0335E 8182      LDD	R24,Z+2
    0335F 3080      CPI	R24,0
    03360 F41C      BGE	0x3364
(0061)         b = 6;
    03361 E046      LDI	R20,6
    03362 E050      LDI	R21,0
    03363 C002      RJMP	0x3366
(0062)     else
(0063)         b = 7;     
    03364 E047      LDI	R20,7
    03365 E050      LDI	R21,0
(0064)     return b;
    03366 018A      MOVW	R16,R20
    03367 9159      LD	R21,Y+
    03368 9149      LD	R20,Y+
    03369 9508      RET
_inv_orientation_matrix_to_scalar:
  scalar               --> R10
  mtx                  --> R20
    0336A 940E 413F CALL	push_xgset303C
    0336C 01A8      MOVW	R20,R16
(0065) }
(0066) 
(0067) unsigned short inv_orientation_matrix_to_scalar(const signed char *mtx)
(0068) {
(0069)     unsigned short scalar;
(0070) 
(0071)     scalar = inv_row_2_scale(mtx);
    0336D 018A      MOVW	R16,R20
    0336E DFC6      RCALL	_inv_row_2_scale
    0336F 0158      MOVW	R10,R16
(0072)     scalar |= inv_row_2_scale(mtx + 3) << 3;
    03370 018A      MOVW	R16,R20
    03371 5F0D      SUBI	R16,0xFD
    03372 4F1F      SBCI	R17,0xFF
    03373 DFC1      RCALL	_inv_row_2_scale
    03374 0118      MOVW	R2,R16
    03375 0C22      LSL	R2
    03376 1C33      ROL	R3
    03377 0C22      LSL	R2
    03378 1C33      ROL	R3
    03379 0C22      LSL	R2
    0337A 1C33      ROL	R3
    0337B 28A2      OR	R10,R2
    0337C 28B3      OR	R11,R3
(0073)     scalar |= inv_row_2_scale(mtx + 6) << 6;
    0337D 018A      MOVW	R16,R20
    0337E 5F0A      SUBI	R16,0xFA
    0337F 4F1F      SBCI	R17,0xFF
    03380 DFB4      RCALL	_inv_row_2_scale
    03381 0168      MOVW	R12,R16
    03382 E026      LDI	R18,6
    03383 E030      LDI	R19,0
    03384 940E 4196 CALL	lsl16
    03386 2AA0      OR	R10,R16
    03387 2AB1      OR	R11,R17
(0074) 
(0075) 
(0076)     return scalar;
    03388 0185      MOVW	R16,R10
    03389 940C 4146 JMP	pop_xgset303C
_run_self_test:
  accel_sens           --> Y,+28
  sens                 --> Y,+24
  result               --> R20
  accel                --> Y,+12
  gyro                 --> Y,+0
    0338B 934A      ST	-Y,R20
    0338C 935A      ST	-Y,R21
    0338D 976E      SBIW	R28,0x1E
(0077) }
(0078) 
(0079) void run_self_test(void)
(0080) {
(0081)     int result;
(0082)     long gyro[3], accel[3];
(0083) 	
(0084)     result = mpu_run_self_test(gyro, accel);
    0338E 019E      MOVW	R18,R28
    0338F 5F24      SUBI	R18,0xF4
    03390 4F3F      SBCI	R19,0xFF
    03391 018E      MOVW	R16,R28
    03392 940E 20B0 CALL	_mpu_run_self_test
    03394 01A8      MOVW	R20,R16
(0085) 
(0086)     if (result == 0x03) 
    03395 3003      CPI	R16,3
    03396 E0E0      LDI	R30,0
    03397 071E      CPC	R17,R30
    03398 F009      BEQ	0x339A
    03399 C07E      RJMP	0x3418
(0087) 	{
(0088)         float sens;
(0089)         unsigned short accel_sens;
(0090)         mpu_get_gyro_sens(&sens);
    0339A 018E      MOVW	R16,R28
    0339B 5E08      SUBI	R16,0xE8
    0339C 4F1F      SBCI	R17,0xFF
    0339D 940E 16DD CALL	_mpu_get_gyro_sens
(0091)         gyro[0] = (long)(gyro[0] * sens);
    0339F 8108      LD	R16,Y
    033A0 8119      LDD	R17,Y+1
    033A1 812A      LDD	R18,Y+2
    033A2 813B      LDD	R19,Y+3
    033A3 940E 42CF CALL	long2fp
    033A5 01CE      MOVW	R24,R28
    033A6 9648      ADIW	R24,0x18
    033A7 939A      ST	-Y,R25
    033A8 938A      ST	-Y,R24
    033A9 940E 445F CALL	fpmule1
    033AB 940E 4290 CALL	fpint
    033AD 8308      ST	Y,R16
    033AE 8319      STD	Y+1,R17
    033AF 832A      STD	Y+2,R18
    033B0 833B      STD	Y+3,R19
(0092)         gyro[1] = (long)(gyro[1] * sens);
    033B1 810C      LDD	R16,Y+4
    033B2 811D      LDD	R17,Y+5
    033B3 812E      LDD	R18,Y+6
    033B4 813F      LDD	R19,Y+7
    033B5 940E 42CF CALL	long2fp
    033B7 01CE      MOVW	R24,R28
    033B8 9648      ADIW	R24,0x18
    033B9 939A      ST	-Y,R25
    033BA 938A      ST	-Y,R24
    033BB 940E 445F CALL	fpmule1
    033BD 940E 4290 CALL	fpint
    033BF 830C      STD	Y+4,R16
    033C0 831D      STD	Y+5,R17
    033C1 832E      STD	Y+6,R18
    033C2 833F      STD	Y+7,R19
(0093)         gyro[2] = (long)(gyro[2] * sens);
    033C3 8508      LDD	R16,Y+8
    033C4 8519      LDD	R17,Y+9
    033C5 852A      LDD	R18,Y+10
    033C6 853B      LDD	R19,Y+11
    033C7 940E 42CF CALL	long2fp
    033C9 01CE      MOVW	R24,R28
    033CA 9648      ADIW	R24,0x18
    033CB 939A      ST	-Y,R25
    033CC 938A      ST	-Y,R24
    033CD 940E 445F CALL	fpmule1
    033CF 940E 4290 CALL	fpint
    033D1 8708      STD	Y+8,R16
    033D2 8719      STD	Y+9,R17
    033D3 872A      STD	Y+10,R18
    033D4 873B      STD	Y+11,R19
(0094)         dmp_set_gyro_bias(gyro);
    033D5 018E      MOVW	R16,R28
    033D6 940E 263A CALL	_dmp_set_gyro_bias
(0095)         mpu_get_accel_sens(&accel_sens);
    033D8 018E      MOVW	R16,R28
    033D9 5E04      SUBI	R16,0xE4
    033DA 4F1F      SBCI	R17,0xFF
    033DB 940E 1722 CALL	_mpu_get_accel_sens
(0096)         accel[0] *= accel_sens;
    033DD 8C2C      LDD	R2,Y+28
    033DE 8C3D      LDD	R3,Y+29
    033DF 2444      CLR	R4
    033E0 2455      CLR	R5
    033E1 850C      LDD	R16,Y+12
    033E2 851D      LDD	R17,Y+13
    033E3 852E      LDD	R18,Y+14
    033E4 853F      LDD	R19,Y+15
    033E5 925A      ST	-Y,R5
    033E6 924A      ST	-Y,R4
    033E7 923A      ST	-Y,R3
    033E8 922A      ST	-Y,R2
    033E9 940E 40BE CALL	empy32u|empy32s
    033EB 870C      STD	Y+12,R16
    033EC 871D      STD	Y+13,R17
    033ED 872E      STD	Y+14,R18
    033EE 873F      STD	Y+15,R19
(0097)         accel[1] *= accel_sens;
    033EF 8C2C      LDD	R2,Y+28
    033F0 8C3D      LDD	R3,Y+29
    033F1 2444      CLR	R4
    033F2 2455      CLR	R5
    033F3 8908      LDD	R16,Y+16
    033F4 8919      LDD	R17,Y+17
    033F5 892A      LDD	R18,Y+18
    033F6 893B      LDD	R19,Y+19
    033F7 925A      ST	-Y,R5
    033F8 924A      ST	-Y,R4
    033F9 923A      ST	-Y,R3
    033FA 922A      ST	-Y,R2
    033FB 940E 40BE CALL	empy32u|empy32s
    033FD 8B08      STD	Y+16,R16
    033FE 8B19      STD	Y+17,R17
    033FF 8B2A      STD	Y+18,R18
    03400 8B3B      STD	Y+19,R19
(0098)         accel[2] *= accel_sens;
    03401 8C2C      LDD	R2,Y+28
    03402 8C3D      LDD	R3,Y+29
    03403 2444      CLR	R4
    03404 2455      CLR	R5
    03405 890C      LDD	R16,Y+20
    03406 891D      LDD	R17,Y+21
    03407 892E      LDD	R18,Y+22
    03408 893F      LDD	R19,Y+23
    03409 925A      ST	-Y,R5
    0340A 924A      ST	-Y,R4
    0340B 923A      ST	-Y,R3
    0340C 922A      ST	-Y,R2
    0340D 940E 40BE CALL	empy32u|empy32s
    0340F 8B0C      STD	Y+20,R16
    03410 8B1D      STD	Y+21,R17
    03411 8B2E      STD	Y+22,R18
    03412 8B3F      STD	Y+23,R19
(0099)         dmp_set_accel_bias(accel);	 	
    03413 018E      MOVW	R16,R28
    03414 5F04      SUBI	R16,0xF4
    03415 4F1F      SBCI	R17,0xFF
    03416 940E 2854 CALL	_dmp_set_accel_bias
(0100)     }
    03418 966E      ADIW	R28,0x1E
    03419 9159      LD	R21,Y+
    0341A 9149      LD	R20,Y+
    0341B 9508      RET
_MPU6050_Config:
  result               --> R10
    0341C 92AA      ST	-Y,R10
    0341D 92BA      ST	-Y,R11
(0101)  }
(0102) 
(0103) void MPU6050_Config(void)
(0104) {
(0105) 	int result; 
(0106) 	I2C_Config();
    0341E 940E 0D53 CALL	_I2C_Config
(0107) 	result = mpu_init();
    03420 940E 0F8E CALL	_mpu_init
    03422 0158      MOVW	R10,R16
(0108)  	if(!result)
    03423 3000      CPI	R16,0
    03424 0701      CPC	R16,R17
    03425 F009      BEQ	0x3427
    03426 C08C      RJMP	0x34B3
(0109)   	{
(0110) 	  printf("\t\tDMP初始化.....\n\n ");
    03427 EC0D      LDI	R16,0xCD
    03428 E01F      LDI	R17,0xF
    03429 940E 4CC1 CALL	_printf
(0111) 	  
(0112) 	  //mpu_set_sensor
(0113) 	  if(!mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL))
    0342B E708      LDI	R16,0x78
    0342C 940E 17B5 CALL	_mpu_set_sensors
    0342E 3000      CPI	R16,0
    0342F 0701      CPC	R16,R17
    03430 F429      BNE	0x3436
(0114) 	  {
(0115) 	  	 printf("\t传感器设定成功 ......\n\n");
    03431 EB04      LDI	R16,0xB4
    03432 E01F      LDI	R17,0xF
    03433 940E 4CC1 CALL	_printf
(0116) 	  }
    03435 C004      RJMP	0x343A
(0117) 	  else
(0118) 	  {
(0119) 	  	 printf("\t传感器设定失败 ......\n\n");
    03436 E90B      LDI	R16,0x9B
    03437 E01F      LDI	R17,0xF
    03438 940E 4CC1 CALL	_printf
(0120) 	  }
(0121) 	  
(0122) 	  //mpu_configure_fifo
(0123) 	  if(!mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL))
    0343A E708      LDI	R16,0x78
    0343B 940E 1769 CALL	_mpu_configure_fifo
    0343D 0158      MOVW	R10,R16
    0343E 3000      CPI	R16,0
    0343F 0701      CPC	R16,R17
    03440 F429      BNE	0x3446
(0124) 	  {
(0125) 	  	 printf("\tFifo设定成功......\n\n");
    03441 E805      LDI	R16,0x85
    03442 E01F      LDI	R17,0xF
    03443 940E 4CC1 CALL	_printf
(0126) 	  }
    03445 C004      RJMP	0x344A
(0127) 	  else
(0128) 	  {
(0129) 	  	 printf("\tFifo设定失败 ......\n\n");
    03446 E60E      LDI	R16,0x6E
    03447 E01F      LDI	R17,0xF
    03448 940E 4CC1 CALL	_printf
(0130) 	  }
(0131) 	  
(0132) 	  //mpu_set_sample_rate
(0133) 	  if(!mpu_set_sample_rate(DEFAULT_MPU_HZ))
    0344A EC08      LDI	R16,0xC8
    0344B E010      LDI	R17,0
    0344C 940E 1676 CALL	_mpu_set_sample_rate
    0344E 0158      MOVW	R10,R16
    0344F 3000      CPI	R16,0
    03450 0701      CPC	R16,R17
    03451 F429      BNE	0x3457
(0134) 	  {
(0135) 	  	 printf("\tDMP采样速率设定成功 ......\n\n");
    03452 E500      LDI	R16,0x50
    03453 E01F      LDI	R17,0xF
    03454 940E 4CC1 CALL	_printf
(0136) 	  }
    03456 C004      RJMP	0x345B
(0137) 	  else
(0138) 	  {
(0139) 	  	 printf("\tDMP采样速率设定失败 ......\n\n");
    03457 E302      LDI	R16,0x32
    03458 E01F      LDI	R17,0xF
    03459 940E 4CC1 CALL	_printf
(0140) 	  }
(0141) 	  
(0142) 	  //dmp_load_motion_driver_firmvare
(0143) 	  if(!dmp_load_motion_driver_firmware())
    0345B 940E 252C CALL	_dmp_load_motion_driver_firmware
    0345D 0158      MOVW	R10,R16
    0345E 3000      CPI	R16,0
    0345F 0701      CPC	R16,R17
    03460 F429      BNE	0x3466
(0144) 	  {
(0145) 	  	printf("\t开启DMP功能成功 ......\n\n");
    03461 E108      LDI	R16,0x18
    03462 E01F      LDI	R17,0xF
    03463 940E 4CC1 CALL	_printf
(0146) 	  }
    03465 C004      RJMP	0x346A
(0147) 	  else
(0148) 	  {
(0149) 	  	printf("\t开启DMP功能失败 ......\n\n");
    03466 EF0E      LDI	R16,0xFE
    03467 E01E      LDI	R17,0xE
    03468 940E 4CC1 CALL	_printf
(0150) 	  }
(0151) 	  
(0152) 	  //dmp_set_orientation
(0153) 	  if(!dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_orientation)))
    0346A E106      LDI	R16,0x16
    0346B E01E      LDI	R17,0xE
    0346C DEFD      RCALL	_inv_orientation_matrix_to_scalar
    0346D 940E 253F CALL	_dmp_set_orientation
    0346F 0158      MOVW	R10,R16
    03470 3000      CPI	R16,0
    03471 0701      CPC	R16,R17
    03472 F429      BNE	0x3478
(0154) 	  {
(0155) 	  	 printf("\t初始方向设定偏差成功......\n\n");
    03473 EE00      LDI	R16,0xE0
    03474 E01E      LDI	R17,0xE
    03475 940E 4CC1 CALL	_printf
(0156) 	  }
    03477 C004      RJMP	0x347C
(0157) 	  else
(0158) 	  {
(0159) 	  	 printf("\t初始方向设定偏差失败 ......\n\n");
    03478 EC01      LDI	R16,0xC1
    03479 E01E      LDI	R17,0xE
    0347A 940E 4CC1 CALL	_printf
(0160) 	  }
(0161) 	  
(0162) 	  //dmp_enable_feature
(0163) 	  if(!dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP |
    0347C E703      LDI	R16,0x73
    0347D E011      LDI	R17,1
    0347E 940E 2E88 CALL	_dmp_enable_feature
    03480 0158      MOVW	R10,R16
    03481 3000      CPI	R16,0
    03482 0701      CPC	R16,R17
    03483 F429      BNE	0x3489
(0164) 	        DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO |
(0165) 	        DMP_FEATURE_GYRO_CAL))
(0166) 	  {
(0167) 	  	 printf("\tDMP使能成功 ......\n\n");
    03484 EA0B      LDI	R16,0xAB
    03485 E01E      LDI	R17,0xE
    03486 940E 4CC1 CALL	_printf
(0168) 	  }
    03488 C004      RJMP	0x348D
(0169) 	  else
(0170) 	  {
(0171) 	  	 printf("\tDMP使能失败 ......\n\n");
    03489 E905      LDI	R16,0x95
    0348A E01E      LDI	R17,0xE
    0348B 940E 4CC1 CALL	_printf
(0172) 	  }
(0173) 	  
(0174) 	  //dmp_set_fifo_rate
(0175) 	  if(!dmp_set_fifo_rate(DEFAULT_MPU_HZ))
    0348D EC08      LDI	R16,0xC8
    0348E E010      LDI	R17,0
    0348F 940E 2A65 CALL	_dmp_set_fifo_rate
    03491 0158      MOVW	R10,R16
    03492 3000      CPI	R16,0
    03493 0701      CPC	R16,R17
    03494 F429      BNE	0x349A
(0176) 	  {
(0177) 	  	 printf("\tFifo速度设定成功......\n\n");
    03495 E70B      LDI	R16,0x7B
    03496 E01E      LDI	R17,0xE
    03497 940E 4CC1 CALL	_printf
(0178) 	  }
    03499 C004      RJMP	0x349E
(0179) 	  else
(0180) 	  {
(0181) 	  	 printf("\tFifo速度设定失败 ......\n\n");
    0349A E600      LDI	R16,0x60
    0349B E01E      LDI	R17,0xE
    0349C 940E 4CC1 CALL	_printf
(0182) 	  }
(0183) 	  
(0184) 	  if(!mpu_set_dmp_state(1))
    0349E E001      LDI	R16,1
    0349F 940E 2381 CALL	_mpu_set_dmp_state
    034A1 0158      MOVW	R10,R16
    034A2 3000      CPI	R16,0
    034A3 0701      CPC	R16,R17
    034A4 F429      BNE	0x34AA
(0185) 	  {
(0186) 	  	 printf("\tDMP写入驱动成功 ......\n\n");
    034A5 E406      LDI	R16,0x46
    034A6 E01E      LDI	R17,0xE
    034A7 940E 4CC1 CALL	_printf
(0187) 	  }
    034A9 C004      RJMP	0x34AE
(0188) 	  else
(0189) 	  {
(0190) 	  	 printf("\tDMP写入驱动失败 ......\n\n");
    034AA E20C      LDI	R16,0x2C
    034AB E01E      LDI	R17,0xE
    034AC 940E 4CC1 CALL	_printf
(0191) 	  }
(0192) 	  
(0193) 	  run_self_test();
    034AE DEDC      RCALL	_run_self_test
(0194) 	  delay_ms(200);
    034AF EC08      LDI	R16,0xC8
    034B0 E010      LDI	R17,0
    034B1 940E 0D6E CALL	_delay_ms
(0195)    }
    034B3 90B9      LD	R11,Y+
    034B4 90A9      LD	R10,Y+
    034B5 9508      RET
_Get_Angle:
  more                 --> Y,+44
  sensor_timestamp     --> Y,+40
  q3                   --> Y,+36
  q0                   --> Y,+32
  quat                 --> Y,+16
  q2                   --> Y,+12
  q1                   --> Y,+8
  angle_dot            --> R10
  angle                --> R12
    034B6 940E 4118 CALL	push_xgset003C
    034B8 0159      MOVW	R10,R18
    034B9 0168      MOVW	R12,R16
    034BA 97E1      SBIW	R28,0x31
(0196) }
(0197) 
(0198) void Get_Angle(float *angle, float *angle_dot)
(0199) {
(0200)     float q0=1.0f,q1=0.0f,q2=0.0f,q3=0.0f;
    034BB E00A      LDI	R16,0xA
    034BC E011      LDI	R17,1
    034BD 940E 409A CALL	elpm32
    034BF A308      STD	Y+32,R16
    034C0 A319      STD	Y+33,R17
    034C1 A32A      STD	Y+34,R18
    034C2 A33B      STD	Y+35,R19
    034C3 E006      LDI	R16,6
    034C4 E011      LDI	R17,1
    034C5 940E 409A CALL	elpm32
    034C7 8708      STD	Y+8,R16
    034C8 8719      STD	Y+9,R17
    034C9 872A      STD	Y+10,R18
    034CA 873B      STD	Y+11,R19
    034CB E006      LDI	R16,6
    034CC E011      LDI	R17,1
    034CD 940E 409A CALL	elpm32
    034CF 870C      STD	Y+12,R16
    034D0 871D      STD	Y+13,R17
    034D1 872E      STD	Y+14,R18
    034D2 873F      STD	Y+15,R19
    034D3 E006      LDI	R16,6
    034D4 E011      LDI	R17,1
    034D5 940E 409A CALL	elpm32
    034D7 A30C      STD	Y+36,R16
    034D8 A31D      STD	Y+37,R17
    034D9 A32E      STD	Y+38,R18
    034DA A33F      STD	Y+39,R19
(0201) 	unsigned long sensor_timestamp;
(0202) 	unsigned char more;
(0203) 	long quat[4];
(0204) 	dmp_read_fifo(gyro, accel, quat, &sensor_timestamp, &sensors,&more);
    034DB 01CE      MOVW	R24,R28
    034DC 968C      ADIW	R24,0x2C
    034DD 839F      STD	Y+7,R25
    034DE 838E      STD	Y+6,R24
    034DF E380      LDI	R24,0x30
    034E0 E190      LDI	R25,0x10
    034E1 839D      STD	Y+5,R25
    034E2 838C      STD	Y+4,R24
    034E3 01CE      MOVW	R24,R28
    034E4 9688      ADIW	R24,0x28
    034E5 839B      STD	Y+3,R25
    034E6 838A      STD	Y+2,R24
    034E7 01CE      MOVW	R24,R28
    034E8 9640      ADIW	R24,0x10
    034E9 8399      STD	Y+1,R25
    034EA 8388      ST	Y,R24
    034EB E322      LDI	R18,0x32
    034EC E130      LDI	R19,0x10
    034ED E308      LDI	R16,0x38
    034EE E110      LDI	R17,0x10
    034EF 940E 30A9 CALL	_dmp_read_fifo
(0205) 	  
(0206)     if (sensors & INV_WXYZ_QUAT )
    034F1 9020 1030 LDS	R2,sensors
    034F3 9030 1031 LDS	R3,sensors+1
    034F5 FE30      SBRS	R3,0
    034F6 C0C7      RJMP	0x35BE
(0207) 	{
(0208) 	 	q0=quat[0] / q30;
    034F7 8908      LDD	R16,Y+16
    034F8 8919      LDD	R17,Y+17
    034F9 892A      LDD	R18,Y+18
    034FA 893B      LDD	R19,Y+19
    034FB 940E 42CF CALL	long2fp
    034FD 0118      MOVW	R2,R16
    034FE 0129      MOVW	R4,R18
    034FF E002      LDI	R16,2
    03500 E011      LDI	R17,1
    03501 940E 409A CALL	elpm32
    03503 933A      ST	-Y,R19
    03504 932A      ST	-Y,R18
    03505 931A      ST	-Y,R17
    03506 930A      ST	-Y,R16
    03507 0181      MOVW	R16,R2
    03508 0192      MOVW	R18,R4
    03509 940E 42EF CALL	fpdiv2
    0350B A308      STD	Y+32,R16
    0350C A319      STD	Y+33,R17
    0350D A32A      STD	Y+34,R18
    0350E A33B      STD	Y+35,R19
(0209) 		q1=quat[1] / q30;
    0350F 890C      LDD	R16,Y+20
    03510 891D      LDD	R17,Y+21
    03511 892E      LDD	R18,Y+22
    03512 893F      LDD	R19,Y+23
    03513 940E 42CF CALL	long2fp
    03515 0118      MOVW	R2,R16
    03516 0129      MOVW	R4,R18
    03517 E002      LDI	R16,2
    03518 E011      LDI	R17,1
    03519 940E 409A CALL	elpm32
    0351B 933A      ST	-Y,R19
    0351C 932A      ST	-Y,R18
    0351D 931A      ST	-Y,R17
    0351E 930A      ST	-Y,R16
    0351F 0181      MOVW	R16,R2
    03520 0192      MOVW	R18,R4
    03521 940E 42EF CALL	fpdiv2
    03523 8708      STD	Y+8,R16
    03524 8719      STD	Y+9,R17
    03525 872A      STD	Y+10,R18
    03526 873B      STD	Y+11,R19
(0210) 		q2=quat[2] / q30;
    03527 8D08      LDD	R16,Y+24
    03528 8D19      LDD	R17,Y+25
    03529 8D2A      LDD	R18,Y+26
    0352A 8D3B      LDD	R19,Y+27
    0352B 940E 42CF CALL	long2fp
    0352D 0118      MOVW	R2,R16
    0352E 0129      MOVW	R4,R18
    0352F E002      LDI	R16,2
    03530 E011      LDI	R17,1
    03531 940E 409A CALL	elpm32
    03533 933A      ST	-Y,R19
    03534 932A      ST	-Y,R18
    03535 931A      ST	-Y,R17
    03536 930A      ST	-Y,R16
    03537 0181      MOVW	R16,R2
    03538 0192      MOVW	R18,R4
    03539 940E 42EF CALL	fpdiv2
    0353B 870C      STD	Y+12,R16
    0353C 871D      STD	Y+13,R17
    0353D 872E      STD	Y+14,R18
    0353E 873F      STD	Y+15,R19
(0211) 		q3=quat[3] / q30;
    0353F 8D0C      LDD	R16,Y+28
    03540 8D1D      LDD	R17,Y+29
    03541 8D2E      LDD	R18,Y+30
    03542 8D3F      LDD	R19,Y+31
    03543 940E 42CF CALL	long2fp
    03545 0118      MOVW	R2,R16
    03546 0129      MOVW	R4,R18
    03547 E002      LDI	R16,2
    03548 E011      LDI	R17,1
    03549 940E 409A CALL	elpm32
    0354B 933A      ST	-Y,R19
    0354C 932A      ST	-Y,R18
    0354D 931A      ST	-Y,R17
    0354E 930A      ST	-Y,R16
    0354F 0181      MOVW	R16,R2
    03550 0192      MOVW	R18,R4
    03551 940E 42EF CALL	fpdiv2
    03553 A30C      STD	Y+36,R16
    03554 A31D      STD	Y+37,R17
    03555 A32E      STD	Y+38,R18
    03556 A33F      STD	Y+39,R19
(0212)     	*angle = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1); 
    03557 EF0A      LDI	R16,0xFA
    03558 E010      LDI	R17,0
    03559 940E 409A CALL	elpm32
    0355B 01CE      MOVW	R24,R28
    0355C 960C      ADIW	R24,0xC
    0355D 939A      ST	-Y,R25
    0355E 938A      ST	-Y,R24
    0355F 940E 445F CALL	fpmule1
    03561 A70D      STD	Y+45,R16
    03562 A71E      STD	Y+46,R17
    03563 A72F      STD	Y+47,R18
    03564 AB38      STD	Y+48,R19
    03565 EF0E      LDI	R16,0xFE
    03566 E010      LDI	R17,0
    03567 940E 409A CALL	elpm32
    03569 01CE      MOVW	R24,R28
    0356A 9608      ADIW	R24,0x8
    0356B 939A      ST	-Y,R25
    0356C 938A      ST	-Y,R24
    0356D 940E 445F CALL	fpmule1
    0356F 01CE      MOVW	R24,R28
    03570 9608      ADIW	R24,0x8
    03571 939A      ST	-Y,R25
    03572 938A      ST	-Y,R24
    03573 940E 445F CALL	fpmule1
    03575 0118      MOVW	R2,R16
    03576 0129      MOVW	R4,R18
    03577 A50D      LDD	R16,Y+45
    03578 A51E      LDD	R17,Y+46
    03579 A52F      LDD	R18,Y+47
    0357A A938      LDD	R19,Y+48
    0357B 01CE      MOVW	R24,R28
    0357C 960C      ADIW	R24,0xC
    0357D 939A      ST	-Y,R25
    0357E 938A      ST	-Y,R24
    0357F 940E 4474 CALL	fpmule1x
    03581 0181      MOVW	R16,R2
    03582 0192      MOVW	R18,R4
    03583 940E 4278 CALL	fpsub2
    03585 0118      MOVW	R2,R16
    03586 0129      MOVW	R4,R18
    03587 E00A      LDI	R16,0xA
    03588 E011      LDI	R17,1
    03589 940E 409A CALL	elpm32
    0358B 933A      ST	-Y,R19
    0358C 932A      ST	-Y,R18
    0358D 931A      ST	-Y,R17
    0358E 930A      ST	-Y,R16
    0358F 0181      MOVW	R16,R2
    03590 0192      MOVW	R18,R4
    03591 940E 4255 CALL	fpadd2
    03593 8308      ST	Y,R16
    03594 8319      STD	Y+1,R17
    03595 832A      STD	Y+2,R18
    03596 833B      STD	Y+3,R19
    03597 A50D      LDD	R16,Y+45
    03598 A51E      LDD	R17,Y+46
    03599 A52F      LDD	R18,Y+47
    0359A A938      LDD	R19,Y+48
    0359B 01CE      MOVW	R24,R28
    0359C 9684      ADIW	R24,0x24
    0359D 939A      ST	-Y,R25
    0359E 938A      ST	-Y,R24
    0359F 940E 445F CALL	fpmule1
    035A1 0118      MOVW	R2,R16
    035A2 0129      MOVW	R4,R18
    035A3 EF0A      LDI	R16,0xFA
    035A4 E010      LDI	R17,0
    035A5 940E 409A CALL	elpm32
    035A7 01CE      MOVW	R24,R28
    035A8 9680      ADIW	R24,0x20
    035A9 939A      ST	-Y,R25
    035AA 938A      ST	-Y,R24
    035AB 940E 445F CALL	fpmule1
    035AD 01CE      MOVW	R24,R28
    035AE 9608      ADIW	R24,0x8
    035AF 939A      ST	-Y,R25
    035B0 938A      ST	-Y,R24
    035B1 940E 4474 CALL	fpmule1x
    035B3 0181      MOVW	R16,R2
    035B4 0192      MOVW	R18,R4
    035B5 940E 4255 CALL	fpadd2
    035B7 940E 4A25 CALL	_atan2f
    035B9 01F6      MOVW	R30,R12
    035BA 8300      ST	Z,R16
    035BB 8311      STD	Z+1,R17
    035BC 8322      STD	Z+2,R18
    035BD 8333      STD	Z+3,R19
(0213) 	}
(0214) 
(0215) 	if(sensors & INV_XYZ_GYRO)
    035BE 9180 1030 LDS	R24,sensors
    035C0 9190 1031 LDS	R25,sensors+1
    035C2 7780      ANDI	R24,0x70
    035C3 7090      ANDI	R25,0
    035C4 3080      CPI	R24,0
    035C5 0789      CPC	R24,R25
    035C6 F409      BNE	0x35C8
    035C7 C033      RJMP	0x35FB
(0216) 	{
(0217) 	    *angle_dot=-(gyro[0]/Gyro_250_Scale_Factor)*3.14159/180;
    035C8 EF06      LDI	R16,0xF6
    035C9 E010      LDI	R17,0
    035CA 940E 409A CALL	elpm32
    035CC 0118      MOVW	R2,R16
    035CD 0129      MOVW	R4,R18
    035CE 9100 1038 LDS	R16,gyro
    035D0 9110 1039 LDS	R17,gyro+1
    035D2 940E 42C4 CALL	int2fp
    035D4 0138      MOVW	R6,R16
    035D5 0149      MOVW	R8,R18
    035D6 EF02      LDI	R16,0xF2
    035D7 E010      LDI	R17,0
    035D8 940E 409A CALL	elpm32
    035DA 933A      ST	-Y,R19
    035DB 932A      ST	-Y,R18
    035DC 931A      ST	-Y,R17
    035DD 930A      ST	-Y,R16
    035DE 0183      MOVW	R16,R6
    035DF 0194      MOVW	R18,R8
    035E0 940E 42EF CALL	fpdiv2
    035E2 940E 44BB CALL	fpneg2
    035E4 0181      MOVW	R16,R2
    035E5 0192      MOVW	R18,R4
    035E6 940E 4469 CALL	fpmule2
    035E8 0118      MOVW	R2,R16
    035E9 0129      MOVW	R4,R18
    035EA EE0E      LDI	R16,0xEE
    035EB E010      LDI	R17,0
    035EC 940E 409A CALL	elpm32
    035EE 933A      ST	-Y,R19
    035EF 932A      ST	-Y,R18
    035F0 931A      ST	-Y,R17
    035F1 930A      ST	-Y,R16
    035F2 0181      MOVW	R16,R2
    035F3 0192      MOVW	R18,R4
    035F4 940E 42EF CALL	fpdiv2
    035F6 01F5      MOVW	R30,R10
    035F7 8300      ST	Z,R16
    035F8 8311      STD	Z+1,R17
    035F9 8322      STD	Z+2,R18
    035FA 8333      STD	Z+3,R19
(0218) 	}
    035FB 96E1      ADIW	R28,0x31
    035FC 940C 40F2 JMP	pop_xgset003C
FILE: E:\大学课程\平衡小车设计\平衡小车程序final\encoder.c
(0001) #include "iom128v.h"
(0002) #include "encoder.h"
(0003) 
(0004) int Lcount = 0;
(0005) int Rcount = 0;
(0006) int Speed_rl;
(0007) 
(0008) //编码器初始化
(0009) void encoder_init(void)
(0010) {
(0011)  	DDRD &= ~0x03;
_encoder_init:
    035FE B381      IN	R24,0x11
    035FF 7F8C      ANDI	R24,0xFC
    03600 BB81      OUT	0x11,R24
(0012) 	DDRG &= ~((0x01<<3)|(0x01<<4));
    03601 9180 0064 LDS	R24,0x64
    03603 7E87      ANDI	R24,0xE7
    03604 9380 0064 STS	0x64,R24
(0013) 	PORTG |= (0x01<<3)|(0x01<<4);
    03606 9180 0065 LDS	R24,0x65
    03608 6188      ORI	R24,0x18
    03609 9380 0065 STS	0x65,R24
(0014) 	EIMSK |= (1<<INT0) | (1<<INT1);
    0360B B789      IN	R24,0x39
    0360C 6083      ORI	R24,3
    0360D BF89      OUT	0x39,R24
(0015) 	EICRA &= 0xF0;
    0360E 9180 006A LDS	R24,0x6A
    03610 7F80      ANDI	R24,0xF0
    03611 9380 006A STS	0x6A,R24
(0016) 	EICRA |= (1<<ISC01) | (1<<ISC11);
    03613 9180 006A LDS	R24,0x6A
    03615 608A      ORI	R24,0xA
    03616 9380 006A STS	0x6A,R24
    03618 9508      RET
_Get_Speed:
  distance             --> R10
  speed                --> R12
    03619 940E 4118 CALL	push_xgset003C
    0361B 0159      MOVW	R10,R18
    0361C 0168      MOVW	R12,R16
(0017) }
(0018) 
(0019) void Get_Speed(int *speed, int *distance)
(0020) {
(0021)     Speed_rl = (Lcount + Rcount)/2;
    0361D 9020 0FE3 LDS	R2,Rcount
    0361F 9030 0FE4 LDS	R3,Rcount+1
    03621 9100 0FE1 LDS	R16,Lcount
    03623 9110 0FE2 LDS	R17,Lcount+1
    03625 0D02      ADD	R16,R2
    03626 1D13      ADC	R17,R3
    03627 E022      LDI	R18,2
    03628 E030      LDI	R19,0
    03629 940E 3FE2 CALL	div16s
    0362B 9310 103F STS	Speed_rl+1,R17
    0362D 9300 103E STS	Speed_rl,R16
(0022) 	*speed *= 0.7;
    0362F E102      LDI	R16,0x12
    03630 E011      LDI	R17,1
    03631 940E 409A CALL	elpm32
    03633 0118      MOVW	R2,R16
    03634 0129      MOVW	R4,R18
    03635 01F6      MOVW	R30,R12
    03636 8100      LD	R16,Z
    03637 8111      LDD	R17,Z+1
    03638 940E 42C4 CALL	int2fp
    0363A 933A      ST	-Y,R19
    0363B 932A      ST	-Y,R18
    0363C 931A      ST	-Y,R17
    0363D 930A      ST	-Y,R16
    0363E 0181      MOVW	R16,R2
    0363F 0192      MOVW	R18,R4
    03640 940E 4469 CALL	fpmule2
    03642 940E 4290 CALL	fpint
    03644 01F6      MOVW	R30,R12
    03645 8311      STD	Z+1,R17
    03646 8300      ST	Z,R16
(0023) 	*speed += Speed_rl*0.3;
    03647 940E 42C4 CALL	int2fp
    03649 0118      MOVW	R2,R16
    0364A 0129      MOVW	R4,R18
    0364B E00E      LDI	R16,0xE
    0364C E011      LDI	R17,1
    0364D 940E 409A CALL	elpm32
    0364F 0138      MOVW	R6,R16
    03650 0149      MOVW	R8,R18
    03651 9100 103E LDS	R16,Speed_rl
    03653 9110 103F LDS	R17,Speed_rl+1
    03655 940E 42C4 CALL	int2fp
    03657 933A      ST	-Y,R19
    03658 932A      ST	-Y,R18
    03659 931A      ST	-Y,R17
    0365A 930A      ST	-Y,R16
    0365B 0183      MOVW	R16,R6
    0365C 0194      MOVW	R18,R8
    0365D 940E 4481 CALL	fpmule2x
    0365F 0181      MOVW	R16,R2
    03660 0192      MOVW	R18,R4
    03661 940E 4255 CALL	fpadd2
    03663 940E 4290 CALL	fpint
    03665 01F6      MOVW	R30,R12
    03666 8311      STD	Z+1,R17
    03667 8300      ST	Z,R16
(0024) 	*distance = *speed;
    03668 8020      LD	R2,Z
    03669 8031      LDD	R3,Z+1
    0366A 01F5      MOVW	R30,R10
    0366B 8231      STD	Z+1,R3
    0366C 8220      ST	Z,R2
    0366D 940C 40F2 JMP	pop_xgset003C
(0025) }
(0026) 
(0027) void Clean_Speed(void)
(0028) {
(0029)     Lcount = 0;
_Clean_Speed:
    0366F 2422      CLR	R2
    03670 2433      CLR	R3
    03671 9230 0FE2 STS	Lcount+1,R3
    03673 9220 0FE1 STS	Lcount,R2
(0030) 	Rcount = 0;
    03675 9230 0FE4 STS	Rcount+1,R3
    03677 9220 0FE3 STS	Rcount,R2
    03679 9508      RET
_INT_T0:
    0367A 922A      ST	-Y,R2
    0367B 938A      ST	-Y,R24
    0367C 939A      ST	-Y,R25
    0367D B62F      IN	R2,0x3F
    0367E 922A      ST	-Y,R2
(0031) }
(0032) 
(0033) //外部中断0
(0034) #pragma interrupt_handler INT_T0:2
(0035) void INT_T0(void)
(0036) {  
(0037) 	if(PING & (0x01<<3))
    0367F 9020 0063 LDS	R2,0x63
    03681 FE23      SBRS	R2,3
    03682 C00A      RJMP	0x368D
(0038) 		Lcount--;
    03683 9180 0FE1 LDS	R24,Lcount
    03685 9190 0FE2 LDS	R25,Lcount+1
    03687 9701      SBIW	R24,1
    03688 9390 0FE2 STS	Lcount+1,R25
    0368A 9380 0FE1 STS	Lcount,R24
    0368C C009      RJMP	0x3696
(0039) 	else
(0040) 		Lcount++;
    0368D 9180 0FE1 LDS	R24,Lcount
    0368F 9190 0FE2 LDS	R25,Lcount+1
    03691 9601      ADIW	R24,1
    03692 9390 0FE2 STS	Lcount+1,R25
    03694 9380 0FE1 STS	Lcount,R24
    03696 9029      LD	R2,Y+
    03697 BE2F      OUT	0x3F,R2
    03698 9199      LD	R25,Y+
    03699 9189      LD	R24,Y+
    0369A 9029      LD	R2,Y+
    0369B 9518      RETI
_INT_T1:
    0369C 922A      ST	-Y,R2
    0369D 938A      ST	-Y,R24
    0369E 939A      ST	-Y,R25
    0369F B62F      IN	R2,0x3F
    036A0 922A      ST	-Y,R2
(0041) }
(0042) 
(0043) //外部中断1 
(0044) #pragma interrupt_handler INT_T1:3
(0045) void INT_T1(void)
(0046) {  
(0047) 	if(PING & (0x01<<4))
    036A1 9020 0063 LDS	R2,0x63
    036A3 FE24      SBRS	R2,4
    036A4 C00A      RJMP	0x36AF
(0048) 	    Rcount++;
    036A5 9180 0FE3 LDS	R24,Rcount
    036A7 9190 0FE4 LDS	R25,Rcount+1
    036A9 9601      ADIW	R24,1
    036AA 9390 0FE4 STS	Rcount+1,R25
    036AC 9380 0FE3 STS	Rcount,R24
    036AE C009      RJMP	0x36B8
(0049) 	else
(0050) 		Rcount--;
    036AF 9180 0FE3 LDS	R24,Rcount
    036B1 9190 0FE4 LDS	R25,Rcount+1
    036B3 9701      SBIW	R24,1
    036B4 9390 0FE4 STS	Rcount+1,R25
    036B6 9380 0FE3 STS	Rcount,R24
    036B8 9029      LD	R2,Y+
    036B9 BE2F      OUT	0x3F,R2
    036BA 9199      LD	R25,Y+
    036BB 9189      LD	R24,Y+
    036BC 9029      LD	R2,Y+
    036BD 9518      RETI
_UART0_ReportIMU:
  temp                 --> R10
  ctemp                --> R12
  press                --> Y,+18
  tempr                --> Y,+16
  alt                  --> Y,+14
  roll                 --> Y,+12
  pitch                --> Y,+10
  yaw                  --> R14
    036BE 933A      ST	-Y,R19
    036BF 932A      ST	-Y,R18
    036C0 940E 4112 CALL	push_xgsetF0FC
    036C2 0178      MOVW	R14,R16
FILE: E:\大学课程\平衡小车设计\平衡小车程序final\upload.c
(0001) #include"upload.h"
(0002) #include"usart.h"
(0003) 
(0004) //数据通过串口1上传上位机驱动程序
(0005) 
(0006) /**************************实现函数********************************************
(0007) *函数原型:		void UART1_ReportIMU(s16 yaw,s16 pitch,s16 roll
(0008) 				,s16 alt,s16 tempr,s16 press)
(0009) *功　　能:		向上位机发送经过解算后的姿态数据
(0010) 输入参数：
(0011) 		s16 yaw 经过解算后的航向角度。单位为0.1度 0 -> 3600  对应 0 -> 360.0度
(0012) 		s16 pitch 解算得到的俯仰角度，单位 0.1度。-900 - 900 对应 -90.0 -> 90.0 度
(0013) 		s16 roll  解算后得到的横滚角度，单位0.1度。 -1800 -> 1800 对应 -180.0  ->  180.0度
(0014) 		s16 alt   气压高度。 单位0.1米。  范围一个整型变量
(0015) 		s16 tempr 温度 。 单位0.1摄氏度   范围：直到你的电路板不能正常工作
(0016) 		s16 press 气压压力。单位10Pa  一个大气压强在101300pa 这个已经超过一个整型的范围。需要除以10再发给上位机
(0017) 		s16 IMUpersec  姿态解算速率。运算IMUpersec每秒。
(0018) 输出参数：没有	
(0019) *******************************************************************************/
(0020) void UART0_ReportIMU(short int yaw,short int pitch,short int roll,short int alt,short int tempr,short int press)
(0021) {
(0022)  	unsigned int temp=0xaF+2;
    036C3 EB81      LDI	R24,0xB1
    036C4 E090      LDI	R25,0
    036C5 015C      MOVW	R10,R24
(0023) 	char ctemp;
(0024) 	send_char(0xa5);
    036C6 EA05      LDI	R16,0xA5
    036C7 940E 0D43 CALL	_send_char
(0025) 	send_char(0x5a);
    036C9 E50A      LDI	R16,0x5A
    036CA 940E 0D43 CALL	_send_char
(0026) 	send_char(14+2);
    036CC E100      LDI	R16,0x10
    036CD 940E 0D43 CALL	_send_char
(0027) 	send_char(0xA1);
    036CF EA01      LDI	R16,0xA1
    036D0 940E 0D43 CALL	_send_char
(0028) 
(0029) 	if(yaw<0)yaw=32768-yaw;
    036D2 01C7      MOVW	R24,R14
    036D3 3080      CPI	R24,0
    036D4 E0E0      LDI	R30,0
    036D5 079E      CPC	R25,R30
    036D6 F484      BGE	0x36E7
    036D7 011C      MOVW	R2,R24
    036D8 2444      CLR	R4
    036D9 FC37      SBRC	R3,7
    036DA 9440      COM	R4
    036DB 2455      CLR	R5
    036DC FC47      SBRC	R4,7
    036DD 9450      COM	R5
    036DE E040      LDI	R20,0
    036DF E850      LDI	R21,0x80
    036E0 E060      LDI	R22,0
    036E1 E070      LDI	R23,0
    036E2 1942      SUB	R20,R2
    036E3 0953      SBC	R21,R3
    036E4 0964      SBC	R22,R4
    036E5 0975      SBC	R23,R5
    036E6 017A      MOVW	R14,R20
(0030) 	ctemp=yaw>>8;
    036E7 0167      MOVW	R12,R14
    036E8 2CCD      MOV	R12,R13
    036E9 24DD      CLR	R13
    036EA FCC7      SBRC	R12,7
    036EB 94D0      COM	R13
(0031) 	send_char(ctemp);
    036EC 2D0C      MOV	R16,R12
    036ED 940E 0D43 CALL	_send_char
(0032) 	temp+=ctemp;
    036EF 2C2C      MOV	R2,R12
    036F0 2433      CLR	R3
    036F1 0CA2      ADD	R10,R2
    036F2 1CB3      ADC	R11,R3
(0033) 	ctemp=yaw;
    036F3 2CCE      MOV	R12,R14
(0034) 	send_char(ctemp);
    036F4 2D0C      MOV	R16,R12
    036F5 940E 0D43 CALL	_send_char
(0035) 	temp+=ctemp;
    036F7 2C2C      MOV	R2,R12
    036F8 2433      CLR	R3
    036F9 0CA2      ADD	R10,R2
    036FA 1CB3      ADC	R11,R3
(0036) 
(0037) 	if(pitch<0)pitch=32768-pitch;
    036FB 858A      LDD	R24,Y+10
    036FC 859B      LDD	R25,Y+11
    036FD 3080      CPI	R24,0
    036FE E0E0      LDI	R30,0
    036FF 079E      CPC	R25,R30
    03700 F494      BGE	0x3713
    03701 011C      MOVW	R2,R24
    03702 2444      CLR	R4
    03703 FC37      SBRC	R3,7
    03704 9440      COM	R4
    03705 2455      CLR	R5
    03706 FC47      SBRC	R4,7
    03707 9450      COM	R5
    03708 E040      LDI	R20,0
    03709 E850      LDI	R21,0x80
    0370A E060      LDI	R22,0
    0370B E070      LDI	R23,0
    0370C 1942      SUB	R20,R2
    0370D 0953      SBC	R21,R3
    0370E 0964      SBC	R22,R4
    0370F 0975      SBC	R23,R5
    03710 011A      MOVW	R2,R20
    03711 863B      STD	Y+11,R3
    03712 862A      STD	Y+10,R2
(0038) 	ctemp=pitch>>8;
    03713 84CA      LDD	R12,Y+10
    03714 84DB      LDD	R13,Y+11
    03715 2CCD      MOV	R12,R13
    03716 24DD      CLR	R13
    03717 FCC7      SBRC	R12,7
    03718 94D0      COM	R13
(0039) 	send_char(ctemp);
    03719 2D0C      MOV	R16,R12
    0371A 940E 0D43 CALL	_send_char
(0040) 	temp+=ctemp;
    0371C 2C2C      MOV	R2,R12
    0371D 2433      CLR	R3
    0371E 0CA2      ADD	R10,R2
    0371F 1CB3      ADC	R11,R3
(0041) 	ctemp=pitch;
    03720 84CA      LDD	R12,Y+10
    03721 84DB      LDD	R13,Y+11
(0042) 	send_char(ctemp);
    03722 2D0C      MOV	R16,R12
    03723 940E 0D43 CALL	_send_char
(0043) 	temp+=ctemp;
    03725 2C2C      MOV	R2,R12
    03726 2433      CLR	R3
    03727 0CA2      ADD	R10,R2
    03728 1CB3      ADC	R11,R3
(0044) 
(0045) 	if(roll<0)roll=32768-roll;
    03729 858C      LDD	R24,Y+12
    0372A 859D      LDD	R25,Y+13
    0372B 3080      CPI	R24,0
    0372C E0E0      LDI	R30,0
    0372D 079E      CPC	R25,R30
    0372E F494      BGE	0x3741
    0372F 011C      MOVW	R2,R24
    03730 2444      CLR	R4
    03731 FC37      SBRC	R3,7
    03732 9440      COM	R4
    03733 2455      CLR	R5
    03734 FC47      SBRC	R4,7
    03735 9450      COM	R5
    03736 E040      LDI	R20,0
    03737 E850      LDI	R21,0x80
    03738 E060      LDI	R22,0
    03739 E070      LDI	R23,0
    0373A 1942      SUB	R20,R2
    0373B 0953      SBC	R21,R3
    0373C 0964      SBC	R22,R4
    0373D 0975      SBC	R23,R5
    0373E 011A      MOVW	R2,R20
    0373F 863D      STD	Y+13,R3
    03740 862C      STD	Y+12,R2
(0046) 	ctemp=roll>>8;
    03741 84CC      LDD	R12,Y+12
    03742 84DD      LDD	R13,Y+13
    03743 2CCD      MOV	R12,R13
    03744 24DD      CLR	R13
    03745 FCC7      SBRC	R12,7
    03746 94D0      COM	R13
(0047) 	send_char(ctemp);
    03747 2D0C      MOV	R16,R12
    03748 940E 0D43 CALL	_send_char
(0048) 	temp+=ctemp;
    0374A 2C2C      MOV	R2,R12
    0374B 2433      CLR	R3
    0374C 0CA2      ADD	R10,R2
    0374D 1CB3      ADC	R11,R3
(0049) 	ctemp=roll;
    0374E 84CC      LDD	R12,Y+12
    0374F 84DD      LDD	R13,Y+13
(0050) 	send_char(ctemp);
    03750 2D0C      MOV	R16,R12
    03751 940E 0D43 CALL	_send_char
(0051) 	temp+=ctemp;
    03753 2C2C      MOV	R2,R12
    03754 2433      CLR	R3
    03755 0CA2      ADD	R10,R2
    03756 1CB3      ADC	R11,R3
(0052)    	 
(0053) 	if(alt<0)alt=32768-alt;
    03757 858E      LDD	R24,Y+14
    03758 859F      LDD	R25,Y+15
    03759 3080      CPI	R24,0
    0375A E0E0      LDI	R30,0
    0375B 079E      CPC	R25,R30
    0375C F494      BGE	0x376F
    0375D 011C      MOVW	R2,R24
    0375E 2444      CLR	R4
    0375F FC37      SBRC	R3,7
    03760 9440      COM	R4
    03761 2455      CLR	R5
    03762 FC47      SBRC	R4,7
    03763 9450      COM	R5
    03764 E040      LDI	R20,0
    03765 E850      LDI	R21,0x80
    03766 E060      LDI	R22,0
    03767 E070      LDI	R23,0
    03768 1942      SUB	R20,R2
    03769 0953      SBC	R21,R3
    0376A 0964      SBC	R22,R4
    0376B 0975      SBC	R23,R5
    0376C 011A      MOVW	R2,R20
    0376D 863F      STD	Y+15,R3
    0376E 862E      STD	Y+14,R2
(0054) 	ctemp=alt>>8;
    0376F 84CE      LDD	R12,Y+14
    03770 84DF      LDD	R13,Y+15
    03771 2CCD      MOV	R12,R13
    03772 24DD      CLR	R13
    03773 FCC7      SBRC	R12,7
    03774 94D0      COM	R13
(0055) 	send_char(ctemp);
    03775 2D0C      MOV	R16,R12
    03776 940E 0D43 CALL	_send_char
(0056) 	temp+=ctemp;
    03778 2C2C      MOV	R2,R12
    03779 2433      CLR	R3
    0377A 0CA2      ADD	R10,R2
    0377B 1CB3      ADC	R11,R3
(0057) 	ctemp=alt;
    0377C 84CE      LDD	R12,Y+14
    0377D 84DF      LDD	R13,Y+15
(0058) 	send_char(ctemp);
    0377E 2D0C      MOV	R16,R12
    0377F 940E 0D43 CALL	_send_char
(0059) 	temp+=ctemp;
    03781 2C2C      MOV	R2,R12
    03782 2433      CLR	R3
    03783 0CA2      ADD	R10,R2
    03784 1CB3      ADC	R11,R3
(0060) 
(0061) 	if(tempr<0)tempr=32768-tempr;
    03785 8988      LDD	R24,Y+16
    03786 8999      LDD	R25,Y+17
    03787 3080      CPI	R24,0
    03788 E0E0      LDI	R30,0
    03789 079E      CPC	R25,R30
    0378A F494      BGE	0x379D
    0378B 011C      MOVW	R2,R24
    0378C 2444      CLR	R4
    0378D FC37      SBRC	R3,7
    0378E 9440      COM	R4
    0378F 2455      CLR	R5
    03790 FC47      SBRC	R4,7
    03791 9450      COM	R5
    03792 E040      LDI	R20,0
    03793 E850      LDI	R21,0x80
    03794 E060      LDI	R22,0
    03795 E070      LDI	R23,0
    03796 1942      SUB	R20,R2
    03797 0953      SBC	R21,R3
    03798 0964      SBC	R22,R4
    03799 0975      SBC	R23,R5
    0379A 011A      MOVW	R2,R20
    0379B 8A39      STD	Y+17,R3
    0379C 8A28      STD	Y+16,R2
(0062) 	ctemp=tempr>>8;
    0379D 88C8      LDD	R12,Y+16
    0379E 88D9      LDD	R13,Y+17
    0379F 2CCD      MOV	R12,R13
    037A0 24DD      CLR	R13
    037A1 FCC7      SBRC	R12,7
    037A2 94D0      COM	R13
(0063) 	send_char(ctemp);
    037A3 2D0C      MOV	R16,R12
    037A4 940E 0D43 CALL	_send_char
(0064) 	temp+=ctemp;
    037A6 2C2C      MOV	R2,R12
    037A7 2433      CLR	R3
    037A8 0CA2      ADD	R10,R2
    037A9 1CB3      ADC	R11,R3
(0065) 	ctemp=tempr;
    037AA 88C8      LDD	R12,Y+16
    037AB 88D9      LDD	R13,Y+17
(0066) 	send_char(ctemp);
    037AC 2D0C      MOV	R16,R12
    037AD 940E 0D43 CALL	_send_char
(0067) 	temp+=ctemp;
    037AF 2C2C      MOV	R2,R12
    037B0 2433      CLR	R3
    037B1 0CA2      ADD	R10,R2
    037B2 1CB3      ADC	R11,R3
(0068) 
(0069) 	if(press<0)press=32768-press;
    037B3 898A      LDD	R24,Y+18
    037B4 899B      LDD	R25,Y+19
    037B5 3080      CPI	R24,0
    037B6 E0E0      LDI	R30,0
    037B7 079E      CPC	R25,R30
    037B8 F494      BGE	0x37CB
    037B9 011C      MOVW	R2,R24
    037BA 2444      CLR	R4
    037BB FC37      SBRC	R3,7
    037BC 9440      COM	R4
    037BD 2455      CLR	R5
    037BE FC47      SBRC	R4,7
    037BF 9450      COM	R5
    037C0 E040      LDI	R20,0
    037C1 E850      LDI	R21,0x80
    037C2 E060      LDI	R22,0
    037C3 E070      LDI	R23,0
    037C4 1942      SUB	R20,R2
    037C5 0953      SBC	R21,R3
    037C6 0964      SBC	R22,R4
    037C7 0975      SBC	R23,R5
    037C8 011A      MOVW	R2,R20
    037C9 8A3B      STD	Y+19,R3
    037CA 8A2A      STD	Y+18,R2
(0070) 	ctemp=press>>8;
    037CB 88CA      LDD	R12,Y+18
    037CC 88DB      LDD	R13,Y+19
    037CD 2CCD      MOV	R12,R13
    037CE 24DD      CLR	R13
    037CF FCC7      SBRC	R12,7
    037D0 94D0      COM	R13
(0071) 	send_char(ctemp);
    037D1 2D0C      MOV	R16,R12
    037D2 940E 0D43 CALL	_send_char
(0072) 	temp+=ctemp;
    037D4 2C2C      MOV	R2,R12
    037D5 2433      CLR	R3
    037D6 0CA2      ADD	R10,R2
    037D7 1CB3      ADC	R11,R3
(0073) 	ctemp=press;
    037D8 88CA      LDD	R12,Y+18
    037D9 88DB      LDD	R13,Y+19
(0074) 	send_char(ctemp);
    037DA 2D0C      MOV	R16,R12
    037DB 940E 0D43 CALL	_send_char
(0075) 	temp+=ctemp;
    037DD 2C2C      MOV	R2,R12
    037DE 2433      CLR	R3
    037DF 0CA2      ADD	R10,R2
    037E0 1CB3      ADC	R11,R3
(0076) 
(0077) 	send_char(temp%256);
    037E1 0185      MOVW	R16,R10
    037E2 7010      ANDI	R17,0
    037E3 940E 0D43 CALL	_send_char
(0078) 	send_char(0xaa);
    037E5 EA0A      LDI	R16,0xAA
    037E6 940E 0D43 CALL	_send_char
    037E8 940E 4107 CALL	pop_xgsetF0FC
    037EA 9622      ADIW	R28,2
    037EB 9508      RET
_UART0_ReportMotion:
  temp                 --> R10
  ctemp                --> R12
  hz                   --> Y,+24
  hy                   --> Y,+22
  hx                   --> Y,+20
  gz                   --> Y,+18
  gy                   --> Y,+16
  gx                   --> Y,+14
  az                   --> Y,+12
  ay                   --> Y,+10
  ax                   --> R14
    037EC 933A      ST	-Y,R19
    037ED 932A      ST	-Y,R18
    037EE 940E 4112 CALL	push_xgsetF0FC
    037F0 0178      MOVW	R14,R16
(0079) }
(0080) 
(0081) /**************************实现函数********************************************
(0082) *函数原型:		void UART1_ReportMotion(int16_t ax,int16_t ay,int16_t az,int16_t gx,int16_t gy,int16_t gz,
(0083) 					int16_t hx,int16_t hy,int16_t hz)
(0084) *功　　能:		向上位机发送当前传感器的输出值
(0085) 输入参数：
(0086) 	int16_t ax  加速度 X轴ADC输出 范围 ：一个有符号整型
(0087) 	int16_t ay  加速度 Y轴ADC输出 范围 ：一个有符号整型
(0088) 	int16_t az  加速度 Z轴ADC输出 范围 ：一个有符号整型
(0089) 	int16_t gx  陀螺仪 X轴ADC输出 范围 ：一个有符号整型
(0090) 	int16_t gy  陀螺仪 Y轴ADC输出 范围 ：一个有符号整型
(0091) 	int16_t gz  陀螺仪 Z轴ADC输出 范围 ：一个有符号整型
(0092) 	int16_t hx  磁罗盘 X轴ADC输出 范围 ：一个有符号整型
(0093) 	int16_t hy  磁罗盘 Y轴ADC输出 范围 ：一个有符号整型
(0094) 	int16_t hz  磁罗盘 Z轴ADC输出 范围 ：一个有符号整型
(0095) 	
(0096) 输出参数：没有	
(0097) *******************************************************************************/
(0098) void UART0_ReportMotion(int ax,int ay,int az,int gx,int gy,int gz,int hx,int hy,int hz)
(0099) {
(0100)  	unsigned int temp=0xaF+9;
    037F1 EB88      LDI	R24,0xB8
    037F2 E090      LDI	R25,0
    037F3 015C      MOVW	R10,R24
(0101) 	char ctemp;
(0102) 	send_char(0xa5);
    037F4 EA05      LDI	R16,0xA5
    037F5 940E 0D43 CALL	_send_char
(0103) 	send_char(0x5a);
    037F7 E50A      LDI	R16,0x5A
    037F8 940E 0D43 CALL	_send_char
(0104) 	send_char(14+8);
    037FA E106      LDI	R16,0x16
    037FB 940E 0D43 CALL	_send_char
(0105) 	send_char(0xA2);
    037FD EA02      LDI	R16,0xA2
    037FE 940E 0D43 CALL	_send_char
(0106) 
(0107) 	if(ax<0)ax=32768-ax;
    03800 01C7      MOVW	R24,R14
    03801 3080      CPI	R24,0
    03802 E0E0      LDI	R30,0
    03803 079E      CPC	R25,R30
    03804 F484      BGE	0x3815
    03805 011C      MOVW	R2,R24
    03806 2444      CLR	R4
    03807 FC37      SBRC	R3,7
    03808 9440      COM	R4
    03809 2455      CLR	R5
    0380A FC47      SBRC	R4,7
    0380B 9450      COM	R5
    0380C E040      LDI	R20,0
    0380D E850      LDI	R21,0x80
    0380E E060      LDI	R22,0
    0380F E070      LDI	R23,0
    03810 1942      SUB	R20,R2
    03811 0953      SBC	R21,R3
    03812 0964      SBC	R22,R4
    03813 0975      SBC	R23,R5
    03814 017A      MOVW	R14,R20
(0108) 	ctemp=ax>>8;
    03815 0167      MOVW	R12,R14
    03816 2CCD      MOV	R12,R13
    03817 24DD      CLR	R13
    03818 FCC7      SBRC	R12,7
    03819 94D0      COM	R13
(0109) 	send_char(ctemp);
    0381A 2D0C      MOV	R16,R12
    0381B 940E 0D43 CALL	_send_char
(0110) 	temp+=ctemp;
    0381D 2C2C      MOV	R2,R12
    0381E 2433      CLR	R3
    0381F 0CA2      ADD	R10,R2
    03820 1CB3      ADC	R11,R3
(0111) 	ctemp=ax;
    03821 2CCE      MOV	R12,R14
(0112) 	send_char(ctemp);
    03822 2D0C      MOV	R16,R12
    03823 940E 0D43 CALL	_send_char
(0113) 	temp+=ctemp;
    03825 2C2C      MOV	R2,R12
    03826 2433      CLR	R3
    03827 0CA2      ADD	R10,R2
    03828 1CB3      ADC	R11,R3
(0114) 
(0115) 	if(ay<0)ay=32768-ay;
    03829 858A      LDD	R24,Y+10
    0382A 859B      LDD	R25,Y+11
    0382B 3080      CPI	R24,0
    0382C E0E0      LDI	R30,0
    0382D 079E      CPC	R25,R30
    0382E F494      BGE	0x3841
    0382F 011C      MOVW	R2,R24
    03830 2444      CLR	R4
    03831 FC37      SBRC	R3,7
    03832 9440      COM	R4
    03833 2455      CLR	R5
    03834 FC47      SBRC	R4,7
    03835 9450      COM	R5
    03836 E040      LDI	R20,0
    03837 E850      LDI	R21,0x80
    03838 E060      LDI	R22,0
    03839 E070      LDI	R23,0
    0383A 1942      SUB	R20,R2
    0383B 0953      SBC	R21,R3
    0383C 0964      SBC	R22,R4
    0383D 0975      SBC	R23,R5
    0383E 011A      MOVW	R2,R20
    0383F 863B      STD	Y+11,R3
    03840 862A      STD	Y+10,R2
(0116) 	ctemp=ay>>8;
    03841 84CA      LDD	R12,Y+10
    03842 84DB      LDD	R13,Y+11
    03843 2CCD      MOV	R12,R13
    03844 24DD      CLR	R13
    03845 FCC7      SBRC	R12,7
    03846 94D0      COM	R13
(0117) 	send_char(ctemp);
    03847 2D0C      MOV	R16,R12
    03848 940E 0D43 CALL	_send_char
(0118) 	temp+=ctemp;
    0384A 2C2C      MOV	R2,R12
    0384B 2433      CLR	R3
    0384C 0CA2      ADD	R10,R2
    0384D 1CB3      ADC	R11,R3
(0119) 	ctemp=ay;
    0384E 84CA      LDD	R12,Y+10
    0384F 84DB      LDD	R13,Y+11
(0120) 	send_char(ctemp);
    03850 2D0C      MOV	R16,R12
    03851 940E 0D43 CALL	_send_char
(0121) 	temp+=ctemp;
    03853 2C2C      MOV	R2,R12
    03854 2433      CLR	R3
    03855 0CA2      ADD	R10,R2
    03856 1CB3      ADC	R11,R3
(0122) 
(0123) 	if(az<0)az=32768-az;
    03857 858C      LDD	R24,Y+12
    03858 859D      LDD	R25,Y+13
    03859 3080      CPI	R24,0
    0385A E0E0      LDI	R30,0
    0385B 079E      CPC	R25,R30
    0385C F494      BGE	0x386F
    0385D 011C      MOVW	R2,R24
    0385E 2444      CLR	R4
    0385F FC37      SBRC	R3,7
    03860 9440      COM	R4
    03861 2455      CLR	R5
    03862 FC47      SBRC	R4,7
    03863 9450      COM	R5
    03864 E040      LDI	R20,0
    03865 E850      LDI	R21,0x80
    03866 E060      LDI	R22,0
    03867 E070      LDI	R23,0
    03868 1942      SUB	R20,R2
    03869 0953      SBC	R21,R3
    0386A 0964      SBC	R22,R4
    0386B 0975      SBC	R23,R5
    0386C 011A      MOVW	R2,R20
    0386D 863D      STD	Y+13,R3
    0386E 862C      STD	Y+12,R2
(0124) 	ctemp=az>>8;
    0386F 84CC      LDD	R12,Y+12
    03870 84DD      LDD	R13,Y+13
    03871 2CCD      MOV	R12,R13
    03872 24DD      CLR	R13
    03873 FCC7      SBRC	R12,7
    03874 94D0      COM	R13
(0125) 	send_char(ctemp);
    03875 2D0C      MOV	R16,R12
    03876 940E 0D43 CALL	_send_char
(0126) 	temp+=ctemp;
    03878 2C2C      MOV	R2,R12
    03879 2433      CLR	R3
    0387A 0CA2      ADD	R10,R2
    0387B 1CB3      ADC	R11,R3
(0127) 	ctemp=az;
    0387C 84CC      LDD	R12,Y+12
    0387D 84DD      LDD	R13,Y+13
(0128) 	send_char(ctemp);
    0387E 2D0C      MOV	R16,R12
    0387F 940E 0D43 CALL	_send_char
(0129) 	temp+=ctemp;
    03881 2C2C      MOV	R2,R12
    03882 2433      CLR	R3
    03883 0CA2      ADD	R10,R2
    03884 1CB3      ADC	R11,R3
(0130) 
(0131) 	if(gx<0)gx=32768-gx;
    03885 858E      LDD	R24,Y+14
    03886 859F      LDD	R25,Y+15
    03887 3080      CPI	R24,0
    03888 E0E0      LDI	R30,0
    03889 079E      CPC	R25,R30
    0388A F494      BGE	0x389D
    0388B 011C      MOVW	R2,R24
    0388C 2444      CLR	R4
    0388D FC37      SBRC	R3,7
    0388E 9440      COM	R4
    0388F 2455      CLR	R5
    03890 FC47      SBRC	R4,7
    03891 9450      COM	R5
    03892 E040      LDI	R20,0
    03893 E850      LDI	R21,0x80
    03894 E060      LDI	R22,0
    03895 E070      LDI	R23,0
    03896 1942      SUB	R20,R2
    03897 0953      SBC	R21,R3
    03898 0964      SBC	R22,R4
    03899 0975      SBC	R23,R5
    0389A 011A      MOVW	R2,R20
    0389B 863F      STD	Y+15,R3
    0389C 862E      STD	Y+14,R2
(0132) 	ctemp=gx>>8;
    0389D 84CE      LDD	R12,Y+14
    0389E 84DF      LDD	R13,Y+15
    0389F 2CCD      MOV	R12,R13
    038A0 24DD      CLR	R13
    038A1 FCC7      SBRC	R12,7
    038A2 94D0      COM	R13
(0133) 	send_char(ctemp);
    038A3 2D0C      MOV	R16,R12
    038A4 940E 0D43 CALL	_send_char
(0134) 	temp+=ctemp;
    038A6 2C2C      MOV	R2,R12
    038A7 2433      CLR	R3
    038A8 0CA2      ADD	R10,R2
    038A9 1CB3      ADC	R11,R3
(0135) 	ctemp=gx;
    038AA 84CE      LDD	R12,Y+14
    038AB 84DF      LDD	R13,Y+15
(0136) 	send_char(ctemp);
    038AC 2D0C      MOV	R16,R12
    038AD 940E 0D43 CALL	_send_char
(0137) 	temp+=ctemp;
    038AF 2C2C      MOV	R2,R12
    038B0 2433      CLR	R3
    038B1 0CA2      ADD	R10,R2
    038B2 1CB3      ADC	R11,R3
(0138) 
(0139) 	if(gy<0)gy=32768-gy;
    038B3 8988      LDD	R24,Y+16
    038B4 8999      LDD	R25,Y+17
    038B5 3080      CPI	R24,0
    038B6 E0E0      LDI	R30,0
    038B7 079E      CPC	R25,R30
    038B8 F494      BGE	0x38CB
    038B9 011C      MOVW	R2,R24
    038BA 2444      CLR	R4
    038BB FC37      SBRC	R3,7
    038BC 9440      COM	R4
    038BD 2455      CLR	R5
    038BE FC47      SBRC	R4,7
    038BF 9450      COM	R5
    038C0 E040      LDI	R20,0
    038C1 E850      LDI	R21,0x80
    038C2 E060      LDI	R22,0
    038C3 E070      LDI	R23,0
    038C4 1942      SUB	R20,R2
    038C5 0953      SBC	R21,R3
    038C6 0964      SBC	R22,R4
    038C7 0975      SBC	R23,R5
    038C8 011A      MOVW	R2,R20
    038C9 8A39      STD	Y+17,R3
    038CA 8A28      STD	Y+16,R2
(0140) 	ctemp=gy>>8;
    038CB 88C8      LDD	R12,Y+16
    038CC 88D9      LDD	R13,Y+17
    038CD 2CCD      MOV	R12,R13
    038CE 24DD      CLR	R13
    038CF FCC7      SBRC	R12,7
    038D0 94D0      COM	R13
(0141) 	send_char(ctemp);
    038D1 2D0C      MOV	R16,R12
    038D2 940E 0D43 CALL	_send_char
(0142) 	temp+=ctemp;
    038D4 2C2C      MOV	R2,R12
    038D5 2433      CLR	R3
    038D6 0CA2      ADD	R10,R2
    038D7 1CB3      ADC	R11,R3
(0143) 	ctemp=gy;
    038D8 88C8      LDD	R12,Y+16
    038D9 88D9      LDD	R13,Y+17
(0144) 	send_char(ctemp);
    038DA 2D0C      MOV	R16,R12
    038DB 940E 0D43 CALL	_send_char
(0145) 	temp+=ctemp;
    038DD 2C2C      MOV	R2,R12
    038DE 2433      CLR	R3
    038DF 0CA2      ADD	R10,R2
    038E0 1CB3      ADC	R11,R3
(0146) 
(0147) 	if(gz<0)gz=32768-gz;
    038E1 898A      LDD	R24,Y+18
    038E2 899B      LDD	R25,Y+19
    038E3 3080      CPI	R24,0
    038E4 E0E0      LDI	R30,0
    038E5 079E      CPC	R25,R30
    038E6 F494      BGE	0x38F9
    038E7 011C      MOVW	R2,R24
    038E8 2444      CLR	R4
    038E9 FC37      SBRC	R3,7
    038EA 9440      COM	R4
    038EB 2455      CLR	R5
    038EC FC47      SBRC	R4,7
    038ED 9450      COM	R5
    038EE E040      LDI	R20,0
    038EF E850      LDI	R21,0x80
    038F0 E060      LDI	R22,0
    038F1 E070      LDI	R23,0
    038F2 1942      SUB	R20,R2
    038F3 0953      SBC	R21,R3
    038F4 0964      SBC	R22,R4
    038F5 0975      SBC	R23,R5
    038F6 011A      MOVW	R2,R20
    038F7 8A3B      STD	Y+19,R3
    038F8 8A2A      STD	Y+18,R2
(0148) 	ctemp=gz>>8;
    038F9 88CA      LDD	R12,Y+18
    038FA 88DB      LDD	R13,Y+19
    038FB 2CCD      MOV	R12,R13
    038FC 24DD      CLR	R13
    038FD FCC7      SBRC	R12,7
    038FE 94D0      COM	R13
(0149) 	send_char(ctemp);
    038FF 2D0C      MOV	R16,R12
    03900 940E 0D43 CALL	_send_char
(0150) 	temp+=ctemp;
    03902 2C2C      MOV	R2,R12
    03903 2433      CLR	R3
    03904 0CA2      ADD	R10,R2
    03905 1CB3      ADC	R11,R3
(0151) 	ctemp=gz;
    03906 88CA      LDD	R12,Y+18
    03907 88DB      LDD	R13,Y+19
(0152) 	send_char(ctemp);
    03908 2D0C      MOV	R16,R12
    03909 940E 0D43 CALL	_send_char
(0153) 	temp+=ctemp;
    0390B 2C2C      MOV	R2,R12
    0390C 2433      CLR	R3
    0390D 0CA2      ADD	R10,R2
    0390E 1CB3      ADC	R11,R3
(0154)  
(0155) 	if(hx<0)hx=32768-hx;
    0390F 898C      LDD	R24,Y+20
    03910 899D      LDD	R25,Y+21
    03911 3080      CPI	R24,0
    03912 E0E0      LDI	R30,0
    03913 079E      CPC	R25,R30
    03914 F494      BGE	0x3927
    03915 011C      MOVW	R2,R24
    03916 2444      CLR	R4
    03917 FC37      SBRC	R3,7
    03918 9440      COM	R4
    03919 2455      CLR	R5
    0391A FC47      SBRC	R4,7
    0391B 9450      COM	R5
    0391C E040      LDI	R20,0
    0391D E850      LDI	R21,0x80
    0391E E060      LDI	R22,0
    0391F E070      LDI	R23,0
    03920 1942      SUB	R20,R2
    03921 0953      SBC	R21,R3
    03922 0964      SBC	R22,R4
    03923 0975      SBC	R23,R5
    03924 011A      MOVW	R2,R20
    03925 8A3D      STD	Y+21,R3
    03926 8A2C      STD	Y+20,R2
(0156) 	ctemp=hx>>8;
    03927 88CC      LDD	R12,Y+20
    03928 88DD      LDD	R13,Y+21
    03929 2CCD      MOV	R12,R13
    0392A 24DD      CLR	R13
    0392B FCC7      SBRC	R12,7
    0392C 94D0      COM	R13
(0157) 	send_char(ctemp);
    0392D 2D0C      MOV	R16,R12
    0392E 940E 0D43 CALL	_send_char
(0158) 	temp+=ctemp;
    03930 2C2C      MOV	R2,R12
    03931 2433      CLR	R3
    03932 0CA2      ADD	R10,R2
    03933 1CB3      ADC	R11,R3
(0159) 	ctemp=hx;
    03934 88CC      LDD	R12,Y+20
    03935 88DD      LDD	R13,Y+21
(0160) 	send_char(ctemp);
    03936 2D0C      MOV	R16,R12
    03937 940E 0D43 CALL	_send_char
(0161) 	temp+=ctemp;
    03939 2C2C      MOV	R2,R12
    0393A 2433      CLR	R3
    0393B 0CA2      ADD	R10,R2
    0393C 1CB3      ADC	R11,R3
(0162) 
(0163) 	if(hy<0)hy=32768-hy;
    0393D 898E      LDD	R24,Y+22
    0393E 899F      LDD	R25,Y+23
    0393F 3080      CPI	R24,0
    03940 E0E0      LDI	R30,0
    03941 079E      CPC	R25,R30
    03942 F494      BGE	0x3955
    03943 011C      MOVW	R2,R24
    03944 2444      CLR	R4
    03945 FC37      SBRC	R3,7
    03946 9440      COM	R4
    03947 2455      CLR	R5
    03948 FC47      SBRC	R4,7
    03949 9450      COM	R5
    0394A E040      LDI	R20,0
    0394B E850      LDI	R21,0x80
    0394C E060      LDI	R22,0
    0394D E070      LDI	R23,0
    0394E 1942      SUB	R20,R2
    0394F 0953      SBC	R21,R3
    03950 0964      SBC	R22,R4
    03951 0975      SBC	R23,R5
    03952 011A      MOVW	R2,R20
    03953 8A3F      STD	Y+23,R3
    03954 8A2E      STD	Y+22,R2
(0164) 	ctemp=hy>>8;
    03955 88CE      LDD	R12,Y+22
    03956 88DF      LDD	R13,Y+23
    03957 2CCD      MOV	R12,R13
    03958 24DD      CLR	R13
    03959 FCC7      SBRC	R12,7
    0395A 94D0      COM	R13
(0165) 	send_char(ctemp);
    0395B 2D0C      MOV	R16,R12
    0395C 940E 0D43 CALL	_send_char
(0166) 	temp+=ctemp;
    0395E 2C2C      MOV	R2,R12
    0395F 2433      CLR	R3
    03960 0CA2      ADD	R10,R2
    03961 1CB3      ADC	R11,R3
(0167) 	ctemp=hy;
    03962 88CE      LDD	R12,Y+22
    03963 88DF      LDD	R13,Y+23
(0168) 	send_char(ctemp);
    03964 2D0C      MOV	R16,R12
    03965 940E 0D43 CALL	_send_char
(0169) 	temp+=ctemp;
    03967 2C2C      MOV	R2,R12
    03968 2433      CLR	R3
    03969 0CA2      ADD	R10,R2
    0396A 1CB3      ADC	R11,R3
(0170) 
(0171) 	if(hz<0)hz=32768-hz;
    0396B 8D88      LDD	R24,Y+24
    0396C 8D99      LDD	R25,Y+25
    0396D 3080      CPI	R24,0
    0396E E0E0      LDI	R30,0
    0396F 079E      CPC	R25,R30
    03970 F494      BGE	0x3983
    03971 011C      MOVW	R2,R24
    03972 2444      CLR	R4
    03973 FC37      SBRC	R3,7
    03974 9440      COM	R4
    03975 2455      CLR	R5
    03976 FC47      SBRC	R4,7
    03977 9450      COM	R5
    03978 E040      LDI	R20,0
    03979 E850      LDI	R21,0x80
    0397A E060      LDI	R22,0
    0397B E070      LDI	R23,0
    0397C 1942      SUB	R20,R2
    0397D 0953      SBC	R21,R3
    0397E 0964      SBC	R22,R4
    0397F 0975      SBC	R23,R5
    03980 011A      MOVW	R2,R20
    03981 8E39      STD	Y+25,R3
    03982 8E28      STD	Y+24,R2
(0172) 	ctemp=hz>>8;
    03983 8CC8      LDD	R12,Y+24
    03984 8CD9      LDD	R13,Y+25
    03985 2CCD      MOV	R12,R13
    03986 24DD      CLR	R13
    03987 FCC7      SBRC	R12,7
    03988 94D0      COM	R13
(0173) 	send_char(ctemp);
    03989 2D0C      MOV	R16,R12
    0398A 940E 0D43 CALL	_send_char
(0174) 	temp+=ctemp;
    0398C 2C2C      MOV	R2,R12
    0398D 2433      CLR	R3
    0398E 0CA2      ADD	R10,R2
    0398F 1CB3      ADC	R11,R3
(0175) 	ctemp=hz;
    03990 8CC8      LDD	R12,Y+24
    03991 8CD9      LDD	R13,Y+25
(0176) 	send_char(ctemp);
    03992 2D0C      MOV	R16,R12
    03993 940E 0D43 CALL	_send_char
(0177) 	temp+=ctemp;
    03995 2C2C      MOV	R2,R12
    03996 2433      CLR	R3
    03997 0CA2      ADD	R10,R2
    03998 1CB3      ADC	R11,R3
(0178) 
(0179) 	send_char(temp%256);
    03999 0185      MOVW	R16,R10
    0399A 7010      ANDI	R17,0
    0399B 940E 0D43 CALL	_send_char
(0180) 	send_char(0xaa);
    0399D EA0A      LDI	R16,0xAA
    0399E 940E 0D43 CALL	_send_char
    039A0 940E 4107 CALL	pop_xgsetF0FC
    039A2 9622      ADIW	R28,2
    039A3 9508      RET
_PID_angle_init:
  target               --> R22
  Kd                   --> R10
  Ki                   --> R12
  Kp                   --> R14
  pid                  --> R20
    039A4 940E 4112 CALL	push_xgsetF0FC
    039A6 0179      MOVW	R14,R18
    039A7 01A8      MOVW	R20,R16
    039A8 84CA      LDD	R12,Y+10
    039A9 84DB      LDD	R13,Y+11
    039AA 84AC      LDD	R10,Y+12
    039AB 84BD      LDD	R11,Y+13
    039AC 856E      LDD	R22,Y+14
    039AD 857F      LDD	R23,Y+15
FILE: E:\大学课程\平衡小车设计\平衡小车程序final\pid.c
(0001) #include "iom128v.h"
(0002) #include "pid.h"
(0003) 
(0004) void PID_angle_init(PID_ANGLGE *pid, unsigned int Kp, unsigned int Ki, unsigned int Kd, unsigned int target)
(0005) {
(0006) 	pid->target = target;
    039AE 018B      MOVW	R16,R22
    039AF 940E 42C2 CALL	uint2fp
    039B1 01FA      MOVW	R30,R20
    039B2 8300      ST	Z,R16
    039B3 8311      STD	Z+1,R17
    039B4 8322      STD	Z+2,R18
    039B5 8333      STD	Z+3,R19
(0007) 	pid->integral = 0;	
    039B6 E10E      LDI	R16,0x1E
    039B7 E011      LDI	R17,1
    039B8 940E 409A CALL	elpm32
    039BA 01FA      MOVW	R30,R20
    039BB 8304      STD	Z+4,R16
    039BC 8315      STD	Z+5,R17
    039BD 8326      STD	Z+6,R18
    039BE 8337      STD	Z+7,R19
(0008) 	pid->Kp = Kp;
    039BF 0187      MOVW	R16,R14
    039C0 940E 42C2 CALL	uint2fp
    039C2 01FA      MOVW	R30,R20
    039C3 8700      STD	Z+8,R16
    039C4 8711      STD	Z+9,R17
    039C5 8722      STD	Z+10,R18
    039C6 8733      STD	Z+11,R19
(0009) 	pid->Ki = Ki;
    039C7 0186      MOVW	R16,R12
    039C8 940E 42C2 CALL	uint2fp
    039CA 01FA      MOVW	R30,R20
    039CB 8704      STD	Z+12,R16
    039CC 8715      STD	Z+13,R17
    039CD 8726      STD	Z+14,R18
    039CE 8737      STD	Z+15,R19
(0010) 	pid->Kd = Kd;
    039CF 0185      MOVW	R16,R10
    039D0 940E 42C2 CALL	uint2fp
    039D2 01FA      MOVW	R30,R20
    039D3 8B00      STD	Z+16,R16
    039D4 8B11      STD	Z+17,R17
    039D5 8B22      STD	Z+18,R18
    039D6 8B33      STD	Z+19,R19
    039D7 940C 4107 JMP	pop_xgsetF0FC
_PID_Proc:
  offset               --> Y,+0
  differential         --> Y,+10
  current              --> Y,+6
  pid                  --> R20
    039D9 933A      ST	-Y,R19
    039DA 932A      ST	-Y,R18
    039DB 934A      ST	-Y,R20
    039DC 935A      ST	-Y,R21
    039DD 01A8      MOVW	R20,R16
    039DE 9724      SBIW	R28,4
(0011) }
(0012) 
(0013) int PID_Proc(PID_ANGLGE *pid, float current, float differential)
(0014) {
(0015) 	float offset;
(0016) 
(0017) 	offset = pid->target - current;
    039DF 01FA      MOVW	R30,R20
    039E0 8100      LD	R16,Z
    039E1 8111      LDD	R17,Z+1
    039E2 8122      LDD	R18,Z+2
    039E3 8133      LDD	R19,Z+3
    039E4 01CE      MOVW	R24,R28
    039E5 9606      ADIW	R24,6
    039E6 939A      ST	-Y,R25
    039E7 938A      ST	-Y,R24
    039E8 940E 426E CALL	fpsub1
    039EA 8308      ST	Y,R16
    039EB 8319      STD	Y+1,R17
    039EC 832A      STD	Y+2,R18
    039ED 833B      STD	Y+3,R19
(0018) 	pid->integral += offset;
    039EE 01CA      MOVW	R24,R20
    039EF 9604      ADIW	R24,4
    039F0 011C      MOVW	R2,R24
    039F1 01FC      MOVW	R30,R24
    039F2 8100      LD	R16,Z
    039F3 8111      LDD	R17,Z+1
    039F4 8122      LDD	R18,Z+2
    039F5 8133      LDD	R19,Z+3
    039F6 01CE      MOVW	R24,R28
    039F7 939A      ST	-Y,R25
    039F8 938A      ST	-Y,R24
    039F9 940E 423E CALL	fpadd1
    039FB 01F1      MOVW	R30,R2
    039FC 8300      ST	Z,R16
    039FD 8311      STD	Z+1,R17
    039FE 8322      STD	Z+2,R18
    039FF 8333      STD	Z+3,R19
(0019) 
(0020) 	return (int)(pid->Kp*offset + pid->Ki*pid->integral + pid->Kd*differential);
    03A00 01FA      MOVW	R30,R20
    03A01 8500      LDD	R16,Z+8
    03A02 8511      LDD	R17,Z+9
    03A03 8522      LDD	R18,Z+10
    03A04 8533      LDD	R19,Z+11
    03A05 01CE      MOVW	R24,R28
    03A06 939A      ST	-Y,R25
    03A07 938A      ST	-Y,R24
    03A08 940E 445F CALL	fpmule1
    03A0A 0118      MOVW	R2,R16
    03A0B 0129      MOVW	R4,R18
    03A0C 01FA      MOVW	R30,R20
    03A0D 8504      LDD	R16,Z+12
    03A0E 8515      LDD	R17,Z+13
    03A0F 8526      LDD	R18,Z+14
    03A10 8537      LDD	R19,Z+15
    03A11 01CF      MOVW	R24,R30
    03A12 9604      ADIW	R24,4
    03A13 939A      ST	-Y,R25
    03A14 938A      ST	-Y,R24
    03A15 940E 4474 CALL	fpmule1x
    03A17 0181      MOVW	R16,R2
    03A18 0192      MOVW	R18,R4
    03A19 940E 4255 CALL	fpadd2
    03A1B 0118      MOVW	R2,R16
    03A1C 0129      MOVW	R4,R18
    03A1D 01FA      MOVW	R30,R20
    03A1E 8900      LDD	R16,Z+16
    03A1F 8911      LDD	R17,Z+17
    03A20 8922      LDD	R18,Z+18
    03A21 8933      LDD	R19,Z+19
    03A22 01CE      MOVW	R24,R28
    03A23 960A      ADIW	R24,0xA
    03A24 939A      ST	-Y,R25
    03A25 938A      ST	-Y,R24
    03A26 940E 4474 CALL	fpmule1x
    03A28 0181      MOVW	R16,R2
    03A29 0192      MOVW	R18,R4
    03A2A 940E 4255 CALL	fpadd2
    03A2C 940E 4290 CALL	fpint
    03A2E 9624      ADIW	R28,4
    03A2F 9159      LD	R21,Y+
    03A30 9149      LD	R20,Y+
    03A31 9622      ADIW	R28,2
    03A32 9508      RET
_PID_speed_init:
  target               --> R10
  kd                   --> Y,+12
  ki                   --> Y,+8
  kp                   --> Y,+4
  pid                  --> R20
    03A33 933A      ST	-Y,R19
    03A34 932A      ST	-Y,R18
    03A35 940E 411D CALL	push_xgset300C
    03A37 01A8      MOVW	R20,R16
    03A38 88A8      LDD	R10,Y+16
    03A39 88B9      LDD	R11,Y+17
(0021) }
(0022) 
(0023) void PID_speed_init(PID_SPEED *pid,float kp,float ki,float kd,int target)
(0024) {
(0025) 	pid->kp = kp;
    03A3A 802C      LDD	R2,Y+4
    03A3B 803D      LDD	R3,Y+5
    03A3C 804E      LDD	R4,Y+6
    03A3D 805F      LDD	R5,Y+7
    03A3E 01FA      MOVW	R30,R20
    03A3F 8220      ST	Z,R2
    03A40 8231      STD	Z+1,R3
    03A41 8242      STD	Z+2,R4
    03A42 8253      STD	Z+3,R5
(0026) 	pid->ki = ki;
    03A43 8428      LDD	R2,Y+8
    03A44 8439      LDD	R3,Y+9
    03A45 844A      LDD	R4,Y+10
    03A46 845B      LDD	R5,Y+11
    03A47 9634      ADIW	R30,4
    03A48 8220      ST	Z,R2
    03A49 8231      STD	Z+1,R3
    03A4A 8242      STD	Z+2,R4
    03A4B 8253      STD	Z+3,R5
(0027) 	pid->kd = kd;
    03A4C 842C      LDD	R2,Y+12
    03A4D 843D      LDD	R3,Y+13
    03A4E 844E      LDD	R4,Y+14
    03A4F 845F      LDD	R5,Y+15
    03A50 01FA      MOVW	R30,R20
    03A51 8620      STD	Z+8,R2
    03A52 8631      STD	Z+9,R3
    03A53 8642      STD	Z+10,R4
    03A54 8653      STD	Z+11,R5
(0028) 	pid->target = target;
    03A55 0185      MOVW	R16,R10
    03A56 940E 42C4 CALL	int2fp
    03A58 01FA      MOVW	R30,R20
    03A59 8704      STD	Z+12,R16
    03A5A 8715      STD	Z+13,R17
    03A5B 8726      STD	Z+14,R18
    03A5C 8737      STD	Z+15,R19
(0029) 	pid->enote[PRESENT] = 0;
    03A5D E10E      LDI	R16,0x1E
    03A5E E011      LDI	R17,1
    03A5F 940E 409A CALL	elpm32
    03A61 01FA      MOVW	R30,R20
    03A62 8F04      STD	Z+28,R16
    03A63 8F15      STD	Z+29,R17
    03A64 8F26      STD	Z+30,R18
    03A65 8F37      STD	Z+31,R19
(0030) 	pid->enote[LAST] = 0;
    03A66 E10E      LDI	R16,0x1E
    03A67 E011      LDI	R17,1
    03A68 940E 409A CALL	elpm32
    03A6A 01FA      MOVW	R30,R20
    03A6B 8F00      STD	Z+24,R16
    03A6C 8F11      STD	Z+25,R17
    03A6D 8F22      STD	Z+26,R18
    03A6E 8F33      STD	Z+27,R19
(0031) 	pid->enote[BEFORE] = 0;
    03A6F E10E      LDI	R16,0x1E
    03A70 E011      LDI	R17,1
    03A71 940E 409A CALL	elpm32
    03A73 01FA      MOVW	R30,R20
    03A74 8B04      STD	Z+20,R16
    03A75 8B15      STD	Z+21,R17
    03A76 8B26      STD	Z+22,R18
    03A77 8B37      STD	Z+23,R19
(0032) 	pid->sumerr = 0;
    03A78 E10A      LDI	R16,0x1A
    03A79 E011      LDI	R17,1
    03A7A 940E 409A CALL	elpm32
    03A7C 01FA      MOVW	R30,R20
    03A7D A300      STD	Z+32,R16
    03A7E A311      STD	Z+33,R17
    03A7F A322      STD	Z+34,R18
    03A80 A333      STD	Z+35,R19
    03A81 940E 4122 CALL	pop_xgset300C
    03A83 9622      ADIW	R28,2
    03A84 9508      RET
_PID_Inc:
  fbv                  --> R12
  pid                  --> R10
    03A85 940E 414D CALL	push_xgsetF03C
    03A87 0169      MOVW	R12,R18
    03A88 0158      MOVW	R10,R16
    03A89 9728      SBIW	R28,0x8
(0033) }
(0034) 
(0035) int PID_Inc(PID_SPEED *pid, int fbv)
(0036) {
(0037)     pid->enote[BEFORE] = pid->enote[LAST];
    03A8A 01F5      MOVW	R30,R10
    03A8B 8C20      LDD	R2,Z+24
    03A8C 8C31      LDD	R3,Z+25
    03A8D 8C42      LDD	R4,Z+26
    03A8E 8C53      LDD	R5,Z+27
    03A8F 8A24      STD	Z+20,R2
    03A90 8A35      STD	Z+21,R3
    03A91 8A46      STD	Z+22,R4
    03A92 8A57      STD	Z+23,R5
(0038) 	pid->enote[LAST] = pid->enote[PRESENT];
    03A93 8C24      LDD	R2,Z+28
    03A94 8C35      LDD	R3,Z+29
    03A95 8C46      LDD	R4,Z+30
    03A96 8C57      LDD	R5,Z+31
    03A97 8E20      STD	Z+24,R2
    03A98 8E31      STD	Z+25,R3
    03A99 8E42      STD	Z+26,R4
    03A9A 8E53      STD	Z+27,R5
(0039) 	pid->enote[PRESENT] = (pid->target - fbv);
    03A9B 8424      LDD	R2,Z+12
    03A9C 8435      LDD	R3,Z+13
    03A9D 8446      LDD	R4,Z+14
    03A9E 8457      LDD	R5,Z+15
    03A9F 0186      MOVW	R16,R12
    03AA0 940E 42C4 CALL	int2fp
    03AA2 933A      ST	-Y,R19
    03AA3 932A      ST	-Y,R18
    03AA4 931A      ST	-Y,R17
    03AA5 930A      ST	-Y,R16
    03AA6 0181      MOVW	R16,R2
    03AA7 0192      MOVW	R18,R4
    03AA8 940E 4278 CALL	fpsub2
    03AAA 01F5      MOVW	R30,R10
    03AAB 8F04      STD	Z+28,R16
    03AAC 8F15      STD	Z+29,R17
    03AAD 8F26      STD	Z+30,R18
    03AAE 8F37      STD	Z+31,R19
(0040) 	
(0041) 	pid->lastcontrol = pid->kp*(pid->enote[PRESENT] - pid->enote[LAST]) + pid->ki*pid->enote[PRESENT] + pid->kd*(pid->enote[PRESENT] - 2*pid->enote[LAST] +pid->enote[BEFORE]); 
    03AAF 967C      ADIW	R30,0x1C
    03AB0 8020      LD	R2,Z
    03AB1 8031      LDD	R3,Z+1
    03AB2 8042      LDD	R4,Z+2
    03AB3 8053      LDD	R5,Z+3
    03AB4 8228      ST	Y,R2
    03AB5 8239      STD	Y+1,R3
    03AB6 824A      STD	Y+2,R4
    03AB7 825B      STD	Y+3,R5
    03AB8 01F5      MOVW	R30,R10
    03AB9 9678      ADIW	R30,0x18
    03ABA 8020      LD	R2,Z
    03ABB 8031      LDD	R3,Z+1
    03ABC 8042      LDD	R4,Z+2
    03ABD 8053      LDD	R5,Z+3
    03ABE 822C      STD	Y+4,R2
    03ABF 823D      STD	Y+5,R3
    03AC0 824E      STD	Y+6,R4
    03AC1 825F      STD	Y+7,R5
    03AC2 01F5      MOVW	R30,R10
    03AC3 8020      LD	R2,Z
    03AC4 8031      LDD	R3,Z+1
    03AC5 8042      LDD	R4,Z+2
    03AC6 8053      LDD	R5,Z+3
    03AC7 8108      LD	R16,Y
    03AC8 8119      LDD	R17,Y+1
    03AC9 812A      LDD	R18,Y+2
    03ACA 813B      LDD	R19,Y+3
    03ACB 01CE      MOVW	R24,R28
    03ACC 9604      ADIW	R24,4
    03ACD 939A      ST	-Y,R25
    03ACE 938A      ST	-Y,R24
    03ACF 940E 4283 CALL	fpsub1x
    03AD1 0181      MOVW	R16,R2
    03AD2 0192      MOVW	R18,R4
    03AD3 940E 4469 CALL	fpmule2
    03AD5 0118      MOVW	R2,R16
    03AD6 0129      MOVW	R4,R18
    03AD7 01F5      MOVW	R30,R10
    03AD8 8104      LDD	R16,Z+4
    03AD9 8115      LDD	R17,Z+5
    03ADA 8126      LDD	R18,Z+6
    03ADB 8137      LDD	R19,Z+7
    03ADC 01CE      MOVW	R24,R28
    03ADD 939A      ST	-Y,R25
    03ADE 938A      ST	-Y,R24
    03ADF 940E 4474 CALL	fpmule1x
    03AE1 0181      MOVW	R16,R2
    03AE2 0192      MOVW	R18,R4
    03AE3 940E 4255 CALL	fpadd2
    03AE5 0118      MOVW	R2,R16
    03AE6 0129      MOVW	R4,R18
    03AE7 01F5      MOVW	R30,R10
    03AE8 9638      ADIW	R30,0x8
    03AE9 8060      LD	R6,Z
    03AEA 8071      LDD	R7,Z+1
    03AEB 8082      LDD	R8,Z+2
    03AEC 8093      LDD	R9,Z+3
    03AED 8148      LD	R20,Y
    03AEE 8159      LDD	R21,Y+1
    03AEF 816A      LDD	R22,Y+2
    03AF0 817B      LDD	R23,Y+3
    03AF1 E106      LDI	R16,0x16
    03AF2 E011      LDI	R17,1
    03AF3 940E 409A CALL	elpm32
    03AF5 01CE      MOVW	R24,R28
    03AF6 9604      ADIW	R24,4
    03AF7 939A      ST	-Y,R25
    03AF8 938A      ST	-Y,R24
    03AF9 940E 4474 CALL	fpmule1x
    03AFB 018A      MOVW	R16,R20
    03AFC 019B      MOVW	R18,R22
    03AFD 940E 4278 CALL	fpsub2
    03AFF 01C5      MOVW	R24,R10
    03B00 9644      ADIW	R24,0x14
    03B01 939A      ST	-Y,R25
    03B02 938A      ST	-Y,R24
    03B03 940E 4248 CALL	fpadd1x
    03B05 0183      MOVW	R16,R6
    03B06 0194      MOVW	R18,R8
    03B07 940E 4481 CALL	fpmule2x
    03B09 0181      MOVW	R16,R2
    03B0A 0192      MOVW	R18,R4
    03B0B 940E 4255 CALL	fpadd2
    03B0D 01F5      MOVW	R30,R10
    03B0E 8B00      STD	Z+16,R16
    03B0F 8B11      STD	Z+17,R17
    03B10 8B22      STD	Z+18,R18
    03B11 8B33      STD	Z+19,R19
(0042) 	return ((int)pid->lastcontrol);
    03B12 940E 4290 CALL	fpint
    03B14 9628      ADIW	R28,0x8
    03B15 940C 4156 JMP	pop_xgsetF03C
FILE: E:\大学课程\平衡小车设计\平衡小车程序final\timer.c
(0001) #include "iom128v.h"
(0002) #include "timer.h"
(0003) 
(0004) //T3定时器初始化，用于定时
(0005) //1分频,最大计时时间65535*(1/16000000)*1000 = 4.0959375ms
(0006) //则定时1ms计数值为 65535*((4.0959375-1)/4.0959375) = 49535
(0007) void timer3_init(void)
(0008) {
(0009)  	 TCCR3A=0X00;
_timer3_init:
    03B17 2422      CLR	R2
    03B18 9220 008B STS	0x8B,R2
(0010) 	 TCCR3B=(1<<CS30);
    03B1A E081      LDI	R24,1
    03B1B 9380 008A STS	0x8A,R24
(0011) 	 TCNT3=49535;
    03B1D E78F      LDI	R24,0x7F
    03B1E EC91      LDI	R25,0xC1
    03B1F 9390 0089 STS	0x89,R25
    03B21 9380 0088 STS	0x88,R24
(0012) 	 ETIMSK|=(1<<TOIE3);
FILE: <library>
    03B23 9180 007D LDS	R24,0x7D
    03B25 6084      ORI	R24,4
    03B26 9380 007D STS	0x7D,R24
    03B28 9508      RET
__print:
    03B29 940E 3FCD CALL	push_arg4
    03B2B 940E 4112 CALL	push_xgsetF0FC
    03B2D 976C      SBIW	R28,0x1C
    03B2E 2400      CLR	R0
    03B2F 2411      CLR	R1
    03B30 8A1F      STD	Y+23,R1
    03B31 8A0E      STD	Y+22,R0
    03B32 C456      RJMP	0x3F89
    03B33 A5E8      LDD	R30,Y+40
    03B34 A5F9      LDD	R31,Y+41
    03B35 8180      LD	R24,Z
    03B36 3285      CPI	R24,0x25
    03B37 F059      BEQ	0x3B43
    03B38 8100      LD	R16,Z
    03B39 A1EE      LDD	R30,Y+38
    03B3A A1FF      LDD	R31,Y+39
    03B3B 940E 415F CALL	xicallx
    03B3D 898E      LDD	R24,Y+22
    03B3E 899F      LDD	R25,Y+23
    03B3F 9601      ADIW	R24,1
    03B40 8B9F      STD	Y+23,R25
    03B41 8B8E      STD	Y+22,R24
    03B42 C441      RJMP	0x3F84
    03B43 2400      CLR	R0
    03B44 2411      CLR	R1
    03B45 8A1D      STD	Y+21,R1
    03B46 8A0C      STD	Y+20,R0
    03B47 EF8F      LDI	R24,0xFF
    03B48 EF9F      LDI	R25,0xFF
    03B49 8F99      STD	Y+25,R25
    03B4A 8F88      STD	Y+24,R24
    03B4B 24AA      CLR	R10
    03B4C 24BB      CLR	R11
    03B4D E440      LDI	R20,0x40
    03B4E E150      LDI	R21,0x10
    03B4F E260      LDI	R22,0x20
    03B50 A588      LDD	R24,Y+40
    03B51 A599      LDD	R25,Y+41
    03B52 9601      ADIW	R24,1
    03B53 A799      STD	Y+41,R25
    03B54 A788      STD	Y+40,R24
    03B55 24CC      CLR	R12
    03B56 24DD      CLR	R13
    03B57 A5E8      LDD	R30,Y+40
    03B58 A5F9      LDD	R31,Y+41
    03B59 80E0      LD	R14,Z
    03B5A 24FF      CLR	R15
    03B5B 01C7      MOVW	R24,R14
    03B5C 3280      CPI	R24,0x20
    03B5D E0E0      LDI	R30,0
    03B5E 079E      CPC	R25,R30
    03B5F F119      BEQ	0x3B83
    03B60 3283      CPI	R24,0x23
    03B61 E0E0      LDI	R30,0
    03B62 079E      CPC	R25,R30
    03B63 F091      BEQ	0x3B76
    03B64 3280      CPI	R24,0x20
    03B65 E0E0      LDI	R30,0
    03B66 079E      CPC	R25,R30
    03B67 F124      BLT	0x3B8C
    03B68 01C7      MOVW	R24,R14
    03B69 328B      CPI	R24,0x2B
    03B6A E0E0      LDI	R30,0
    03B6B 079E      CPC	R25,R30
    03B6C F089      BEQ	0x3B7E
    03B6D 328D      CPI	R24,0x2D
    03B6E E0E0      LDI	R30,0
    03B6F 079E      CPC	R25,R30
    03B70 F049      BEQ	0x3B7A
    03B71 3380      CPI	R24,0x30
    03B72 E0E0      LDI	R30,0
    03B73 079E      CPC	R25,R30
    03B74 F099      BEQ	0x3B88
    03B75 C016      RJMP	0x3B8C
    03B76 01C5      MOVW	R24,R10
    03B77 6081      ORI	R24,1
    03B78 015C      MOVW	R10,R24
    03B79 C015      RJMP	0x3B8F
    03B7A 01C5      MOVW	R24,R10
    03B7B 6084      ORI	R24,4
    03B7C 015C      MOVW	R10,R24
    03B7D C011      RJMP	0x3B8F
    03B7E 01C5      MOVW	R24,R10
    03B7F 6088      ORI	R24,0x8
    03B80 015C      MOVW	R10,R24
    03B81 E26B      LDI	R22,0x2B
    03B82 C00C      RJMP	0x3B8F
    03B83 01C5      MOVW	R24,R10
    03B84 6088      ORI	R24,0x8
    03B85 015C      MOVW	R10,R24
    03B86 E260      LDI	R22,0x20
    03B87 C007      RJMP	0x3B8F
    03B88 01C5      MOVW	R24,R10
    03B89 6180      ORI	R24,0x10
    03B8A 015C      MOVW	R10,R24
    03B8B C003      RJMP	0x3B8F
    03B8C E081      LDI	R24,1
    03B8D E090      LDI	R25,0
    03B8E 016C      MOVW	R12,R24
    03B8F 20CC      TST	R12
    03B90 F411      BNE	0x3B93
    03B91 20DD      TST	R13
    03B92 F009      BEQ	0x3B94
    03B93 C006      RJMP	0x3B9A
    03B94 A588      LDD	R24,Y+40
    03B95 A599      LDD	R25,Y+41
    03B96 9601      ADIW	R24,1
    03B97 A799      STD	Y+41,R25
    03B98 A788      STD	Y+40,R24
    03B99 CFBD      RJMP	0x3B57
    03B9A A5E8      LDD	R30,Y+40
    03B9B A5F9      LDD	R31,Y+41
    03B9C 8100      LD	R16,Z
    03B9D 2711      CLR	R17
    03B9E 940E 4878 CALL	_isdigit
    03BA0 3000      CPI	R16,0
    03BA1 0701      CPC	R16,R17
    03BA2 F0B9      BEQ	0x3BBA
    03BA3 A508      LDD	R16,Y+40
    03BA4 A519      LDD	R17,Y+41
    03BA5 940E 44D9 CALL	_atoi
    03BA7 8B1D      STD	Y+21,R17
    03BA8 8B0C      STD	Y+20,R16
    03BA9 C005      RJMP	0x3BAF
    03BAA A588      LDD	R24,Y+40
    03BAB A599      LDD	R25,Y+41
    03BAC 9601      ADIW	R24,1
    03BAD A799      STD	Y+41,R25
    03BAE A788      STD	Y+40,R24
    03BAF A5E8      LDD	R30,Y+40
    03BB0 A5F9      LDD	R31,Y+41
    03BB1 8100      LD	R16,Z
    03BB2 2711      CLR	R17
    03BB3 940E 4878 CALL	_isdigit
    03BB5 0168      MOVW	R12,R16
    03BB6 3000      CPI	R16,0
    03BB7 0701      CPC	R16,R17
    03BB8 F789      BNE	0x3BAA
    03BB9 C015      RJMP	0x3BCF
    03BBA A5E8      LDD	R30,Y+40
    03BBB A5F9      LDD	R31,Y+41
    03BBC 8180      LD	R24,Z
    03BBD 328A      CPI	R24,0x2A
    03BBE F481      BNE	0x3BCF
    03BBF A58A      LDD	R24,Y+42
    03BC0 A59B      LDD	R25,Y+43
    03BC1 9602      ADIW	R24,2
    03BC2 A79B      STD	Y+43,R25
    03BC3 A78A      STD	Y+42,R24
    03BC4 01FC      MOVW	R30,R24
    03BC5 9732      SBIW	R30,2
    03BC6 8020      LD	R2,Z
    03BC7 8031      LDD	R3,Z+1
    03BC8 8A3D      STD	Y+21,R3
    03BC9 8A2C      STD	Y+20,R2
    03BCA A588      LDD	R24,Y+40
    03BCB A599      LDD	R25,Y+41
    03BCC 9601      ADIW	R24,1
    03BCD A799      STD	Y+41,R25
    03BCE A788      STD	Y+40,R24
    03BCF A5E8      LDD	R30,Y+40
    03BD0 A5F9      LDD	R31,Y+41
    03BD1 8180      LD	R24,Z
    03BD2 328E      CPI	R24,0x2E
    03BD3 F009      BEQ	0x3BD5
    03BD4 C03A      RJMP	0x3C0F
    03BD5 01CF      MOVW	R24,R30
    03BD6 9601      ADIW	R24,1
    03BD7 A799      STD	Y+41,R25
    03BD8 A788      STD	Y+40,R24
    03BD9 01FC      MOVW	R30,R24
    03BDA 8100      LD	R16,Z
    03BDB 2711      CLR	R17
    03BDC 940E 4878 CALL	_isdigit
    03BDE 0168      MOVW	R12,R16
    03BDF 3000      CPI	R16,0
    03BE0 0701      CPC	R16,R17
    03BE1 F0C1      BEQ	0x3BFA
    03BE2 A508      LDD	R16,Y+40
    03BE3 A519      LDD	R17,Y+41
    03BE4 940E 44D9 CALL	_atoi
    03BE6 0168      MOVW	R12,R16
    03BE7 8ED9      STD	Y+25,R13
    03BE8 8EC8      STD	Y+24,R12
    03BE9 C005      RJMP	0x3BEF
    03BEA A588      LDD	R24,Y+40
    03BEB A599      LDD	R25,Y+41
    03BEC 9601      ADIW	R24,1
    03BED A799      STD	Y+41,R25
    03BEE A788      STD	Y+40,R24
    03BEF A5E8      LDD	R30,Y+40
    03BF0 A5F9      LDD	R31,Y+41
    03BF1 8100      LD	R16,Z
    03BF2 2711      CLR	R17
    03BF3 940E 4878 CALL	_isdigit
    03BF5 0168      MOVW	R12,R16
    03BF6 3000      CPI	R16,0
    03BF7 0701      CPC	R16,R17
    03BF8 F789      BNE	0x3BEA
    03BF9 C015      RJMP	0x3C0F
    03BFA A5E8      LDD	R30,Y+40
    03BFB A5F9      LDD	R31,Y+41
    03BFC 8180      LD	R24,Z
    03BFD 328A      CPI	R24,0x2A
    03BFE F481      BNE	0x3C0F
    03BFF A58A      LDD	R24,Y+42
    03C00 A59B      LDD	R25,Y+43
    03C01 9602      ADIW	R24,2
    03C02 A79B      STD	Y+43,R25
    03C03 A78A      STD	Y+42,R24
    03C04 01FC      MOVW	R30,R24
    03C05 9732      SBIW	R30,2
    03C06 8020      LD	R2,Z
    03C07 8031      LDD	R3,Z+1
    03C08 8E39      STD	Y+25,R3
    03C09 8E28      STD	Y+24,R2
    03C0A A588      LDD	R24,Y+40
    03C0B A599      LDD	R25,Y+41
    03C0C 9601      ADIW	R24,1
    03C0D A799      STD	Y+41,R25
    03C0E A788      STD	Y+40,R24
    03C0F A5E8      LDD	R30,Y+40
    03C10 A5F9      LDD	R31,Y+41
    03C11 8180      LD	R24,Z
    03C12 368C      CPI	R24,0x6C
    03C13 F439      BNE	0x3C1B
    03C14 01CF      MOVW	R24,R30
    03C15 9601      ADIW	R24,1
    03C16 A799      STD	Y+41,R25
    03C17 A788      STD	Y+40,R24
    03C18 01C5      MOVW	R24,R10
    03C19 6082      ORI	R24,2
    03C1A 015C      MOVW	R10,R24
    03C1B A5E8      LDD	R30,Y+40
    03C1C A5F9      LDD	R31,Y+41
    03C1D 80C0      LD	R12,Z
    03C1E 24DD      CLR	R13
    03C1F 01C6      MOVW	R24,R12
    03C20 3583      CPI	R24,0x53
    03C21 E0E0      LDI	R30,0
    03C22 079E      CPC	R25,R30
    03C23 F409      BNE	0x3C25
    03C24 C18A      RJMP	0x3DAF
    03C25 E583      LDI	R24,0x53
    03C26 158C      CP	R24,R12
    03C27 059D      CPC	R25,R13
    03C28 F064      BLT	0x3C35
    03C29 01C6      MOVW	R24,R12
    03C2A 3485      CPI	R24,0x45
    03C2B E0E0      LDI	R30,0
    03C2C 079E      CPC	R25,R30
    03C2D F409      BNE	0x3C2F
    03C2E C307      RJMP	0x3F36
    03C2F 3487      CPI	R24,0x47
    03C30 E0E0      LDI	R30,0
    03C31 079E      CPC	R25,R30
    03C32 F409      BNE	0x3C34
    03C33 C30B      RJMP	0x3F3F
    03C34 C043      RJMP	0x3C78
    03C35 01C6      MOVW	R24,R12
    03C36 3588      CPI	R24,0x58
    03C37 E0E0      LDI	R30,0
    03C38 079E      CPC	R25,R30
    03C39 F409      BNE	0x3C3B
    03C3A C07E      RJMP	0x3CB9
    03C3B 3588      CPI	R24,0x58
    03C3C E0E0      LDI	R30,0
    03C3D 079E      CPC	R25,R30
    03C3E F40C      BGE	0x3C40
    03C3F C038      RJMP	0x3C78
    03C40 01C6      MOVW	R24,R12
    03C41 3683      CPI	R24,0x63
    03C42 E0E0      LDI	R30,0
    03C43 079E      CPC	R25,R30
    03C44 F409      BNE	0x3C46
    03C45 C145      RJMP	0x3D8B
    03C46 3684      CPI	R24,0x64
    03C47 E0E0      LDI	R30,0
    03C48 079E      CPC	R25,R30
    03C49 F409      BNE	0x3C4B
    03C4A C03A      RJMP	0x3C85
    03C4B 3685      CPI	R24,0x65
    03C4C E0E0      LDI	R30,0
    03C4D 079E      CPC	R25,R30
    03C4E F409      BNE	0x3C50
    03C4F C2E3      RJMP	0x3F33
    03C50 3686      CPI	R24,0x66
    03C51 E0E0      LDI	R30,0
    03C52 079E      CPC	R25,R30
    03C53 F409      BNE	0x3C55
    03C54 C2E4      RJMP	0x3F39
    03C55 3687      CPI	R24,0x67
    03C56 E0E0      LDI	R30,0
    03C57 079E      CPC	R25,R30
    03C58 F409      BNE	0x3C5A
    03C59 C2E2      RJMP	0x3F3C
    03C5A 3689      CPI	R24,0x69
    03C5B E0E0      LDI	R30,0
    03C5C 079E      CPC	R25,R30
    03C5D F139      BEQ	0x3C85
    03C5E 368F      CPI	R24,0x6F
    03C5F E0E0      LDI	R30,0
    03C60 079E      CPC	R25,R30
    03C61 F409      BNE	0x3C63
    03C62 C056      RJMP	0x3CB9
    03C63 3780      CPI	R24,0x70
    03C64 E0E0      LDI	R30,0
    03C65 079E      CPC	R25,R30
    03C66 F409      BNE	0x3C68
    03C67 C051      RJMP	0x3CB9
    03C68 3783      CPI	R24,0x73
    03C69 E0E0      LDI	R30,0
    03C6A 079E      CPC	R25,R30
    03C6B F409      BNE	0x3C6D
    03C6C C200      RJMP	0x3E6D
    03C6D 3785      CPI	R24,0x75
    03C6E E0E0      LDI	R30,0
    03C6F 079E      CPC	R25,R30
    03C70 F409      BNE	0x3C72
    03C71 C047      RJMP	0x3CB9
    03C72 3788      CPI	R24,0x78
    03C73 E0E0      LDI	R30,0
    03C74 079E      CPC	R25,R30
    03C75 F409      BNE	0x3C77
    03C76 C042      RJMP	0x3CB9
    03C77 C000      RJMP	0x3C78
    03C78 A5E8      LDD	R30,Y+40
    03C79 A5F9      LDD	R31,Y+41
    03C7A 8100      LD	R16,Z
    03C7B A1EE      LDD	R30,Y+38
    03C7C A1FF      LDD	R31,Y+39
    03C7D 940E 415F CALL	xicallx
    03C7F 898E      LDD	R24,Y+22
    03C80 899F      LDD	R25,Y+23
    03C81 9601      ADIW	R24,1
    03C82 8B9F      STD	Y+23,R25
    03C83 8B8E      STD	Y+22,R24
    03C84 C2FF      RJMP	0x3F84
    03C85 FEA1      SBRS	R10,1
    03C86 C01E      RJMP	0x3CA5
    03C87 A58A      LDD	R24,Y+42
    03C88 A59B      LDD	R25,Y+43
    03C89 9604      ADIW	R24,4
    03C8A A79B      STD	Y+43,R25
    03C8B A78A      STD	Y+42,R24
    03C8C 01FC      MOVW	R30,R24
    03C8D 9734      SBIW	R30,4
    03C8E 8020      LD	R2,Z
    03C8F 8031      LDD	R3,Z+1
    03C90 8042      LDD	R4,Z+2
    03C91 8053      LDD	R5,Z+3
    03C92 862C      STD	Y+12,R2
    03C93 863D      STD	Y+13,R3
    03C94 864E      STD	Y+14,R4
    03C95 865F      STD	Y+15,R5
    03C96 E08A      LDI	R24,0xA
    03C97 E090      LDI	R25,0
    03C98 839B      STD	Y+3,R25
    03C99 838A      STD	Y+2,R24
    03C9A 842C      LDD	R2,Y+12
    03C9B 843D      LDD	R3,Y+13
    03C9C 844E      LDD	R4,Y+14
    03C9D 845F      LDD	R5,Y+15
    03C9E 8248      ST	Y,R4
    03C9F 8259      STD	Y+1,R5
    03CA0 0191      MOVW	R18,R2
    03CA1 018A      MOVW	R16,R20
    03CA2 940E 458A CALL	_ltoa
    03CA4 C0C1      RJMP	0x3D66
    03CA5 A58A      LDD	R24,Y+42
    03CA6 A59B      LDD	R25,Y+43
    03CA7 9602      ADIW	R24,2
    03CA8 A79B      STD	Y+43,R25
    03CA9 A78A      STD	Y+42,R24
    03CAA 01FC      MOVW	R30,R24
    03CAB 9732      SBIW	R30,2
    03CAC 8020      LD	R2,Z
    03CAD 8031      LDD	R3,Z+1
    03CAE 8E3B      STD	Y+27,R3
    03CAF 8E2A      STD	Y+26,R2
    03CB0 E08A      LDI	R24,0xA
    03CB1 E090      LDI	R25,0
    03CB2 8399      STD	Y+1,R25
    03CB3 8388      ST	Y,R24
    03CB4 0191      MOVW	R18,R2
    03CB5 018A      MOVW	R16,R20
    03CB6 940E 451F CALL	_itoa
    03CB8 C0AD      RJMP	0x3D66
    03CB9 FEA1      SBRS	R10,1
    03CBA C010      RJMP	0x3CCB
    03CBB A58A      LDD	R24,Y+42
    03CBC A59B      LDD	R25,Y+43
    03CBD 9604      ADIW	R24,4
    03CBE A79B      STD	Y+43,R25
    03CBF A78A      STD	Y+42,R24
    03CC0 01FC      MOVW	R30,R24
    03CC1 9734      SBIW	R30,4
    03CC2 8020      LD	R2,Z
    03CC3 8031      LDD	R3,Z+1
    03CC4 8042      LDD	R4,Z+2
    03CC5 8053      LDD	R5,Z+3
    03CC6 862C      STD	Y+12,R2
    03CC7 863D      STD	Y+13,R3
    03CC8 864E      STD	Y+14,R4
    03CC9 865F      STD	Y+15,R5
    03CCA C00B      RJMP	0x3CD6
    03CCB A58A      LDD	R24,Y+42
    03CCC A59B      LDD	R25,Y+43
    03CCD 9602      ADIW	R24,2
    03CCE A79B      STD	Y+43,R25
    03CCF A78A      STD	Y+42,R24
    03CD0 01FC      MOVW	R30,R24
    03CD1 9732      SBIW	R30,2
    03CD2 8020      LD	R2,Z
    03CD3 8031      LDD	R3,Z+1
    03CD4 8E3B      STD	Y+27,R3
    03CD5 8E2A      STD	Y+26,R2
    03CD6 A5E8      LDD	R30,Y+40
    03CD7 A5F9      LDD	R31,Y+41
    03CD8 8180      LD	R24,Z
    03CD9 3785      CPI	R24,0x75
    03CDA F4D9      BNE	0x3CF6
    03CDB FEA1      SBRS	R10,1
    03CDC C00F      RJMP	0x3CEC
    03CDD E08A      LDI	R24,0xA
    03CDE E090      LDI	R25,0
    03CDF 839B      STD	Y+3,R25
    03CE0 838A      STD	Y+2,R24
    03CE1 842C      LDD	R2,Y+12
    03CE2 843D      LDD	R3,Y+13
    03CE3 844E      LDD	R4,Y+14
    03CE4 845F      LDD	R5,Y+15
    03CE5 8248      ST	Y,R4
    03CE6 8259      STD	Y+1,R5
    03CE7 0191      MOVW	R18,R2
    03CE8 018A      MOVW	R16,R20
    03CE9 940E 4642 CALL	_ultoa
    03CEB C07A      RJMP	0x3D66
    03CEC E08A      LDI	R24,0xA
    03CED E090      LDI	R25,0
    03CEE 8399      STD	Y+1,R25
    03CEF 8388      ST	Y,R24
    03CF0 8D2A      LDD	R18,Y+26
    03CF1 8D3B      LDD	R19,Y+27
    03CF2 018A      MOVW	R16,R20
    03CF3 940E 46A9 CALL	_utoa
    03CF5 C070      RJMP	0x3D66
    03CF6 A5E8      LDD	R30,Y+40
    03CF7 A5F9      LDD	R31,Y+41
    03CF8 8180      LD	R24,Z
    03CF9 368F      CPI	R24,0x6F
    03CFA F509      BNE	0x3D1C
    03CFB FEA0      SBRS	R10,0
    03CFC C004      RJMP	0x3D01
    03CFD E380      LDI	R24,0x30
    03CFE 01FA      MOVW	R30,R20
    03CFF 9381      ST	Z+,R24
    03D00 01AF      MOVW	R20,R30
    03D01 FEA1      SBRS	R10,1
    03D02 C00F      RJMP	0x3D12
    03D03 E088      LDI	R24,0x8
    03D04 E090      LDI	R25,0
    03D05 839B      STD	Y+3,R25
    03D06 838A      STD	Y+2,R24
    03D07 842C      LDD	R2,Y+12
    03D08 843D      LDD	R3,Y+13
    03D09 844E      LDD	R4,Y+14
    03D0A 845F      LDD	R5,Y+15
    03D0B 8248      ST	Y,R4
    03D0C 8259      STD	Y+1,R5
    03D0D 0191      MOVW	R18,R2
    03D0E 018A      MOVW	R16,R20
    03D0F 940E 4642 CALL	_ultoa
    03D11 C054      RJMP	0x3D66
    03D12 E088      LDI	R24,0x8
    03D13 E090      LDI	R25,0
    03D14 8399      STD	Y+1,R25
    03D15 8388      ST	Y,R24
    03D16 8D2A      LDD	R18,Y+26
    03D17 8D3B      LDD	R19,Y+27
    03D18 018A      MOVW	R16,R20
    03D19 940E 46A9 CALL	_utoa
    03D1B C04A      RJMP	0x3D66
    03D1C A5E8      LDD	R30,Y+40
    03D1D A5F9      LDD	R31,Y+41
    03D1E 8180      LD	R24,Z
    03D1F 3780      CPI	R24,0x70
    03D20 F439      BNE	0x3D28
    03D21 E380      LDI	R24,0x30
    03D22 01FA      MOVW	R30,R20
    03D23 9381      ST	Z+,R24
    03D24 E788      LDI	R24,0x78
    03D25 9381      ST	Z+,R24
    03D26 01AF      MOVW	R20,R30
    03D27 C00C      RJMP	0x3D34
    03D28 FEA0      SBRS	R10,0
    03D29 C00A      RJMP	0x3D34
    03D2A E380      LDI	R24,0x30
    03D2B 01FA      MOVW	R30,R20
    03D2C 9381      ST	Z+,R24
    03D2D 01AF      MOVW	R20,R30
    03D2E A5E8      LDD	R30,Y+40
    03D2F A5F9      LDD	R31,Y+41
    03D30 8020      LD	R2,Z
    03D31 01FA      MOVW	R30,R20
    03D32 9221      ST	Z+,R2
    03D33 01AF      MOVW	R20,R30
    03D34 FEA1      SBRS	R10,1
    03D35 C00F      RJMP	0x3D45
    03D36 E180      LDI	R24,0x10
    03D37 E090      LDI	R25,0
    03D38 839B      STD	Y+3,R25
    03D39 838A      STD	Y+2,R24
    03D3A 842C      LDD	R2,Y+12
    03D3B 843D      LDD	R3,Y+13
    03D3C 844E      LDD	R4,Y+14
    03D3D 845F      LDD	R5,Y+15
    03D3E 8248      ST	Y,R4
    03D3F 8259      STD	Y+1,R5
    03D40 0191      MOVW	R18,R2
    03D41 018A      MOVW	R16,R20
    03D42 940E 4642 CALL	_ultoa
    03D44 C009      RJMP	0x3D4E
    03D45 E180      LDI	R24,0x10
    03D46 E090      LDI	R25,0
    03D47 8399      STD	Y+1,R25
    03D48 8388      ST	Y,R24
    03D49 8D2A      LDD	R18,Y+26
    03D4A 8D3B      LDD	R19,Y+27
    03D4B 018A      MOVW	R16,R20
    03D4C 940E 46A9 CALL	_utoa
    03D4E A5E8      LDD	R30,Y+40
    03D4F A5F9      LDD	R31,Y+41
    03D50 8180      LD	R24,Z
    03D51 3588      CPI	R24,0x58
    03D52 F499      BNE	0x3D66
    03D53 E480      LDI	R24,0x40
    03D54 E190      LDI	R25,0x10
    03D55 017C      MOVW	R14,R24
    03D56 C00B      RJMP	0x3D62
    03D57 01F7      MOVW	R30,R14
    03D58 8100      LD	R16,Z
    03D59 2711      CLR	R17
    03D5A 940E 4896 CALL	_toupper
    03D5C 0168      MOVW	R12,R16
    03D5D 01F7      MOVW	R30,R14
    03D5E 82C0      ST	Z,R12
    03D5F 01C7      MOVW	R24,R14
    03D60 9601      ADIW	R24,1
    03D61 017C      MOVW	R14,R24
    03D62 01F7      MOVW	R30,R14
    03D63 8020      LD	R2,Z
    03D64 2022      TST	R2
    03D65 F789      BNE	0x3D57
    03D66 E480      LDI	R24,0x40
    03D67 E190      LDI	R25,0x10
    03D68 017C      MOVW	R14,R24
    03D69 8D88      LDD	R24,Y+24
    03D6A 8D99      LDD	R25,Y+25
    03D6B 3F8F      CPI	R24,0xFF
    03D6C EFEF      LDI	R30,0xFF
    03D6D 079E      CPC	R25,R30
    03D6E F421      BNE	0x3D73
    03D6F 2400      CLR	R0
    03D70 2411      CLR	R1
    03D71 8E19      STD	Y+25,R1
    03D72 8E08      STD	Y+24,R0
    03D73 8C08      LDD	R0,Y+24
    03D74 8C19      LDD	R1,Y+25
    03D75 2000      TST	R0
    03D76 F419      BNE	0x3D7A
    03D77 2011      TST	R1
    03D78 F409      BNE	0x3D7A
    03D79 C104      RJMP	0x3E7E
    03D7A E400      LDI	R16,0x40
    03D7B E110      LDI	R17,0x10
    03D7C 940E 3FC1 CALL	_strlen
    03D7E 0168      MOVW	R12,R16
    03D7F 8EDB      STD	Y+27,R13
    03D80 8ECA      STD	Y+26,R12
    03D81 8C08      LDD	R0,Y+24
    03D82 8C19      LDD	R1,Y+25
    03D83 140C      CP	R0,R12
    03D84 041D      CPC	R1,R13
    03D85 F00C      BLT	0x3D87
    03D86 C0F7      RJMP	0x3E7E
    03D87 0106      MOVW	R0,R12
    03D88 8E19      STD	Y+25,R1
    03D89 8E08      STD	Y+24,R0
    03D8A C0F3      RJMP	0x3E7E
    03D8B A58A      LDD	R24,Y+42
    03D8C A59B      LDD	R25,Y+43
    03D8D 9602      ADIW	R24,2
    03D8E A79B      STD	Y+43,R25
    03D8F A78A      STD	Y+42,R24
    03D90 01FC      MOVW	R30,R24
    03D91 9732      SBIW	R30,2
    03D92 8020      LD	R2,Z
    03D93 8031      LDD	R3,Z+1
    03D94 862A      STD	Y+10,R2
    03D95 E081      LDI	R24,1
    03D96 E090      LDI	R25,0
    03D97 880C      LDD	R0,Y+20
    03D98 881D      LDD	R1,Y+21
    03D99 1580      CP	R24,R0
    03D9A 0591      CPC	R25,R1
    03D9B F444      BGE	0x3DA4
    03D9C 8E19      STD	Y+25,R1
    03D9D 8E08      STD	Y+24,R0
    03D9E 2422      CLR	R2
    03D9F 862B      STD	Y+11,R2
    03DA0 01CE      MOVW	R24,R28
    03DA1 960A      ADIW	R24,0xA
    03DA2 017C      MOVW	R14,R24
    03DA3 C0DA      RJMP	0x3E7E
    03DA4 850A      LDD	R16,Y+10
    03DA5 A1EE      LDD	R30,Y+38
    03DA6 A1FF      LDD	R31,Y+39
    03DA7 940E 415F CALL	xicallx
    03DA9 898E      LDD	R24,Y+22
    03DAA 899F      LDD	R25,Y+23
    03DAB 9601      ADIW	R24,1
    03DAC 8B9F      STD	Y+23,R25
    03DAD 8B8E      STD	Y+22,R24
    03DAE C1D5      RJMP	0x3F84
    03DAF A58A      LDD	R24,Y+42
    03DB0 A59B      LDD	R25,Y+43
    03DB1 9602      ADIW	R24,2
    03DB2 A79B      STD	Y+43,R25
    03DB3 A78A      STD	Y+42,R24
    03DB4 01FC      MOVW	R30,R24
    03DB5 9732      SBIW	R30,2
    03DB6 80C0      LD	R12,Z
    03DB7 80D1      LDD	R13,Z+1
    03DB8 8D88      LDD	R24,Y+24
    03DB9 8D99      LDD	R25,Y+25
    03DBA 3F8F      CPI	R24,0xFF
    03DBB EFEF      LDI	R30,0xFF
    03DBC 079E      CPC	R25,R30
    03DBD F421      BNE	0x3DC2
    03DBE 2400      CLR	R0
    03DBF 2411      CLR	R1
    03DC0 8E19      STD	Y+25,R1
    03DC1 8E08      STD	Y+24,R0
    03DC2 880C      LDD	R0,Y+20
    03DC3 881D      LDD	R1,Y+21
    03DC4 2000      TST	R0
    03DC5 F411      BNE	0x3DC8
    03DC6 2011      TST	R1
    03DC7 F051      BEQ	0x3DD2
    03DC8 0186      MOVW	R16,R12
    03DC9 940E 44CC CALL	_cstrlen
    03DCB 01A8      MOVW	R20,R16
    03DCC 882C      LDD	R2,Y+20
    03DCD 883D      LDD	R3,Y+21
    03DCE 1A20      SUB	R2,R16
    03DCF 0A31      SBC	R3,R17
    03DD0 8A3D      STD	Y+21,R3
    03DD1 8A2C      STD	Y+20,R2
    03DD2 8C08      LDD	R0,Y+24
    03DD3 8C19      LDD	R1,Y+25
    03DD4 2000      TST	R0
    03DD5 F441      BNE	0x3DDE
    03DD6 2011      TST	R1
    03DD7 F431      BNE	0x3DDE
    03DD8 0186      MOVW	R16,R12
    03DD9 940E 44CC CALL	_cstrlen
    03DDB 01A8      MOVW	R20,R16
    03DDC 8F59      STD	Y+25,R21
    03DDD 8F48      STD	Y+24,R20
    03DDE 880C      LDD	R0,Y+20
    03DDF 881D      LDD	R1,Y+21
    03DE0 2000      TST	R0
    03DE1 F411      BNE	0x3DE4
    03DE2 2011      TST	R1
    03DE3 F031      BEQ	0x3DEA
    03DE4 FEA3      SBRS	R10,3
    03DE5 C004      RJMP	0x3DEA
    03DE6 01C0      MOVW	R24,R0
    03DE7 9701      SBIW	R24,1
    03DE8 8B9D      STD	Y+21,R25
    03DE9 8B8C      STD	Y+20,R24
    03DEA FEA4      SBRS	R10,4
    03DEB C026      RJMP	0x3E12
    03DEC FEA3      SBRS	R10,3
    03DED C00A      RJMP	0x3DF8
    03DEE 2F06      MOV	R16,R22
    03DEF A1EE      LDD	R30,Y+38
    03DF0 A1FF      LDD	R31,Y+39
    03DF1 940E 415F CALL	xicallx
    03DF3 898E      LDD	R24,Y+22
    03DF4 899F      LDD	R25,Y+23
    03DF5 9601      ADIW	R24,1
    03DF6 8B9F      STD	Y+23,R25
    03DF7 8B8E      STD	Y+22,R24
    03DF8 FCA2      SBRC	R10,2
    03DF9 C04C      RJMP	0x3E46
    03DFA C00F      RJMP	0x3E0A
    03DFB E300      LDI	R16,0x30
    03DFC A1EE      LDD	R30,Y+38
    03DFD A1FF      LDD	R31,Y+39
    03DFE 940E 415F CALL	xicallx
    03E00 898E      LDD	R24,Y+22
    03E01 899F      LDD	R25,Y+23
    03E02 9601      ADIW	R24,1
    03E03 8B9F      STD	Y+23,R25
    03E04 8B8E      STD	Y+22,R24
    03E05 898C      LDD	R24,Y+20
    03E06 899D      LDD	R25,Y+21
    03E07 9701      SBIW	R24,1
    03E08 8B9D      STD	Y+21,R25
    03E09 8B8C      STD	Y+20,R24
    03E0A 2422      CLR	R2
    03E0B 2433      CLR	R3
    03E0C 880C      LDD	R0,Y+20
    03E0D 881D      LDD	R1,Y+21
    03E0E 1420      CP	R2,R0
    03E0F 0431      CPC	R3,R1
    03E10 F354      BLT	0x3DFB
    03E11 C034      RJMP	0x3E46
    03E12 FCA2      SBRC	R10,2
    03E13 C017      RJMP	0x3E2B
    03E14 C00F      RJMP	0x3E24
    03E15 E200      LDI	R16,0x20
    03E16 A1EE      LDD	R30,Y+38
    03E17 A1FF      LDD	R31,Y+39
    03E18 940E 415F CALL	xicallx
    03E1A 898E      LDD	R24,Y+22
    03E1B 899F      LDD	R25,Y+23
    03E1C 9601      ADIW	R24,1
    03E1D 8B9F      STD	Y+23,R25
    03E1E 8B8E      STD	Y+22,R24
    03E1F 898C      LDD	R24,Y+20
    03E20 899D      LDD	R25,Y+21
    03E21 9701      SBIW	R24,1
    03E22 8B9D      STD	Y+21,R25
    03E23 8B8C      STD	Y+20,R24
    03E24 2422      CLR	R2
    03E25 2433      CLR	R3
    03E26 880C      LDD	R0,Y+20
    03E27 881D      LDD	R1,Y+21
    03E28 1420      CP	R2,R0
    03E29 0431      CPC	R3,R1
    03E2A F354      BLT	0x3E15
    03E2B FEA3      SBRS	R10,3
    03E2C C019      RJMP	0x3E46
    03E2D 2F06      MOV	R16,R22
    03E2E A1EE      LDD	R30,Y+38
    03E2F A1FF      LDD	R31,Y+39
    03E30 940E 415F CALL	xicallx
    03E32 898E      LDD	R24,Y+22
    03E33 899F      LDD	R25,Y+23
    03E34 9601      ADIW	R24,1
    03E35 8B9F      STD	Y+23,R25
    03E36 8B8E      STD	Y+22,R24
    03E37 C00E      RJMP	0x3E46
    03E38 01F6      MOVW	R30,R12
    03E39 9106      ELPM	R16,Z
    03E3A A1EE      LDD	R30,Y+38
    03E3B A1FF      LDD	R31,Y+39
    03E3C 940E 415F CALL	xicallx
    03E3E 898E      LDD	R24,Y+22
    03E3F 899F      LDD	R25,Y+23
    03E40 9601      ADIW	R24,1
    03E41 8B9F      STD	Y+23,R25
    03E42 8B8E      STD	Y+22,R24
    03E43 01C6      MOVW	R24,R12
    03E44 9601      ADIW	R24,1
    03E45 016C      MOVW	R12,R24
    03E46 01F6      MOVW	R30,R12
    03E47 9026      ELPM	R2,Z
    03E48 2022      TST	R2
    03E49 F049      BEQ	0x3E53
    03E4A 8D48      LDD	R20,Y+24
    03E4B 8D59      LDD	R21,Y+25
    03E4C 01CA      MOVW	R24,R20
    03E4D 9701      SBIW	R24,1
    03E4E 8F99      STD	Y+25,R25
    03E4F 8F88      STD	Y+24,R24
    03E50 3040      CPI	R20,0
    03E51 0745      CPC	R20,R21
    03E52 F729      BNE	0x3E38
    03E53 FEA2      SBRS	R10,2
    03E54 C12F      RJMP	0x3F84
    03E55 C00F      RJMP	0x3E65
    03E56 E200      LDI	R16,0x20
    03E57 A1EE      LDD	R30,Y+38
    03E58 A1FF      LDD	R31,Y+39
    03E59 940E 415F CALL	xicallx
    03E5B 898E      LDD	R24,Y+22
    03E5C 899F      LDD	R25,Y+23
    03E5D 9601      ADIW	R24,1
    03E5E 8B9F      STD	Y+23,R25
    03E5F 8B8E      STD	Y+22,R24
    03E60 898C      LDD	R24,Y+20
    03E61 899D      LDD	R25,Y+21
    03E62 9701      SBIW	R24,1
    03E63 8B9D      STD	Y+21,R25
    03E64 8B8C      STD	Y+20,R24
    03E65 2422      CLR	R2
    03E66 2433      CLR	R3
    03E67 880C      LDD	R0,Y+20
    03E68 881D      LDD	R1,Y+21
    03E69 1420      CP	R2,R0
    03E6A 0431      CPC	R3,R1
    03E6B F354      BLT	0x3E56
    03E6C C117      RJMP	0x3F84
    03E6D A58A      LDD	R24,Y+42
    03E6E A59B      LDD	R25,Y+43
    03E6F 9602      ADIW	R24,2
    03E70 A79B      STD	Y+43,R25
    03E71 A78A      STD	Y+42,R24
    03E72 01FC      MOVW	R30,R24
    03E73 9732      SBIW	R30,2
    03E74 80E0      LD	R14,Z
    03E75 80F1      LDD	R15,Z+1
    03E76 20EE      TST	R14
    03E77 F431      BNE	0x3E7E
    03E78 20FF      TST	R15
    03E79 F421      BNE	0x3E7E
    03E7A E282      LDI	R24,0x22
    03E7B E091      LDI	R25,1
    03E7C 016C      MOVW	R12,R24
    03E7D CF3A      RJMP	0x3DB8
    03E7E 8D88      LDD	R24,Y+24
    03E7F 8D99      LDD	R25,Y+25
    03E80 3F8F      CPI	R24,0xFF
    03E81 EFEF      LDI	R30,0xFF
    03E82 079E      CPC	R25,R30
    03E83 F421      BNE	0x3E88
    03E84 2400      CLR	R0
    03E85 2411      CLR	R1
    03E86 8E19      STD	Y+25,R1
    03E87 8E08      STD	Y+24,R0
    03E88 880C      LDD	R0,Y+20
    03E89 881D      LDD	R1,Y+21
    03E8A 2000      TST	R0
    03E8B F411      BNE	0x3E8E
    03E8C 2011      TST	R1
    03E8D F051      BEQ	0x3E98
    03E8E 0187      MOVW	R16,R14
    03E8F 940E 3FC1 CALL	_strlen
    03E91 0168      MOVW	R12,R16
    03E92 882C      LDD	R2,Y+20
    03E93 883D      LDD	R3,Y+21
    03E94 1A20      SUB	R2,R16
    03E95 0A31      SBC	R3,R17
    03E96 8A3D      STD	Y+21,R3
    03E97 8A2C      STD	Y+20,R2
    03E98 8C08      LDD	R0,Y+24
    03E99 8C19      LDD	R1,Y+25
    03E9A 2000      TST	R0
    03E9B F441      BNE	0x3EA4
    03E9C 2011      TST	R1
    03E9D F431      BNE	0x3EA4
    03E9E 0187      MOVW	R16,R14
    03E9F 940E 3FC1 CALL	_strlen
    03EA1 0168      MOVW	R12,R16
    03EA2 8ED9      STD	Y+25,R13
    03EA3 8EC8      STD	Y+24,R12
    03EA4 880C      LDD	R0,Y+20
    03EA5 881D      LDD	R1,Y+21
    03EA6 2000      TST	R0
    03EA7 F411      BNE	0x3EAA
    03EA8 2011      TST	R1
    03EA9 F031      BEQ	0x3EB0
    03EAA FEA3      SBRS	R10,3
    03EAB C004      RJMP	0x3EB0
    03EAC 01C0      MOVW	R24,R0
    03EAD 9701      SBIW	R24,1
    03EAE 8B9D      STD	Y+21,R25
    03EAF 8B8C      STD	Y+20,R24
    03EB0 FEA4      SBRS	R10,4
    03EB1 C026      RJMP	0x3ED8
    03EB2 FEA3      SBRS	R10,3
    03EB3 C00A      RJMP	0x3EBE
    03EB4 2F06      MOV	R16,R22
    03EB5 A1EE      LDD	R30,Y+38
    03EB6 A1FF      LDD	R31,Y+39
    03EB7 940E 415F CALL	xicallx
    03EB9 898E      LDD	R24,Y+22
    03EBA 899F      LDD	R25,Y+23
    03EBB 9601      ADIW	R24,1
    03EBC 8B9F      STD	Y+23,R25
    03EBD 8B8E      STD	Y+22,R24
    03EBE FCA2      SBRC	R10,2
    03EBF C04C      RJMP	0x3F0C
    03EC0 C00F      RJMP	0x3ED0
    03EC1 E300      LDI	R16,0x30
    03EC2 A1EE      LDD	R30,Y+38
    03EC3 A1FF      LDD	R31,Y+39
    03EC4 940E 415F CALL	xicallx
    03EC6 898E      LDD	R24,Y+22
    03EC7 899F      LDD	R25,Y+23
    03EC8 9601      ADIW	R24,1
    03EC9 8B9F      STD	Y+23,R25
    03ECA 8B8E      STD	Y+22,R24
    03ECB 898C      LDD	R24,Y+20
    03ECC 899D      LDD	R25,Y+21
    03ECD 9701      SBIW	R24,1
    03ECE 8B9D      STD	Y+21,R25
    03ECF 8B8C      STD	Y+20,R24
    03ED0 2422      CLR	R2
    03ED1 2433      CLR	R3
    03ED2 880C      LDD	R0,Y+20
    03ED3 881D      LDD	R1,Y+21
    03ED4 1420      CP	R2,R0
    03ED5 0431      CPC	R3,R1
    03ED6 F354      BLT	0x3EC1
    03ED7 C034      RJMP	0x3F0C
    03ED8 FCA2      SBRC	R10,2
    03ED9 C017      RJMP	0x3EF1
    03EDA C00F      RJMP	0x3EEA
    03EDB E200      LDI	R16,0x20
    03EDC A1EE      LDD	R30,Y+38
    03EDD A1FF      LDD	R31,Y+39
    03EDE 940E 415F CALL	xicallx
    03EE0 898E      LDD	R24,Y+22
    03EE1 899F      LDD	R25,Y+23
    03EE2 9601      ADIW	R24,1
    03EE3 8B9F      STD	Y+23,R25
    03EE4 8B8E      STD	Y+22,R24
    03EE5 898C      LDD	R24,Y+20
    03EE6 899D      LDD	R25,Y+21
    03EE7 9701      SBIW	R24,1
    03EE8 8B9D      STD	Y+21,R25
    03EE9 8B8C      STD	Y+20,R24
    03EEA 2422      CLR	R2
    03EEB 2433      CLR	R3
    03EEC 880C      LDD	R0,Y+20
    03EED 881D      LDD	R1,Y+21
    03EEE 1420      CP	R2,R0
    03EEF 0431      CPC	R3,R1
    03EF0 F354      BLT	0x3EDB
    03EF1 FEA3      SBRS	R10,3
    03EF2 C019      RJMP	0x3F0C
    03EF3 2F06      MOV	R16,R22
    03EF4 A1EE      LDD	R30,Y+38
    03EF5 A1FF      LDD	R31,Y+39
    03EF6 940E 415F CALL	xicallx
    03EF8 898E      LDD	R24,Y+22
    03EF9 899F      LDD	R25,Y+23
    03EFA 9601      ADIW	R24,1
    03EFB 8B9F      STD	Y+23,R25
    03EFC 8B8E      STD	Y+22,R24
    03EFD C00E      RJMP	0x3F0C
    03EFE 01F7      MOVW	R30,R14
    03EFF 8100      LD	R16,Z
    03F00 A1EE      LDD	R30,Y+38
    03F01 A1FF      LDD	R31,Y+39
    03F02 940E 415F CALL	xicallx
    03F04 898E      LDD	R24,Y+22
    03F05 899F      LDD	R25,Y+23
    03F06 9601      ADIW	R24,1
    03F07 8B9F      STD	Y+23,R25
    03F08 8B8E      STD	Y+22,R24
    03F09 01C7      MOVW	R24,R14
    03F0A 9601      ADIW	R24,1
    03F0B 017C      MOVW	R14,R24
    03F0C 01F7      MOVW	R30,R14
    03F0D 8020      LD	R2,Z
    03F0E 2022      TST	R2
    03F0F F049      BEQ	0x3F19
    03F10 8D68      LDD	R22,Y+24
    03F11 8D79      LDD	R23,Y+25
    03F12 01CB      MOVW	R24,R22
    03F13 9701      SBIW	R24,1
    03F14 8F99      STD	Y+25,R25
    03F15 8F88      STD	Y+24,R24
    03F16 3060      CPI	R22,0
    03F17 0767      CPC	R22,R23
    03F18 F729      BNE	0x3EFE
    03F19 FEA2      SBRS	R10,2
    03F1A C069      RJMP	0x3F84
    03F1B C00F      RJMP	0x3F2B
    03F1C E200      LDI	R16,0x20
    03F1D A1EE      LDD	R30,Y+38
    03F1E A1FF      LDD	R31,Y+39
    03F1F 940E 415F CALL	xicallx
    03F21 898E      LDD	R24,Y+22
    03F22 899F      LDD	R25,Y+23
    03F23 9601      ADIW	R24,1
    03F24 8B9F      STD	Y+23,R25
    03F25 8B8E      STD	Y+22,R24
    03F26 898C      LDD	R24,Y+20
    03F27 899D      LDD	R25,Y+21
    03F28 9701      SBIW	R24,1
    03F29 8B9D      STD	Y+21,R25
    03F2A 8B8C      STD	Y+20,R24
    03F2B 2422      CLR	R2
    03F2C 2433      CLR	R3
    03F2D 880C      LDD	R0,Y+20
    03F2E 881D      LDD	R1,Y+21
    03F2F 1420      CP	R2,R0
    03F30 0431      CPC	R3,R1
    03F31 F354      BLT	0x3F1C
    03F32 C051      RJMP	0x3F84
    03F33 E061      LDI	R22,1
    03F34 E070      LDI	R23,0
    03F35 C00B      RJMP	0x3F41
    03F36 E062      LDI	R22,2
    03F37 E070      LDI	R23,0
    03F38 C008      RJMP	0x3F41
    03F39 2766      CLR	R22
    03F3A 2777      CLR	R23
    03F3B C005      RJMP	0x3F41
    03F3C E063      LDI	R22,3
    03F3D E070      LDI	R23,0
    03F3E C002      RJMP	0x3F41
    03F3F E064      LDI	R22,4
    03F40 E070      LDI	R23,0
    03F41 A58A      LDD	R24,Y+42
    03F42 A59B      LDD	R25,Y+43
    03F43 9604      ADIW	R24,4
    03F44 A79B      STD	Y+43,R25
    03F45 A78A      STD	Y+42,R24
    03F46 01FC      MOVW	R30,R24
    03F47 9734      SBIW	R30,4
    03F48 8020      LD	R2,Z
    03F49 8031      LDD	R3,Z+1
    03F4A 8042      LDD	R4,Z+2
    03F4B 8053      LDD	R5,Z+3
    03F4C 8A28      STD	Y+16,R2
    03F4D 8A39      STD	Y+17,R3
    03F4E 8A4A      STD	Y+18,R4
    03F4F 8A5B      STD	Y+19,R5
    03F50 8D88      LDD	R24,Y+24
    03F51 8D99      LDD	R25,Y+25
    03F52 3F8F      CPI	R24,0xFF
    03F53 EFEF      LDI	R30,0xFF
    03F54 079E      CPC	R25,R30
    03F55 F421      BNE	0x3F5A
    03F56 E086      LDI	R24,6
    03F57 E090      LDI	R25,0
    03F58 8F99      STD	Y+25,R25
    03F59 8F88      STD	Y+24,R24
    03F5A 8C08      LDD	R0,Y+24
    03F5B 8C19      LDD	R1,Y+25
    03F5C 8619      STD	Y+9,R1
    03F5D 8608      STD	Y+8,R0
    03F5E 880C      LDD	R0,Y+20
    03F5F 881D      LDD	R1,Y+21
    03F60 821F      STD	Y+7,R1
    03F61 820E      STD	Y+6,R0
    03F62 82BD      STD	Y+5,R11
    03F63 82AC      STD	Y+4,R10
    03F64 8828      LDD	R2,Y+16
    03F65 8839      LDD	R3,Y+17
    03F66 884A      LDD	R4,Y+18
    03F67 885B      LDD	R5,Y+19
    03F68 8228      ST	Y,R2
    03F69 8239      STD	Y+1,R3
    03F6A 824A      STD	Y+2,R4
    03F6B 825B      STD	Y+3,R5
    03F6C 019B      MOVW	R18,R22
    03F6D E400      LDI	R16,0x40
    03F6E E110      LDI	R17,0x10
    03F6F 940E 4CF2 CALL	__FormatFP_1
    03F71 01B8      MOVW	R22,R16
    03F72 017B      MOVW	R14,R22
    03F73 C00C      RJMP	0x3F80
    03F74 01F7      MOVW	R30,R14
    03F75 9101      LD	R16,Z+
    03F76 017F      MOVW	R14,R30
    03F77 A1EE      LDD	R30,Y+38
    03F78 A1FF      LDD	R31,Y+39
    03F79 940E 415F CALL	xicallx
    03F7B 898E      LDD	R24,Y+22
    03F7C 899F      LDD	R25,Y+23
    03F7D 9601      ADIW	R24,1
    03F7E 8B9F      STD	Y+23,R25
    03F7F 8B8E      STD	Y+22,R24
    03F80 01F7      MOVW	R30,R14
    03F81 8020      LD	R2,Z
    03F82 2022      TST	R2
    03F83 F781      BNE	0x3F74
    03F84 A588      LDD	R24,Y+40
    03F85 A599      LDD	R25,Y+41
    03F86 9601      ADIW	R24,1
    03F87 A799      STD	Y+41,R25
    03F88 A788      STD	Y+40,R24
    03F89 A5E8      LDD	R30,Y+40
    03F8A A5F9      LDD	R31,Y+41
    03F8B 8020      LD	R2,Z
    03F8C 2022      TST	R2
    03F8D F009      BEQ	0x3F8F
    03F8E CBA4      RJMP	0x3B33
    03F8F 890E      LDD	R16,Y+22
    03F90 891F      LDD	R17,Y+23
    03F91 966C      ADIW	R28,0x1C
    03F92 940E 4107 CALL	pop_xgsetF0FC
    03F94 9624      ADIW	R28,4
    03F95 9508      RET
_memcmp:
    03F96 8188      LD	R24,Y
    03F97 8199      LDD	R25,Y+1
    03F98 3080      CPI	R24,0
    03F99 0798      CPC	R25,R24
    03F9A F051      BEQ	0x3FA5
    03F9B 2FA0      MOV	R26,R16
    03F9C 2FB1      MOV	R27,R17
    03F9D 2FE2      MOV	R30,R18
    03F9E 2FF3      MOV	R31,R19
    03F9F 910D      LD	R16,X+
    03FA0 9111      LD	R17,Z+
    03FA1 1B01      SUB	R16,R17
    03FA2 F419      BNE	0x3FA6
    03FA3 9701      SBIW	R24,1
    03FA4 F7D1      BNE	0x3F9F
    03FA5 2700      CLR	R16
    03FA6 0B11      SBC	R17,R17
    03FA7 9508      RET
_memcpy:
    03FA8 2FA0      MOV	R26,R16
    03FA9 2FB1      MOV	R27,R17
    03FAA 2FE2      MOV	R30,R18
    03FAB 2FF3      MOV	R31,R19
    03FAC 8188      LD	R24,Y
    03FAD 8199      LDD	R25,Y+1
    03FAE 3080      CPI	R24,0
    03FAF 0798      CPC	R25,R24
    03FB0 C003      RJMP	0x3FB4
    03FB1 9001      LD	R0,Z+
    03FB2 920D      ST	X+,R0
    03FB3 9701      SBIW	R24,1
    03FB4 F7E1      BNE	0x3FB1
    03FB5 9508      RET
_memset:
    03FB6 8188      LD	R24,Y
    03FB7 8199      LDD	R25,Y+1
    03FB8 3080      CPI	R24,0
    03FB9 0789      CPC	R24,R25
    03FBA F029      BEQ	0x3FC0
    03FBB 2FE0      MOV	R30,R16
    03FBC 2FF1      MOV	R31,R17
    03FBD 9321      ST	Z+,R18
    03FBE 9701      SBIW	R24,1
    03FBF F7E9      BNE	0x3FBD
    03FC0 9508      RET
_strlen:
    03FC1 2FE0      MOV	R30,R16
    03FC2 2FF1      MOV	R31,R17
    03FC3 27AA      CLR	R26
    03FC4 27BB      CLR	R27
    03FC5 9001      LD	R0,Z+
    03FC6 2000      TST	R0
    03FC7 F011      BEQ	0x3FCA
    03FC8 9611      ADIW	R26,1
    03FC9 CFFB      RJMP	0x3FC5
    03FCA 2F0A      MOV	R16,R26
    03FCB 2F1B      MOV	R17,R27
    03FCC 9508      RET
push_arg4:
    03FCD 933A      ST	-Y,R19
    03FCE 932A      ST	-Y,R18
push_arg2:
    03FCF 931A      ST	-Y,R17
    03FD0 930A      ST	-Y,R16
    03FD1 9508      RET
asr32:
    03FD2 920F      PUSH	R0
    03FD3 9009      LD	R0,Y+
    03FD4 2000      TST	R0
    03FD5 F031      BEQ	0x3FDC
    03FD6 9535      ASR	R19
    03FD7 9527      ROR	R18
    03FD8 9517      ROR	R17
    03FD9 9507      ROR	R16
    03FDA 940A      DEC	R0
    03FDB CFF8      RJMP	0x3FD4
    03FDC 900F      POP	R0
    03FDD 9508      RET
mod16s:
    03FDE 9468      BSET	6
    03FDF 92DA      ST	-Y,R13
    03FE0 2ED1      MOV	R13,R17
    03FE1 C004      RJMP	0x3FE6
div16s:
    03FE2 94E8      BCLR	6
    03FE3 92DA      ST	-Y,R13
    03FE4 2ED1      MOV	R13,R17
    03FE5 26D3      EOR	R13,R19
    03FE6 FF17      SBRS	R17,7
    03FE7 C004      RJMP	0x3FEC
    03FE8 9510      COM	R17
    03FE9 9500      COM	R16
    03FEA 5F0F      SUBI	R16,0xFF
    03FEB 4F1F      SBCI	R17,0xFF
    03FEC FF37      SBRS	R19,7
    03FED C004      RJMP	0x3FF2
    03FEE 9530      COM	R19
    03FEF 9520      COM	R18
    03FF0 5F2F      SUBI	R18,0xFF
    03FF1 4F3F      SBCI	R19,0xFF
    03FF2 940E 3FFF CALL	xdiv16u
    03FF4 FED7      SBRS	R13,7
    03FF5 C004      RJMP	0x3FFA
    03FF6 9510      COM	R17
    03FF7 9500      COM	R16
    03FF8 5F0F      SUBI	R16,0xFF
    03FF9 4F1F      SBCI	R17,0xFF
    03FFA 90D9      LD	R13,Y+
    03FFB 9508      RET
mod16u:
    03FFC 9468      BSET	6
    03FFD C001      RJMP	xdiv16u
div16u:
    03FFE 94E8      BCLR	6
xdiv16u:
    03FFF 92EA      ST	-Y,R14
    04000 92FA      ST	-Y,R15
    04001 938A      ST	-Y,R24
    04002 24EE      CLR	R14
    04003 24FF      CLR	R15
    04004 E180      LDI	R24,0x10
    04005 0F00      LSL	R16
    04006 1F11      ROL	R17
    04007 1CEE      ROL	R14
    04008 1CFF      ROL	R15
    04009 16E2      CP	R14,R18
    0400A 06F3      CPC	R15,R19
    0400B F018      BCS	0x400F
    0400C 1AE2      SUB	R14,R18
    0400D 0AF3      SBC	R15,R19
    0400E 9503      INC	R16
    0400F 958A      DEC	R24
    04010 F7A1      BNE	0x4005
    04011 F416      BRTC	0x4014
    04012 2D0E      MOV	R16,R14
    04013 2D1F      MOV	R17,R15
    04014 9189      LD	R24,Y+
    04015 90F9      LD	R15,Y+
    04016 90E9      LD	R14,Y+
    04017 9508      RET
div32u:
    04018 94E8      BCLR	6
    04019 C001      RJMP	0x401B
mod32u:
    0401A 9468      BSET	6
    0401B D030      RCALL	long_div_prolog
    0401C 24CC      CLR	R12
    0401D C009      RJMP	0x4027
div32s:
    0401E 94E8      BCLR	6
    0401F C001      RJMP	0x4021
mod32s:
    04020 9468      BSET	6
    04021 D02A      RCALL	long_div_prolog
    04022 FD37      SBRC	R19,7
    04023 940E 4168 CALL	neg32
    04025 FDB7      SBRC	R27,7
    04026 D052      RCALL	neg_R24_R27
    04027 2477      CLR	R7
    04028 2488      CLR	R8
    04029 2499      CLR	R9
    0402A 24AA      CLR	R10
    0402B 24BB      CLR	R11
    0402C D042      RCALL	tst_R16_R19
    0402D F0C1      BEQ	0x4046
    0402E D045      RCALL	tst_R24_R27
    0402F F0B1      BEQ	0x4046
    04030 E2E8      LDI	R30,0x28
    04031 0F00      LSL	R16
    04032 1F11      ROL	R17
    04033 1F22      ROL	R18
    04034 1F33      ROL	R19
    04035 1C77      ROL	R7
    04036 1C88      ROL	R8
    04037 1C99      ROL	R9
    04038 1CAA      ROL	R10
    04039 1CBB      ROL	R11
    0403A 1688      CP	R8,R24
    0403B 0699      CPC	R9,R25
    0403C 06AA      CPC	R10,R26
    0403D 06BB      CPC	R11,R27
    0403E F028      BCS	0x4044
    0403F 1A88      SUB	R8,R24
    04040 0A99      SBC	R9,R25
    04041 0AAA      SBC	R10,R26
    04042 0ABB      SBC	R11,R27
    04043 9503      INC	R16
    04044 95EA      DEC	R30
    04045 F759      BNE	0x4031
    04046 F426      BRTC	0x404B
    04047 2D08      MOV	R16,R8
    04048 2D19      MOV	R17,R9
    04049 2D2A      MOV	R18,R10
    0404A 2D3B      MOV	R19,R11
    0404B C013      RJMP	long_div_epilog
long_div_prolog:
    0404C 927A      ST	-Y,R7
    0404D 928A      ST	-Y,R8
    0404E 929A      ST	-Y,R9
    0404F 92AA      ST	-Y,R10
    04050 92BA      ST	-Y,R11
    04051 92CA      ST	-Y,R12
    04052 93EA      ST	-Y,R30
    04053 938A      ST	-Y,R24
    04054 939A      ST	-Y,R25
    04055 93AA      ST	-Y,R26
    04056 93BA      ST	-Y,R27
    04057 858B      LDD	R24,Y+11
    04058 859C      LDD	R25,Y+12
    04059 85AD      LDD	R26,Y+13
    0405A 85BE      LDD	R27,Y+14
    0405B 2EC3      MOV	R12,R19
    0405C F00E      BRTS	0x405E
    0405D 26CB      EOR	R12,R27
    0405E 9508      RET
long_div_epilog:
    0405F FCC7      SBRC	R12,7
    04060 940E 4168 CALL	neg32
    04062 91B9      LD	R27,Y+
    04063 91A9      LD	R26,Y+
    04064 9199      LD	R25,Y+
    04065 9189      LD	R24,Y+
    04066 91E9      LD	R30,Y+
    04067 90C9      LD	R12,Y+
    04068 90B9      LD	R11,Y+
    04069 90A9      LD	R10,Y+
    0406A 9099      LD	R9,Y+
    0406B 9089      LD	R8,Y+
    0406C 9079      LD	R7,Y+
    0406D 9624      ADIW	R28,4
    0406E 9508      RET
tst_R16_R19:
    0406F 2FE0      MOV	R30,R16
    04070 2BE1      OR	R30,R17
    04071 2BE2      OR	R30,R18
    04072 2BE3      OR	R30,R19
    04073 9508      RET
tst_R24_R27:
    04074 2FE8      MOV	R30,R24
    04075 2BE9      OR	R30,R25
    04076 2BEA      OR	R30,R26
    04077 2BEB      OR	R30,R27
    04078 9508      RET
neg_R24_R27:
    04079 9580      COM	R24
    0407A 9590      COM	R25
    0407B 95A0      COM	R26
    0407C 95B0      COM	R27
    0407D 5F8F      SUBI	R24,0xFF
    0407E 4F9F      SBCI	R25,0xFF
    0407F 4FAF      SBCI	R26,0xFF
    04080 4FBF      SBCI	R27,0xFF
    04081 9508      RET
mod8u:
    04082 9468      BSET	6
    04083 C001      RJMP	xdiv8u
div8u:
    04084 94E8      BCLR	6
xdiv8u:
    04085 932A      ST	-Y,R18
    04086 92FA      ST	-Y,R15
    04087 92EA      ST	-Y,R14
    04088 24FF      CLR	R15
    04089 24EE      CLR	R14
    0408A E120      LDI	R18,0x10
    0408B 0F00      LSL	R16
    0408C 1CFF      ROL	R15
    0408D 1CEE      ROL	R14
    0408E 16E1      CP	R14,R17
    0408F F010      BCS	0x4092
    04090 1AE1      SUB	R14,R17
    04091 9503      INC	R16
    04092 952A      DEC	R18
    04093 F7B9      BNE	0x408B
    04094 F40E      BRTC	0x4096
    04095 2D0E      MOV	R16,R14
    04096 90E9      LD	R14,Y+
    04097 90F9      LD	R15,Y+
    04098 9129      LD	R18,Y+
    04099 9508      RET
elpm32:
    0409A 93EA      ST	-Y,R30
    0409B 93FA      ST	-Y,R31
    0409C 920A      ST	-Y,R0
    0409D 2FE0      MOV	R30,R16
    0409E 2FF1      MOV	R31,R17
    0409F 95D8      ELPM
    040A0 2D00      MOV	R16,R0
    040A1 9631      ADIW	R30,1
    040A2 95D8      ELPM
    040A3 2D10      MOV	R17,R0
    040A4 9631      ADIW	R30,1
    040A5 95D8      ELPM
    040A6 2D20      MOV	R18,R0
    040A7 9631      ADIW	R30,1
    040A8 95D8      ELPM
    040A9 2D30      MOV	R19,R0
    040AA 9009      LD	R0,Y+
    040AB 91F9      LD	R31,Y+
    040AC 91E9      LD	R30,Y+
    040AD 9508      RET
empy16s:
    040AE 920A      ST	-Y,R0
    040AF 921A      ST	-Y,R1
    040B0 938A      ST	-Y,R24
    040B1 939A      ST	-Y,R25
    040B2 9F02      MUL	R16,R18
    040B3 01C0      MOVW	R24,R0
    040B4 9F12      MUL	R17,R18
    040B5 0D90      ADD	R25,R0
    040B6 9F03      MUL	R16,R19
    040B7 0D90      ADD	R25,R0
    040B8 018C      MOVW	R16,R24
    040B9 9199      LD	R25,Y+
    040BA 9189      LD	R24,Y+
    040BB 9019      LD	R1,Y+
    040BC 9009      LD	R0,Y+
    040BD 9508      RET
empy32u|empy32s:
    040BE 940E 4171 CALL	long_prolog
    040C0 927A      ST	-Y,R7
    040C1 940E 418A CALL	tstzero1
    040C3 F159      BEQ	0x40EF
    040C4 2477      CLR	R7
    040C5 940E 4190 CALL	tstzero2
    040C7 F419      BNE	0x40CB
    040C8 018C      MOVW	R16,R24
    040C9 019D      MOVW	R18,R26
    040CA C024      RJMP	0x40EF
    040CB 920A      ST	-Y,R0
    040CC 921A      ST	-Y,R1
    040CD 9F08      MUL	R16,R24
    040CE 2CB0      MOV	R11,R0
    040CF 2CA1      MOV	R10,R1
    040D0 9F28      MUL	R18,R24
    040D1 2C90      MOV	R9,R0
    040D2 2C81      MOV	R8,R1
    040D3 9F18      MUL	R17,R24
    040D4 0CA0      ADD	R10,R0
    040D5 1C91      ADC	R9,R1
    040D6 1C87      ADC	R8,R7
    040D7 9F09      MUL	R16,R25
    040D8 0CA0      ADD	R10,R0
    040D9 1C91      ADC	R9,R1
    040DA 1C87      ADC	R8,R7
    040DB 9F19      MUL	R17,R25
    040DC 0C90      ADD	R9,R0
    040DD 1C81      ADC	R8,R1
    040DE 9F0A      MUL	R16,R26
    040DF 0C90      ADD	R9,R0
    040E0 1C81      ADC	R8,R1
    040E1 9F38      MUL	R19,R24
    040E2 0C80      ADD	R8,R0
    040E3 9F29      MUL	R18,R25
    040E4 0C80      ADD	R8,R0
    040E5 9F1A      MUL	R17,R26
    040E6 0C80      ADD	R8,R0
    040E7 9F0B      MUL	R16,R27
    040E8 0C80      ADD	R8,R0
    040E9 9019      LD	R1,Y+
    040EA 9009      LD	R0,Y+
    040EB 2D0B      MOV	R16,R11
    040EC 2D1A      MOV	R17,R10
    040ED 2D29      MOV	R18,R9
    040EE 2D38      MOV	R19,R8
    040EF 9079      LD	R7,Y+
    040F0 940C 417F JMP	long_epilog
pop_xgset003C:
    040F2 90A9      LD	R10,Y+
    040F3 90B9      LD	R11,Y+
    040F4 90C9      LD	R12,Y+
    040F5 90D9      LD	R13,Y+
    040F6 9508      RET
pop_xgset00FC:
    040F7 90A9      LD	R10,Y+
    040F8 90B9      LD	R11,Y+
    040F9 90C9      LD	R12,Y+
    040FA 90D9      LD	R13,Y+
    040FB 90E9      LD	R14,Y+
    040FC 90F9      LD	R15,Y+
    040FD 9508      RET
pop_xgset30FC:
    040FE 90A9      LD	R10,Y+
    040FF 90B9      LD	R11,Y+
    04100 90C9      LD	R12,Y+
    04101 90D9      LD	R13,Y+
    04102 90E9      LD	R14,Y+
    04103 90F9      LD	R15,Y+
    04104 9149      LD	R20,Y+
    04105 9159      LD	R21,Y+
    04106 9508      RET
pop_xgsetF0FC:
    04107 90A9      LD	R10,Y+
    04108 90B9      LD	R11,Y+
    04109 90C9      LD	R12,Y+
    0410A 90D9      LD	R13,Y+
    0410B 90E9      LD	R14,Y+
    0410C 90F9      LD	R15,Y+
    0410D 9149      LD	R20,Y+
    0410E 9159      LD	R21,Y+
    0410F 9169      LD	R22,Y+
    04110 9179      LD	R23,Y+
    04111 9508      RET
push_xgsetF0FC:
    04112 937A      ST	-Y,R23
    04113 936A      ST	-Y,R22
push_xgset30FC:
    04114 935A      ST	-Y,R21
    04115 934A      ST	-Y,R20
push_xgset00FC:
    04116 92FA      ST	-Y,R15
    04117 92EA      ST	-Y,R14
push_xgset003C:
    04118 92DA      ST	-Y,R13
    04119 92CA      ST	-Y,R12
    0411A 92BA      ST	-Y,R11
    0411B 92AA      ST	-Y,R10
    0411C 9508      RET
push_xgset300C:
    0411D 935A      ST	-Y,R21
    0411E 934A      ST	-Y,R20
    0411F 92BA      ST	-Y,R11
    04120 92AA      ST	-Y,R10
    04121 9508      RET
pop_xgset300C:
    04122 90A9      LD	R10,Y+
    04123 90B9      LD	R11,Y+
    04124 9149      LD	R20,Y+
    04125 9159      LD	R21,Y+
    04126 9508      RET
push_xgsetF000:
    04127 937A      ST	-Y,R23
    04128 936A      ST	-Y,R22
    04129 935A      ST	-Y,R21
    0412A 934A      ST	-Y,R20
    0412B 9508      RET
pop_xgsetF000:
    0412C 9149      LD	R20,Y+
    0412D 9159      LD	R21,Y+
    0412E 9169      LD	R22,Y+
    0412F 9179      LD	R23,Y+
    04130 9508      RET
push_xgsetF00C:
    04131 937A      ST	-Y,R23
    04132 936A      ST	-Y,R22
    04133 935A      ST	-Y,R21
    04134 934A      ST	-Y,R20
    04135 92BA      ST	-Y,R11
    04136 92AA      ST	-Y,R10
    04137 9508      RET
pop_xgsetF00C:
    04138 90A9      LD	R10,Y+
    04139 90B9      LD	R11,Y+
    0413A 9149      LD	R20,Y+
    0413B 9159      LD	R21,Y+
    0413C 9169      LD	R22,Y+
    0413D 9179      LD	R23,Y+
    0413E 9508      RET
push_xgset303C:
    0413F 935A      ST	-Y,R21
    04140 934A      ST	-Y,R20
    04141 92DA      ST	-Y,R13
    04142 92CA      ST	-Y,R12
    04143 92BA      ST	-Y,R11
    04144 92AA      ST	-Y,R10
    04145 9508      RET
pop_xgset303C:
    04146 90A9      LD	R10,Y+
    04147 90B9      LD	R11,Y+
    04148 90C9      LD	R12,Y+
    04149 90D9      LD	R13,Y+
    0414A 9149      LD	R20,Y+
    0414B 9159      LD	R21,Y+
    0414C 9508      RET
push_xgsetF03C:
    0414D 937A      ST	-Y,R23
    0414E 936A      ST	-Y,R22
    0414F 935A      ST	-Y,R21
    04150 934A      ST	-Y,R20
    04151 92DA      ST	-Y,R13
    04152 92CA      ST	-Y,R12
    04153 92BA      ST	-Y,R11
    04154 92AA      ST	-Y,R10
    04155 9508      RET
pop_xgsetF03C:
    04156 90A9      LD	R10,Y+
    04157 90B9      LD	R11,Y+
    04158 90C9      LD	R12,Y+
    04159 90D9      LD	R13,Y+
    0415A 9149      LD	R20,Y+
    0415B 9159      LD	R21,Y+
    0415C 9169      LD	R22,Y+
    0415D 9179      LD	R23,Y+
    0415E 9508      RET
xicallx:
    0415F 920A      ST	-Y,R0
    04160 95D8      ELPM
    04161 920A      ST	-Y,R0
    04162 9631      ADIW	R30,1
    04163 95D8      ELPM
    04164 2DF0      MOV	R31,R0
    04165 91E9      LD	R30,Y+
    04166 9009      LD	R0,Y+
    04167 9409      IJMP
neg32:
    04168 9500      COM	R16
    04169 9510      COM	R17
    0416A 9520      COM	R18
    0416B 9530      COM	R19
    0416C 5F0F      SUBI	R16,0xFF
    0416D 4F1F      SBCI	R17,0xFF
    0416E 4F2F      SBCI	R18,0xFF
    0416F 4F3F      SBCI	R19,0xFF
    04170 9508      RET
long_prolog:
    04171 928A      ST	-Y,R8
    04172 929A      ST	-Y,R9
    04173 92AA      ST	-Y,R10
    04174 92BA      ST	-Y,R11
    04175 93EA      ST	-Y,R30
    04176 938A      ST	-Y,R24
    04177 939A      ST	-Y,R25
    04178 93AA      ST	-Y,R26
    04179 93BA      ST	-Y,R27
    0417A 8589      LDD	R24,Y+9
    0417B 859A      LDD	R25,Y+10
    0417C 85AB      LDD	R26,Y+11
    0417D 85BC      LDD	R27,Y+12
    0417E 9508      RET
long_epilog:
    0417F 91B9      LD	R27,Y+
    04180 91A9      LD	R26,Y+
    04181 9199      LD	R25,Y+
    04182 9189      LD	R24,Y+
    04183 91E9      LD	R30,Y+
    04184 90B9      LD	R11,Y+
    04185 90A9      LD	R10,Y+
    04186 9099      LD	R9,Y+
    04187 9089      LD	R8,Y+
    04188 9624      ADIW	R28,4
    04189 9508      RET
tstzero1:
    0418A 27EE      CLR	R30
    0418B 2BE0      OR	R30,R16
    0418C 2BE1      OR	R30,R17
    0418D 2BE2      OR	R30,R18
    0418E 2BE3      OR	R30,R19
    0418F 9508      RET
tstzero2:
    04190 27EE      CLR	R30
    04191 2BE8      OR	R30,R24
    04192 2BE9      OR	R30,R25
    04193 2BEA      OR	R30,R26
    04194 2BEB      OR	R30,R27
    04195 9508      RET
lsl16:
    04196 2322      TST	R18
    04197 F021      BEQ	0x419C
    04198 0F00      LSL	R16
    04199 1F11      ROL	R17
    0419A 952A      DEC	R18
    0419B CFFA      RJMP	lsl16
    0419C 9508      RET
lsl32:
    0419D 920F      PUSH	R0
    0419E 9009      LD	R0,Y+
    0419F 2000      TST	R0
    041A0 F031      BEQ	0x41A7
    041A1 0F00      LSL	R16
    041A2 1F11      ROL	R17
    041A3 1F22      ROL	R18
    041A4 1F33      ROL	R19
    041A5 940A      DEC	R0
    041A6 CFF8      RJMP	0x419F
    041A7 900F      POP	R0
    041A8 9508      RET
lsr16:
    041A9 2322      TST	R18
    041AA F021      BEQ	0x41AF
    041AB 9516      LSR	R17
    041AC 9507      ROR	R16
    041AD 952A      DEC	R18
    041AE CFFA      RJMP	lsr16
    041AF 9508      RET
lsr32:
    041B0 920F      PUSH	R0
    041B1 9009      LD	R0,Y+
    041B2 2000      TST	R0
    041B3 F031      BEQ	0x41BA
    041B4 9536      LSR	R19
    041B5 9527      ROR	R18
    041B6 9517      ROR	R17
    041B7 9507      ROR	R16
    041B8 940A      DEC	R0
    041B9 CFF8      RJMP	0x41B2
    041BA 900F      POP	R0
    041BB 9508      RET
asgnblk:
    041BC 93AA      ST	-Y,R26
    041BD 93BA      ST	-Y,R27
    041BE 93EA      ST	-Y,R30
    041BF 93FA      ST	-Y,R31
    041C0 920A      ST	-Y,R0
    041C1 81AF      LDD	R26,Y+7
    041C2 85B8      LDD	R27,Y+8
    041C3 81ED      LDD	R30,Y+5
    041C4 81FE      LDD	R31,Y+6
    041C5 3000      CPI	R16,0
    041C6 0701      CPC	R16,R17
    041C7 F029      BEQ	0x41CD
    041C8 9001      LD	R0,Z+
    041C9 920D      ST	X+,R0
    041CA 5001      SUBI	R16,1
    041CB 4010      SBCI	R17,0
    041CC CFF8      RJMP	0x41C5
    041CD 9009      LD	R0,Y+
    041CE 91F9      LD	R31,Y+
    041CF 91E9      LD	R30,Y+
    041D0 91B9      LD	R27,Y+
    041D1 91A9      LD	R26,Y+
    041D2 9624      ADIW	R28,4
    041D3 9508      RET
fpsub:
    041D4 9468      BSET	6
    041D5 C001      RJMP	fpadd_alt
fpadd:
    041D6 94E8      BCLR	6
fpadd_alt:
    041D7 940E 43EE CALL	saveFPRegs
    041D9 940E 4380 CALL	unpacks
    041DB F409      BNE	0x41DD
    041DC C048      RJMP	0x4225
    041DD 2CE6      MOV	R14,R6
    041DE 2CD5      MOV	R13,R5
    041DF 2CC4      MOV	R12,R4
    041E0 2EB3      MOV	R11,R19
    041E1 2EA2      MOV	R10,R18
    041E2 2E91      MOV	R9,R17
    041E3 2E80      MOV	R8,R16
    041E4 8100      LD	R16,Z
    041E5 8111      LDD	R17,Z+1
    041E6 8122      LDD	R18,Z+2
    041E7 8133      LDD	R19,Z+3
    041E8 940E 4380 CALL	unpacks
    041EA F409      BNE	0x41EC
    041EB C044      RJMP	0x4230
    041EC 2D84      MOV	R24,R4
    041ED 2D95      MOV	R25,R5
    041EE 198C      SUB	R24,R12
    041EF 099D      SBC	R25,R13
    041F0 F0B9      BEQ	0x4208
    041F1 F472      BPL	0x4200
    041F2 9590      COM	R25
    041F3 9580      COM	R24
    041F4 9601      ADIW	R24,1
    041F5 2C4C      MOV	R4,R12
    041F6 2C5D      MOV	R5,R13
    041F7 3188      CPI	R24,0x18
    041F8 F5B8      BCC	0x4230
    041F9 9535      ASR	R19
    041FA 9527      ROR	R18
    041FB 9517      ROR	R17
    041FC 9507      ROR	R16
    041FD 9701      SBIW	R24,1
    041FE F7D1      BNE	0x41F9
    041FF C008      RJMP	0x4208
    04200 3188      CPI	R24,0x18
    04201 F518      BCC	0x4225
    04202 94B5      ASR	R11
    04203 94A7      ROR	R10
    04204 9497      ROR	R9
    04205 9487      ROR	R8
    04206 9701      SBIW	R24,1
    04207 F7D1      BNE	0x4202
    04208 2466      CLR	R6
    04209 F02E      BRTS	0x420F
    0420A 0D08      ADD	R16,R8
    0420B 1D19      ADC	R17,R9
    0420C 1D2A      ADC	R18,R10
    0420D 1D3B      ADC	R19,R11
    0420E C009      RJMP	0x4218
    0420F 1A80      SUB	R8,R16
    04210 0A91      SBC	R9,R17
    04211 0AA2      SBC	R10,R18
    04212 0AB3      SBC	R11,R19
    04213 2D08      MOV	R16,R8
    04214 2D19      MOV	R17,R9
    04215 2D2A      MOV	R18,R10
    04216 2D3B      MOV	R19,R11
    04217 2333      TST	R19
    04218 F422      BPL	0x421D
    04219 940E 4168 CALL	neg32
    0421B E880      LDI	R24,0x80
    0421C 2E68      MOV	R6,R24
    0421D 940E 43A9 CALL	normalize_and_pack
    0421F C002      RJMP	0x4222
    04220 940E 43DE CALL	pack
    04222 940E 43FD CALL	restoreFPRegs
    04224 9508      RET
    04225 8100      LD	R16,Z
    04226 8111      LDD	R17,Z+1
    04227 8122      LDD	R18,Z+2
    04228 8133      LDD	R19,Z+3
    04229 F7C6      BRTC	0x4222
    0422A 940E 4388 CALL	tstR16_R19
    0422C F3A9      BEQ	0x4222
    0422D E880      LDI	R24,0x80
    0422E 2738      EOR	R19,R24
    0422F CFF2      RJMP	0x4222
    04230 2D08      MOV	R16,R8
    04231 2D19      MOV	R17,R9
    04232 2D2A      MOV	R18,R10
    04233 2D3B      MOV	R19,R11
    04234 2C4C      MOV	R4,R12
    04235 2C5D      MOV	R5,R13
    04236 2C6E      MOV	R6,R14
    04237 2333      TST	R19
    04238 F73A      BPL	0x4220
    04239 940E 4168 CALL	neg32
    0423B E880      LDI	R24,0x80
    0423C 2E68      MOV	R6,R24
    0423D CFE2      RJMP	0x4220
fpadd1:
    0423E 93FA      ST	-Y,R31
    0423F 93EA      ST	-Y,R30
    04240 81EA      LDD	R30,Y+2
    04241 81FB      LDD	R31,Y+3
    04242 940E 41D6 CALL	fpadd
    04244 91E9      LD	R30,Y+
    04245 91F9      LD	R31,Y+
    04246 9622      ADIW	R28,2
    04247 9508      RET
fpadd1x:
    04248 93FA      ST	-Y,R31
    04249 93EA      ST	-Y,R30
    0424A 81EA      LDD	R30,Y+2
    0424B 81FB      LDD	R31,Y+3
    0424C 940E 41D6 CALL	fpadd
    0424E 91E9      LD	R30,Y+
    0424F 91F9      LD	R31,Y+
    04250 8339      STD	Y+1,R19
    04251 8328      ST	Y,R18
    04252 931A      ST	-Y,R17
    04253 930A      ST	-Y,R16
    04254 9508      RET
fpadd2:
    04255 93FA      ST	-Y,R31
    04256 93EA      ST	-Y,R30
    04257 2FEC      MOV	R30,R28
    04258 2FFD      MOV	R31,R29
    04259 9632      ADIW	R30,2
    0425A 940E 41D6 CALL	fpadd
    0425C 91E9      LD	R30,Y+
    0425D 91F9      LD	R31,Y+
    0425E 9624      ADIW	R28,4
    0425F 9508      RET
fpadd2x:
    04260 93FA      ST	-Y,R31
    04261 93EA      ST	-Y,R30
    04262 2FEC      MOV	R30,R28
    04263 2FFD      MOV	R31,R29
    04264 9632      ADIW	R30,2
    04265 940E 41D6 CALL	fpadd
    04267 91E9      LD	R30,Y+
    04268 91F9      LD	R31,Y+
    04269 833B      STD	Y+3,R19
    0426A 832A      STD	Y+2,R18
    0426B 8319      STD	Y+1,R17
    0426C 8308      ST	Y,R16
    0426D 9508      RET
fpsub1:
    0426E 93FA      ST	-Y,R31
    0426F 93EA      ST	-Y,R30
    04270 81EA      LDD	R30,Y+2
    04271 81FB      LDD	R31,Y+3
    04272 940E 41D4 CALL	fpsub
    04274 91E9      LD	R30,Y+
    04275 91F9      LD	R31,Y+
    04276 9622      ADIW	R28,2
    04277 9508      RET
fpsub2:
    04278 93FA      ST	-Y,R31
    04279 93EA      ST	-Y,R30
    0427A 2FEC      MOV	R30,R28
    0427B 2FFD      MOV	R31,R29
    0427C 9632      ADIW	R30,2
    0427D 940E 41D4 CALL	fpsub
    0427F 91E9      LD	R30,Y+
    04280 91F9      LD	R31,Y+
    04281 9624      ADIW	R28,4
    04282 9508      RET
fpsub1x:
    04283 93FA      ST	-Y,R31
    04284 93EA      ST	-Y,R30
    04285 81EA      LDD	R30,Y+2
    04286 81FB      LDD	R31,Y+3
    04287 940E 41D4 CALL	fpsub
    04289 91E9      LD	R30,Y+
    0428A 91F9      LD	R31,Y+
    0428B 8339      STD	Y+1,R19
    0428C 8328      ST	Y,R18
    0428D 931A      ST	-Y,R17
    0428E 930A      ST	-Y,R16
    0428F 9508      RET
fpint:
    04290 924A      ST	-Y,R4
    04291 925A      ST	-Y,R5
    04292 926A      ST	-Y,R6
    04293 938A      ST	-Y,R24
    04294 940E 4390 CALL	unpacku
    04296 F111      BEQ	0x42B9
    04297 2055      TST	R5
    04298 F0E2      BMI	0x42B5
    04299 E18F      LDI	R24,0x1F
    0429A 1648      CP	R4,R24
    0429B F4C0      BCC	0x42B4
    0429C E187      LDI	R24,0x17
    0429D 1648      CP	R4,R24
    0429E F0D1      BEQ	0x42B9
    0429F F458      BCC	0x42AB
    042A0 9441      NEG	R4
    042A1 EE89      LDI	R24,0xE9
    042A2 1A48      SUB	R4,R24
    042A3 C005      RJMP	0x42A9
    042A4 9535      ASR	R19
    042A5 9527      ROR	R18
    042A6 9517      ROR	R17
    042A7 9507      ROR	R16
    042A8 944A      DEC	R4
    042A9 F7D1      BNE	0x42A4
    042AA C00E      RJMP	0x42B9
    042AB E187      LDI	R24,0x17
    042AC 1A48      SUB	R4,R24
    042AD 0F00      LSL	R16
    042AE 1F11      ROL	R17
    042AF 1F22      ROL	R18
    042B0 1F33      ROL	R19
    042B1 944A      DEC	R4
    042B2 F7D1      BNE	0x42AD
    042B3 C005      RJMP	0x42B9
    042B4 E73F      LDI	R19,0x7F
    042B5 2F23      MOV	R18,R19
    042B6 2F13      MOV	R17,R19
    042B7 2F03      MOV	R16,R19
    042B8 C004      RJMP	0x42BD
    042B9 2066      TST	R6
    042BA F011      BEQ	0x42BD
    042BB 940E 4168 CALL	neg32
    042BD 9189      LD	R24,Y+
    042BE 9069      LD	R6,Y+
    042BF 9059      LD	R5,Y+
    042C0 9049      LD	R4,Y+
    042C1 9508      RET
uint2fp:
    042C2 9468      BSET	6
    042C3 C001      RJMP	0x42C5
int2fp:
    042C4 94E8      BCLR	6
    042C5 2722      CLR	R18
    042C6 2733      CLR	R19
    042C7 F046      BRTS	0x42D0
    042C8 FD17      SBRC	R17,7
    042C9 9520      COM	R18
    042CA FD17      SBRC	R17,7
    042CB 9530      COM	R19
    042CC C003      RJMP	0x42D0
ulong2fp:
    042CD 9468      BSET	6
    042CE C001      RJMP	0x42D0
long2fp:
    042CF 94E8      BCLR	6
    042D0 924A      ST	-Y,R4
    042D1 925A      ST	-Y,R5
    042D2 926A      ST	-Y,R6
    042D3 938A      ST	-Y,R24
    042D4 E187      LDI	R24,0x17
    042D5 2E48      MOV	R4,R24
    042D6 2455      CLR	R5
    042D7 2466      CLR	R6
    042D8 F036      BRTS	0x42DF
    042D9 2333      TST	R19
    042DA F422      BPL	0x42DF
    042DB 940E 4168 CALL	neg32
    042DD E880      LDI	R24,0x80
    042DE 2E68      MOV	R6,R24
    042DF 940E 43A9 CALL	normalize_and_pack
    042E1 9189      LD	R24,Y+
    042E2 9069      LD	R6,Y+
    042E3 9059      LD	R5,Y+
    042E4 9049      LD	R4,Y+
    042E5 9508      RET
fpdiv1:
    042E6 93FA      ST	-Y,R31
    042E7 93EA      ST	-Y,R30
    042E8 81EA      LDD	R30,Y+2
    042E9 81FB      LDD	R31,Y+3
    042EA D027      RCALL	0x4312
    042EB 91E9      LD	R30,Y+
    042EC 91F9      LD	R31,Y+
    042ED 9622      ADIW	R28,2
    042EE 9508      RET
fpdiv2:
    042EF 93FA      ST	-Y,R31
    042F0 93EA      ST	-Y,R30
    042F1 2FEC      MOV	R30,R28
    042F2 2FFD      MOV	R31,R29
    042F3 9632      ADIW	R30,2
    042F4 D01D      RCALL	0x4312
    042F5 91E9      LD	R30,Y+
    042F6 91F9      LD	R31,Y+
    042F7 9624      ADIW	R28,4
    042F8 9508      RET
fpdiv1x:
    042F9 93FA      ST	-Y,R31
    042FA 93EA      ST	-Y,R30
    042FB 81EA      LDD	R30,Y+2
    042FC 81FB      LDD	R31,Y+3
    042FD D014      RCALL	0x4312
    042FE 91E9      LD	R30,Y+
    042FF 91F9      LD	R31,Y+
    04300 8339      STD	Y+1,R19
    04301 8328      ST	Y,R18
    04302 931A      ST	-Y,R17
    04303 930A      ST	-Y,R16
    04304 9508      RET
fpdiv2x:
    04305 93FA      ST	-Y,R31
    04306 93EA      ST	-Y,R30
    04307 2FEC      MOV	R30,R28
    04308 2FFD      MOV	R31,R29
    04309 9632      ADIW	R30,2
    0430A D007      RCALL	0x4312
    0430B 91E9      LD	R30,Y+
    0430C 91F9      LD	R31,Y+
    0430D 833B      STD	Y+3,R19
    0430E 832A      STD	Y+2,R18
    0430F 8319      STD	Y+1,R17
    04310 8308      ST	Y,R16
    04311 9508      RET
    04312 920A      ST	-Y,R0
    04313 921A      ST	-Y,R1
    04314 922A      ST	-Y,R2
    04315 923A      ST	-Y,R3
    04316 940E 43EE CALL	saveFPRegs
    04318 933A      ST	-Y,R19
    04319 932A      ST	-Y,R18
    0431A 931A      ST	-Y,R17
    0431B 930A      ST	-Y,R16
    0431C 8100      LD	R16,Z
    0431D 8111      LDD	R17,Z+1
    0431E 8122      LDD	R18,Z+2
    0431F 8133      LDD	R19,Z+3
    04320 940E 4390 CALL	unpacku
    04322 F409      BNE	0x4324
    04323 C057      RJMP	0x437B
    04324 2CE6      MOV	R14,R6
    04325 2CD5      MOV	R13,R5
    04326 2CC4      MOV	R12,R4
    04327 2EB3      MOV	R11,R19
    04328 2EA2      MOV	R10,R18
    04329 2E91      MOV	R9,R17
    0432A 2E80      MOV	R8,R16
    0432B 9109      LD	R16,Y+
    0432C 9119      LD	R17,Y+
    0432D 9129      LD	R18,Y+
    0432E 9139      LD	R19,Y+
    0432F 940E 4390 CALL	unpacku
    04331 F1A1      BEQ	0x4366
    04332 246E      EOR	R6,R14
    04333 184C      SUB	R4,R12
    04334 085D      SBC	R5,R13
    04335 E880      LDI	R24,0x80
    04336 1648      CP	R4,R24
    04337 0653      CPC	R5,R19
    04338 F00C      BLT	0x433A
    04339 C033      RJMP	0x436D
    0433A E881      LDI	R24,0x81
    0433B 1648      CP	R4,R24
    0433C EF8F      LDI	R24,0xFF
    0433D 0658      CPC	R5,R24
    0433E F40C      BGE	0x4340
    0433F C036      RJMP	0x4376
    04340 E280      LDI	R24,0x20
    04341 2433      CLR	R3
    04342 2E23      MOV	R2,R19
    04343 2E12      MOV	R1,R18
    04344 2E01      MOV	R0,R17
    04345 2F30      MOV	R19,R16
    04346 2722      CLR	R18
    04347 2711      CLR	R17
    04348 2700      CLR	R16
    04349 9426      LSR	R2
    0434A 9417      ROR	R1
    0434B 9407      ROR	R0
    0434C 9537      ROR	R19
    0434D 9527      ROR	R18
    0434E 0F00      LSL	R16
    0434F 1F11      ROL	R17
    04350 1F22      ROL	R18
    04351 1F33      ROL	R19
    04352 1C00      ROL	R0
    04353 1C11      ROL	R1
    04354 1C22      ROL	R2
    04355 1C33      ROL	R3
    04356 F028      BCS	0x435C
    04357 1808      SUB	R0,R8
    04358 0819      SBC	R1,R9
    04359 082A      SBC	R2,R10
    0435A 083B      SBC	R3,R11
    0435B C004      RJMP	0x4360
    0435C 0C08      ADD	R0,R8
    0435D 1C19      ADC	R1,R9
    0435E 1C2A      ADC	R2,R10
    0435F 1C3B      ADC	R3,R11
    04360 F00A      BMI	0x4362
    04361 6001      ORI	R16,1
    04362 958A      DEC	R24
    04363 F751      BNE	0x434E
    04364 940E 43A9 CALL	normalize_and_pack
    04366 940E 43FD CALL	restoreFPRegs
    04368 9039      LD	R3,Y+
    04369 9029      LD	R2,Y+
    0436A 9019      LD	R1,Y+
    0436B 9009      LD	R0,Y+
    0436C 9508      RET
    0436D EF0F      LDI	R16,0xFF
    0436E 2F10      MOV	R17,R16
    0436F E72F      LDI	R18,0x7F
    04370 E73F      LDI	R19,0x7F
    04371 2066      TST	R6
    04372 F399      BEQ	0x4366
    04373 940E 4168 CALL	neg32
    04375 CFF0      RJMP	0x4366
    04376 2700      CLR	R16
    04377 2F10      MOV	R17,R16
    04378 2F20      MOV	R18,R16
    04379 2F30      MOV	R19,R16
    0437A CFEB      RJMP	0x4366
    0437B 9109      LD	R16,Y+
    0437C 9119      LD	R17,Y+
    0437D 9129      LD	R18,Y+
    0437E 9139      LD	R19,Y+
    0437F CFED      RJMP	0x436D
unpacks:
    04380 D00F      RCALL	unpacku
    04381 F029      BEQ	0x4387
    04382 2066      TST	R6
    04383 F011      BEQ	0x4386
    04384 940E 4168 CALL	neg32
    04386 9498      BCLR	1
    04387 9508      RET
tstR16_R19:
    04388 2300      TST	R16
    04389 F429      BNE	0x438F
    0438A 2311      TST	R17
    0438B F419      BNE	0x438F
    0438C 2322      TST	R18
    0438D F409      BNE	0x438F
    0438E 2333      TST	R19
    0438F 9508      RET
unpacku:
    04390 DFF7      RCALL	tstR16_R19
    04391 F099      BEQ	0x43A5
    04392 938A      ST	-Y,R24
    04393 2E63      MOV	R6,R19
    04394 E880      LDI	R24,0x80
    04395 2268      AND	R6,R24
    04396 0F22      LSL	R18
    04397 1F33      ROL	R19
    04398 2E43      MOV	R4,R19
    04399 E78F      LDI	R24,0x7F
    0439A 1A48      SUB	R4,R24
    0439B 2455      CLR	R5
    0439C 2788      CLR	R24
    0439D 0A58      SBC	R5,R24
    0439E 9526      LSR	R18
    0439F E830      LDI	R19,0x80
    043A0 2B23      OR	R18,R19
    043A1 2733      CLR	R19
    043A2 9189      LD	R24,Y+
    043A3 9498      BCLR	1
    043A4 9508      RET
    043A5 2444      CLR	R4
    043A6 2455      CLR	R5
    043A7 2466      CLR	R6
    043A8 9508      RET
normalize_and_pack:
    043A9 DFDE      RCALL	tstR16_R19
    043AA F409      BNE	0x43AC
    043AB 9508      RET
    043AC 93AA      ST	-Y,R26
    043AD 93BA      ST	-Y,R27
    043AE 01D2      MOVW	R26,R4
    043AF 939A      ST	-Y,R25
    043B0 938A      ST	-Y,R24
    043B1 E78E      LDI	R24,0x7E
    043B2 E090      LDI	R25,0
    043B3 2333      TST	R19
    043B4 F049      BEQ	0x43BE
    043B5 9536      LSR	R19
    043B6 9527      ROR	R18
    043B7 9517      ROR	R17
    043B8 9507      ROR	R16
    043B9 17A8      CP	R26,R24
    043BA 07B9      CPC	R27,R25
    043BB F4CC      BGE	0x43D5
    043BC 9611      ADIW	R26,1
    043BD CFF5      RJMP	0x43B3
    043BE 9580      COM	R24
    043BF 9590      COM	R25
    043C0 9601      ADIW	R24,1
    043C1 2322      TST	R18
    043C2 F0BA      BMI	0x43DA
    043C3 0F00      LSL	R16
    043C4 1F11      ROL	R17
    043C5 1F22      ROL	R18
    043C6 17A8      CP	R26,R24
    043C7 07B9      CPC	R27,R25
    043C8 F014      BLT	0x43CB
    043C9 9711      SBIW	R26,1
    043CA CFF6      RJMP	0x43C1
    043CB 2700      CLR	R16
    043CC 2711      CLR	R17
    043CD 2722      CLR	R18
    043CE 2733      CLR	R19
    043CF 9189      LD	R24,Y+
    043D0 9199      LD	R25,Y+
    043D1 012D      MOVW	R4,R26
    043D2 91B9      LD	R27,Y+
    043D3 91A9      LD	R26,Y+
    043D4 9508      RET
    043D5 2733      CLR	R19
    043D6 EF0F      LDI	R16,0xFF
    043D7 2F10      MOV	R17,R16
    043D8 E72F      LDI	R18,0x7F
    043D9 2F32      MOV	R19,R18
    043DA 9189      LD	R24,Y+
    043DB 9199      LD	R25,Y+
    043DC 012D      MOVW	R4,R26
    043DD C002      RJMP	0x43E0
pack:
    043DE 93AA      ST	-Y,R26
    043DF 93BA      ST	-Y,R27
    043E0 DFA7      RCALL	tstR16_R19
    043E1 F049      BEQ	0x43EB
    043E2 01D2      MOVW	R26,R4
    043E3 58A1      SUBI	R26,0x81
    043E4 4FBF      SBCI	R27,0xFF
    043E5 012D      MOVW	R4,R26
    043E6 2D34      MOV	R19,R4
    043E7 0F22      LSL	R18
    043E8 9536      LSR	R19
    043E9 9527      ROR	R18
    043EA 2936      OR	R19,R6
    043EB 91B9      LD	R27,Y+
    043EC 91A9      LD	R26,Y+
    043ED 9508      RET
saveFPRegs:
    043EE 924A      ST	-Y,R4
    043EF 925A      ST	-Y,R5
    043F0 926A      ST	-Y,R6
    043F1 927A      ST	-Y,R7
    043F2 928A      ST	-Y,R8
    043F3 929A      ST	-Y,R9
    043F4 92AA      ST	-Y,R10
    043F5 92BA      ST	-Y,R11
    043F6 92CA      ST	-Y,R12
    043F7 92DA      ST	-Y,R13
    043F8 92EA      ST	-Y,R14
    043F9 92FA      ST	-Y,R15
    043FA 938A      ST	-Y,R24
    043FB 939A      ST	-Y,R25
    043FC 9508      RET
restoreFPRegs:
    043FD 9199      LD	R25,Y+
    043FE 9189      LD	R24,Y+
    043FF 90F9      LD	R15,Y+
    04400 90E9      LD	R14,Y+
    04401 90D9      LD	R13,Y+
    04402 90C9      LD	R12,Y+
    04403 90B9      LD	R11,Y+
    04404 90A9      LD	R10,Y+
    04405 9099      LD	R9,Y+
    04406 9089      LD	R8,Y+
    04407 9079      LD	R7,Y+
    04408 9069      LD	R6,Y+
    04409 9059      LD	R5,Y+
    0440A 9049      LD	R4,Y+
    0440B 9508      RET
fpmule:
    0440C 940E 43EE CALL	saveFPRegs
    0440E 93AA      ST	-Y,R26
    0440F 93BA      ST	-Y,R27
    04410 940E 4390 CALL	unpacku
    04412 F1E1      BEQ	0x444F
    04413 2CE6      MOV	R14,R6
    04414 2CD5      MOV	R13,R5
    04415 2CC4      MOV	R12,R4
    04416 2EB3      MOV	R11,R19
    04417 2EA2      MOV	R10,R18
    04418 2E91      MOV	R9,R17
    04419 2E80      MOV	R8,R16
    0441A 8100      LD	R16,Z
    0441B 8111      LDD	R17,Z+1
    0441C 8122      LDD	R18,Z+2
    0441D 8133      LDD	R19,Z+3
    0441E 940E 4390 CALL	unpacku
    04420 F171      BEQ	0x444F
    04421 246E      EOR	R6,R14
    04422 0C4C      ADD	R4,R12
    04423 1C5D      ADC	R5,R13
    04424 E880      LDI	R24,0x80
    04425 1648      CP	R4,R24
    04426 0653      CPC	R5,R19
    04427 F564      BGE	0x4454
    04428 E881      LDI	R24,0x81
    04429 1648      CP	R4,R24
    0442A EF8F      LDI	R24,0xFF
    0442B 0658      CPC	R5,R24
    0442C F16C      BLT	0x445A
    0442D 9EA2      MUL	R10,R18
    0442E 2DB1      MOV	R27,R1
    0442F 2DA0      MOV	R26,R0
    04430 9E91      MUL	R9,R17
    04431 2D91      MOV	R25,R1
    04432 2D80      MOV	R24,R0
    04433 9EA0      MUL	R10,R16
    04434 0D80      ADD	R24,R0
    04435 1D91      ADC	R25,R1
    04436 1FA3      ADC	R26,R19
    04437 1FB3      ADC	R27,R19
    04438 9E82      MUL	R8,R18
    04439 0D80      ADD	R24,R0
    0443A 1D91      ADC	R25,R1
    0443B 1FA3      ADC	R26,R19
    0443C 1FB3      ADC	R27,R19
    0443D 9E92      MUL	R9,R18
    0443E 0D90      ADD	R25,R0
    0443F 1DA1      ADC	R26,R1
    04440 1FB3      ADC	R27,R19
    04441 9EA1      MUL	R10,R17
    04442 0D90      ADD	R25,R0
    04443 1DA1      ADC	R26,R1
    04444 1FB3      ADC	R27,R19
    04445 2F2B      MOV	R18,R27
    04446 2F1A      MOV	R17,R26
    04447 2F09      MOV	R16,R25
    04448 0F88      LSL	R24
    04449 1F00      ROL	R16
    0444A 1F11      ROL	R17
    0444B 1F22      ROL	R18
    0444C 1F33      ROL	R19
    0444D 940E 43A9 CALL	normalize_and_pack
    0444F 91B9      LD	R27,Y+
    04450 91A9      LD	R26,Y+
    04451 940E 43FD CALL	restoreFPRegs
    04453 9508      RET
    04454 EF0F      LDI	R16,0xFF
    04455 2F10      MOV	R17,R16
    04456 E72F      LDI	R18,0x7F
    04457 E78F      LDI	R24,0x7F
    04458 2E48      MOV	R4,R24
    04459 CFF5      RJMP	0x444F
    0445A 2700      CLR	R16
    0445B 2F10      MOV	R17,R16
    0445C 2F20      MOV	R18,R16
    0445D 2F30      MOV	R19,R16
    0445E CFF0      RJMP	0x444F
fpmule1:
    0445F 93FA      ST	-Y,R31
    04460 93EA      ST	-Y,R30
    04461 81EA      LDD	R30,Y+2
    04462 81FB      LDD	R31,Y+3
    04463 940E 440C CALL	fpmule
    04465 91E9      LD	R30,Y+
    04466 91F9      LD	R31,Y+
    04467 9622      ADIW	R28,2
    04468 9508      RET
fpmule2:
    04469 93FA      ST	-Y,R31
    0446A 93EA      ST	-Y,R30
    0446B 2FEC      MOV	R30,R28
    0446C 2FFD      MOV	R31,R29
    0446D 9632      ADIW	R30,2
    0446E 940E 440C CALL	fpmule
    04470 91E9      LD	R30,Y+
    04471 91F9      LD	R31,Y+
    04472 9624      ADIW	R28,4
    04473 9508      RET
fpmule1x:
    04474 93FA      ST	-Y,R31
    04475 93EA      ST	-Y,R30
    04476 81EA      LDD	R30,Y+2
    04477 81FB      LDD	R31,Y+3
    04478 940E 440C CALL	fpmule
    0447A 91E9      LD	R30,Y+
    0447B 91F9      LD	R31,Y+
    0447C 8339      STD	Y+1,R19
    0447D 8328      ST	Y,R18
    0447E 931A      ST	-Y,R17
    0447F 930A      ST	-Y,R16
    04480 9508      RET
fpmule2x:
    04481 93FA      ST	-Y,R31
    04482 93EA      ST	-Y,R30
    04483 2FEC      MOV	R30,R28
    04484 2FFD      MOV	R31,R29
    04485 9632      ADIW	R30,2
    04486 940E 440C CALL	fpmule
    04488 91E9      LD	R30,Y+
    04489 91F9      LD	R31,Y+
    0448A 833B      STD	Y+3,R19
    0448B 832A      STD	Y+2,R18
    0448C 8319      STD	Y+1,R17
    0448D 8308      ST	Y,R16
    0448E 9508      RET
fpcmp:
    0448F 940E 41D4 CALL	fpsub
    04491 2333      TST	R19
    04492 F03A      BMI	0x449A
    04493 940E 4388 CALL	tstR16_R19
    04495 F011      BEQ	0x4498
    04496 E001      LDI	R16,1
    04497 9508      RET
    04498 2700      CLR	R16
    04499 9508      RET
    0449A EF0F      LDI	R16,0xFF
    0449B 9508      RET
fpcmp1:
    0449C 93FA      ST	-Y,R31
    0449D 93EA      ST	-Y,R30
    0449E 81EA      LDD	R30,Y+2
    0449F 81FB      LDD	R31,Y+3
    044A0 940E 448F CALL	fpcmp
    044A2 91E9      LD	R30,Y+
    044A3 91F9      LD	R31,Y+
    044A4 9622      ADIW	R28,2
    044A5 2300      TST	R16
    044A6 9508      RET
fpcmp2:
    044A7 93FA      ST	-Y,R31
    044A8 93EA      ST	-Y,R30
    044A9 2FEC      MOV	R30,R28
    044AA 2FFD      MOV	R31,R29
    044AB 9632      ADIW	R30,2
    044AC 940E 448F CALL	fpcmp
    044AE 91E9      LD	R30,Y+
    044AF 91F9      LD	R31,Y+
    044B0 9624      ADIW	R28,4
    044B1 2300      TST	R16
    044B2 9508      RET
fpneg:
    044B3 940E 4388 CALL	tstR16_R19
    044B5 F021      BEQ	0x44BA
    044B6 930F      PUSH	R16
    044B7 E800      LDI	R16,0x80
    044B8 2730      EOR	R19,R16
    044B9 910F      POP	R16
    044BA 9508      RET
fpneg2:
    044BB 940E 44B3 CALL	fpneg
    044BD 933A      ST	-Y,R19
    044BE 932A      ST	-Y,R18
    044BF 931A      ST	-Y,R17
    044C0 930A      ST	-Y,R16
    044C1 9508      RET
_cstrcpy:
    044C2 2FA0      MOV	R26,R16
    044C3 2FB1      MOV	R27,R17
    044C4 2FE2      MOV	R30,R18
    044C5 2FF3      MOV	R31,R19
    044C6 95C8      LPM
    044C7 9631      ADIW	R30,1
    044C8 920D      ST	X+,R0
    044C9 2000      TST	R0
    044CA F7D9      BNE	0x44C6
    044CB 9508      RET
_cstrlen:
    044CC 2FE0      MOV	R30,R16
    044CD 2FF1      MOV	R31,R17
    044CE 27AA      CLR	R26
    044CF 27BB      CLR	R27
    044D0 95C8      LPM
    044D1 2000      TST	R0
    044D2 F019      BEQ	0x44D6
    044D3 9631      ADIW	R30,1
    044D4 9611      ADIW	R26,1
    044D5 CFFA      RJMP	0x44D0
    044D6 2F0A      MOV	R16,R26
    044D7 2F1B      MOV	R17,R27
    044D8 9508      RET
_atoi:
    044D9 940E 4131 CALL	push_xgsetF00C
    044DB 0158      MOVW	R10,R16
    044DC C003      RJMP	0x44E0
    044DD 01C5      MOVW	R24,R10
    044DE 9601      ADIW	R24,1
    044DF 015C      MOVW	R10,R24
    044E0 01F5      MOVW	R30,R10
    044E1 8100      LD	R16,Z
    044E2 2711      CLR	R17
    044E3 940E 488C CALL	_isspace
    044E5 3000      CPI	R16,0
    044E6 0701      CPC	R16,R17
    044E7 F7A9      BNE	0x44DD
    044E8 2766      CLR	R22
    044E9 2777      CLR	R23
    044EA 01F5      MOVW	R30,R10
    044EB 8180      LD	R24,Z
    044EC 328D      CPI	R24,0x2D
    044ED F429      BNE	0x44F3
    044EE E061      LDI	R22,1
    044EF 01CF      MOVW	R24,R30
    044F0 9601      ADIW	R24,1
    044F1 015C      MOVW	R10,R24
    044F2 C007      RJMP	0x44FA
    044F3 01F5      MOVW	R30,R10
    044F4 8180      LD	R24,Z
    044F5 328B      CPI	R24,0x2B
    044F6 F419      BNE	0x44FA
    044F7 01CF      MOVW	R24,R30
    044F8 9601      ADIW	R24,1
    044F9 015C      MOVW	R10,R24
    044FA 2744      CLR	R20
    044FB 2755      CLR	R21
    044FC C00E      RJMP	0x450B
    044FD E00A      LDI	R16,0xA
    044FE E010      LDI	R17,0
    044FF 019A      MOVW	R18,R20
    04500 940E 40AE CALL	empy16s
    04502 01A8      MOVW	R20,R16
    04503 01F5      MOVW	R30,R10
    04504 9021      LD	R2,Z+
    04505 015F      MOVW	R10,R30
    04506 2433      CLR	R3
    04507 0D42      ADD	R20,R2
    04508 1D53      ADC	R21,R3
    04509 5340      SUBI	R20,0x30
    0450A 4050      SBCI	R21,0
    0450B 01F5      MOVW	R30,R10
    0450C 8100      LD	R16,Z
    0450D 2711      CLR	R17
    0450E 940E 4878 CALL	_isdigit
    04510 3000      CPI	R16,0
    04511 0701      CPC	R16,R17
    04512 F751      BNE	0x44FD
    04513 3060      CPI	R22,0
    04514 0767      CPC	R22,R23
    04515 F031      BEQ	0x451C
    04516 018A      MOVW	R16,R20
    04517 9500      COM	R16
    04518 9510      COM	R17
    04519 5F0F      SUBI	R16,0xFF
    0451A 4F1F      SBCI	R17,0xFF
    0451B C001      RJMP	0x451D
    0451C 018A      MOVW	R16,R20
    0451D 940C 4138 JMP	pop_xgsetF00C
_itoa:
    0451F 940E 3FCD CALL	push_arg4
    04521 940E 4112 CALL	push_xgsetF0FC
    04523 01A9      MOVW	R20,R18
    04524 84EE      LDD	R14,Y+14
    04525 84FF      LDD	R15,Y+15
    04526 015A      MOVW	R10,R20
    04527 20AA      TST	R10
    04528 F451      BNE	0x4533
    04529 20BB      TST	R11
    0452A F441      BNE	0x4533
    0452B E380      LDI	R24,0x30
    0452C 85EA      LDD	R30,Y+10
    0452D 85FB      LDD	R31,Y+11
    0452E 8380      ST	Z,R24
    0452F 2422      CLR	R2
    04530 8221      STD	Z+1,R2
    04531 018F      MOVW	R16,R30
    04532 C053      RJMP	0x4586
    04533 3040      CPI	R20,0
    04534 E0E0      LDI	R30,0
    04535 075E      CPC	R21,R30
    04536 F46C      BGE	0x4544
    04537 01C7      MOVW	R24,R14
    04538 308A      CPI	R24,0xA
    04539 E0E0      LDI	R30,0
    0453A 079E      CPC	R25,R30
    0453B F441      BNE	0x4544
    0453C 24CC      CLR	R12
    0453D 94C3      INC	R12
    0453E 01C5      MOVW	R24,R10
    0453F 9580      COM	R24
    04540 9590      COM	R25
    04541 9601      ADIW	R24,1
    04542 015C      MOVW	R10,R24
    04543 C001      RJMP	0x4545
    04544 24CC      CLR	R12
    04545 856A      LDD	R22,Y+10
    04546 857B      LDD	R23,Y+11
    04547 0197      MOVW	R18,R14
    04548 0185      MOVW	R16,R10
    04549 940E 3FFC CALL	mod16u
    0454B 01A8      MOVW	R20,R16
    0454C E089      LDI	R24,0x9
    0454D E090      LDI	R25,0
    0454E 1780      CP	R24,R16
    0454F 0791      CPC	R25,R17
    04550 F034      BLT	0x4557
    04551 01CA      MOVW	R24,R20
    04552 96C0      ADIW	R24,0x30
    04553 01FB      MOVW	R30,R22
    04554 9381      ST	Z+,R24
    04555 01BF      MOVW	R22,R30
    04556 C006      RJMP	0x455D
    04557 01CA      MOVW	R24,R20
    04558 5A89      SUBI	R24,0xA9
    04559 4F9F      SBCI	R25,0xFF
    0455A 01FB      MOVW	R30,R22
    0455B 9381      ST	Z+,R24
    0455C 01BF      MOVW	R22,R30
    0455D 0197      MOVW	R18,R14
    0455E 0185      MOVW	R16,R10
    0455F 940E 3FFE CALL	div16u
    04561 0158      MOVW	R10,R16
    04562 20AA      TST	R10
    04563 F719      BNE	0x4547
    04564 20BB      TST	R11
    04565 F709      BNE	0x4547
    04566 20CC      TST	R12
    04567 F021      BEQ	0x456C
    04568 E28D      LDI	R24,0x2D
    04569 01FB      MOVW	R30,R22
    0456A 9381      ST	Z+,R24
    0456B 01BF      MOVW	R22,R30
    0456C 012B      MOVW	R4,R22
    0456D 5061      SUBI	R22,1
    0456E 4070      SBCI	R23,0
    0456F 2422      CLR	R2
    04570 01F2      MOVW	R30,R4
    04571 8220      ST	Z,R2
    04572 84AA      LDD	R10,Y+10
    04573 84BB      LDD	R11,Y+11
    04574 C00C      RJMP	0x4581
    04575 01F5      MOVW	R30,R10
    04576 80C0      LD	R12,Z
    04577 01FB      MOVW	R30,R22
    04578 8020      LD	R2,Z
    04579 01F5      MOVW	R30,R10
    0457A 9221      ST	Z+,R2
    0457B 015F      MOVW	R10,R30
    0457C 011B      MOVW	R2,R22
    0457D 5061      SUBI	R22,1
    0457E 4070      SBCI	R23,0
    0457F 01F1      MOVW	R30,R2
    04580 82C0      ST	Z,R12
    04581 16A6      CP	R10,R22
    04582 06B7      CPC	R11,R23
    04583 F388      BCS	0x4575
    04584 850A      LDD	R16,Y+10
    04585 851B      LDD	R17,Y+11
    04586 940E 4107 CALL	pop_xgsetF0FC
    04588 9624      ADIW	R28,4
    04589 9508      RET
_ltoa:
    0458A 940E 3FCD CALL	push_arg4
    0458C 940E 4112 CALL	push_xgsetF0FC
    0458E 9724      SBIW	R28,4
    0458F 8828      LDD	R2,Y+16
    04590 8839      LDD	R3,Y+17
    04591 884A      LDD	R4,Y+18
    04592 885B      LDD	R5,Y+19
    04593 8228      ST	Y,R2
    04594 8239      STD	Y+1,R3
    04595 824A      STD	Y+2,R4
    04596 825B      STD	Y+3,R5
    04597 8828      LDD	R2,Y+16
    04598 8839      LDD	R3,Y+17
    04599 884A      LDD	R4,Y+18
    0459A 885B      LDD	R5,Y+19
    0459B 9488      BCLR	0
    0459C 2022      TST	R2
    0459D 0432      CPC	R3,R2
    0459E 0442      CPC	R4,R2
    0459F 0452      CPC	R5,R2
    045A0 F441      BNE	0x45A9
    045A1 E380      LDI	R24,0x30
    045A2 85EE      LDD	R30,Y+14
    045A3 85FF      LDD	R31,Y+15
    045A4 8380      ST	Z,R24
    045A5 2422      CLR	R2
    045A6 8221      STD	Z+1,R2
    045A7 018F      MOVW	R16,R30
    045A8 C094      RJMP	0x463D
    045A9 E040      LDI	R20,0
    045AA E050      LDI	R21,0
    045AB E060      LDI	R22,0
    045AC E070      LDI	R23,0
    045AD 8828      LDD	R2,Y+16
    045AE 8839      LDD	R3,Y+17
    045AF 884A      LDD	R4,Y+18
    045B0 885B      LDD	R5,Y+19
    045B1 1624      CP	R2,R20
    045B2 0635      CPC	R3,R21
    045B3 0646      CPC	R4,R22
    045B4 0657      CPC	R5,R23
    045B5 F4EC      BGE	0x45D3
    045B6 898C      LDD	R24,Y+20
    045B7 899D      LDD	R25,Y+21
    045B8 308A      CPI	R24,0xA
    045B9 E0A0      LDI	R26,0
    045BA 079A      CPC	R25,R26
    045BB F4B9      BNE	0x45D3
    045BC 24AA      CLR	R10
    045BD 94A3      INC	R10
    045BE E041      LDI	R20,1
    045BF E050      LDI	R21,0
    045C0 E060      LDI	R22,0
    045C1 E070      LDI	R23,0
    045C2 8028      LD	R2,Y
    045C3 8039      LDD	R3,Y+1
    045C4 804A      LDD	R4,Y+2
    045C5 805B      LDD	R5,Y+3
    045C6 9420      COM	R2
    045C7 9430      COM	R3
    045C8 9440      COM	R4
    045C9 9450      COM	R5
    045CA 0E24      ADD	R2,R20
    045CB 1E35      ADC	R3,R21
    045CC 1E46      ADC	R4,R22
    045CD 1E57      ADC	R5,R23
    045CE 8228      ST	Y,R2
    045CF 8239      STD	Y+1,R3
    045D0 824A      STD	Y+2,R4
    045D1 825B      STD	Y+3,R5
    045D2 C001      RJMP	0x45D4
    045D3 24AA      CLR	R10
    045D4 84CE      LDD	R12,Y+14
    045D5 84DF      LDD	R13,Y+15
    045D6 882C      LDD	R2,Y+20
    045D7 883D      LDD	R3,Y+21
    045D8 2444      CLR	R4
    045D9 FC37      SBRC	R3,7
    045DA 9440      COM	R4
    045DB 2455      CLR	R5
    045DC FC47      SBRC	R4,7
    045DD 9450      COM	R5
    045DE 8108      LD	R16,Y
    045DF 8119      LDD	R17,Y+1
    045E0 812A      LDD	R18,Y+2
    045E1 813B      LDD	R19,Y+3
    045E2 925A      ST	-Y,R5
    045E3 924A      ST	-Y,R4
    045E4 923A      ST	-Y,R3
    045E5 922A      ST	-Y,R2
    045E6 940E 401A CALL	mod32u
    045E8 0178      MOVW	R14,R16
    045E9 E089      LDI	R24,0x9
    045EA E090      LDI	R25,0
    045EB 1780      CP	R24,R16
    045EC 0791      CPC	R25,R17
    045ED F034      BLT	0x45F4
    045EE 01C7      MOVW	R24,R14
    045EF 96C0      ADIW	R24,0x30
    045F0 01F6      MOVW	R30,R12
    045F1 9381      ST	Z+,R24
    045F2 016F      MOVW	R12,R30
    045F3 C006      RJMP	0x45FA
    045F4 01C7      MOVW	R24,R14
    045F5 5A89      SUBI	R24,0xA9
    045F6 4F9F      SBCI	R25,0xFF
    045F7 01F6      MOVW	R30,R12
    045F8 9381      ST	Z+,R24
    045F9 016F      MOVW	R12,R30
    045FA 882C      LDD	R2,Y+20
    045FB 883D      LDD	R3,Y+21
    045FC 2444      CLR	R4
    045FD FC37      SBRC	R3,7
    045FE 9440      COM	R4
    045FF 2455      CLR	R5
    04600 FC47      SBRC	R4,7
    04601 9450      COM	R5
    04602 8108      LD	R16,Y
    04603 8119      LDD	R17,Y+1
    04604 812A      LDD	R18,Y+2
    04605 813B      LDD	R19,Y+3
    04606 925A      ST	-Y,R5
    04607 924A      ST	-Y,R4
    04608 923A      ST	-Y,R3
    04609 922A      ST	-Y,R2
    0460A 940E 4018 CALL	div32u
    0460C 8308      ST	Y,R16
    0460D 8319      STD	Y+1,R17
    0460E 832A      STD	Y+2,R18
    0460F 833B      STD	Y+3,R19
    04610 8028      LD	R2,Y
    04611 8039      LDD	R3,Y+1
    04612 804A      LDD	R4,Y+2
    04613 805B      LDD	R5,Y+3
    04614 9488      BCLR	0
    04615 2022      TST	R2
    04616 0432      CPC	R3,R2
    04617 0442      CPC	R4,R2
    04618 0452      CPC	R5,R2
    04619 F009      BEQ	0x461B
    0461A CFBB      RJMP	0x45D6
    0461B 20AA      TST	R10
    0461C F021      BEQ	0x4621
    0461D E28D      LDI	R24,0x2D
    0461E 01F6      MOVW	R30,R12
    0461F 9381      ST	Z+,R24
    04620 016F      MOVW	R12,R30
    04621 0126      MOVW	R4,R12
    04622 01C2      MOVW	R24,R4
    04623 9701      SBIW	R24,1
    04624 016C      MOVW	R12,R24
    04625 2422      CLR	R2
    04626 01F2      MOVW	R30,R4
    04627 8220      ST	Z,R2
    04628 84EE      LDD	R14,Y+14
    04629 84FF      LDD	R15,Y+15
    0462A C00D      RJMP	0x4638
    0462B 01F7      MOVW	R30,R14
    0462C 80A0      LD	R10,Z
    0462D 01F6      MOVW	R30,R12
    0462E 8020      LD	R2,Z
    0462F 01F7      MOVW	R30,R14
    04630 9221      ST	Z+,R2
    04631 017F      MOVW	R14,R30
    04632 0116      MOVW	R2,R12
    04633 01C1      MOVW	R24,R2
    04634 9701      SBIW	R24,1
    04635 016C      MOVW	R12,R24
    04636 01F1      MOVW	R30,R2
    04637 82A0      ST	Z,R10
    04638 14EC      CP	R14,R12
    04639 04FD      CPC	R15,R13
    0463A F380      BCS	0x462B
    0463B 850E      LDD	R16,Y+14
    0463C 851F      LDD	R17,Y+15
    0463D 9624      ADIW	R28,4
    0463E 940E 4107 CALL	pop_xgsetF0FC
    04640 9624      ADIW	R28,4
    04641 9508      RET
_ultoa:
    04642 933A      ST	-Y,R19
    04643 932A      ST	-Y,R18
    04644 940E 4112 CALL	push_xgsetF0FC
    04646 0158      MOVW	R10,R16
    04647 84CE      LDD	R12,Y+14
    04648 84DF      LDD	R13,Y+15
    04649 01A5      MOVW	R20,R10
    0464A 0116      MOVW	R2,R12
    0464B 2444      CLR	R4
    0464C FC37      SBRC	R3,7
    0464D 9440      COM	R4
    0464E 2455      CLR	R5
    0464F FC47      SBRC	R4,7
    04650 9450      COM	R5
    04651 850A      LDD	R16,Y+10
    04652 851B      LDD	R17,Y+11
    04653 852C      LDD	R18,Y+12
    04654 853D      LDD	R19,Y+13
    04655 925A      ST	-Y,R5
    04656 924A      ST	-Y,R4
    04657 923A      ST	-Y,R3
    04658 922A      ST	-Y,R2
    04659 940E 401A CALL	mod32u
    0465B 01B8      MOVW	R22,R16
    0465C E089      LDI	R24,0x9
    0465D E090      LDI	R25,0
    0465E 1780      CP	R24,R16
    0465F 0791      CPC	R25,R17
    04660 F034      BLT	0x4667
    04661 01CB      MOVW	R24,R22
    04662 96C0      ADIW	R24,0x30
    04663 01FA      MOVW	R30,R20
    04664 9381      ST	Z+,R24
    04665 01AF      MOVW	R20,R30
    04666 C006      RJMP	0x466D
    04667 01CB      MOVW	R24,R22
    04668 5A89      SUBI	R24,0xA9
    04669 4F9F      SBCI	R25,0xFF
    0466A 01FA      MOVW	R30,R20
    0466B 9381      ST	Z+,R24
    0466C 01AF      MOVW	R20,R30
    0466D 0116      MOVW	R2,R12
    0466E 2444      CLR	R4
    0466F FC37      SBRC	R3,7
    04670 9440      COM	R4
    04671 2455      CLR	R5
    04672 FC47      SBRC	R4,7
    04673 9450      COM	R5
    04674 850A      LDD	R16,Y+10
    04675 851B      LDD	R17,Y+11
    04676 852C      LDD	R18,Y+12
    04677 853D      LDD	R19,Y+13
    04678 925A      ST	-Y,R5
    04679 924A      ST	-Y,R4
    0467A 923A      ST	-Y,R3
    0467B 922A      ST	-Y,R2
    0467C 940E 4018 CALL	div32u
    0467E 870A      STD	Y+10,R16
    0467F 871B      STD	Y+11,R17
    04680 872C      STD	Y+12,R18
    04681 873D      STD	Y+13,R19
    04682 842A      LDD	R2,Y+10
    04683 843B      LDD	R3,Y+11
    04684 844C      LDD	R4,Y+12
    04685 845D      LDD	R5,Y+13
    04686 9488      BCLR	0
    04687 2022      TST	R2
    04688 0432      CPC	R3,R2
    04689 0442      CPC	R4,R2
    0468A 0452      CPC	R5,R2
    0468B F009      BEQ	0x468D
    0468C CFBD      RJMP	0x464A
    0468D 012A      MOVW	R4,R20
    0468E 5041      SUBI	R20,1
    0468F 4050      SBCI	R21,0
    04690 2422      CLR	R2
    04691 01F2      MOVW	R30,R4
    04692 8220      ST	Z,R2
    04693 0165      MOVW	R12,R10
    04694 C00C      RJMP	0x46A1
    04695 01F6      MOVW	R30,R12
    04696 80E0      LD	R14,Z
    04697 01FA      MOVW	R30,R20
    04698 8020      LD	R2,Z
    04699 01F6      MOVW	R30,R12
    0469A 9221      ST	Z+,R2
    0469B 016F      MOVW	R12,R30
    0469C 011A      MOVW	R2,R20
    0469D 5041      SUBI	R20,1
    0469E 4050      SBCI	R21,0
    0469F 01F1      MOVW	R30,R2
    046A0 82E0      ST	Z,R14
    046A1 16C4      CP	R12,R20
    046A2 06D5      CPC	R13,R21
    046A3 F388      BCS	0x4695
    046A4 0185      MOVW	R16,R10
    046A5 940E 4107 CALL	pop_xgsetF0FC
    046A7 9622      ADIW	R28,2
    046A8 9508      RET
_utoa:
    046A9 940E 4112 CALL	push_xgsetF0FC
    046AB 0169      MOVW	R12,R18
    046AC 0158      MOVW	R10,R16
    046AD 84EA      LDD	R14,Y+10
    046AE 84FB      LDD	R15,Y+11
    046AF 01A5      MOVW	R20,R10
    046B0 0197      MOVW	R18,R14
    046B1 0186      MOVW	R16,R12
    046B2 940E 3FFC CALL	mod16u
    046B4 01B8      MOVW	R22,R16
    046B5 E089      LDI	R24,0x9
    046B6 E090      LDI	R25,0
    046B7 1780      CP	R24,R16
    046B8 0791      CPC	R25,R17
    046B9 F034      BLT	0x46C0
    046BA 01CB      MOVW	R24,R22
    046BB 96C0      ADIW	R24,0x30
    046BC 01FA      MOVW	R30,R20
    046BD 9381      ST	Z+,R24
    046BE 01AF      MOVW	R20,R30
    046BF C006      RJMP	0x46C6
    046C0 01CB      MOVW	R24,R22
    046C1 5A89      SUBI	R24,0xA9
    046C2 4F9F      SBCI	R25,0xFF
    046C3 01FA      MOVW	R30,R20
    046C4 9381      ST	Z+,R24
    046C5 01AF      MOVW	R20,R30
    046C6 0197      MOVW	R18,R14
    046C7 0186      MOVW	R16,R12
    046C8 940E 3FFE CALL	div16u
    046CA 0168      MOVW	R12,R16
    046CB 20CC      TST	R12
    046CC F719      BNE	0x46B0
    046CD 20DD      TST	R13
    046CE F709      BNE	0x46B0
    046CF 012A      MOVW	R4,R20
    046D0 5041      SUBI	R20,1
    046D1 4050      SBCI	R21,0
    046D2 2422      CLR	R2
    046D3 01F2      MOVW	R30,R4
    046D4 8220      ST	Z,R2
    046D5 0165      MOVW	R12,R10
    046D6 C00C      RJMP	0x46E3
    046D7 01F6      MOVW	R30,R12
    046D8 80E0      LD	R14,Z
    046D9 01FA      MOVW	R30,R20
    046DA 8020      LD	R2,Z
    046DB 01F6      MOVW	R30,R12
    046DC 9221      ST	Z+,R2
    046DD 016F      MOVW	R12,R30
    046DE 011A      MOVW	R2,R20
    046DF 5041      SUBI	R20,1
    046E0 4050      SBCI	R21,0
    046E1 01F1      MOVW	R30,R2
    046E2 82E0      ST	Z,R14
    046E3 16C4      CP	R12,R20
    046E4 06D5      CPC	R13,R21
    046E5 F388      BCS	0x46D7
    046E6 0185      MOVW	R16,R10
    046E7 940C 4107 JMP	pop_xgsetF0FC
_ftoa:
    046E9 940E 3FCD CALL	push_arg4
    046EB 940E 4112 CALL	push_xgsetF0FC
    046ED 9764      SBIW	R28,0x14
    046EE A0CA      LDD	R12,Y+34
    046EF A0DB      LDD	R13,Y+35
    046F0 2422      CLR	R2
    046F1 2433      CLR	R3
    046F2 01F6      MOVW	R30,R12
    046F3 8231      STD	Z+1,R3
    046F4 8220      ST	Z,R2
    046F5 8C2E      LDD	R2,Y+30
    046F6 8C3F      LDD	R3,Y+31
    046F7 A048      LDD	R4,Y+32
    046F8 A059      LDD	R5,Y+33
    046F9 E304      LDI	R16,0x34
    046FA E011      LDI	R17,1
    046FB 940E 409A CALL	elpm32
    046FD 933A      ST	-Y,R19
    046FE 932A      ST	-Y,R18
    046FF 931A      ST	-Y,R17
    04700 930A      ST	-Y,R16
    04701 0181      MOVW	R16,R2
    04702 0192      MOVW	R18,R4
    04703 940E 44A7 CALL	fpcmp2
    04705 F479      BNE	0x4715
    04706 E380      LDI	R24,0x30
    04707 9380 1059 STS	Speed_rl+27,R24
    04709 E28E      LDI	R24,0x2E
    0470A 9380 105A STS	Speed_rl+28,R24
    0470C E380      LDI	R24,0x30
    0470D 9380 105B STS	Speed_rl+29,R24
    0470F 2422      CLR	R2
    04710 9220 105C STS	Speed_rl+30,R2
    04712 E509      LDI	R16,0x59
    04713 E110      LDI	R17,0x10
    04714 C15E      RJMP	0x4873
    04715 8C2E      LDD	R2,Y+30
    04716 8C3F      LDD	R3,Y+31
    04717 A048      LDD	R4,Y+32
    04718 A059      LDD	R5,Y+33
    04719 8628      STD	Y+8,R2
    0471A 8639      STD	Y+9,R3
    0471B 864A      STD	Y+10,R4
    0471C 865B      STD	Y+11,R5
    0471D E187      LDI	R24,0x17
    0471E E090      LDI	R25,0
    0471F 8508      LDD	R16,Y+8
    04720 8519      LDD	R17,Y+9
    04721 852A      LDD	R18,Y+10
    04722 853B      LDD	R19,Y+11
    04723 938A      ST	-Y,R24
    04724 940E 3FD2 CALL	asr32
    04726 2F80      MOV	R24,R16
    04727 2799      CLR	R25
    04728 578F      SUBI	R24,0x7F
    04729 4090      SBCI	R25,0
    0472A 015C      MOVW	R10,R24
    0472B EF4F      LDI	R20,0xFF
    0472C EF5F      LDI	R21,0xFF
    0472D EF6F      LDI	R22,0xFF
    0472E E070      LDI	R23,0
    0472F 8428      LDD	R2,Y+8
    04730 8439      LDD	R3,Y+9
    04731 844A      LDD	R4,Y+10
    04732 845B      LDD	R5,Y+11
    04733 2224      AND	R2,R20
    04734 2235      AND	R3,R21
    04735 2246      AND	R4,R22
    04736 2257      AND	R5,R23
    04737 93EF      PUSH	R30
    04738 2DE4      MOV	R30,R4
    04739 68E0      ORI	R30,0x80
    0473A 2E4E      MOV	R4,R30
    0473B 91EF      POP	R30
    0473C 8A28      STD	Y+16,R2
    0473D 8A39      STD	Y+17,R3
    0473E 8A4A      STD	Y+18,R4
    0473F 8A5B      STD	Y+19,R5
    04740 E080      LDI	R24,0
    04741 838C      STD	Y+4,R24
    04742 838D      STD	Y+5,R24
    04743 838E      STD	Y+6,R24
    04744 838F      STD	Y+7,R24
    04745 E080      LDI	R24,0
    04746 878C      STD	Y+12,R24
    04747 878D      STD	Y+13,R24
    04748 878E      STD	Y+14,R24
    04749 878F      STD	Y+15,R24
    0474A 01C5      MOVW	R24,R10
    0474B 318F      CPI	R24,0x1F
    0474C E0E0      LDI	R30,0
    0474D 079E      CPC	R25,R30
    0474E F044      BLT	0x4757
    0474F EF8E      LDI	R24,0xFE
    04750 EF9F      LDI	R25,0xFF
    04751 01F6      MOVW	R30,R12
    04752 8391      STD	Z+1,R25
    04753 8380      ST	Z,R24
    04754 2700      CLR	R16
    04755 2711      CLR	R17
    04756 C11C      RJMP	0x4873
    04757 01C5      MOVW	R24,R10
    04758 3E89      CPI	R24,0xE9
    04759 EFEF      LDI	R30,0xFF
    0475A 079E      CPC	R25,R30
    0475B F444      BGE	0x4764
    0475C EF8F      LDI	R24,0xFF
    0475D EF9F      LDI	R25,0xFF
    0475E 01F6      MOVW	R30,R12
    0475F 8391      STD	Z+1,R25
    04760 8380      ST	Z,R24
    04761 2700      CLR	R16
    04762 2711      CLR	R17
    04763 C10F      RJMP	0x4873
    04764 01C5      MOVW	R24,R10
    04765 3187      CPI	R24,0x17
    04766 E0A0      LDI	R26,0
    04767 079A      CPC	R25,R26
    04768 F06C      BLT	0x4776
    04769 9747      SBIW	R24,0x17
    0476A 8908      LDD	R16,Y+16
    0476B 8919      LDD	R17,Y+17
    0476C 892A      LDD	R18,Y+18
    0476D 893B      LDD	R19,Y+19
    0476E 938A      ST	-Y,R24
    0476F 940E 419D CALL	lsl32
    04771 870C      STD	Y+12,R16
    04772 871D      STD	Y+13,R17
    04773 872E      STD	Y+14,R18
    04774 873F      STD	Y+15,R19
    04775 C045      RJMP	0x47BB
    04776 01C5      MOVW	R24,R10
    04777 3080      CPI	R24,0
    04778 E0A0      LDI	R26,0
    04779 079A      CPC	R25,R26
    0477A F13C      BLT	0x47A2
    0477B E187      LDI	R24,0x17
    0477C E090      LDI	R25,0
    0477D 198A      SUB	R24,R10
    0477E 099B      SBC	R25,R11
    0477F 8908      LDD	R16,Y+16
    04780 8919      LDD	R17,Y+17
    04781 892A      LDD	R18,Y+18
    04782 893B      LDD	R19,Y+19
    04783 938A      ST	-Y,R24
    04784 940E 3FD2 CALL	asr32
    04786 870C      STD	Y+12,R16
    04787 871D      STD	Y+13,R17
    04788 872E      STD	Y+14,R18
    04789 873F      STD	Y+15,R19
    0478A 01C5      MOVW	R24,R10
    0478B 9601      ADIW	R24,1
    0478C 8908      LDD	R16,Y+16
    0478D 8919      LDD	R17,Y+17
    0478E 892A      LDD	R18,Y+18
    0478F 893B      LDD	R19,Y+19
    04790 938A      ST	-Y,R24
    04791 940E 419D CALL	lsl32
    04793 0118      MOVW	R2,R16
    04794 0129      MOVW	R4,R18
    04795 EF4F      LDI	R20,0xFF
    04796 EF5F      LDI	R21,0xFF
    04797 EF6F      LDI	R22,0xFF
    04798 E070      LDI	R23,0
    04799 2224      AND	R2,R20
    0479A 2235      AND	R3,R21
    0479B 2246      AND	R4,R22
    0479C 2257      AND	R5,R23
    0479D 822C      STD	Y+4,R2
    0479E 823D      STD	Y+5,R3
    0479F 824E      STD	Y+6,R4
    047A0 825F      STD	Y+7,R5
    047A1 C019      RJMP	0x47BB
    047A2 EF4F      LDI	R20,0xFF
    047A3 EF5F      LDI	R21,0xFF
    047A4 EF6F      LDI	R22,0xFF
    047A5 E070      LDI	R23,0
    047A6 8908      LDD	R16,Y+16
    047A7 8919      LDD	R17,Y+17
    047A8 892A      LDD	R18,Y+18
    047A9 893B      LDD	R19,Y+19
    047AA 2304      AND	R16,R20
    047AB 2315      AND	R17,R21
    047AC 2326      AND	R18,R22
    047AD 2337      AND	R19,R23
    047AE 01C5      MOVW	R24,R10
    047AF 9601      ADIW	R24,1
    047B0 9580      COM	R24
    047B1 9590      COM	R25
    047B2 5F8F      SUBI	R24,0xFF
    047B3 4F9F      SBCI	R25,0xFF
    047B4 938A      ST	-Y,R24
    047B5 940E 3FD2 CALL	asr32
    047B7 830C      STD	Y+4,R16
    047B8 831D      STD	Y+5,R17
    047B9 832E      STD	Y+6,R18
    047BA 833F      STD	Y+7,R19
    047BB E589      LDI	R24,0x59
    047BC E190      LDI	R25,0x10
    047BD 015C      MOVW	R10,R24
    047BE E040      LDI	R20,0
    047BF E050      LDI	R21,0
    047C0 E060      LDI	R22,0
    047C1 E070      LDI	R23,0
    047C2 8428      LDD	R2,Y+8
    047C3 8439      LDD	R3,Y+9
    047C4 844A      LDD	R4,Y+10
    047C5 845B      LDD	R5,Y+11
    047C6 1624      CP	R2,R20
    047C7 0635      CPC	R3,R21
    047C8 0646      CPC	R4,R22
    047C9 0657      CPC	R5,R23
    047CA F424      BGE	0x47CF
    047CB E28D      LDI	R24,0x2D
    047CC 01F5      MOVW	R30,R10
    047CD 9381      ST	Z+,R24
    047CE 015F      MOVW	R10,R30
    047CF 842C      LDD	R2,Y+12
    047D0 843D      LDD	R3,Y+13
    047D1 844E      LDD	R4,Y+14
    047D2 845F      LDD	R5,Y+15
    047D3 9488      BCLR	0
    047D4 2022      TST	R2
    047D5 0432      CPC	R3,R2
    047D6 0442      CPC	R4,R2
    047D7 0452      CPC	R5,R2
    047D8 F429      BNE	0x47DE
    047D9 E380      LDI	R24,0x30
    047DA 01F5      MOVW	R30,R10
    047DB 9381      ST	Z+,R24
    047DC 015F      MOVW	R10,R30
    047DD C016      RJMP	0x47F4
    047DE E08A      LDI	R24,0xA
    047DF E090      LDI	R25,0
    047E0 839B      STD	Y+3,R25
    047E1 838A      STD	Y+2,R24
    047E2 842C      LDD	R2,Y+12
    047E3 843D      LDD	R3,Y+13
    047E4 844E      LDD	R4,Y+14
    047E5 845F      LDD	R5,Y+15
    047E6 8248      ST	Y,R4
    047E7 8259      STD	Y+1,R5
    047E8 0191      MOVW	R18,R2
    047E9 0185      MOVW	R16,R10
    047EA 940E 458A CALL	_ltoa
    047EC C003      RJMP	0x47F0
    047ED 01C5      MOVW	R24,R10
    047EE 9601      ADIW	R24,1
    047EF 015C      MOVW	R10,R24
    047F0 01F5      MOVW	R30,R10
    047F1 8020      LD	R2,Z
    047F2 2022      TST	R2
    047F3 F7C9      BNE	0x47ED
    047F4 E28E      LDI	R24,0x2E
    047F5 01F5      MOVW	R30,R10
    047F6 9381      ST	Z+,R24
    047F7 015F      MOVW	R10,R30
    047F8 802C      LDD	R2,Y+4
    047F9 803D      LDD	R3,Y+5
    047FA 804E      LDD	R4,Y+6
    047FB 805F      LDD	R5,Y+7
    047FC 9488      BCLR	0
    047FD 2022      TST	R2
    047FE 0432      CPC	R3,R2
    047FF 0442      CPC	R4,R2
    04800 0452      CPC	R5,R2
    04801 F421      BNE	0x4806
    04802 E380      LDI	R24,0x30
    04803 9381      ST	Z+,R24
    04804 015F      MOVW	R10,R30
    04805 C068      RJMP	0x486E
    04806 E589      LDI	R24,0x59
    04807 E190      LDI	R25,0x10
    04808 0115      MOVW	R2,R10
    04809 1A28      SUB	R2,R24
    0480A 0A39      SBC	R3,R25
    0480B E08F      LDI	R24,0xF
    0480C E090      LDI	R25,0
    0480D 1982      SUB	R24,R2
    0480E 0993      SBC	R25,R3
    0480F 9701      SBIW	R24,1
    04810 2EC8      MOV	R12,R24
    04811 E087      LDI	R24,7
    04812 158C      CP	R24,R12
    04813 F408      BCC	0x4815
    04814 2EC8      MOV	R12,R24
    04815 24EE      CLR	R14
    04816 C042      RJMP	0x4859
    04817 E083      LDI	R24,3
    04818 E090      LDI	R25,0
    04819 810C      LDD	R16,Y+4
    0481A 811D      LDD	R17,Y+5
    0481B 812E      LDD	R18,Y+6
    0481C 813F      LDD	R19,Y+7
    0481D 938A      ST	-Y,R24
    0481E 940E 419D CALL	lsl32
    04820 0118      MOVW	R2,R16
    04821 0129      MOVW	R4,R18
    04822 806C      LDD	R6,Y+4
    04823 807D      LDD	R7,Y+5
    04824 808E      LDD	R8,Y+6
    04825 809F      LDD	R9,Y+7
    04826 0C66      LSL	R6
    04827 1C77      ROL	R7
    04828 1C88      ROL	R8
    04829 1C99      ROL	R9
    0482A 0C26      ADD	R2,R6
    0482B 1C37      ADC	R3,R7
    0482C 1C48      ADC	R4,R8
    0482D 1C59      ADC	R5,R9
    0482E 822C      STD	Y+4,R2
    0482F 823D      STD	Y+5,R3
    04830 824E      STD	Y+6,R4
    04831 825F      STD	Y+7,R5
    04832 E188      LDI	R24,0x18
    04833 E090      LDI	R25,0
    04834 810C      LDD	R16,Y+4
    04835 811D      LDD	R17,Y+5
    04836 812E      LDD	R18,Y+6
    04837 813F      LDD	R19,Y+7
    04838 938A      ST	-Y,R24
    04839 940E 3FD2 CALL	asr32
    0483B 0118      MOVW	R2,R16
    0483C 0129      MOVW	R4,R18
    0483D E340      LDI	R20,0x30
    0483E E050      LDI	R21,0
    0483F E060      LDI	R22,0
    04840 E070      LDI	R23,0
    04841 0E24      ADD	R2,R20
    04842 1E35      ADC	R3,R21
    04843 1E46      ADC	R4,R22
    04844 1E57      ADC	R5,R23
    04845 01F5      MOVW	R30,R10
    04846 9221      ST	Z+,R2
    04847 015F      MOVW	R10,R30
    04848 EF4F      LDI	R20,0xFF
    04849 EF5F      LDI	R21,0xFF
    0484A EF6F      LDI	R22,0xFF
    0484B E070      LDI	R23,0
    0484C 802C      LDD	R2,Y+4
    0484D 803D      LDD	R3,Y+5
    0484E 804E      LDD	R4,Y+6
    0484F 805F      LDD	R5,Y+7
    04850 2224      AND	R2,R20
    04851 2235      AND	R3,R21
    04852 2246      AND	R4,R22
    04853 2257      AND	R5,R23
    04854 822C      STD	Y+4,R2
    04855 823D      STD	Y+5,R3
    04856 824E      STD	Y+6,R4
    04857 825F      STD	Y+7,R5
    04858 94E3      INC	R14
    04859 14EC      CP	R14,R12
    0485A F408      BCC	0x485C
    0485B CFBB      RJMP	0x4817
    0485C 01C5      MOVW	R24,R10
    0485D 9701      SBIW	R24,1
    0485E 015C      MOVW	R10,R24
    0485F C003      RJMP	0x4863
    04860 01C5      MOVW	R24,R10
    04861 9701      SBIW	R24,1
    04862 015C      MOVW	R10,R24
    04863 01F5      MOVW	R30,R10
    04864 8180      LD	R24,Z
    04865 3380      CPI	R24,0x30
    04866 F421      BNE	0x486B
    04867 9731      SBIW	R30,1
    04868 8180      LD	R24,Z
    04869 328E      CPI	R24,0x2E
    0486A F7A9      BNE	0x4860
    0486B 01C5      MOVW	R24,R10
    0486C 9601      ADIW	R24,1
    0486D 015C      MOVW	R10,R24
    0486E 2422      CLR	R2
    0486F 01F5      MOVW	R30,R10
    04870 8220      ST	Z,R2
    04871 E509      LDI	R16,0x59
    04872 E110      LDI	R17,0x10
    04873 9664      ADIW	R28,0x14
    04874 940E 4107 CALL	pop_xgsetF0FC
    04876 9624      ADIW	R28,4
    04877 9508      RET
_isdigit:
    04878 E389      LDI	R24,0x39
    04879 E091      LDI	R25,1
    0487A 01F8      MOVW	R30,R16
    0487B 0FE8      ADD	R30,R24
    0487C 1FF9      ADC	R31,R25
    0487D 9106      ELPM	R16,Z
    0487E 2711      CLR	R17
    0487F 7004      ANDI	R16,4
    04880 7010      ANDI	R17,0
    04881 9508      RET
_islower:
    04882 E389      LDI	R24,0x39
    04883 E091      LDI	R25,1
    04884 01F8      MOVW	R30,R16
    04885 0FE8      ADD	R30,R24
    04886 1FF9      ADC	R31,R25
    04887 9106      ELPM	R16,Z
    04888 2711      CLR	R17
    04889 7002      ANDI	R16,2
    0488A 7010      ANDI	R17,0
    0488B 9508      RET
_isspace:
    0488C E389      LDI	R24,0x39
    0488D E091      LDI	R25,1
    0488E 01F8      MOVW	R30,R16
    0488F 0FE8      ADD	R30,R24
    04890 1FF9      ADC	R31,R25
    04891 9106      ELPM	R16,Z
    04892 2711      CLR	R17
    04893 7100      ANDI	R16,0x10
    04894 7010      ANDI	R17,0
    04895 9508      RET
_toupper:
    04896 934A      ST	-Y,R20
    04897 935A      ST	-Y,R21
    04898 01A8      MOVW	R20,R16
    04899 018A      MOVW	R16,R20
    0489A 940E 4882 CALL	_islower
    0489C 3000      CPI	R16,0
    0489D 0701      CPC	R16,R17
    0489E F031      BEQ	0x48A5
    0489F 018A      MOVW	R16,R20
    048A0 5601      SUBI	R16,0x61
    048A1 4010      SBCI	R17,0
    048A2 5B0F      SUBI	R16,0xBF
    048A3 4F1F      SBCI	R17,0xFF
    048A4 C001      RJMP	0x48A6
    048A5 018A      MOVW	R16,R20
    048A6 9159      LD	R21,Y+
    048A7 9149      LD	R20,Y+
    048A8 9508      RET
_satan:
    048A9 940E 3FCD CALL	push_arg4
    048AB 8028      LD	R2,Y
    048AC 8039      LDD	R3,Y+1
    048AD 804A      LDD	R4,Y+2
    048AE 805B      LDD	R5,Y+3
    048AF E609      LDI	R16,0x69
    048B0 E012      LDI	R17,2
    048B1 940E 409A CALL	elpm32
    048B3 933A      ST	-Y,R19
    048B4 932A      ST	-Y,R18
    048B5 931A      ST	-Y,R17
    048B6 930A      ST	-Y,R16
    048B7 0181      MOVW	R16,R2
    048B8 0192      MOVW	R18,R4
    048B9 940E 44A7 CALL	fpcmp2
    048BB F434      BGE	0x48C2
    048BC 8108      LD	R16,Y
    048BD 8119      LDD	R17,Y+1
    048BE 812A      LDD	R18,Y+2
    048BF 813B      LDD	R19,Y+3
    048C0 D059      RCALL	_xatan
    048C1 C056      RJMP	0x4918
    048C2 01CE      MOVW	R24,R28
    048C3 E605      LDI	R16,0x65
    048C4 E012      LDI	R17,2
    048C5 940E 409A CALL	elpm32
    048C7 939A      ST	-Y,R25
    048C8 938A      ST	-Y,R24
    048C9 940E 449C CALL	fpcmp1
    048CB F4BC      BGE	0x48E3
    048CC E50D      LDI	R16,0x5D
    048CD E012      LDI	R17,2
    048CE 940E 409A CALL	elpm32
    048D0 01CE      MOVW	R24,R28
    048D1 939A      ST	-Y,R25
    048D2 938A      ST	-Y,R24
    048D3 940E 42E6 CALL	fpdiv1
    048D5 D044      RCALL	_xatan
    048D6 0118      MOVW	R2,R16
    048D7 0129      MOVW	R4,R18
    048D8 E601      LDI	R16,0x61
    048D9 E012      LDI	R17,2
    048DA 940E 409A CALL	elpm32
    048DC 925A      ST	-Y,R5
    048DD 924A      ST	-Y,R4
    048DE 923A      ST	-Y,R3
    048DF 922A      ST	-Y,R2
    048E0 940E 4278 CALL	fpsub2
    048E2 C035      RJMP	0x4918
    048E3 8028      LD	R2,Y
    048E4 8039      LDD	R3,Y+1
    048E5 804A      LDD	R4,Y+2
    048E6 805B      LDD	R5,Y+3
    048E7 E50D      LDI	R16,0x5D
    048E8 E012      LDI	R17,2
    048E9 940E 409A CALL	elpm32
    048EB 933A      ST	-Y,R19
    048EC 932A      ST	-Y,R18
    048ED 931A      ST	-Y,R17
    048EE 930A      ST	-Y,R16
    048EF 0181      MOVW	R16,R2
    048F0 0192      MOVW	R18,R4
    048F1 940E 4278 CALL	fpsub2
    048F3 0118      MOVW	R2,R16
    048F4 0129      MOVW	R4,R18
    048F5 8068      LD	R6,Y
    048F6 8079      LDD	R7,Y+1
    048F7 808A      LDD	R8,Y+2
    048F8 809B      LDD	R9,Y+3
    048F9 E50D      LDI	R16,0x5D
    048FA E012      LDI	R17,2
    048FB 940E 409A CALL	elpm32
    048FD 933A      ST	-Y,R19
    048FE 932A      ST	-Y,R18
    048FF 931A      ST	-Y,R17
    04900 930A      ST	-Y,R16
    04901 0183      MOVW	R16,R6
    04902 0194      MOVW	R18,R8
    04903 940E 4260 CALL	fpadd2x
    04905 0181      MOVW	R16,R2
    04906 0192      MOVW	R18,R4
    04907 940E 42EF CALL	fpdiv2
    04909 D010      RCALL	_xatan
    0490A 0118      MOVW	R2,R16
    0490B 0129      MOVW	R4,R18
    0490C E509      LDI	R16,0x59
    0490D E012      LDI	R17,2
    0490E 940E 409A CALL	elpm32
    04910 933A      ST	-Y,R19
    04911 932A      ST	-Y,R18
    04912 931A      ST	-Y,R17
    04913 930A      ST	-Y,R16
    04914 0181      MOVW	R16,R2
    04915 0192      MOVW	R18,R4
    04916 940E 4255 CALL	fpadd2
    04918 9624      ADIW	R28,4
    04919 9508      RET
_xatan:
    0491A 940E 3FCD CALL	push_arg4
    0491C 940E 4127 CALL	push_xgsetF000
    0491E 9724      SBIW	R28,4
    0491F 8508      LDD	R16,Y+8
    04920 8519      LDD	R17,Y+9
    04921 852A      LDD	R18,Y+10
    04922 853B      LDD	R19,Y+11
    04923 01CE      MOVW	R24,R28
    04924 9608      ADIW	R24,0x8
    04925 939A      ST	-Y,R25
    04926 938A      ST	-Y,R24
    04927 940E 445F CALL	fpmule1
    04929 8308      ST	Y,R16
    0492A 8319      STD	Y+1,R17
    0492B 832A      STD	Y+2,R18
    0492C 833B      STD	Y+3,R19
    0492D 8428      LDD	R2,Y+8
    0492E 8439      LDD	R3,Y+9
    0492F 844A      LDD	R4,Y+10
    04930 845B      LDD	R5,Y+11
    04931 E505      LDI	R16,0x55
    04932 E012      LDI	R17,2
    04933 940E 409A CALL	elpm32
    04935 01CE      MOVW	R24,R28
    04936 939A      ST	-Y,R25
    04937 938A      ST	-Y,R24
    04938 940E 445F CALL	fpmule1
    0493A 0138      MOVW	R6,R16
    0493B 0149      MOVW	R8,R18
    0493C E501      LDI	R16,0x51
    0493D E012      LDI	R17,2
    0493E 940E 409A CALL	elpm32
    04940 933A      ST	-Y,R19
    04941 932A      ST	-Y,R18
    04942 931A      ST	-Y,R17
    04943 930A      ST	-Y,R16
    04944 0183      MOVW	R16,R6
    04945 0194      MOVW	R18,R8
    04946 940E 4260 CALL	fpadd2x
    04948 0181      MOVW	R16,R2
    04949 0192      MOVW	R18,R4
    0494A 940E 4469 CALL	fpmule2
    0494C 0118      MOVW	R2,R16
    0494D 0129      MOVW	R4,R18
    0494E 8068      LD	R6,Y
    0494F 8079      LDD	R7,Y+1
    04950 808A      LDD	R8,Y+2
    04951 809B      LDD	R9,Y+3
    04952 01A3      MOVW	R20,R6
    04953 01B4      MOVW	R22,R8
    04954 E40D      LDI	R16,0x4D
    04955 E012      LDI	R17,2
    04956 940E 409A CALL	elpm32
    04958 933A      ST	-Y,R19
    04959 932A      ST	-Y,R18
    0495A 931A      ST	-Y,R17
    0495B 930A      ST	-Y,R16
    0495C 018A      MOVW	R16,R20
    0495D 019B      MOVW	R18,R22
    0495E 940E 4260 CALL	fpadd2x
    04960 0183      MOVW	R16,R6
    04961 0194      MOVW	R18,R8
    04962 940E 4469 CALL	fpmule2
    04964 0138      MOVW	R6,R16
    04965 0149      MOVW	R8,R18
    04966 E409      LDI	R16,0x49
    04967 E012      LDI	R17,2
    04968 940E 409A CALL	elpm32
    0496A 933A      ST	-Y,R19
    0496B 932A      ST	-Y,R18
    0496C 931A      ST	-Y,R17
    0496D 930A      ST	-Y,R16
    0496E 0183      MOVW	R16,R6
    0496F 0194      MOVW	R18,R8
    04970 940E 4260 CALL	fpadd2x
    04972 0181      MOVW	R16,R2
    04973 0192      MOVW	R18,R4
    04974 940E 42EF CALL	fpdiv2
    04976 9624      ADIW	R28,4
    04977 940E 412C CALL	pop_xgsetF000
    04979 9624      ADIW	R28,4
    0497A 9508      RET
_asinf:
    0497B 940E 3FCD CALL	push_arg4
    0497D 934A      ST	-Y,R20
    0497E 9724      SBIW	R28,4
    0497F 802D      LDD	R2,Y+5
    04980 803E      LDD	R3,Y+6
    04981 804F      LDD	R4,Y+7
    04982 8458      LDD	R5,Y+8
    04983 E405      LDI	R16,0x45
    04984 E012      LDI	R17,2
    04985 940E 409A CALL	elpm32
    04987 933A      ST	-Y,R19
    04988 932A      ST	-Y,R18
    04989 931A      ST	-Y,R17
    0498A 930A      ST	-Y,R16
    0498B 0181      MOVW	R16,R2
    0498C 0192      MOVW	R18,R4
    0498D 940E 44A7 CALL	fpcmp2
    0498F F05C      BLT	0x499B
    04990 01CE      MOVW	R24,R28
    04991 9605      ADIW	R24,5
    04992 E50D      LDI	R16,0x5D
    04993 E012      LDI	R17,2
    04994 940E 409A CALL	elpm32
    04996 939A      ST	-Y,R25
    04997 938A      ST	-Y,R24
    04998 940E 449C CALL	fpcmp1
    0499A F45C      BGE	0x49A6
    0499B E081      LDI	R24,1
    0499C E090      LDI	R25,0
    0499D 9390 1069 STS	errno+1,R25
    0499F 9380 1068 STS	errno,R24
    049A1 E401      LDI	R16,0x41
    049A2 E012      LDI	R17,2
    049A3 940E 409A CALL	elpm32
    049A5 C07B      RJMP	0x4A21
    049A6 802D      LDD	R2,Y+5
    049A7 803E      LDD	R3,Y+6
    049A8 804F      LDD	R4,Y+7
    049A9 8458      LDD	R5,Y+8
    049AA E30D      LDI	R16,0x3D
    049AB E012      LDI	R17,2
    049AC 940E 409A CALL	elpm32
    049AE 933A      ST	-Y,R19
    049AF 932A      ST	-Y,R18
    049B0 931A      ST	-Y,R17
    049B1 930A      ST	-Y,R16
    049B2 0181      MOVW	R16,R2
    049B3 0192      MOVW	R18,R4
    049B4 940E 44A7 CALL	fpcmp2
    049B6 F014      BLT	0x49B9
    049B7 E041      LDI	R20,1
    049B8 C00B      RJMP	0x49C4
    049B9 810D      LDD	R16,Y+5
    049BA 811E      LDD	R17,Y+6
    049BB 812F      LDD	R18,Y+7
    049BC 8538      LDD	R19,Y+8
    049BD 940E 44B3 CALL	fpneg
    049BF 830D      STD	Y+5,R16
    049C0 831E      STD	Y+6,R17
    049C1 832F      STD	Y+7,R18
    049C2 8738      STD	Y+8,R19
    049C3 EF4F      LDI	R20,0xFF
    049C4 E50D      LDI	R16,0x5D
    049C5 E012      LDI	R17,2
    049C6 940E 409A CALL	elpm32
    049C8 0118      MOVW	R2,R16
    049C9 0129      MOVW	R4,R18
    049CA 810D      LDD	R16,Y+5
    049CB 811E      LDD	R17,Y+6
    049CC 812F      LDD	R18,Y+7
    049CD 8538      LDD	R19,Y+8
    049CE 01CE      MOVW	R24,R28
    049CF 9605      ADIW	R24,5
    049D0 939A      ST	-Y,R25
    049D1 938A      ST	-Y,R24
    049D2 940E 4474 CALL	fpmule1x
    049D4 0181      MOVW	R16,R2
    049D5 0192      MOVW	R18,R4
    049D6 940E 4278 CALL	fpsub2
    049D8 940E 4B83 CALL	_sqrtf
    049DA 8308      ST	Y,R16
    049DB 8319      STD	Y+1,R17
    049DC 832A      STD	Y+2,R18
    049DD 833B      STD	Y+3,R19
    049DE 01CE      MOVW	R24,R28
    049DF 9605      ADIW	R24,5
    049E0 E309      LDI	R16,0x39
    049E1 E012      LDI	R17,2
    049E2 940E 409A CALL	elpm32
    049E4 939A      ST	-Y,R25
    049E5 938A      ST	-Y,R24
    049E6 940E 449C CALL	fpcmp1
    049E8 F4E4      BGE	0x4A05
    049E9 8108      LD	R16,Y
    049EA 8119      LDD	R17,Y+1
    049EB 812A      LDD	R18,Y+2
    049EC 813B      LDD	R19,Y+3
    049ED 01CE      MOVW	R24,R28
    049EE 9605      ADIW	R24,5
    049EF 939A      ST	-Y,R25
    049F0 938A      ST	-Y,R24
    049F1 940E 42E6 CALL	fpdiv1
    049F3 DEB5      RCALL	_satan
    049F4 0118      MOVW	R2,R16
    049F5 0129      MOVW	R4,R18
    049F6 E601      LDI	R16,0x61
    049F7 E012      LDI	R17,2
    049F8 940E 409A CALL	elpm32
    049FA 925A      ST	-Y,R5
    049FB 924A      ST	-Y,R4
    049FC 923A      ST	-Y,R3
    049FD 922A      ST	-Y,R2
    049FE 940E 4278 CALL	fpsub2
    04A00 8308      ST	Y,R16
    04A01 8319      STD	Y+1,R17
    04A02 832A      STD	Y+2,R18
    04A03 833B      STD	Y+3,R19
    04A04 C00E      RJMP	0x4A13
    04A05 810D      LDD	R16,Y+5
    04A06 811E      LDD	R17,Y+6
    04A07 812F      LDD	R18,Y+7
    04A08 8538      LDD	R19,Y+8
    04A09 01CE      MOVW	R24,R28
    04A0A 939A      ST	-Y,R25
    04A0B 938A      ST	-Y,R24
    04A0C 940E 42E6 CALL	fpdiv1
    04A0E DE9A      RCALL	_satan
    04A0F 8308      ST	Y,R16
    04A10 8319      STD	Y+1,R17
    04A11 832A      STD	Y+2,R18
    04A12 833B      STD	Y+3,R19
    04A13 2422      CLR	R2
    04A14 1624      CP	R2,R20
    04A15 F42C      BGE	0x4A1B
    04A16 8108      LD	R16,Y
    04A17 8119      LDD	R17,Y+1
    04A18 812A      LDD	R18,Y+2
    04A19 813B      LDD	R19,Y+3
    04A1A C006      RJMP	0x4A21
    04A1B 8108      LD	R16,Y
    04A1C 8119      LDD	R17,Y+1
    04A1D 812A      LDD	R18,Y+2
    04A1E 813B      LDD	R19,Y+3
    04A1F 940E 44B3 CALL	fpneg
    04A21 9624      ADIW	R28,4
    04A22 9149      LD	R20,Y+
    04A23 9624      ADIW	R28,4
    04A24 9508      RET
_atan2f:
    04A25 940E 3FCD CALL	push_arg4
    04A27 802C      LDD	R2,Y+4
    04A28 803D      LDD	R3,Y+5
    04A29 804E      LDD	R4,Y+6
    04A2A 805F      LDD	R5,Y+7
    04A2B E801      LDI	R16,0x81
    04A2C E012      LDI	R17,2
    04A2D 940E 409A CALL	elpm32
    04A2F 933A      ST	-Y,R19
    04A30 932A      ST	-Y,R18
    04A31 931A      ST	-Y,R17
    04A32 930A      ST	-Y,R16
    04A33 0181      MOVW	R16,R2
    04A34 0192      MOVW	R18,R4
    04A35 940E 44A7 CALL	fpcmp2
    04A37 F581      BNE	0x4A68
    04A38 8028      LD	R2,Y
    04A39 8039      LDD	R3,Y+1
    04A3A 804A      LDD	R4,Y+2
    04A3B 805B      LDD	R5,Y+3
    04A3C E801      LDI	R16,0x81
    04A3D E012      LDI	R17,2
    04A3E 940E 409A CALL	elpm32
    04A40 933A      ST	-Y,R19
    04A41 932A      ST	-Y,R18
    04A42 931A      ST	-Y,R17
    04A43 930A      ST	-Y,R16
    04A44 0181      MOVW	R16,R2
    04A45 0192      MOVW	R18,R4
    04A46 940E 44A7 CALL	fpcmp2
    04A48 F459      BNE	0x4A54
    04A49 E081      LDI	R24,1
    04A4A E090      LDI	R25,0
    04A4B 9390 1069 STS	errno+1,R25
    04A4D 9380 1068 STS	errno,R24
    04A4F E70D      LDI	R16,0x7D
    04A50 E012      LDI	R17,2
    04A51 940E 409A CALL	elpm32
    04A53 C094      RJMP	0x4AE8
    04A54 01CE      MOVW	R24,R28
    04A55 E801      LDI	R16,0x81
    04A56 E012      LDI	R17,2
    04A57 940E 409A CALL	elpm32
    04A59 939A      ST	-Y,R25
    04A5A 938A      ST	-Y,R24
    04A5B 940E 449C CALL	fpcmp1
    04A5D F42C      BGE	0x4A63
    04A5E E709      LDI	R16,0x79
    04A5F E012      LDI	R17,2
    04A60 940E 409A CALL	elpm32
    04A62 C085      RJMP	0x4AE8
    04A63 E705      LDI	R16,0x75
    04A64 E012      LDI	R17,2
    04A65 940E 409A CALL	elpm32
    04A67 C080      RJMP	0x4AE8
    04A68 01CE      MOVW	R24,R28
    04A69 9604      ADIW	R24,4
    04A6A E801      LDI	R16,0x81
    04A6B E012      LDI	R17,2
    04A6C 940E 409A CALL	elpm32
    04A6E 939A      ST	-Y,R25
    04A6F 938A      ST	-Y,R24
    04A70 940E 449C CALL	fpcmp1
    04A72 F57C      BGE	0x4AA2
    04A73 8028      LD	R2,Y
    04A74 8039      LDD	R3,Y+1
    04A75 804A      LDD	R4,Y+2
    04A76 805B      LDD	R5,Y+3
    04A77 E801      LDI	R16,0x81
    04A78 E012      LDI	R17,2
    04A79 940E 409A CALL	elpm32
    04A7B 933A      ST	-Y,R19
    04A7C 932A      ST	-Y,R18
    04A7D 931A      ST	-Y,R17
    04A7E 930A      ST	-Y,R16
    04A7F 0181      MOVW	R16,R2
    04A80 0192      MOVW	R18,R4
    04A81 940E 44A7 CALL	fpcmp2
    04A83 F06C      BLT	0x4A91
    04A84 8108      LD	R16,Y
    04A85 8119      LDD	R17,Y+1
    04A86 812A      LDD	R18,Y+2
    04A87 813B      LDD	R19,Y+3
    04A88 01CE      MOVW	R24,R28
    04A89 9604      ADIW	R24,4
    04A8A 939A      ST	-Y,R25
    04A8B 938A      ST	-Y,R24
    04A8C 940E 42E6 CALL	fpdiv1
    04A8E 940E 48A9 CALL	_satan
    04A90 C057      RJMP	0x4AE8
    04A91 8108      LD	R16,Y
    04A92 8119      LDD	R17,Y+1
    04A93 812A      LDD	R18,Y+2
    04A94 813B      LDD	R19,Y+3
    04A95 940E 44B3 CALL	fpneg
    04A97 01CE      MOVW	R24,R28
    04A98 9604      ADIW	R24,4
    04A99 939A      ST	-Y,R25
    04A9A 938A      ST	-Y,R24
    04A9B 940E 42E6 CALL	fpdiv1
    04A9D 940E 48A9 CALL	_satan
    04A9F 940E 44B3 CALL	fpneg
    04AA1 C046      RJMP	0x4AE8
    04AA2 8028      LD	R2,Y
    04AA3 8039      LDD	R3,Y+1
    04AA4 804A      LDD	R4,Y+2
    04AA5 805B      LDD	R5,Y+3
    04AA6 E801      LDI	R16,0x81
    04AA7 E012      LDI	R17,2
    04AA8 940E 409A CALL	elpm32
    04AAA 933A      ST	-Y,R19
    04AAB 932A      ST	-Y,R18
    04AAC 931A      ST	-Y,R17
    04AAD 930A      ST	-Y,R16
    04AAE 0181      MOVW	R16,R2
    04AAF 0192      MOVW	R18,R4
    04AB0 940E 44A7 CALL	fpcmp2
    04AB2 F0DC      BLT	0x4ACE
    04AB3 8108      LD	R16,Y
    04AB4 8119      LDD	R17,Y+1
    04AB5 812A      LDD	R18,Y+2
    04AB6 813B      LDD	R19,Y+3
    04AB7 940E 44B3 CALL	fpneg
    04AB9 01CE      MOVW	R24,R28
    04ABA 9604      ADIW	R24,4
    04ABB 939A      ST	-Y,R25
    04ABC 938A      ST	-Y,R24
    04ABD 940E 42E6 CALL	fpdiv1
    04ABF 940E 48A9 CALL	_satan
    04AC1 0118      MOVW	R2,R16
    04AC2 0129      MOVW	R4,R18
    04AC3 E701      LDI	R16,0x71
    04AC4 E012      LDI	R17,2
    04AC5 940E 409A CALL	elpm32
    04AC7 925A      ST	-Y,R5
    04AC8 924A      ST	-Y,R4
    04AC9 923A      ST	-Y,R3
    04ACA 922A      ST	-Y,R2
    04ACB 940E 4278 CALL	fpsub2
    04ACD C01A      RJMP	0x4AE8
    04ACE 8108      LD	R16,Y
    04ACF 8119      LDD	R17,Y+1
    04AD0 812A      LDD	R18,Y+2
    04AD1 813B      LDD	R19,Y+3
    04AD2 01CE      MOVW	R24,R28
    04AD3 9604      ADIW	R24,4
    04AD4 939A      ST	-Y,R25
    04AD5 938A      ST	-Y,R24
    04AD6 940E 42E6 CALL	fpdiv1
    04AD8 940E 48A9 CALL	_satan
    04ADA 0118      MOVW	R2,R16
    04ADB 0129      MOVW	R4,R18
    04ADC E60D      LDI	R16,0x6D
    04ADD E012      LDI	R17,2
    04ADE 940E 409A CALL	elpm32
    04AE0 933A      ST	-Y,R19
    04AE1 932A      ST	-Y,R18
    04AE2 931A      ST	-Y,R17
    04AE3 930A      ST	-Y,R16
    04AE4 0181      MOVW	R16,R2
    04AE5 0192      MOVW	R18,R4
    04AE6 940E 4255 CALL	fpadd2
    04AE8 9624      ADIW	R28,4
    04AE9 9508      RET
_fabsf:
    04AEA 940E 3FCD CALL	push_arg4
    04AEC 9724      SBIW	R28,4
    04AED 802C      LDD	R2,Y+4
    04AEE 803D      LDD	R3,Y+5
    04AEF 804E      LDD	R4,Y+6
    04AF0 805F      LDD	R5,Y+7
    04AF1 E805      LDI	R16,0x85
    04AF2 E012      LDI	R17,2
    04AF3 940E 409A CALL	elpm32
    04AF5 933A      ST	-Y,R19
    04AF6 932A      ST	-Y,R18
    04AF7 931A      ST	-Y,R17
    04AF8 930A      ST	-Y,R16
    04AF9 0181      MOVW	R16,R2
    04AFA 0192      MOVW	R18,R4
    04AFB 940E 44A7 CALL	fpcmp2
    04AFD F45C      BGE	0x4B09
    04AFE 810C      LDD	R16,Y+4
    04AFF 811D      LDD	R17,Y+5
    04B00 812E      LDD	R18,Y+6
    04B01 813F      LDD	R19,Y+7
    04B02 940E 44B3 CALL	fpneg
    04B04 8308      ST	Y,R16
    04B05 8319      STD	Y+1,R17
    04B06 832A      STD	Y+2,R18
    04B07 833B      STD	Y+3,R19
    04B08 C008      RJMP	0x4B11
    04B09 802C      LDD	R2,Y+4
    04B0A 803D      LDD	R3,Y+5
    04B0B 804E      LDD	R4,Y+6
    04B0C 805F      LDD	R5,Y+7
    04B0D 8228      ST	Y,R2
    04B0E 8239      STD	Y+1,R3
    04B0F 824A      STD	Y+2,R4
    04B10 825B      STD	Y+3,R5
    04B11 8108      LD	R16,Y
    04B12 8119      LDD	R17,Y+1
    04B13 812A      LDD	R18,Y+2
    04B14 813B      LDD	R19,Y+3
    04B15 9628      ADIW	R28,0x8
    04B16 9508      RET
_frexpf:
    04B17 940E 3FCD CALL	push_arg4
    04B19 92AA      ST	-Y,R10
    04B1A 92BA      ST	-Y,R11
    04B1B 9728      SBIW	R28,0x8
    04B1C 84AE      LDD	R10,Y+14
    04B1D 84BF      LDD	R11,Y+15
    04B1E 842A      LDD	R2,Y+10
    04B1F 843B      LDD	R3,Y+11
    04B20 844C      LDD	R4,Y+12
    04B21 845D      LDD	R5,Y+13
    04B22 E80D      LDI	R16,0x8D
    04B23 E012      LDI	R17,2
    04B24 940E 409A CALL	elpm32
    04B26 933A      ST	-Y,R19
    04B27 932A      ST	-Y,R18
    04B28 931A      ST	-Y,R17
    04B29 930A      ST	-Y,R16
    04B2A 0181      MOVW	R16,R2
    04B2B 0192      MOVW	R18,R4
    04B2C 940E 44A7 CALL	fpcmp2
    04B2E F451      BNE	0x4B39
    04B2F 2422      CLR	R2
    04B30 2433      CLR	R3
    04B31 01F5      MOVW	R30,R10
    04B32 8231      STD	Z+1,R3
    04B33 8220      ST	Z,R2
    04B34 E809      LDI	R16,0x89
    04B35 E012      LDI	R17,2
    04B36 940E 409A CALL	elpm32
    04B38 C045      RJMP	0x4B7E
    04B39 842A      LDD	R2,Y+10
    04B3A 843B      LDD	R3,Y+11
    04B3B 844C      LDD	R4,Y+12
    04B3C 845D      LDD	R5,Y+13
    04B3D 8228      ST	Y,R2
    04B3E 8239      STD	Y+1,R3
    04B3F 824A      STD	Y+2,R4
    04B40 825B      STD	Y+3,R5
    04B41 802A      LDD	R2,Y+2
    04B42 803B      LDD	R3,Y+3
    04B43 0C22      LSL	R2
    04B44 1C33      ROL	R3
    04B45 823B      STD	Y+3,R3
    04B46 822A      STD	Y+2,R2
    04B47 2D83      MOV	R24,R3
    04B48 2799      CLR	R25
    04B49 578E      SUBI	R24,0x7E
    04B4A 4090      SBCI	R25,0
    04B4B 01F5      MOVW	R30,R10
    04B4C 8391      STD	Z+1,R25
    04B4D 8380      ST	Z,R24
    04B4E E78E      LDI	R24,0x7E
    04B4F 838B      STD	Y+3,R24
    04B50 802A      LDD	R2,Y+2
    04B51 803B      LDD	R3,Y+3
    04B52 9436      LSR	R3
    04B53 9427      ROR	R2
    04B54 823B      STD	Y+3,R3
    04B55 822A      STD	Y+2,R2
    04B56 842A      LDD	R2,Y+10
    04B57 843B      LDD	R3,Y+11
    04B58 844C      LDD	R4,Y+12
    04B59 845D      LDD	R5,Y+13
    04B5A E80D      LDI	R16,0x8D
    04B5B E012      LDI	R17,2
    04B5C 940E 409A CALL	elpm32
    04B5E 933A      ST	-Y,R19
    04B5F 932A      ST	-Y,R18
    04B60 931A      ST	-Y,R17
    04B61 930A      ST	-Y,R16
    04B62 0181      MOVW	R16,R2
    04B63 0192      MOVW	R18,R4
    04B64 940E 44A7 CALL	fpcmp2
    04B66 F45C      BGE	0x4B72
    04B67 8108      LD	R16,Y
    04B68 8119      LDD	R17,Y+1
    04B69 812A      LDD	R18,Y+2
    04B6A 813B      LDD	R19,Y+3
    04B6B 940E 44B3 CALL	fpneg
    04B6D 830C      STD	Y+4,R16
    04B6E 831D      STD	Y+5,R17
    04B6F 832E      STD	Y+6,R18
    04B70 833F      STD	Y+7,R19
    04B71 C008      RJMP	0x4B7A
    04B72 8028      LD	R2,Y
    04B73 8039      LDD	R3,Y+1
    04B74 804A      LDD	R4,Y+2
    04B75 805B      LDD	R5,Y+3
    04B76 822C      STD	Y+4,R2
    04B77 823D      STD	Y+5,R3
    04B78 824E      STD	Y+6,R4
    04B79 825F      STD	Y+7,R5
    04B7A 810C      LDD	R16,Y+4
    04B7B 811D      LDD	R17,Y+5
    04B7C 812E      LDD	R18,Y+6
    04B7D 813F      LDD	R19,Y+7
    04B7E 9628      ADIW	R28,0x8
    04B7F 90B9      LD	R11,Y+
    04B80 90A9      LD	R10,Y+
    04B81 9624      ADIW	R28,4
    04B82 9508      RET
_sqrtf:
    04B83 940E 3FCD CALL	push_arg4
    04B85 972C      SBIW	R28,0xC
    04B86 842C      LDD	R2,Y+12
    04B87 843D      LDD	R3,Y+13
    04B88 844E      LDD	R4,Y+14
    04B89 845F      LDD	R5,Y+15
    04B8A EA01      LDI	R16,0xA1
    04B8B E012      LDI	R17,2
    04B8C 940E 409A CALL	elpm32
    04B8E 933A      ST	-Y,R19
    04B8F 932A      ST	-Y,R18
    04B90 931A      ST	-Y,R17
    04B91 930A      ST	-Y,R16
    04B92 0181      MOVW	R16,R2
    04B93 0192      MOVW	R18,R4
    04B94 940E 44A7 CALL	fpcmp2
    04B96 F45C      BGE	0x4BA2
    04B97 E081      LDI	R24,1
    04B98 E090      LDI	R25,0
    04B99 9390 1069 STS	errno+1,R25
    04B9B 9380 1068 STS	errno,R24
    04B9D E90D      LDI	R16,0x9D
    04B9E E012      LDI	R17,2
    04B9F 940E 409A CALL	elpm32
    04BA1 C11D      RJMP	0x4CBF
    04BA2 842C      LDD	R2,Y+12
    04BA3 843D      LDD	R3,Y+13
    04BA4 844E      LDD	R4,Y+14
    04BA5 845F      LDD	R5,Y+15
    04BA6 EA01      LDI	R16,0xA1
    04BA7 E012      LDI	R17,2
    04BA8 940E 409A CALL	elpm32
    04BAA 933A      ST	-Y,R19
    04BAB 932A      ST	-Y,R18
    04BAC 931A      ST	-Y,R17
    04BAD 930A      ST	-Y,R16
    04BAE 0181      MOVW	R16,R2
    04BAF 0192      MOVW	R18,R4
    04BB0 940E 44A7 CALL	fpcmp2
    04BB2 F429      BNE	0x4BB8
    04BB3 E90D      LDI	R16,0x9D
    04BB4 E012      LDI	R17,2
    04BB5 940E 409A CALL	elpm32
    04BB7 C107      RJMP	0x4CBF
    04BB8 01CE      MOVW	R24,R28
    04BB9 9602      ADIW	R24,2
    04BBA 8399      STD	Y+1,R25
    04BBB 8388      ST	Y,R24
    04BBC 850C      LDD	R16,Y+12
    04BBD 851D      LDD	R17,Y+13
    04BBE 852E      LDD	R18,Y+14
    04BBF 853F      LDD	R19,Y+15
    04BC0 940E 4B17 CALL	_frexpf
    04BC2 830C      STD	Y+4,R16
    04BC3 831D      STD	Y+5,R17
    04BC4 832E      STD	Y+6,R18
    04BC5 833F      STD	Y+7,R19
    04BC6 802A      LDD	R2,Y+2
    04BC7 803B      LDD	R3,Y+3
    04BC8 FE20      SBRS	R2,0
    04BC9 C013      RJMP	0x4BDD
    04BCA 810C      LDD	R16,Y+4
    04BCB 811D      LDD	R17,Y+5
    04BCC 812E      LDD	R18,Y+6
    04BCD 813F      LDD	R19,Y+7
    04BCE 01CE      MOVW	R24,R28
    04BCF 9604      ADIW	R24,4
    04BD0 939A      ST	-Y,R25
    04BD1 938A      ST	-Y,R24
    04BD2 940E 423E CALL	fpadd1
    04BD4 830C      STD	Y+4,R16
    04BD5 831D      STD	Y+5,R17
    04BD6 832E      STD	Y+6,R18
    04BD7 833F      STD	Y+7,R19
    04BD8 818A      LDD	R24,Y+2
    04BD9 819B      LDD	R25,Y+3
    04BDA 9701      SBIW	R24,1
    04BDB 839B      STD	Y+3,R25
    04BDC 838A      STD	Y+2,R24
    04BDD E909      LDI	R16,0x99
    04BDE E012      LDI	R17,2
    04BDF 940E 409A CALL	elpm32
    04BE1 0118      MOVW	R2,R16
    04BE2 0129      MOVW	R4,R18
    04BE3 806C      LDD	R6,Y+4
    04BE4 807D      LDD	R7,Y+5
    04BE5 808E      LDD	R8,Y+6
    04BE6 809F      LDD	R9,Y+7
    04BE7 E905      LDI	R16,0x95
    04BE8 E012      LDI	R17,2
    04BE9 940E 409A CALL	elpm32
    04BEB 933A      ST	-Y,R19
    04BEC 932A      ST	-Y,R18
    04BED 931A      ST	-Y,R17
    04BEE 930A      ST	-Y,R16
    04BEF 0183      MOVW	R16,R6
    04BF0 0194      MOVW	R18,R8
    04BF1 940E 4260 CALL	fpadd2x
    04BF3 0181      MOVW	R16,R2
    04BF4 0192      MOVW	R18,R4
    04BF5 940E 4469 CALL	fpmule2
    04BF7 830C      STD	Y+4,R16
    04BF8 831D      STD	Y+5,R17
    04BF9 832E      STD	Y+6,R18
    04BFA 833F      STD	Y+7,R19
    04BFB C013      RJMP	0x4C0F
    04BFC E901      LDI	R16,0x91
    04BFD E012      LDI	R17,2
    04BFE 940E 409A CALL	elpm32
    04C00 01CE      MOVW	R24,R28
    04C01 9604      ADIW	R24,4
    04C02 939A      ST	-Y,R25
    04C03 938A      ST	-Y,R24
    04C04 940E 445F CALL	fpmule1
    04C06 830C      STD	Y+4,R16
    04C07 831D      STD	Y+5,R17
    04C08 832E      STD	Y+6,R18
    04C09 833F      STD	Y+7,R19
    04C0A 818A      LDD	R24,Y+2
    04C0B 819B      LDD	R25,Y+3
    04C0C 97CC      SBIW	R24,0x3C
    04C0D 839B      STD	Y+3,R25
    04C0E 838A      STD	Y+2,R24
    04C0F E38C      LDI	R24,0x3C
    04C10 E090      LDI	R25,0
    04C11 802A      LDD	R2,Y+2
    04C12 803B      LDD	R3,Y+3
    04C13 1582      CP	R24,R2
    04C14 0593      CPC	R25,R3
    04C15 F334      BLT	0x4BFC
    04C16 C019      RJMP	0x4C30
    04C17 802C      LDD	R2,Y+4
    04C18 803D      LDD	R3,Y+5
    04C19 804E      LDD	R4,Y+6
    04C1A 805F      LDD	R5,Y+7
    04C1B E901      LDI	R16,0x91
    04C1C E012      LDI	R17,2
    04C1D 940E 409A CALL	elpm32
    04C1F 933A      ST	-Y,R19
    04C20 932A      ST	-Y,R18
    04C21 931A      ST	-Y,R17
    04C22 930A      ST	-Y,R16
    04C23 0181      MOVW	R16,R2
    04C24 0192      MOVW	R18,R4
    04C25 940E 42EF CALL	fpdiv2
    04C27 830C      STD	Y+4,R16
    04C28 831D      STD	Y+5,R17
    04C29 832E      STD	Y+6,R18
    04C2A 833F      STD	Y+7,R19
    04C2B 818A      LDD	R24,Y+2
    04C2C 819B      LDD	R25,Y+3
    04C2D 96CC      ADIW	R24,0x3C
    04C2E 839B      STD	Y+3,R25
    04C2F 838A      STD	Y+2,R24
    04C30 818A      LDD	R24,Y+2
    04C31 819B      LDD	R25,Y+3
    04C32 3C84      CPI	R24,0xC4
    04C33 EFAF      LDI	R26,0xFF
    04C34 079A      CPC	R25,R26
    04C35 F30C      BLT	0x4C17
    04C36 E081      LDI	R24,1
    04C37 8788      STD	Y+8,R24
    04C38 E080      LDI	R24,0
    04C39 8789      STD	Y+9,R24
    04C3A 878A      STD	Y+10,R24
    04C3B 878B      STD	Y+11,R24
    04C3C 818A      LDD	R24,Y+2
    04C3D 819B      LDD	R25,Y+3
    04C3E 3080      CPI	R24,0
    04C3F E0A0      LDI	R26,0
    04C40 079A      CPC	R25,R26
    04C41 F12C      BLT	0x4C67
    04C42 011C      MOVW	R2,R24
    04C43 9435      ASR	R3
    04C44 9427      ROR	R2
    04C45 8508      LDD	R16,Y+8
    04C46 8519      LDD	R17,Y+9
    04C47 852A      LDD	R18,Y+10
    04C48 853B      LDD	R19,Y+11
    04C49 922A      ST	-Y,R2
    04C4A 940E 419D CALL	lsl32
    04C4C 8708      STD	Y+8,R16
    04C4D 8719      STD	Y+9,R17
    04C4E 872A      STD	Y+10,R18
    04C4F 873B      STD	Y+11,R19
    04C50 802C      LDD	R2,Y+4
    04C51 803D      LDD	R3,Y+5
    04C52 804E      LDD	R4,Y+6
    04C53 805F      LDD	R5,Y+7
    04C54 8508      LDD	R16,Y+8
    04C55 8519      LDD	R17,Y+9
    04C56 852A      LDD	R18,Y+10
    04C57 853B      LDD	R19,Y+11
    04C58 940E 42CF CALL	long2fp
    04C5A 933A      ST	-Y,R19
    04C5B 932A      ST	-Y,R18
    04C5C 931A      ST	-Y,R17
    04C5D 930A      ST	-Y,R16
    04C5E 0181      MOVW	R16,R2
    04C5F 0192      MOVW	R18,R4
    04C60 940E 4469 CALL	fpmule2
    04C62 830C      STD	Y+4,R16
    04C63 831D      STD	Y+5,R17
    04C64 832E      STD	Y+6,R18
    04C65 833F      STD	Y+7,R19
    04C66 C029      RJMP	0x4C90
    04C67 818A      LDD	R24,Y+2
    04C68 819B      LDD	R25,Y+3
    04C69 9580      COM	R24
    04C6A 9590      COM	R25
    04C6B 5F8F      SUBI	R24,0xFF
    04C6C 4F9F      SBCI	R25,0xFF
    04C6D 9595      ASR	R25
    04C6E 9587      ROR	R24
    04C6F 8508      LDD	R16,Y+8
    04C70 8519      LDD	R17,Y+9
    04C71 852A      LDD	R18,Y+10
    04C72 853B      LDD	R19,Y+11
    04C73 938A      ST	-Y,R24
    04C74 940E 419D CALL	lsl32
    04C76 8708      STD	Y+8,R16
    04C77 8719      STD	Y+9,R17
    04C78 872A      STD	Y+10,R18
    04C79 873B      STD	Y+11,R19
    04C7A 802C      LDD	R2,Y+4
    04C7B 803D      LDD	R3,Y+5
    04C7C 804E      LDD	R4,Y+6
    04C7D 805F      LDD	R5,Y+7
    04C7E 8508      LDD	R16,Y+8
    04C7F 8519      LDD	R17,Y+9
    04C80 852A      LDD	R18,Y+10
    04C81 853B      LDD	R19,Y+11
    04C82 940E 42CF CALL	long2fp
    04C84 933A      ST	-Y,R19
    04C85 932A      ST	-Y,R18
    04C86 931A      ST	-Y,R17
    04C87 930A      ST	-Y,R16
    04C88 0181      MOVW	R16,R2
    04C89 0192      MOVW	R18,R4
    04C8A 940E 42EF CALL	fpdiv2
    04C8C 830C      STD	Y+4,R16
    04C8D 831D      STD	Y+5,R17
    04C8E 832E      STD	Y+6,R18
    04C8F 833F      STD	Y+7,R19
    04C90 2422      CLR	R2
    04C91 2433      CLR	R3
    04C92 823B      STD	Y+3,R3
    04C93 822A      STD	Y+2,R2
    04C94 E909      LDI	R16,0x99
    04C95 E012      LDI	R17,2
    04C96 940E 409A CALL	elpm32
    04C98 0118      MOVW	R2,R16
    04C99 0129      MOVW	R4,R18
    04C9A 850C      LDD	R16,Y+12
    04C9B 851D      LDD	R17,Y+13
    04C9C 852E      LDD	R18,Y+14
    04C9D 853F      LDD	R19,Y+15
    04C9E 01CE      MOVW	R24,R28
    04C9F 9604      ADIW	R24,4
    04CA0 939A      ST	-Y,R25
    04CA1 938A      ST	-Y,R24
    04CA2 940E 42E6 CALL	fpdiv1
    04CA4 01CE      MOVW	R24,R28
    04CA5 9604      ADIW	R24,4
    04CA6 939A      ST	-Y,R25
    04CA7 938A      ST	-Y,R24
    04CA8 940E 4248 CALL	fpadd1x
    04CAA 0181      MOVW	R16,R2
    04CAB 0192      MOVW	R18,R4
    04CAC 940E 4469 CALL	fpmule2
    04CAE 830C      STD	Y+4,R16
    04CAF 831D      STD	Y+5,R17
    04CB0 832E      STD	Y+6,R18
    04CB1 833F      STD	Y+7,R19
    04CB2 818A      LDD	R24,Y+2
    04CB3 819B      LDD	R25,Y+3
    04CB4 9601      ADIW	R24,1
    04CB5 839B      STD	Y+3,R25
    04CB6 838A      STD	Y+2,R24
    04CB7 3082      CPI	R24,2
    04CB8 E0A0      LDI	R26,0
    04CB9 079A      CPC	R25,R26
    04CBA F2CC      BLT	0x4C94
    04CBB 810C      LDD	R16,Y+4
    04CBC 811D      LDD	R17,Y+5
    04CBD 812E      LDD	R18,Y+6
    04CBE 813F      LDD	R19,Y+7
    04CBF 9660      ADIW	R28,0x10
    04CC0 9508      RET
_printf:
    04CC1 940E 3FCD CALL	push_arg4
    04CC3 92AA      ST	-Y,R10
    04CC4 92BA      ST	-Y,R11
    04CC5 9722      SBIW	R28,2
    04CC6 01CE      MOVW	R24,R28
    04CC7 9606      ADIW	R24,6
    04CC8 015C      MOVW	R10,R24
    04CC9 82B9      STD	Y+1,R11
    04CCA 82A8      ST	Y,R10
    04CCB 812C      LDD	R18,Y+4
    04CCC 813D      LDD	R19,Y+5
    04CCD E80C      LDI	R16,0x8C
    04CCE E010      LDI	R17,0
    04CCF 940E 3B29 CALL	__print
    04CD1 0158      MOVW	R10,R16
    04CD2 9622      ADIW	R28,2
    04CD3 90B9      LD	R11,Y+
    04CD4 90A9      LD	R10,Y+
    04CD5 9624      ADIW	R28,4
    04CD6 9508      RET
    04CD7 940E 4131 CALL	push_xgsetF00C
    04CD9 01B9      MOVW	R22,R18
    04CDA 0158      MOVW	R10,R16
    04CDB 3F6E      CPI	R22,0xFE
    04CDC EFEF      LDI	R30,0xFF
    04CDD 077E      CPC	R23,R30
    04CDE F419      BNE	0x4CE2
    04CDF EA45      LDI	R20,0xA5
    04CE0 E052      LDI	R21,2
    04CE1 C009      RJMP	0x4CEB
    04CE2 3F6F      CPI	R22,0xFF
    04CE3 EFEF      LDI	R30,0xFF
    04CE4 077E      CPC	R23,R30
    04CE5 F419      BNE	0x4CE9
    04CE6 EC40      LDI	R20,0xC0
    04CE7 E052      LDI	R21,2
    04CE8 C002      RJMP	0x4CEB
    04CE9 ED4D      LDI	R20,0xDD
    04CEA E052      LDI	R21,2
    04CEB 019A      MOVW	R18,R20
    04CEC 0185      MOVW	R16,R10
    04CED 940E 44C2 CALL	_cstrcpy
    04CEF 0185      MOVW	R16,R10
    04CF0 940C 4138 JMP	pop_xgsetF00C
__FormatFP_1:
    04CF2 940E 3FCD CALL	push_arg4
    04CF4 940E 4112 CALL	push_xgsetF0FC
    04CF6 01B9      MOVW	R22,R18
    04CF7 97A2      SBIW	R28,0x22
    04CF8 EF8F      LDI	R24,0xFF
    04CF9 EF9F      LDI	R25,0xFF
    04CFA 015C      MOVW	R10,R24
    04CFB 879F      STD	Y+15,R25
    04CFC 878E      STD	Y+14,R24
    04CFD 8B9B      STD	Y+19,R25
    04CFE 8B8A      STD	Y+18,R24
    04CFF 8B99      STD	Y+17,R25
    04D00 8B88      STD	Y+16,R24
    04D01 8F9E      STD	Y+30,R25
    04D02 8F8D      STD	Y+29,R24
    04D03 8B9E      STD	Y+22,R25
    04D04 8B8D      STD	Y+21,R24
    04D05 2400      CLR	R0
    04D06 2411      CLR	R1
    04D07 8E19      STD	Y+25,R1
    04D08 8E08      STD	Y+24,R0
    04D09 2799      CLR	R25
    04D0A A398      STD	Y+32,R25
    04D0B 8F8F      STD	Y+31,R24
    04D0C 24EE      CLR	R14
    04D0D 24FF      CLR	R15
    04D0E 2744      CLR	R20
    04D0F 2755      CLR	R21
    04D10 E280      LDI	R24,0x20
    04D11 8B8F      STD	Y+23,R24
    04D12 8F8C      STD	Y+28,R24
    04D13 E685      LDI	R24,0x65
    04D14 A389      STD	Y+33,R24
    04D15 E184      LDI	R24,0x14
    04D16 A80E      LDD	R0,Y+54
    04D17 A81F      LDD	R1,Y+55
    04D18 1580      CP	R24,R0
    04D19 0591      CPC	R25,R1
    04D1A F414      BGE	0x4D1D
    04D1B AB9F      STD	Y+55,R25
    04D1C AB8E      STD	Y+54,R24
    04D1D E184      LDI	R24,0x14
    04D1E E090      LDI	R25,0
    04D1F AC08      LDD	R0,Y+56
    04D20 AC19      LDD	R1,Y+57
    04D21 1580      CP	R24,R0
    04D22 0591      CPC	R25,R1
    04D23 F414      BGE	0x4D26
    04D24 AF99      STD	Y+57,R25
    04D25 AF88      STD	Y+56,R24
    04D26 3060      CPI	R22,0
    04D27 0767      CPC	R22,R23
    04D28 F409      BNE	0x4D2A
    04D29 C084      RJMP	0x4DAE
    04D2A 3061      CPI	R22,1
    04D2B E0E0      LDI	R30,0
    04D2C 077E      CPC	R23,R30
    04D2D F079      BEQ	0x4D3D
    04D2E 3062      CPI	R22,2
    04D2F E0E0      LDI	R30,0
    04D30 077E      CPC	R23,R30
    04D31 F049      BEQ	0x4D3B
    04D32 3063      CPI	R22,3
    04D33 E0E0      LDI	R30,0
    04D34 077E      CPC	R23,R30
    04D35 F061      BEQ	0x4D42
    04D36 3064      CPI	R22,4
    04D37 E0E0      LDI	R30,0
    04D38 077E      CPC	R23,R30
    04D39 F031      BEQ	0x4D40
    04D3A C073      RJMP	0x4DAE
    04D3B E485      LDI	R24,0x45
    04D3C A389      STD	Y+33,R24
    04D3D E041      LDI	R20,1
    04D3E E050      LDI	R21,0
    04D3F C06E      RJMP	0x4DAE
    04D40 E485      LDI	R24,0x45
    04D41 A389      STD	Y+33,R24
    04D42 A828      LDD	R2,Y+48
    04D43 A839      LDD	R3,Y+49
    04D44 A84A      LDD	R4,Y+50
    04D45 A85B      LDD	R5,Y+51
    04D46 8628      STD	Y+8,R2
    04D47 8639      STD	Y+9,R3
    04D48 864A      STD	Y+10,R4
    04D49 865B      STD	Y+11,R5
    04D4A A828      LDD	R2,Y+48
    04D4B A839      LDD	R3,Y+49
    04D4C A84A      LDD	R4,Y+50
    04D4D A85B      LDD	R5,Y+51
    04D4E E00E      LDI	R16,0xE
    04D4F E013      LDI	R17,3
    04D50 940E 409A CALL	elpm32
    04D52 933A      ST	-Y,R19
    04D53 932A      ST	-Y,R18
    04D54 931A      ST	-Y,R17
    04D55 930A      ST	-Y,R16
    04D56 0181      MOVW	R16,R2
    04D57 0192      MOVW	R18,R4
    04D58 940E 44A7 CALL	fpcmp2
    04D5A F474      BGE	0x4D69
    04D5B E00A      LDI	R16,0xA
    04D5C E013      LDI	R17,3
    04D5D 940E 409A CALL	elpm32
    04D5F 01CE      MOVW	R24,R28
    04D60 96C0      ADIW	R24,0x30
    04D61 939A      ST	-Y,R25
    04D62 938A      ST	-Y,R24
    04D63 940E 445F CALL	fpmule1
    04D65 8708      STD	Y+8,R16
    04D66 8719      STD	Y+9,R17
    04D67 872A      STD	Y+10,R18
    04D68 873B      STD	Y+11,R19
    04D69 E006      LDI	R16,6
    04D6A E013      LDI	R17,3
    04D6B 940E 409A CALL	elpm32
    04D6D 830A      STD	Y+2,R16
    04D6E 831B      STD	Y+3,R17
    04D6F 832C      STD	Y+4,R18
    04D70 833D      STD	Y+5,R19
    04D71 2400      CLR	R0
    04D72 2411      CLR	R1
    04D73 861D      STD	Y+13,R1
    04D74 860C      STD	Y+12,R0
    04D75 C013      RJMP	0x4D89
    04D76 E002      LDI	R16,2
    04D77 E013      LDI	R17,3
    04D78 940E 409A CALL	elpm32
    04D7A 01CE      MOVW	R24,R28
    04D7B 9602      ADIW	R24,2
    04D7C 939A      ST	-Y,R25
    04D7D 938A      ST	-Y,R24
    04D7E 940E 445F CALL	fpmule1
    04D80 830A      STD	Y+2,R16
    04D81 831B      STD	Y+3,R17
    04D82 832C      STD	Y+4,R18
    04D83 833D      STD	Y+5,R19
    04D84 858C      LDD	R24,Y+12
    04D85 859D      LDD	R25,Y+13
    04D86 9601      ADIW	R24,1
    04D87 879D      STD	Y+13,R25
    04D88 878C      STD	Y+12,R24
    04D89 840C      LDD	R0,Y+12
    04D8A 841D      LDD	R1,Y+13
    04D8B AD08      LDD	R16,Y+56
    04D8C AD19      LDD	R17,Y+57
    04D8D 1600      CP	R0,R16
    04D8E 0611      CPC	R1,R17
    04D8F F334      BLT	0x4D76
    04D90 8428      LDD	R2,Y+8
    04D91 8439      LDD	R3,Y+9
    04D92 844A      LDD	R4,Y+10
    04D93 845B      LDD	R5,Y+11
    04D94 EF0E      LDI	R16,0xFE
    04D95 E012      LDI	R17,2
    04D96 940E 409A CALL	elpm32
    04D98 933A      ST	-Y,R19
    04D99 932A      ST	-Y,R18
    04D9A 931A      ST	-Y,R17
    04D9B 930A      ST	-Y,R16
    04D9C 0181      MOVW	R16,R2
    04D9D 0192      MOVW	R18,R4
    04D9E 940E 44A7 CALL	fpcmp2
    04DA0 F05C      BLT	0x4DAC
    04DA1 01CE      MOVW	R24,R28
    04DA2 9608      ADIW	R24,0x8
    04DA3 810A      LDD	R16,Y+2
    04DA4 811B      LDD	R17,Y+3
    04DA5 812C      LDD	R18,Y+4
    04DA6 813D      LDD	R19,Y+5
    04DA7 939A      ST	-Y,R25
    04DA8 938A      ST	-Y,R24
    04DA9 940E 449C CALL	fpcmp1
    04DAB F414      BGE	0x4DAE
    04DAC E041      LDI	R20,1
    04DAD E050      LDI	R21,0
    04DAE A80C      LDD	R0,Y+52
    04DAF A81D      LDD	R1,Y+53
    04DB0 FE04      SBRS	R0,4
    04DB1 C002      RJMP	0x4DB4
    04DB2 E380      LDI	R24,0x30
    04DB3 8B8F      STD	Y+23,R24
    04DB4 880F      LDD	R0,Y+23
    04DB5 8A0C      STD	Y+20,R0
    04DB6 A80C      LDD	R0,Y+52
    04DB7 A81D      LDD	R1,Y+53
    04DB8 FE03      SBRS	R0,3
    04DB9 C002      RJMP	0x4DBC
    04DBA E28B      LDI	R24,0x2B
    04DBB 8B8C      STD	Y+20,R24
    04DBC 3040      CPI	R20,0
    04DBD 0745      CPC	R20,R21
    04DBE F061      BEQ	0x4DCB
    04DBF 01CE      MOVW	R24,R28
    04DC0 9606      ADIW	R24,6
    04DC1 8399      STD	Y+1,R25
    04DC2 8388      ST	Y,R24
    04DC3 A908      LDD	R16,Y+48
    04DC4 A919      LDD	R17,Y+49
    04DC5 A92A      LDD	R18,Y+50
    04DC6 A93B      LDD	R19,Y+51
    04DC7 940E 46E9 CALL	_ftoa
    04DC9 01B8      MOVW	R22,R16
    04DCA C062      RJMP	0x4E2D
    04DCB EF0A      LDI	R16,0xFA
    04DCC E012      LDI	R17,2
    04DCD 940E 409A CALL	elpm32
    04DCF 830A      STD	Y+2,R16
    04DD0 831B      STD	Y+3,R17
    04DD1 832C      STD	Y+4,R18
    04DD2 833D      STD	Y+5,R19
    04DD3 2400      CLR	R0
    04DD4 2411      CLR	R1
    04DD5 861D      STD	Y+13,R1
    04DD6 860C      STD	Y+12,R0
    04DD7 C019      RJMP	0x4DF1
    04DD8 802A      LDD	R2,Y+2
    04DD9 803B      LDD	R3,Y+3
    04DDA 804C      LDD	R4,Y+4
    04DDB 805D      LDD	R5,Y+5
    04DDC E002      LDI	R16,2
    04DDD E013      LDI	R17,3
    04DDE 940E 409A CALL	elpm32
    04DE0 933A      ST	-Y,R19
    04DE1 932A      ST	-Y,R18
    04DE2 931A      ST	-Y,R17
    04DE3 930A      ST	-Y,R16
    04DE4 0181      MOVW	R16,R2
    04DE5 0192      MOVW	R18,R4
    04DE6 940E 42EF CALL	fpdiv2
    04DE8 830A      STD	Y+2,R16
    04DE9 831B      STD	Y+3,R17
    04DEA 832C      STD	Y+4,R18
    04DEB 833D      STD	Y+5,R19
    04DEC 858C      LDD	R24,Y+12
    04DED 859D      LDD	R25,Y+13
    04DEE 9601      ADIW	R24,1
    04DEF 879D      STD	Y+13,R25
    04DF0 878C      STD	Y+12,R24
    04DF1 840C      LDD	R0,Y+12
    04DF2 841D      LDD	R1,Y+13
    04DF3 AD08      LDD	R16,Y+56
    04DF4 AD19      LDD	R17,Y+57
    04DF5 1600      CP	R0,R16
    04DF6 0611      CPC	R1,R17
    04DF7 F304      BLT	0x4DD8
    04DF8 A828      LDD	R2,Y+48
    04DF9 A839      LDD	R3,Y+49
    04DFA A84A      LDD	R4,Y+50
    04DFB A85B      LDD	R5,Y+51
    04DFC E00E      LDI	R16,0xE
    04DFD E013      LDI	R17,3
    04DFE 940E 409A CALL	elpm32
    04E00 933A      ST	-Y,R19
    04E01 932A      ST	-Y,R18
    04E02 931A      ST	-Y,R17
    04E03 930A      ST	-Y,R16
    04E04 0181      MOVW	R16,R2
    04E05 0192      MOVW	R18,R4
    04E06 940E 44A7 CALL	fpcmp2
    04E08 F494      BGE	0x4E1B
    04E09 01CE      MOVW	R24,R28
    04E0A 9606      ADIW	R24,6
    04E0B 8399      STD	Y+1,R25
    04E0C 8388      ST	Y,R24
    04E0D A908      LDD	R16,Y+48
    04E0E A919      LDD	R17,Y+49
    04E0F A92A      LDD	R18,Y+50
    04E10 A93B      LDD	R19,Y+51
    04E11 01CE      MOVW	R24,R28
    04E12 9602      ADIW	R24,2
    04E13 939A      ST	-Y,R25
    04E14 938A      ST	-Y,R24
    04E15 940E 426E CALL	fpsub1
    04E17 940E 46E9 CALL	_ftoa
    04E19 01B8      MOVW	R22,R16
    04E1A C012      RJMP	0x4E2D
    04E1B 01CE      MOVW	R24,R28
    04E1C 9606      ADIW	R24,6
    04E1D 8399      STD	Y+1,R25
    04E1E 8388      ST	Y,R24
    04E1F A908      LDD	R16,Y+48
    04E20 A919      LDD	R17,Y+49
    04E21 A92A      LDD	R18,Y+50
    04E22 A93B      LDD	R19,Y+51
    04E23 01CE      MOVW	R24,R28
    04E24 9602      ADIW	R24,2
    04E25 939A      ST	-Y,R25
    04E26 938A      ST	-Y,R24
    04E27 940E 423E CALL	fpadd1
    04E29 940E 46E9 CALL	_ftoa
    04E2B 0168      MOVW	R12,R16
    04E2C 01B6      MOVW	R22,R12
    04E2D 802E      LDD	R2,Y+6
    04E2E 803F      LDD	R3,Y+7
    04E2F 2022      TST	R2
    04E30 F411      BNE	0x4E33
    04E31 2033      TST	R3
    04E32 F031      BEQ	0x4E39
    04E33 0191      MOVW	R18,R2
    04E34 A50C      LDD	R16,Y+44
    04E35 A51D      LDD	R17,Y+45
    04E36 DEA0      RCALL	0x4CD7
    04E37 0168      MOVW	R12,R16
    04E38 C39E      RJMP	0x51D7
    04E39 2400      CLR	R0
    04E3A 2411      CLR	R1
    04E3B 861D      STD	Y+13,R1
    04E3C 860C      STD	Y+12,R0
    04E3D 3040      CPI	R20,0
    04E3E 0745      CPC	R20,R21
    04E3F F481      BNE	0x4E50
    04E40 858E      LDD	R24,Y+14
    04E41 859F      LDD	R25,Y+15
    04E42 3080      CPI	R24,0
    04E43 E0E0      LDI	R30,0
    04E44 079E      CPC	R25,R30
    04E45 F054      BLT	0x4E50
    04E46 842C      LDD	R2,Y+12
    04E47 843D      LDD	R3,Y+13
    04E48 1A28      SUB	R2,R24
    04E49 0A39      SBC	R3,R25
    04E4A AC08      LDD	R0,Y+56
    04E4B AC19      LDD	R1,Y+57
    04E4C 1402      CP	R0,R2
    04E4D 0413      CPC	R1,R3
    04E4E F40C      BGE	0x4E50
    04E4F C060      RJMP	0x4EB0
    04E50 85EC      LDD	R30,Y+12
    04E51 85FD      LDD	R31,Y+13
    04E52 0FE6      ADD	R30,R22
    04E53 1FF7      ADC	R31,R23
    04E54 80C0      LD	R12,Z
    04E55 2D8C      MOV	R24,R12
    04E56 3380      CPI	R24,0x30
    04E57 F1E0      BCS	0x4E94
    04E58 E389      LDI	R24,0x39
    04E59 158C      CP	R24,R12
    04E5A F1C8      BCS	0x4E94
    04E5B 84AC      LDD	R10,Y+12
    04E5C 84BD      LDD	R11,Y+13
    04E5D E380      LDI	R24,0x30
    04E5E 158C      CP	R24,R12
    04E5F F448      BCC	0x4E69
    04E60 8D8D      LDD	R24,Y+29
    04E61 8D9E      LDD	R25,Y+30
    04E62 3080      CPI	R24,0
    04E63 E0E0      LDI	R30,0
    04E64 079E      CPC	R25,R30
    04E65 F41C      BGE	0x4E69
    04E66 0105      MOVW	R0,R10
    04E67 8E1E      STD	Y+30,R1
    04E68 8E0D      STD	Y+29,R0
    04E69 858E      LDD	R24,Y+14
    04E6A 859F      LDD	R25,Y+15
    04E6B 3080      CPI	R24,0
    04E6C E0E0      LDI	R30,0
    04E6D 079E      CPC	R25,R30
    04E6E F4C4      BGE	0x4E87
    04E6F 8988      LDD	R24,Y+16
    04E70 8999      LDD	R25,Y+17
    04E71 3080      CPI	R24,0
    04E72 E0E0      LDI	R30,0
    04E73 079E      CPC	R25,R30
    04E74 F43C      BGE	0x4E7C
    04E75 E380      LDI	R24,0x30
    04E76 158C      CP	R24,R12
    04E77 F420      BCC	0x4E7C
    04E78 840C      LDD	R0,Y+12
    04E79 841D      LDD	R1,Y+13
    04E7A 8A19      STD	Y+17,R1
    04E7B 8A08      STD	Y+16,R0
    04E7C 8988      LDD	R24,Y+16
    04E7D 8999      LDD	R25,Y+17
    04E7E 3080      CPI	R24,0
    04E7F E0E0      LDI	R30,0
    04E80 079E      CPC	R25,R30
    04E81 F02C      BLT	0x4E87
    04E82 8D88      LDD	R24,Y+24
    04E83 8D99      LDD	R25,Y+25
    04E84 9601      ADIW	R24,1
    04E85 8F99      STD	Y+25,R25
    04E86 8F88      STD	Y+24,R24
    04E87 858E      LDD	R24,Y+14
    04E88 859F      LDD	R25,Y+15
    04E89 3080      CPI	R24,0
    04E8A E0E0      LDI	R30,0
    04E8B 079E      CPC	R25,R30
    04E8C F03C      BLT	0x4E94
    04E8D E380      LDI	R24,0x30
    04E8E 158C      CP	R24,R12
    04E8F F420      BCC	0x4E94
    04E90 840C      LDD	R0,Y+12
    04E91 841D      LDD	R1,Y+13
    04E92 8A1E      STD	Y+22,R1
    04E93 8A0D      STD	Y+21,R0
    04E94 2D8C      MOV	R24,R12
    04E95 328E      CPI	R24,0x2E
    04E96 F421      BNE	0x4E9B
    04E97 840C      LDD	R0,Y+12
    04E98 841D      LDD	R1,Y+13
    04E99 861F      STD	Y+15,R1
    04E9A 860E      STD	Y+14,R0
    04E9B 2D8C      MOV	R24,R12
    04E9C 328D      CPI	R24,0x2D
    04E9D F429      BNE	0x4EA3
    04E9E E081      LDI	R24,1
    04E9F E090      LDI	R25,0
    04EA0 017C      MOVW	R14,R24
    04EA1 E28D      LDI	R24,0x2D
    04EA2 8B8C      STD	Y+20,R24
    04EA3 20CC      TST	R12
    04EA4 F409      BNE	0x4EA6
    04EA5 C00A      RJMP	0x4EB0
    04EA6 858C      LDD	R24,Y+12
    04EA7 859D      LDD	R25,Y+13
    04EA8 9601      ADIW	R24,1
    04EA9 879D      STD	Y+13,R25
    04EAA 878C      STD	Y+12,R24
    04EAB 3184      CPI	R24,0x14
    04EAC E0E0      LDI	R30,0
    04EAD 079E      CPC	R25,R30
    04EAE F40C      BGE	0x4EB0
    04EAF CF8D      RJMP	0x4E3D
    04EB0 858E      LDD	R24,Y+14
    04EB1 859F      LDD	R25,Y+15
    04EB2 3080      CPI	R24,0
    04EB3 E0E0      LDI	R30,0
    04EB4 079E      CPC	R25,R30
    04EB5 F43C      BGE	0x4EBD
    04EB6 01C5      MOVW	R24,R10
    04EB7 9601      ADIW	R24,1
    04EB8 8B9B      STD	Y+19,R25
    04EB9 8B8A      STD	Y+18,R24
    04EBA 9601      ADIW	R24,1
    04EBB 015C      MOVW	R10,R24
    04EBC C012      RJMP	0x4ECF
    04EBD 840E      LDD	R0,Y+14
    04EBE 841F      LDD	R1,Y+15
    04EBF 8A1B      STD	Y+19,R1
    04EC0 8A0A      STD	Y+18,R0
    04EC1 898D      LDD	R24,Y+21
    04EC2 899E      LDD	R25,Y+22
    04EC3 3080      CPI	R24,0
    04EC4 E0E0      LDI	R30,0
    04EC5 079E      CPC	R25,R30
    04EC6 F424      BGE	0x4ECB
    04EC7 01C0      MOVW	R24,R0
    04EC8 9601      ADIW	R24,1
    04EC9 015C      MOVW	R10,R24
    04ECA C004      RJMP	0x4ECF
    04ECB 898D      LDD	R24,Y+21
    04ECC 899E      LDD	R25,Y+22
    04ECD 9601      ADIW	R24,1
    04ECE 015C      MOVW	R10,R24
    04ECF 8988      LDD	R24,Y+16
    04ED0 8999      LDD	R25,Y+17
    04ED1 3080      CPI	R24,0
    04ED2 E0E0      LDI	R30,0
    04ED3 079E      CPC	R25,R30
    04ED4 F42C      BGE	0x4EDA
    04ED5 898A      LDD	R24,Y+18
    04ED6 899B      LDD	R25,Y+19
    04ED7 9701      SBIW	R24,1
    04ED8 8B99      STD	Y+17,R25
    04ED9 8B88      STD	Y+16,R24
    04EDA 3040      CPI	R20,0
    04EDB 0745      CPC	R20,R21
    04EDC F409      BNE	0x4EDE
    04EDD C1D2      RJMP	0x50B0
    04EDE 2400      CLR	R0
    04EDF 2411      CLR	R1
    04EE0 861D      STD	Y+13,R1
    04EE1 860C      STD	Y+12,R0
    04EE2 880C      LDD	R0,Y+20
    04EE3 890F      LDD	R16,Y+23
    04EE4 1600      CP	R0,R16
    04EE5 F069      BEQ	0x4EF3
    04EE6 854C      LDD	R20,Y+12
    04EE7 855D      LDD	R21,Y+13
    04EE8 01CA      MOVW	R24,R20
    04EE9 9601      ADIW	R24,1
    04EEA 879D      STD	Y+13,R25
    04EEB 878C      STD	Y+12,R24
    04EEC 01FA      MOVW	R30,R20
    04EED A40C      LDD	R0,Y+44
    04EEE A41D      LDD	R1,Y+45
    04EEF 0DE0      ADD	R30,R0
    04EF0 1DF1      ADC	R31,R1
    04EF1 880C      LDD	R0,Y+20
    04EF2 8200      ST	Z,R0
    04EF3 854C      LDD	R20,Y+12
    04EF4 855D      LDD	R21,Y+13
    04EF5 01CA      MOVW	R24,R20
    04EF6 9601      ADIW	R24,1
    04EF7 879D      STD	Y+13,R25
    04EF8 878C      STD	Y+12,R24
    04EF9 8DED      LDD	R30,Y+29
    04EFA 8DFE      LDD	R31,Y+30
    04EFB 0FE6      ADD	R30,R22
    04EFC 1FF7      ADC	R31,R23
    04EFD 8020      LD	R2,Z
    04EFE 01FA      MOVW	R30,R20
    04EFF A40C      LDD	R0,Y+44
    04F00 A41D      LDD	R1,Y+45
    04F01 0DE0      ADD	R30,R0
    04F02 1DF1      ADC	R31,R1
    04F03 8220      ST	Z,R2
    04F04 01FC      MOVW	R30,R24
    04F05 0DE0      ADD	R30,R0
    04F06 1DF1      ADC	R31,R1
    04F07 E28E      LDI	R24,0x2E
    04F08 8380      ST	Z,R24
    04F09 2422      CLR	R2
    04F0A 2433      CLR	R3
    04F0B AC08      LDD	R0,Y+56
    04F0C AC19      LDD	R1,Y+57
    04F0D 1420      CP	R2,R0
    04F0E 0431      CPC	R3,R1
    04F0F F42C      BGE	0x4F15
    04F10 858C      LDD	R24,Y+12
    04F11 859D      LDD	R25,Y+13
    04F12 9601      ADIW	R24,1
    04F13 879D      STD	Y+13,R25
    04F14 878C      STD	Y+12,R24
    04F15 8D4D      LDD	R20,Y+29
    04F16 8D5E      LDD	R21,Y+30
    04F17 5F4F      SUBI	R20,0xFF
    04F18 4F5F      SBCI	R21,0xFF
    04F19 24CC      CLR	R12
    04F1A 24DD      CLR	R13
    04F1B C034      RJMP	0x4F50
    04F1C 880A      LDD	R0,Y+18
    04F1D 881B      LDD	R1,Y+19
    04F1E 1540      CP	R20,R0
    04F1F 0551      CPC	R21,R1
    04F20 F409      BNE	0x4F22
    04F21 C02C      RJMP	0x4F4E
    04F22 154A      CP	R20,R10
    04F23 055B      CPC	R21,R11
    04F24 F48C      BGE	0x4F36
    04F25 84EC      LDD	R14,Y+12
    04F26 84FD      LDD	R15,Y+13
    04F27 01C7      MOVW	R24,R14
    04F28 9601      ADIW	R24,1
    04F29 879D      STD	Y+13,R25
    04F2A 878C      STD	Y+12,R24
    04F2B 01FA      MOVW	R30,R20
    04F2C 0FE6      ADD	R30,R22
    04F2D 1FF7      ADC	R31,R23
    04F2E 8020      LD	R2,Z
    04F2F 01F7      MOVW	R30,R14
    04F30 A40C      LDD	R0,Y+44
    04F31 A41D      LDD	R1,Y+45
    04F32 0DE0      ADD	R30,R0
    04F33 1DF1      ADC	R31,R1
    04F34 8220      ST	Z,R2
    04F35 C015      RJMP	0x4F4B
    04F36 A80C      LDD	R0,Y+52
    04F37 A81D      LDD	R1,Y+53
    04F38 FC00      SBRC	R0,0
    04F39 C004      RJMP	0x4F3E
    04F3A 20CC      TST	R12
    04F3B F501      BNE	0x4F5C
    04F3C 20DD      TST	R13
    04F3D F4F1      BNE	0x4F5C
    04F3E 84EC      LDD	R14,Y+12
    04F3F 84FD      LDD	R15,Y+13
    04F40 01C7      MOVW	R24,R14
    04F41 9601      ADIW	R24,1
    04F42 879D      STD	Y+13,R25
    04F43 878C      STD	Y+12,R24
    04F44 01F7      MOVW	R30,R14
    04F45 A40C      LDD	R0,Y+44
    04F46 A41D      LDD	R1,Y+45
    04F47 0DE0      ADD	R30,R0
    04F48 1DF1      ADC	R31,R1
    04F49 E380      LDI	R24,0x30
    04F4A 8380      ST	Z,R24
    04F4B 01C6      MOVW	R24,R12
    04F4C 9601      ADIW	R24,1
    04F4D 016C      MOVW	R12,R24
    04F4E 5F4F      SUBI	R20,0xFF
    04F4F 4F5F      SBCI	R21,0xFF
    04F50 AC08      LDD	R0,Y+56
    04F51 AC19      LDD	R1,Y+57
    04F52 14C0      CP	R12,R0
    04F53 04D1      CPC	R13,R1
    04F54 F43C      BGE	0x4F5C
    04F55 858C      LDD	R24,Y+12
    04F56 859D      LDD	R25,Y+13
    04F57 308E      CPI	R24,0xE
    04F58 E0E0      LDI	R30,0
    04F59 079E      CPC	R25,R30
    04F5A F40C      BGE	0x4F5C
    04F5B CFC0      RJMP	0x4F1C
    04F5C 858C      LDD	R24,Y+12
    04F5D 859D      LDD	R25,Y+13
    04F5E 9701      SBIW	R24,1
    04F5F 016C      MOVW	R12,R24
    04F60 AC08      LDD	R0,Y+56
    04F61 AC19      LDD	R1,Y+57
    04F62 2000      TST	R0
    04F63 F421      BNE	0x4F68
    04F64 2011      TST	R1
    04F65 F411      BNE	0x4F68
    04F66 84CC      LDD	R12,Y+12
    04F67 84DD      LDD	R13,Y+13
    04F68 898A      LDD	R24,Y+18
    04F69 899B      LDD	R25,Y+19
    04F6A 8C0D      LDD	R0,Y+29
    04F6B 8C1E      LDD	R1,Y+30
    04F6C 1980      SUB	R24,R0
    04F6D 0991      SBC	R25,R1
    04F6E 9701      SBIW	R24,1
    04F6F A398      STD	Y+32,R25
    04F70 8F8F      STD	Y+31,R24
    04F71 154A      CP	R20,R10
    04F72 055B      CPC	R21,R11
    04F73 F444      BGE	0x4F7C
    04F74 01FA      MOVW	R30,R20
    04F75 0FE6      ADD	R30,R22
    04F76 1FF7      ADC	R31,R23
    04F77 8180      LD	R24,Z
    04F78 328E      CPI	R24,0x2E
    04F79 F411      BNE	0x4F7C
    04F7A 5F4F      SUBI	R20,0xFF
    04F7B 4F5F      SBCI	R21,0xFF
    04F7C 154A      CP	R20,R10
    04F7D 055B      CPC	R21,R11
    04F7E F00C      BLT	0x4F80
    04F7F C06B      RJMP	0x4FEB
    04F80 01FA      MOVW	R30,R20
    04F81 0FE6      ADD	R30,R22
    04F82 1FF7      ADC	R31,R23
    04F83 80E0      LD	R14,Z
    04F84 24FF      CLR	R15
    04F85 2D8E      MOV	R24,R14
    04F86 3385      CPI	R24,0x35
    04F87 F408      BCC	0x4F89
    04F88 C062      RJMP	0x4FEB
    04F89 E389      LDI	R24,0x39
    04F8A 158E      CP	R24,R14
    04F8B F408      BCC	0x4F8D
    04F8C C05E      RJMP	0x4FEB
    04F8D C057      RJMP	0x4FE5
    04F8E 01F6      MOVW	R30,R12
    04F8F A40C      LDD	R0,Y+44
    04F90 A41D      LDD	R1,Y+45
    04F91 0DE0      ADD	R30,R0
    04F92 1DF1      ADC	R31,R1
    04F93 80E0      LD	R14,Z
    04F94 24FF      CLR	R15
    04F95 2D8E      MOV	R24,R14
    04F96 3380      CPI	R24,0x30
    04F97 F058      BCS	0x4FA3
    04F98 E388      LDI	R24,0x38
    04F99 158E      CP	R24,R14
    04F9A F040      BCS	0x4FA3
    04F9B 0176      MOVW	R14,R12
    04F9C 0CE0      ADD	R14,R0
    04F9D 1CF1      ADC	R15,R1
    04F9E 01F7      MOVW	R30,R14
    04F9F 8180      LD	R24,Z
    04FA0 5F8F      SUBI	R24,0xFF
    04FA1 8380      ST	Z,R24
    04FA2 C048      RJMP	0x4FEB
    04FA3 01F6      MOVW	R30,R12
    04FA4 A40C      LDD	R0,Y+44
    04FA5 A41D      LDD	R1,Y+45
    04FA6 0DE0      ADD	R30,R0
    04FA7 1DF1      ADC	R31,R1
    04FA8 8180      LD	R24,Z
    04FA9 328E      CPI	R24,0x2E
    04FAA F009      BEQ	0x4FAC
    04FAB C029      RJMP	0x4FD5
    04FAC 01C6      MOVW	R24,R12
    04FAD 9701      SBIW	R24,1
    04FAE 016C      MOVW	R12,R24
    04FAF 01FC      MOVW	R30,R24
    04FB0 0DE0      ADD	R30,R0
    04FB1 1DF1      ADC	R31,R1
    04FB2 80E0      LD	R14,Z
    04FB3 24FF      CLR	R15
    04FB4 2D8E      MOV	R24,R14
    04FB5 3380      CPI	R24,0x30
    04FB6 F058      BCS	0x4FC2
    04FB7 E388      LDI	R24,0x38
    04FB8 158E      CP	R24,R14
    04FB9 F040      BCS	0x4FC2
    04FBA 0176      MOVW	R14,R12
    04FBB 0CE0      ADD	R14,R0
    04FBC 1CF1      ADC	R15,R1
    04FBD 01F7      MOVW	R30,R14
    04FBE 8180      LD	R24,Z
    04FBF 5F8F      SUBI	R24,0xFF
    04FC0 8380      ST	Z,R24
    04FC1 C029      RJMP	0x4FEB
    04FC2 01F6      MOVW	R30,R12
    04FC3 A40C      LDD	R0,Y+44
    04FC4 A41D      LDD	R1,Y+45
    04FC5 0DE0      ADD	R30,R0
    04FC6 1DF1      ADC	R31,R1
    04FC7 8180      LD	R24,Z
    04FC8 3389      CPI	R24,0x39
    04FC9 F459      BNE	0x4FD5
    04FCA 01F6      MOVW	R30,R12
    04FCB 0DE0      ADD	R30,R0
    04FCC 1DF1      ADC	R31,R1
    04FCD E381      LDI	R24,0x31
    04FCE 8380      ST	Z,R24
    04FCF 8D8F      LDD	R24,Y+31
    04FD0 A198      LDD	R25,Y+32
    04FD1 9601      ADIW	R24,1
    04FD2 A398      STD	Y+32,R25
    04FD3 8F8F      STD	Y+31,R24
    04FD4 C016      RJMP	0x4FEB
    04FD5 01F6      MOVW	R30,R12
    04FD6 A40C      LDD	R0,Y+44
    04FD7 A41D      LDD	R1,Y+45
    04FD8 0DE0      ADD	R30,R0
    04FD9 1DF1      ADC	R31,R1
    04FDA 8180      LD	R24,Z
    04FDB 3389      CPI	R24,0x39
    04FDC F429      BNE	0x4FE2
    04FDD 01F6      MOVW	R30,R12
    04FDE 0DE0      ADD	R30,R0
    04FDF 1DF1      ADC	R31,R1
    04FE0 E380      LDI	R24,0x30
    04FE1 8380      ST	Z,R24
    04FE2 01C6      MOVW	R24,R12
    04FE3 9701      SBIW	R24,1
    04FE4 016C      MOVW	R12,R24
    04FE5 01C6      MOVW	R24,R12
    04FE6 3080      CPI	R24,0
    04FE7 E0E0      LDI	R30,0
    04FE8 079E      CPC	R25,R30
    04FE9 F00C      BLT	0x4FEB
    04FEA CFA3      RJMP	0x4F8E
    04FEB 84CC      LDD	R12,Y+12
    04FEC 84DD      LDD	R13,Y+13
    04FED 01C6      MOVW	R24,R12
    04FEE 9601      ADIW	R24,1
    04FEF 879D      STD	Y+13,R25
    04FF0 878C      STD	Y+12,R24
    04FF1 01F6      MOVW	R30,R12
    04FF2 A40C      LDD	R0,Y+44
    04FF3 A41D      LDD	R1,Y+45
    04FF4 0DE0      ADD	R30,R0
    04FF5 1DF1      ADC	R31,R1
    04FF6 A009      LDD	R0,Y+33
    04FF7 8200      ST	Z,R0
    04FF8 8D8F      LDD	R24,Y+31
    04FF9 A198      LDD	R25,Y+32
    04FFA 3080      CPI	R24,0
    04FFB E0E0      LDI	R30,0
    04FFC 079E      CPC	R25,R30
    04FFD F49C      BGE	0x5011
    04FFE 84CC      LDD	R12,Y+12
    04FFF 84DD      LDD	R13,Y+13
    05000 01C6      MOVW	R24,R12
    05001 9601      ADIW	R24,1
    05002 879D      STD	Y+13,R25
    05003 878C      STD	Y+12,R24
    05004 01F6      MOVW	R30,R12
    05005 A40C      LDD	R0,Y+44
    05006 A41D      LDD	R1,Y+45
    05007 0DE0      ADD	R30,R0
    05008 1DF1      ADC	R31,R1
    05009 E28D      LDI	R24,0x2D
    0500A 8380      ST	Z,R24
    0500B 8C0F      LDD	R0,Y+31
    0500C A018      LDD	R1,Y+32
    0500D 9400      COM	R0
    0500E 9410      COM	R1
    0500F A218      STD	Y+32,R1
    05010 8E0F      STD	Y+31,R0
    05011 E08A      LDI	R24,0xA
    05012 E090      LDI	R25,0
    05013 8399      STD	Y+1,R25
    05014 8388      ST	Y,R24
    05015 8D2F      LDD	R18,Y+31
    05016 A138      LDD	R19,Y+32
    05017 850C      LDD	R16,Y+12
    05018 851D      LDD	R17,Y+13
    05019 A40C      LDD	R0,Y+44
    0501A A41D      LDD	R1,Y+45
    0501B 0D00      ADD	R16,R0
    0501C 1D11      ADC	R17,R1
    0501D 940E 451F CALL	_itoa
    0501F 2400      CLR	R0
    05020 2411      CLR	R1
    05021 861D      STD	Y+13,R1
    05022 860C      STD	Y+12,R0
    05023 85EC      LDD	R30,Y+12
    05024 85FD      LDD	R31,Y+13
    05025 A40C      LDD	R0,Y+44
    05026 A41D      LDD	R1,Y+45
    05027 0DE0      ADD	R30,R0
    05028 1DF1      ADC	R31,R1
    05029 8020      LD	R2,Z
    0502A 2022      TST	R2
    0502B F429      BNE	0x5031
    0502C 840C      LDD	R0,Y+12
    0502D 841D      LDD	R1,Y+13
    0502E 8E1B      STD	Y+27,R1
    0502F 8E0A      STD	Y+26,R0
    05030 C009      RJMP	0x503A
    05031 858C      LDD	R24,Y+12
    05032 859D      LDD	R25,Y+13
    05033 9601      ADIW	R24,1
    05034 879D      STD	Y+13,R25
    05035 878C      STD	Y+12,R24
    05036 3184      CPI	R24,0x14
    05037 E0E0      LDI	R30,0
    05038 079E      CPC	R25,R30
    05039 F34C      BLT	0x5023
    0503A A80C      LDD	R0,Y+52
    0503B A81D      LDD	R1,Y+53
    0503C FE02      SBRS	R0,2
    0503D C021      RJMP	0x505F
    0503E 8C0A      LDD	R0,Y+26
    0503F 8C1B      LDD	R1,Y+27
    05040 A90E      LDD	R16,Y+54
    05041 A91F      LDD	R17,Y+55
    05042 1600      CP	R0,R16
    05043 0611      CPC	R1,R17
    05044 F00C      BLT	0x5046
    05045 C18F      RJMP	0x51D5
    05046 01A0      MOVW	R20,R0
    05047 C009      RJMP	0x5051
    05048 01FA      MOVW	R30,R20
    05049 A40C      LDD	R0,Y+44
    0504A A41D      LDD	R1,Y+45
    0504B 0DE0      ADD	R30,R0
    0504C 1DF1      ADC	R31,R1
    0504D 8C0C      LDD	R0,Y+28
    0504E 8200      ST	Z,R0
    0504F 5F4F      SUBI	R20,0xFF
    05050 4F5F      SBCI	R21,0xFF
    05051 A80E      LDD	R0,Y+54
    05052 A81F      LDD	R1,Y+55
    05053 1540      CP	R20,R0
    05054 0551      CPC	R21,R1
    05055 F394      BLT	0x5048
    05056 01F0      MOVW	R30,R0
    05057 9731      SBIW	R30,1
    05058 A40C      LDD	R0,Y+44
    05059 A41D      LDD	R1,Y+45
    0505A 0DE0      ADD	R30,R0
    0505B 1DF1      ADC	R31,R1
    0505C 2422      CLR	R2
    0505D 8220      ST	Z,R2
    0505E C176      RJMP	0x51D5
    0505F 8C0A      LDD	R0,Y+26
    05060 8C1B      LDD	R1,Y+27
    05061 A90E      LDD	R16,Y+54
    05062 A91F      LDD	R17,Y+55
    05063 1600      CP	R0,R16
    05064 0611      CPC	R1,R17
    05065 F00C      BLT	0x5067
    05066 C16E      RJMP	0x51D5
    05067 01A0      MOVW	R20,R0
    05068 C014      RJMP	0x507D
    05069 01FA      MOVW	R30,R20
    0506A A80E      LDD	R0,Y+54
    0506B A81F      LDD	R1,Y+55
    0506C 0DE0      ADD	R30,R0
    0506D 1DF1      ADC	R31,R1
    0506E 8C0A      LDD	R0,Y+26
    0506F 8C1B      LDD	R1,Y+27
    05070 19E0      SUB	R30,R0
    05071 09F1      SBC	R31,R1
    05072 A40C      LDD	R0,Y+44
    05073 A41D      LDD	R1,Y+45
    05074 0DE0      ADD	R30,R0
    05075 1DF1      ADC	R31,R1
    05076 01DA      MOVW	R26,R20
    05077 0DA0      ADD	R26,R0
    05078 1DB1      ADC	R27,R1
    05079 902C      LD	R2,X
    0507A 8220      ST	Z,R2
    0507B 5041      SUBI	R20,1
    0507C 4050      SBCI	R21,0
    0507D 3040      CPI	R20,0
    0507E E0E0      LDI	R30,0
    0507F 075E      CPC	R21,R30
    05080 F744      BGE	0x5069
    05081 A94E      LDD	R20,Y+54
    05082 A95F      LDD	R21,Y+55
    05083 8C0A      LDD	R0,Y+26
    05084 8C1B      LDD	R1,Y+27
    05085 1940      SUB	R20,R0
    05086 0951      SBC	R21,R1
    05087 5041      SUBI	R20,1
    05088 4050      SBCI	R21,0
    05089 C009      RJMP	0x5093
    0508A 01FA      MOVW	R30,R20
    0508B A40C      LDD	R0,Y+44
    0508C A41D      LDD	R1,Y+45
    0508D 0DE0      ADD	R30,R0
    0508E 1DF1      ADC	R31,R1
    0508F 880F      LDD	R0,Y+23
    05090 8200      ST	Z,R0
    05091 5041      SUBI	R20,1
    05092 4050      SBCI	R21,0
    05093 3040      CPI	R20,0
    05094 E0E0      LDI	R30,0
    05095 075E      CPC	R21,R30
    05096 F79C      BGE	0x508A
    05097 A80C      LDD	R0,Y+52
    05098 A81D      LDD	R1,Y+53
    05099 FE04      SBRS	R0,4
    0509A C13A      RJMP	0x51D5
    0509B 880C      LDD	R0,Y+20
    0509C 890F      LDD	R16,Y+23
    0509D 1600      CP	R0,R16
    0509E F409      BNE	0x50A0
    0509F C135      RJMP	0x51D5
    050A0 A5EC      LDD	R30,Y+44
    050A1 A5FD      LDD	R31,Y+45
    050A2 8200      ST	Z,R0
    050A3 A9EE      LDD	R30,Y+54
    050A4 A9FF      LDD	R31,Y+55
    050A5 8C0A      LDD	R0,Y+26
    050A6 8C1B      LDD	R1,Y+27
    050A7 19E0      SUB	R30,R0
    050A8 09F1      SBC	R31,R1
    050A9 A40C      LDD	R0,Y+44
    050AA A41D      LDD	R1,Y+45
    050AB 0DE0      ADD	R30,R0
    050AC 1DF1      ADC	R31,R1
    050AD 2E00      MOV	R0,R16
    050AE 8200      ST	Z,R0
    050AF C125      RJMP	0x51D5
    050B0 A80C      LDD	R0,Y+52
    050B1 A81D      LDD	R1,Y+53
    050B2 FE00      SBRS	R0,0
    050B3 C010      RJMP	0x50C4
    050B4 882A      LDD	R2,Y+18
    050B5 883B      LDD	R3,Y+19
    050B6 AC08      LDD	R0,Y+56
    050B7 AC19      LDD	R1,Y+57
    050B8 0C20      ADD	R2,R0
    050B9 1C31      ADC	R3,R1
    050BA 142A      CP	R2,R10
    050BB 043B      CPC	R3,R11
    050BC F07C      BLT	0x50CC
    050BD 898A      LDD	R24,Y+18
    050BE 899B      LDD	R25,Y+19
    050BF 0D80      ADD	R24,R0
    050C0 1D91      ADC	R25,R1
    050C1 9601      ADIW	R24,1
    050C2 015C      MOVW	R10,R24
    050C3 C008      RJMP	0x50CC
    050C4 898A      LDD	R24,Y+18
    050C5 899B      LDD	R25,Y+19
    050C6 9601      ADIW	R24,1
    050C7 16A8      CP	R10,R24
    050C8 06B9      CPC	R11,R25
    050C9 F411      BNE	0x50CC
    050CA 88AA      LDD	R10,Y+18
    050CB 88BB      LDD	R11,Y+19
    050CC E184      LDI	R24,0x14
    050CD E090      LDI	R25,0
    050CE 158A      CP	R24,R10
    050CF 059B      CPC	R25,R11
    050D0 F40C      BGE	0x50D2
    050D1 015C      MOVW	R10,R24
    050D2 0115      MOVW	R2,R10
    050D3 8808      LDD	R0,Y+16
    050D4 8819      LDD	R1,Y+17
    050D5 1820      SUB	R2,R0
    050D6 0831      SBC	R3,R1
    050D7 8E3B      STD	Y+27,R3
    050D8 8E2A      STD	Y+26,R2
    050D9 880C      LDD	R0,Y+20
    050DA 890F      LDD	R16,Y+23
    050DB 1600      CP	R0,R16
    050DC F021      BEQ	0x50E1
    050DD 01C1      MOVW	R24,R2
    050DE 9601      ADIW	R24,1
    050DF 8F9B      STD	Y+27,R25
    050E0 8F8A      STD	Y+26,R24
    050E1 A80E      LDD	R0,Y+54
    050E2 A81F      LDD	R1,Y+55
    050E3 8D0A      LDD	R16,Y+26
    050E4 8D1B      LDD	R17,Y+27
    050E5 1600      CP	R0,R16
    050E6 0611      CPC	R1,R17
    050E7 F41C      BGE	0x50EB
    050E8 0108      MOVW	R0,R16
    050E9 AA1F      STD	Y+55,R1
    050EA AA0E      STD	Y+54,R0
    050EB E184      LDI	R24,0x14
    050EC E090      LDI	R25,0
    050ED A80E      LDD	R0,Y+54
    050EE A81F      LDD	R1,Y+55
    050EF 1580      CP	R24,R0
    050F0 0591      CPC	R25,R1
    050F1 F414      BGE	0x50F4
    050F2 AB9F      STD	Y+55,R25
    050F3 AB8E      STD	Y+54,R24
    050F4 E184      LDI	R24,0x14
    050F5 E090      LDI	R25,0
    050F6 8C0A      LDD	R0,Y+26
    050F7 8C1B      LDD	R1,Y+27
    050F8 1580      CP	R24,R0
    050F9 0591      CPC	R25,R1
    050FA F414      BGE	0x50FD
    050FB 8F9B      STD	Y+27,R25
    050FC 8F8A      STD	Y+26,R24
    050FD A80C      LDD	R0,Y+52
    050FE A81D      LDD	R1,Y+53
    050FF FC02      SBRC	R0,2
    05100 C007      RJMP	0x5108
    05101 A80E      LDD	R0,Y+54
    05102 A81F      LDD	R1,Y+55
    05103 8D0A      LDD	R16,Y+26
    05104 8D1B      LDD	R17,Y+27
    05105 1600      CP	R0,R16
    05106 0611      CPC	R1,R17
    05107 F471      BNE	0x5116
    05108 24CC      CLR	R12
    05109 24DD      CLR	R13
    0510A 880C      LDD	R0,Y+20
    0510B 890F      LDD	R16,Y+23
    0510C 1600      CP	R0,R16
    0510D F409      BNE	0x510F
    0510E C033      RJMP	0x5142
    0510F A5EC      LDD	R30,Y+44
    05110 A5FD      LDD	R31,Y+45
    05111 8200      ST	Z,R0
    05112 E081      LDI	R24,1
    05113 E090      LDI	R25,0
    05114 016C      MOVW	R12,R24
    05115 C02C      RJMP	0x5142
    05116 A8CE      LDD	R12,Y+54
    05117 A8DF      LDD	R13,Y+55
    05118 8C0A      LDD	R0,Y+26
    05119 8C1B      LDD	R1,Y+27
    0511A 18C0      SUB	R12,R0
    0511B 08D1      SBC	R13,R1
    0511C 2744      CLR	R20
    0511D 2755      CLR	R21
    0511E C009      RJMP	0x5128
    0511F 01FA      MOVW	R30,R20
    05120 A40C      LDD	R0,Y+44
    05121 A41D      LDD	R1,Y+45
    05122 0DE0      ADD	R30,R0
    05123 1DF1      ADC	R31,R1
    05124 880F      LDD	R0,Y+23
    05125 8200      ST	Z,R0
    05126 5F4F      SUBI	R20,0xFF
    05127 4F5F      SBCI	R21,0xFF
    05128 16C4      CP	R12,R20
    05129 06D5      CPC	R13,R21
    0512A F7A4      BGE	0x511F
    0512B 880C      LDD	R0,Y+20
    0512C 890F      LDD	R16,Y+23
    0512D 1600      CP	R0,R16
    0512E F099      BEQ	0x5142
    0512F A80C      LDD	R0,Y+52
    05130 A81D      LDD	R1,Y+53
    05131 FE04      SBRS	R0,4
    05132 C005      RJMP	0x5138
    05133 A5EC      LDD	R30,Y+44
    05134 A5FD      LDD	R31,Y+45
    05135 880C      LDD	R0,Y+20
    05136 8200      ST	Z,R0
    05137 C007      RJMP	0x513F
    05138 01F6      MOVW	R30,R12
    05139 A40C      LDD	R0,Y+44
    0513A A41D      LDD	R1,Y+45
    0513B 0DE0      ADD	R30,R0
    0513C 1DF1      ADC	R31,R1
    0513D 880C      LDD	R0,Y+20
    0513E 8200      ST	Z,R0
    0513F 01C6      MOVW	R24,R12
    05140 9601      ADIW	R24,1
    05141 016C      MOVW	R12,R24
    05142 01A6      MOVW	R20,R12
    05143 8C08      LDD	R0,Y+24
    05144 8C19      LDD	R1,Y+25
    05145 2000      TST	R0
    05146 F459      BNE	0x5152
    05147 2011      TST	R1
    05148 F449      BNE	0x5152
    05149 01FA      MOVW	R30,R20
    0514A A40C      LDD	R0,Y+44
    0514B A41D      LDD	R1,Y+45
    0514C 0DE0      ADD	R30,R0
    0514D 1DF1      ADC	R31,R1
    0514E E380      LDI	R24,0x30
    0514F 8380      ST	Z,R24
    05150 5F4F      SUBI	R20,0xFF
    05151 4F5F      SBCI	R21,0xFF
    05152 2400      CLR	R0
    05153 2411      CLR	R1
    05154 861D      STD	Y+13,R1
    05155 860C      STD	Y+12,R0
    05156 C016      RJMP	0x516D
    05157 842C      LDD	R2,Y+12
    05158 843D      LDD	R3,Y+13
    05159 0E26      ADD	R2,R22
    0515A 1E37      ADC	R3,R23
    0515B 89E8      LDD	R30,Y+16
    0515C 89F9      LDD	R31,Y+17
    0515D 0DE2      ADD	R30,R2
    0515E 1DF3      ADC	R31,R3
    0515F 8020      LD	R2,Z
    05160 01FA      MOVW	R30,R20
    05161 A40C      LDD	R0,Y+44
    05162 A41D      LDD	R1,Y+45
    05163 0DE0      ADD	R30,R0
    05164 1DF1      ADC	R31,R1
    05165 8220      ST	Z,R2
    05166 5F4F      SUBI	R20,0xFF
    05167 4F5F      SBCI	R21,0xFF
    05168 858C      LDD	R24,Y+12
    05169 859D      LDD	R25,Y+13
    0516A 9601      ADIW	R24,1
    0516B 879D      STD	Y+13,R25
    0516C 878C      STD	Y+12,R24
    0516D 840C      LDD	R0,Y+12
    0516E 841D      LDD	R1,Y+13
    0516F 8D08      LDD	R16,Y+24
    05170 8D19      LDD	R17,Y+25
    05171 1600      CP	R0,R16
    05172 0611      CPC	R1,R17
    05173 F31C      BLT	0x5157
    05174 880A      LDD	R0,Y+18
    05175 881B      LDD	R1,Y+19
    05176 140A      CP	R0,R10
    05177 041B      CPC	R1,R11
    05178 F44C      BGE	0x5182
    05179 01FA      MOVW	R30,R20
    0517A A40C      LDD	R0,Y+44
    0517B A41D      LDD	R1,Y+45
    0517C 0DE0      ADD	R30,R0
    0517D 1DF1      ADC	R31,R1
    0517E E28E      LDI	R24,0x2E
    0517F 8380      ST	Z,R24
    05180 5F4F      SUBI	R20,0xFF
    05181 4F5F      SBCI	R21,0xFF
    05182 2400      CLR	R0
    05183 2411      CLR	R1
    05184 861D      STD	Y+13,R1
    05185 860C      STD	Y+12,R0
    05186 C02C      RJMP	0x51B3
    05187 882D      LDD	R2,Y+21
    05188 883E      LDD	R3,Y+22
    05189 840E      LDD	R0,Y+14
    0518A 841F      LDD	R1,Y+15
    0518B 1820      SUB	R2,R0
    0518C 0831      SBC	R3,R1
    0518D 840C      LDD	R0,Y+12
    0518E 841D      LDD	R1,Y+13
    0518F 1402      CP	R0,R2
    05190 0413      CPC	R1,R3
    05191 F47C      BGE	0x51A1
    05192 0110      MOVW	R2,R0
    05193 0E26      ADD	R2,R22
    05194 1E37      ADC	R3,R23
    05195 85EE      LDD	R30,Y+14
    05196 85FF      LDD	R31,Y+15
    05197 0DE2      ADD	R30,R2
    05198 1DF3      ADC	R31,R3
    05199 8021      LDD	R2,Z+1
    0519A 01FA      MOVW	R30,R20
    0519B A40C      LDD	R0,Y+44
    0519C A41D      LDD	R1,Y+45
    0519D 0DE0      ADD	R30,R0
    0519E 1DF1      ADC	R31,R1
    0519F 8220      ST	Z,R2
    051A0 C00B      RJMP	0x51AC
    051A1 A80C      LDD	R0,Y+52
    051A2 A81D      LDD	R1,Y+53
    051A3 FE00      SBRS	R0,0
    051A4 C024      RJMP	0x51C9
    051A5 01FA      MOVW	R30,R20
    051A6 A40C      LDD	R0,Y+44
    051A7 A41D      LDD	R1,Y+45
    051A8 0DE0      ADD	R30,R0
    051A9 1DF1      ADC	R31,R1
    051AA E380      LDI	R24,0x30
    051AB 8380      ST	Z,R24
    051AC 5F4F      SUBI	R20,0xFF
    051AD 4F5F      SBCI	R21,0xFF
    051AE 858C      LDD	R24,Y+12
    051AF 859D      LDD	R25,Y+13
    051B0 9601      ADIW	R24,1
    051B1 879D      STD	Y+13,R25
    051B2 878C      STD	Y+12,R24
    051B3 840C      LDD	R0,Y+12
    051B4 841D      LDD	R1,Y+13
    051B5 AD08      LDD	R16,Y+56
    051B6 AD19      LDD	R17,Y+57
    051B7 1600      CP	R0,R16
    051B8 0611      CPC	R1,R17
    051B9 F42C      BGE	0x51BF
    051BA 3144      CPI	R20,0x14
    051BB E0E0      LDI	R30,0
    051BC 075E      CPC	R21,R30
    051BD F40C      BGE	0x51BF
    051BE CFC8      RJMP	0x5187
    051BF C009      RJMP	0x51C9
    051C0 01FA      MOVW	R30,R20
    051C1 A40C      LDD	R0,Y+44
    051C2 A41D      LDD	R1,Y+45
    051C3 0DE0      ADD	R30,R0
    051C4 1DF1      ADC	R31,R1
    051C5 8C0C      LDD	R0,Y+28
    051C6 8200      ST	Z,R0
    051C7 5F4F      SUBI	R20,0xFF
    051C8 4F5F      SBCI	R21,0xFF
    051C9 A80E      LDD	R0,Y+54
    051CA A81F      LDD	R1,Y+55
    051CB 1540      CP	R20,R0
    051CC 0551      CPC	R21,R1
    051CD F394      BLT	0x51C0
    051CE 01FA      MOVW	R30,R20
    051CF A40C      LDD	R0,Y+44
    051D0 A41D      LDD	R1,Y+45
    051D1 0DE0      ADD	R30,R0
    051D2 1DF1      ADC	R31,R1
    051D3 2422      CLR	R2
    051D4 8220      ST	Z,R2
    051D5 A50C      LDD	R16,Y+44
    051D6 A51D      LDD	R17,Y+45
    051D7 96A2      ADIW	R28,0x22
    051D8 940E 4107 CALL	pop_xgsetF0FC
    051DA 9624      ADIW	R28,4
    051DB 9508      RET
_labs:
    051DC 940E 3FCD CALL	push_arg4
    051DE 9724      SBIW	R28,4
    051DF E080      LDI	R24,0
    051E0 E090      LDI	R25,0
    051E1 E0A0      LDI	R26,0
    051E2 E0B0      LDI	R27,0
    051E3 802C      LDD	R2,Y+4
    051E4 803D      LDD	R3,Y+5
    051E5 804E      LDD	R4,Y+6
    051E6 805F      LDD	R5,Y+7
    051E7 1628      CP	R2,R24
    051E8 0639      CPC	R3,R25
    051E9 064A      CPC	R4,R26
    051EA 065B      CPC	R5,R27
    051EB F02C      BLT	0x51F1
    051EC 8228      ST	Y,R2
    051ED 8239      STD	Y+1,R3
    051EE 824A      STD	Y+2,R4
    051EF 825B      STD	Y+3,R5
    051F0 C00A      RJMP	0x51FB
    051F1 810C      LDD	R16,Y+4
    051F2 811D      LDD	R17,Y+5
    051F3 812E      LDD	R18,Y+6
    051F4 813F      LDD	R19,Y+7
    051F5 940E 4168 CALL	neg32
    051F7 8308      ST	Y,R16
    051F8 8319      STD	Y+1,R17
    051F9 832A      STD	Y+2,R18
    051FA 833B      STD	Y+3,R19
    051FB 8108      LD	R16,Y
    051FC 8119      LDD	R17,Y+1
    051FD 812A      LDD	R18,Y+2
    051FE 813B      LDD	R19,Y+3
    051FF 9628      ADIW	R28,0x8
    05200 9508      RET
