                        .module inv_mpu.c
                        .area text(rom, con, rel)
 0000                   .dbfile inv_mpu.c
                        .area data(ram, con, rel)
 0000                   .dbfile inv_mpu.c
 0000           _hw::
 0000                   .blkb 1
                        .area idata
 0000 68                .byte 104
                        .area data(ram, con, rel)
 0001                   .dbfile inv_mpu.c
 0001                   .blkb 2
                        .area idata
 0001 0004              .word 1024
                        .area data(ram, con, rel)
 0003                   .dbfile inv_mpu.c
 0003                   .blkb 1
                        .area idata
 0003 76                .byte 118
                        .area data(ram, con, rel)
 0004                   .dbfile inv_mpu.c
 0004                   .blkb 2
                        .area idata
 0004 5401              .word 340
                        .area data(ram, con, rel)
 0006                   .dbfile inv_mpu.c
 0006                   .blkb 2
                        .area idata
 0006 F7FD              .word -521
                        .area data(ram, con, rel)
 0008                   .dbfile inv_mpu.c
 0008                   .blkb 2
                        .area idata
 0008 0001              .word 256
                        .area data(ram, con, rel)
 000A                   .dbfile inv_mpu.c
 000A                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 000A                   .dbstruct 0 10 hw_s
 000A                   .dbfield 0 addr c
 000A                   .dbfield 1 max_fifo s
 000A                   .dbfield 3 num_reg c
 000A                   .dbfield 4 temp_sens s
 000A                   .dbfield 6 temp_offset S
 000A                   .dbfield 8 bank_size s
 000A                   .dbend
 000A                   .dbsym e hw _hw S[hw_s]
 000A           _reg::
 000A                   .blkb 1
                        .area idata
 000A 75                .byte 117
                        .area data(ram, con, rel)
 000B                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 000B                   .blkb 1
                        .area idata
 000B 19                .byte 25
                        .area data(ram, con, rel)
 000C                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 000C                   .blkb 1
                        .area idata
 000C 1A                .byte 26
                        .area data(ram, con, rel)
 000D                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 000D                   .blkb 1
                        .area idata
 000D 0C                .byte 12
                        .area data(ram, con, rel)
 000E                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 000E                   .blkb 1
                        .area idata
 000E 6A                .byte 106
                        .area data(ram, con, rel)
 000F                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 000F                   .blkb 1
                        .area idata
 000F 23                .byte 35
                        .area data(ram, con, rel)
 0010                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 0010                   .blkb 1
                        .area idata
 0010 1B                .byte 27
                        .area data(ram, con, rel)
 0011                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 0011                   .blkb 1
                        .area idata
 0011 1C                .byte 28
                        .area data(ram, con, rel)
 0012                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 0012                   .blkb 1
                        .area idata
 0012 1F                .byte 31
                        .area data(ram, con, rel)
 0013                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 0013                   .blkb 1
                        .area idata
 0013 20                .byte 32
                        .area data(ram, con, rel)
 0014                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 0014                   .blkb 1
                        .area idata
 0014 72                .byte 114
                        .area data(ram, con, rel)
 0015                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 0015                   .blkb 1
                        .area idata
 0015 74                .byte 116
                        .area data(ram, con, rel)
 0016                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 0016                   .blkb 1
                        .area idata
 0016 43                .byte 67
                        .area data(ram, con, rel)
 0017                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 0017                   .blkb 1
                        .area idata
 0017 3B                .byte 59
                        .area data(ram, con, rel)
 0018                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 0018                   .blkb 1
                        .area idata
 0018 41                .byte 65
                        .area data(ram, con, rel)
 0019                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 0019                   .blkb 1
                        .area idata
 0019 38                .byte 56
                        .area data(ram, con, rel)
 001A                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 001A                   .blkb 1
                        .area idata
 001A 39                .byte 57
                        .area data(ram, con, rel)
 001B                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 001B                   .blkb 1
                        .area idata
 001B 3A                .byte 58
                        .area data(ram, con, rel)
 001C                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 001C                   .blkb 1
                        .area idata
 001C 6B                .byte 107
                        .area data(ram, con, rel)
 001D                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 001D                   .blkb 1
                        .area idata
 001D 6C                .byte 108
                        .area data(ram, con, rel)
 001E                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 001E                   .blkb 1
                        .area idata
 001E 37                .byte 55
                        .area data(ram, con, rel)
 001F                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 001F                   .blkb 1
                        .area idata
 001F 6F                .byte 111
                        .area data(ram, con, rel)
 0020                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 0020                   .blkb 1
                        .area idata
 0020 06                .byte 6
                        .area data(ram, con, rel)
 0021                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 0021                   .blkb 1
                        .area idata
 0021 24                .byte 36
                        .area data(ram, con, rel)
 0022                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 0022                   .blkb 1
                        .area idata
 0022 6D                .byte 109
                        .area data(ram, con, rel)
 0023                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 0023                   .blkb 1
                        .area idata
 0023 6E                .byte 110
                        .area data(ram, con, rel)
 0024                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 0024                   .blkb 1
                        .area idata
 0024 70                .byte 112
                        .area data(ram, con, rel)
 0025                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 0025                   .dbstruct 0 27 gyro_reg_s
 0025                   .dbfield 0 who_am_i c
 0025                   .dbfield 1 rate_div c
 0025                   .dbfield 2 lpf c
 0025                   .dbfield 3 prod_id c
 0025                   .dbfield 4 user_ctrl c
 0025                   .dbfield 5 fifo_en c
 0025                   .dbfield 6 gyro_cfg c
 0025                   .dbfield 7 accel_cfg c
 0025                   .dbfield 8 motion_thr c
 0025                   .dbfield 9 motion_dur c
 0025                   .dbfield 10 fifo_count_h c
 0025                   .dbfield 11 fifo_r_w c
 0025                   .dbfield 12 raw_gyro c
 0025                   .dbfield 13 raw_accel c
 0025                   .dbfield 14 temp c
 0025                   .dbfield 15 int_enable c
 0025                   .dbfield 16 dmp_int_status c
 0025                   .dbfield 17 int_status c
 0025                   .dbfield 18 pwr_mgmt_1 c
 0025                   .dbfield 19 pwr_mgmt_2 c
 0025                   .dbfield 20 int_pin_cfg c
 0025                   .dbfield 21 mem_r_w c
 0025                   .dbfield 22 accel_offs c
 0025                   .dbfield 23 i2c_mst c
 0025                   .dbfield 24 bank_sel c
 0025                   .dbfield 25 mem_start_addr c
 0025                   .dbfield 26 prgm_start_h c
 0025                   .dbend
 0025                   .dbsym e reg _reg S[gyro_reg_s]
 0025           _test::
 0025                   .blkb 4
                        .area idata
 0025 83000000          .word 131,0
                        .area data(ram, con, rel)
 0029                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 0029                   .blkb 4
                        .area idata
 0029 00080000          .word 2048,0
                        .area data(ram, con, rel)
 002D                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 002D                   .blkb 1
                        .area idata
 002D 00                .byte 0
                        .area data(ram, con, rel)
 002E                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 002E                   .blkb 1
                        .area idata
 002E 01                .byte 1
                        .area data(ram, con, rel)
 002F                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 002F                   .blkb 1
                        .area idata
 002F 00                .byte 0
                        .area data(ram, con, rel)
 0030                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 0030                   .blkb 1
                        .area idata
 0030 18                .byte 24
                        .area data(ram, con, rel)
 0031                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 0031                   .blkb 2
                        .area idata
 0031 3200              .word 50
                        .area data(ram, con, rel)
 0033                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 0033                   .blkb 1
                        .area idata
 0033 05                .byte 5
                        .area data(ram, con, rel)
 0034                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 0034                   .blkb 4
                        .area idata
 0034 00002041          .word 0x0,0x4120
                        .area data(ram, con, rel)
 0038                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 0038                   .blkb 4
                        .area idata
 0038 0000D242          .word 0x0,0x42d2
                        .area data(ram, con, rel)
 003C                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 003C                   .blkb 4
                        .area idata
 003C 295C0F3E          .word 0x5c29,0x3e0f
                        .area data(ram, con, rel)
 0040                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 0040                   .blkb 4
                        .area idata
 0040 9A99993E          .word 0x999a,0x3e99
                        .area data(ram, con, rel)
 0044                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 0044                   .blkb 4
                        .area idata
 0044 3333733F          .word 0x3333,0x3f73
                        .area data(ram, con, rel)
 0048                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 0048                   .blkb 4
                        .area idata
 0048 295C0F3E          .word 0x5c29,0x3e0f
                        .area data(ram, con, rel)
 004C                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 004C                   .dbstruct 0 39 test_s
 004C                   .dbfield 0 gyro_sens l
 004C                   .dbfield 4 accel_sens l
 004C                   .dbfield 8 reg_rate_div c
 004C                   .dbfield 9 reg_lpf c
 004C                   .dbfield 10 reg_gyro_fsr c
 004C                   .dbfield 11 reg_accel_fsr c
 004C                   .dbfield 12 wait_ms s
 004C                   .dbfield 14 packet_thresh c
 004C                   .dbfield 15 min_dps D
 004C                   .dbfield 19 max_dps D
 004C                   .dbfield 23 max_gyro_var D
 004C                   .dbfield 27 min_g D
 004C                   .dbfield 31 max_g D
 004C                   .dbfield 35 max_accel_var D
 004C                   .dbend
 004C                   .dbsym e test _test S[test_s]
 004C           _st:
 004C                   .blkw 1
                        .area idata
 004C 0A00              .word _reg
                        .area data(ram, con, rel)
 004E                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 004E                   .blkw 1
                        .area idata
 004E 0000              .word _hw
                        .area data(ram, con, rel)
 0050                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 0050                   .blkb 1
                        .area idata
 0050 00                .byte 0
                        .area data(ram, con, rel)
 0051                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 0051                   .blkb 28
                        .area idata
 0051 00000000000000000000      .word 0,0,0,0,0
 005B 00000000000000000000      .word 0,0,0,0,0
 0065 0000000000000000  .byte 0,0,0,0,0,0,0,0
                        .area data(ram, con, rel)
 006D                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 006D                   .blkw 1
                        .area idata
 006D 2500              .word _test
                        .area data(ram, con, rel)
 006F                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 006F                   .dbstruct 0 10 motion_int_cache_s
 006F                   .dbfield 0 gyro_fsr s
 006F                   .dbfield 2 accel_fsr c
 006F                   .dbfield 3 lpf s
 006F                   .dbfield 5 sample_rate s
 006F                   .dbfield 7 sensors_on c
 006F                   .dbfield 8 fifo_sensors c
 006F                   .dbfield 9 dmp_on c
 006F                   .dbend
 006F                   .dbstruct 0 29 chip_cfg_s
 006F                   .dbfield 0 gyro_fsr c
 006F                   .dbfield 1 accel_fsr c
 006F                   .dbfield 2 sensors c
 006F                   .dbfield 3 lpf c
 006F                   .dbfield 4 clk_src c
 006F                   .dbfield 5 sample_rate s
 006F                   .dbfield 7 fifo_enable c
 006F                   .dbfield 8 int_enable c
 006F                   .dbfield 9 bypass_mode c
 006F                   .dbfield 10 accel_half c
 006F                   .dbfield 11 lp_accel_mode c
 006F                   .dbfield 12 int_motion_only c
 006F                   .dbfield 13 cache S[motion_int_cache_s]
 006F                   .dbfield 23 active_low_int c
 006F                   .dbfield 24 latched_int c
 006F                   .dbfield 25 dmp_on c
 006F                   .dbfield 26 dmp_loaded c
 006F                   .dbfield 27 dmp_sample_rate s
 006F                   .dbend
 006F                   .dbstruct 0 35 gyro_state_s
 006F                   .dbfield 0 reg pS[gyro_reg_s]
 006F                   .dbfield 2 hw pS[hw_s]
 006F                   .dbfield 4 chip_cfg S[chip_cfg_s]
 006F                   .dbfield 33 test pS[test_s]
 006F                   .dbend
 006F                   .dbsym s st _st S[gyro_state_s]
                        .area text(rom, con, rel)
 0000                   .dbfile E:\大学课程\平衡小车设计\平衡小车程序final\inv_mpu.c
 0000                   .dbfunc s set_int_enable _set_int_enable fI
 0000           ;            tmp -> y+4
 0000           ;         enable -> R10
                        .even
 0000           _set_int_enable:
 0000 AA92              st -y,R10
 0002 A02E              mov R10,R16
 0004 2597              sbiw R28,5
 0006                   .dbline -1
 0006                   .dbline 337
 0006           ; #include <stdio.h>
 0006           ; #include <stdlib.h>
 0006           ; #include <string.h>
 0006           ; #include <math.h>
 0006           ; #include "inv_mpu.h"
 0006           ; #include "i2c.h"
 0006           ;  
 0006           ; #define MOTION_DRIVER_TARGET_MSP430
 0006           ; 
 0006           ; #if defined MOTION_DRIVER_TARGET_MSP430
 0006           ; 
 0006           ; #define i2c_write   i2cwrite
 0006           ; #define i2c_read    i2cread
 0006           ; #define delay_ms    delay_ms
 0006           ; #define get_ms      get_ms
 0006           ; 
 0006           ; #define fabs        fabsf
 0006           ; #define min(a,b) ((a<b)?a:b)
 0006           ; 
 0006           ; #elif defined EMPL_TARGET_MSP430
 0006           ; #include "msp430.h"
 0006           ; #include "msp430_i2c.h"
 0006           ; #include "msp430_clock.h"
 0006           ; #include "msp430_interrupt.h"
 0006           ; #include "log.h"
 0006           ; #define i2c_write   msp430_i2c_write
 0006           ; #define i2c_read    msp430_i2c_read
 0006           ; #define delay_ms    msp430_delay_ms
 0006           ; #define get_ms      msp430_get_clock_ms
 0006           ; static inline int reg_int_cb(struct int_param_s *int_param)
 0006           ; {
 0006           ;       return msp430_reg_int_cb(int_param->cb, int_param->pin, int_param->lp_exit,
 0006           ;       int_param->active_low);
 0006           ; }
 0006           ; #define log_i       MPL_LOGI
 0006           ; #define log_e       MPL_LOGE
 0006           ; 
 0006           ; #define fabs        fabsf
 0006           ; #define min(a,b) ((a<b)?a:b)
 0006           ; #elif defined EMPL_TARGET_UC3L0
 0006           ; 
 0006           ; #define i2c_write(a, b, c, d)   twi_write(a, b, d, c)
 0006           ; #define i2c_read(a, b, c, d)    twi_read(a, b, d, c)
 0006           ; 
 0006           ; #define get_ms  uc3l0_get_clock_ms
 0006           ; static inline int reg_int_cb(struct int_param_s *int_param)
 0006           ; {
 0006           ;       sensor_board_irq_connect(int_param->pin, int_param->cb, int_param->arg);
 0006           ;       return 0;
 0006           ; }
 0006           ; #define log_i       MPL_LOGI
 0006           ; #define log_e       MPL_LOGE
 0006           ; 
 0006           ; #define labs        abs
 0006           ; #define fabs(x)     (((x)>0)?(x):-(x))
 0006           ; #else
 0006           ; #error  Gyro driver is missing the system layer implementations.
 0006           ; #endif
 0006           ; 
 0006           ; static int set_int_enable(unsigned char enable);
 0006           ; 
 0006           ; struct gyro_reg_s 
 0006           ; {
 0006           ;       unsigned char who_am_i;
 0006           ;       unsigned char rate_div;
 0006           ;       unsigned char lpf;
 0006           ;       unsigned char prod_id;
 0006           ;       unsigned char user_ctrl;
 0006           ;       unsigned char fifo_en;
 0006           ;       unsigned char gyro_cfg;
 0006           ;       unsigned char accel_cfg;
 0006           ; 
 0006           ;       unsigned char motion_thr;
 0006           ;       unsigned char motion_dur;
 0006           ;       unsigned char fifo_count_h;
 0006           ;       unsigned char fifo_r_w;
 0006           ;       unsigned char raw_gyro;
 0006           ;       unsigned char raw_accel;
 0006           ;       unsigned char temp;
 0006           ;       unsigned char int_enable;
 0006           ;       unsigned char dmp_int_status;
 0006           ;       unsigned char int_status;
 0006           ; 
 0006           ;       unsigned char pwr_mgmt_1;
 0006           ;       unsigned char pwr_mgmt_2;
 0006           ;       unsigned char int_pin_cfg;
 0006           ;       unsigned char mem_r_w;
 0006           ;       unsigned char accel_offs;
 0006           ;       unsigned char i2c_mst;
 0006           ;       unsigned char bank_sel;
 0006           ;       unsigned char mem_start_addr;
 0006           ;       unsigned char prgm_start_h;
 0006           ; };
 0006           ; 
 0006           ; struct hw_s 
 0006           ; {
 0006           ;       unsigned char addr;
 0006           ;       unsigned short max_fifo;
 0006           ;       unsigned char num_reg;
 0006           ;       unsigned short temp_sens;
 0006           ;       short temp_offset;
 0006           ;       unsigned short bank_size;
 0006           ; };
 0006           ; 
 0006           ; 
 0006           ; struct motion_int_cache_s 
 0006           ; {
 0006           ;       unsigned short gyro_fsr;
 0006           ;       unsigned char accel_fsr;
 0006           ;       unsigned short lpf;
 0006           ;       unsigned short sample_rate;
 0006           ;       unsigned char sensors_on;
 0006           ;       unsigned char fifo_sensors;
 0006           ;       unsigned char dmp_on;
 0006           ; };
 0006           ; 
 0006           ; struct chip_cfg_s 
 0006           ; {
 0006           ;       unsigned char gyro_fsr;
 0006           ; 
 0006           ;       unsigned char accel_fsr;
 0006           ;  
 0006           ;       unsigned char sensors;
 0006           ;  
 0006           ;       unsigned char lpf;
 0006           ;       unsigned char clk_src;
 0006           ;       
 0006           ;       unsigned short sample_rate;
 0006           ; 
 0006           ;       unsigned char fifo_enable;
 0006           ;  
 0006           ;       unsigned char int_enable;
 0006           ; 
 0006           ;       unsigned char bypass_mode;
 0006           ; 
 0006           ;       unsigned char accel_half;
 0006           ; 
 0006           ;       unsigned char lp_accel_mode;
 0006           ;  
 0006           ;       unsigned char int_motion_only;
 0006           ;       struct motion_int_cache_s cache;
 0006           ;  
 0006           ;       unsigned char active_low_int;
 0006           ;       
 0006           ;       unsigned char latched_int;
 0006           ; 
 0006           ;       unsigned char dmp_on;
 0006           ;       
 0006           ;       unsigned char dmp_loaded;
 0006           ; 
 0006           ;       unsigned short dmp_sample_rate;
 0006           ; };
 0006           ; 
 0006           ; struct test_s 
 0006           ; {
 0006           ;       unsigned long gyro_sens;
 0006           ;       unsigned long accel_sens;
 0006           ;       unsigned char reg_rate_div;
 0006           ;       unsigned char reg_lpf;
 0006           ;       unsigned char reg_gyro_fsr;
 0006           ;       unsigned char reg_accel_fsr;
 0006           ;       unsigned short wait_ms;
 0006           ;       unsigned char packet_thresh;
 0006           ;       float min_dps;
 0006           ;       float max_dps;
 0006           ;       float max_gyro_var;
 0006           ;       float min_g;
 0006           ;       float max_g;
 0006           ;       float max_accel_var;
 0006           ; };
 0006           ; 
 0006           ; struct gyro_state_s 
 0006           ; {
 0006           ;       const struct gyro_reg_s *reg;
 0006           ;       const struct hw_s *hw;
 0006           ;       struct chip_cfg_s chip_cfg;
 0006           ;       const struct test_s *test;
 0006           ; };
 0006           ; 
 0006           ; enum lpf_e 
 0006           ; {
 0006           ;       INV_FILTER_256HZ_NOLPF2 = 0,
 0006           ;       INV_FILTER_188HZ,
 0006           ;       INV_FILTER_98HZ,
 0006           ;       INV_FILTER_42HZ,
 0006           ;       INV_FILTER_20HZ,
 0006           ;       INV_FILTER_10HZ,
 0006           ;       INV_FILTER_5HZ,
 0006           ;       INV_FILTER_2100HZ_NOLPF,
 0006           ;       NUM_FILTER
 0006           ; };
 0006           ; 
 0006           ; enum gyro_fsr_e 
 0006           ; {
 0006           ;       INV_FSR_250DPS = 0,
 0006           ;       INV_FSR_500DPS,
 0006           ;       INV_FSR_1000DPS,
 0006           ;       INV_FSR_2000DPS,
 0006           ;       NUM_GYRO_FSR
 0006           ; };
 0006           ; 
 0006           ; enum accel_fsr_e 
 0006           ; {
 0006           ;       INV_FSR_2G = 0,
 0006           ;       INV_FSR_4G,
 0006           ;       INV_FSR_8G,
 0006           ;       INV_FSR_16G,
 0006           ;       NUM_ACCEL_FSR
 0006           ; };
 0006           ; 
 0006           ; enum clock_sel_e 
 0006           ; {
 0006           ;       INV_CLK_INTERNAL = 0,
 0006           ;       INV_CLK_PLL,
 0006           ;       NUM_CLK
 0006           ; };
 0006           ; 
 0006           ; enum lp_accel_rate_e 
 0006           ; {
 0006           ;       INV_LPA_1_25HZ,
 0006           ;       INV_LPA_5HZ,
 0006           ;       INV_LPA_20HZ,
 0006           ;       INV_LPA_40HZ
 0006           ; };
 0006           ; 
 0006           ; #define BIT_I2C_MST_VDDIO   (0x80)
 0006           ; #define BIT_FIFO_EN         (0x40)
 0006           ; #define BIT_DMP_EN          (0x80)
 0006           ; #define BIT_FIFO_RST        (0x04)
 0006           ; #define BIT_DMP_RST         (0x08)
 0006           ; #define BIT_FIFO_OVERFLOW   (0x10)
 0006           ; #define BIT_DATA_RDY_EN     (0x01)
 0006           ; #define BIT_DMP_INT_EN      (0x02)
 0006           ; #define BIT_MOT_INT_EN      (0x40)
 0006           ; #define BITS_FSR            (0x18)
 0006           ; #define BITS_LPF            (0x07)
 0006           ; #define BITS_HPF            (0x07)
 0006           ; #define BITS_CLK            (0x07)
 0006           ; #define BIT_FIFO_SIZE_1024  (0x40)
 0006           ; #define BIT_FIFO_SIZE_2048  (0x80)
 0006           ; #define BIT_FIFO_SIZE_4096  (0xC0)
 0006           ; #define BIT_RESET           (0x80)
 0006           ; #define BIT_SLEEP           (0x40)
 0006           ; #define BIT_S0_DELAY_EN     (0x01)
 0006           ; #define BIT_S2_DELAY_EN     (0x04)
 0006           ; #define BITS_SLAVE_LENGTH   (0x0F)
 0006           ; #define BIT_SLAVE_BYTE_SW   (0x40)
 0006           ; #define BIT_SLAVE_GROUP     (0x10)
 0006           ; #define BIT_SLAVE_EN        (0x80)
 0006           ; #define BIT_I2C_READ        (0x80)
 0006           ; #define BITS_I2C_MASTER_DLY (0x1F)
 0006           ; #define BIT_AUX_IF_EN       (0x20)
 0006           ; #define BIT_ACTL            (0x80)
 0006           ; #define BIT_LATCH_EN        (0x20)
 0006           ; #define BIT_ANY_RD_CLR      (0x10)
 0006           ; #define BIT_BYPASS_EN       (0x02)
 0006           ; #define BITS_WOM_EN         (0xC0)
 0006           ; #define BIT_LPA_CYCLE       (0x20)
 0006           ; #define BIT_STBY_XA         (0x20)
 0006           ; #define BIT_STBY_YA         (0x10)
 0006           ; #define BIT_STBY_ZA         (0x08)
 0006           ; #define BIT_STBY_XG         (0x04)
 0006           ; #define BIT_STBY_YG         (0x02)
 0006           ; #define BIT_STBY_ZG         (0x01)
 0006           ; #define BIT_STBY_XYZA       (BIT_STBY_XA | BIT_STBY_YA | BIT_STBY_ZA)
 0006           ; #define BIT_STBY_XYZG       (BIT_STBY_XG | BIT_STBY_YG | BIT_STBY_ZG)
 0006           ; 
 0006           ; const struct hw_s hw=
 0006           ; {
 0006           ;       0x68,    //addr
 0006           ;       1024,    //max_fifo
 0006           ;       118,     //num_reg
 0006           ;       340,     //temp_sens
 0006           ;       -521,    //temp_offset
 0006           ;       256      //bank_size
 0006           ; };
 0006           ; const struct gyro_reg_s reg = 
 0006           ; {
 0006           ;       0x75,  //who_am_i
 0006           ;       0x19,  //rate_div
 0006           ;       0x1A,  //lpf
 0006           ;       0x0C,  //prod_id
 0006           ;       0x6A,  //user_ctrl
 0006           ;       0x23,  //fifo_en
 0006           ;       0x1B,  //gyro_cfg
 0006           ;       0x1C,  //accel_cfg
 0006           ;       0x1F,  // motion_thr
 0006           ;       0x20,  // motion_dur
 0006           ;       0x72,  // fifo_count_h
 0006           ;       0x74,  // fifo_r_w
 0006           ;       0x43,  // raw_gyro
 0006           ;       0x3B,  // raw_accel
 0006           ;       0x41,  // temp
 0006           ;       0x38,  // int_enable
 0006           ;       0x39,  //  dmp_int_status
 0006           ;       0x3A,  //  int_status
 0006           ;       0x6B,  // pwr_mgmt_1
 0006           ;       0x6C,  // pwr_mgmt_2
 0006           ;       0x37,  // int_pin_cfg
 0006           ;       0x6F,  // mem_r_w
 0006           ;       0x06,  // accel_offs
 0006           ;       0x24,  // i2c_mst
 0006           ;       0x6D,  // bank_sel
 0006           ;       0x6E,  // mem_start_addr
 0006           ;       0x70   // prgm_start_h
 0006           ; };
 0006           ; 
 0006           ; const struct test_s test=
 0006           ; {
 0006           ;       32768/250,               //gyro_sens
 0006           ;       32768/16,                //     accel_sens
 0006           ;       0,                               //     reg_rate_div
 0006           ;       1,                              //      reg_lpf
 0006           ;       0,                               //     reg_gyro_fsr
 0006           ;       0x18,                   //      reg_accel_fsr
 0006           ;       50,                             //      wait_ms
 0006           ;       5,                              //      packet_thresh
 0006           ;       10.0f,                   //     min_dps
 0006           ;       105.0f,                  //     max_dps
 0006           ;       0.14f,                  //      max_gyro_var
 0006           ;       0.3f,              //   min_g
 0006           ;       0.95f,             //   max_g
 0006           ;       0.14f              //   max_accel_var
 0006           ; };
 0006           ; 
 0006           ; static struct gyro_state_s st=
 0006           ; {
 0006           ;       &reg,
 0006           ;       &hw,
 0006           ;       {0},
 0006           ;       &test
 0006           ; };
 0006           ; 
 0006           ; #define MAX_PACKET_LENGTH (12)
 0006           ; 
 0006           ; static int set_int_enable(unsigned char enable)
 0006           ; {
 0006                   .dbline 340
 0006           ;       unsigned char tmp;
 0006           ; 
 0006           ;       if (st.chip_cfg.dmp_on) 
 0006 20906900          lds R2,_st+4+25
 000A 2220              tst R2
 000C 11F1              breq L2
 000E           X0:
 000E                   .dbline 341
 000E           ;       {
 000E                   .dbline 342
 000E           ;               if (enable)
 000E AA20              tst R10
 0010 19F0              breq L6
 0012           X1:
 0012                   .dbline 343
 0012           ;                       tmp = BIT_DMP_INT_EN;
 0012 82E0              ldi R24,2
 0014 8C83              std y+4,R24
 0016 02C0              xjmp L7
 0018           L6:
 0018                   .dbline 345
 0018           ;               else
 0018           ;                       tmp = 0x00;
 0018 2224              clr R2
 001A 2C82              std y+4,R2
 001C           L7:
 001C                   .dbline 346
 001C           ;               if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 001C CE01              movw R24,R28
 001E 0496              adiw R24,4
 0020 9B83              std y+3,R25
 0022 8A83              std y+2,R24
 0024 81E0              ldi R24,1
 0026 8883              std y+0,R24
 0028 E0914C00          lds R30,_st
 002C F0914D00          lds R31,_st+1
 0030 2785              ldd R18,z+15
 0032 E0914E00          lds R30,_st+2
 0036 F0914F00          lds R31,_st+2+1
 003A 0081              ldd R16,z+0
 003C 0E940000          xcall _i2cwrite
 0040 0023              tst R16
 0042 19F0              breq L8
 0044           X2:
 0044                   .dbline 347
 0044           ;                       return -1;
 0044 0FEF              ldi R16,-1
 0046 1FEF              ldi R17,-1
 0048 37C0              xjmp L1
 004A           L8:
 004A                   .dbline 348
 004A           ;               st.chip_cfg.int_enable = tmp;
 004A 2C80              ldd R2,y+4
 004C 20925800          sts _st+4+8,R2
 0050                   .dbline 349
 0050           ;       } 
 0050 31C0              xjmp L3
 0052           L2:
 0052                   .dbline 351
 0052           ;       else 
 0052           ;       {
 0052                   .dbline 352
 0052           ;               if (!st.chip_cfg.sensors)
 0052 20905200          lds R2,_st+4+2
 0056 2220              tst R2
 0058 19F4              brne L13
 005A           X3:
 005A                   .dbline 353
 005A           ;                       return -1;
 005A 0FEF              ldi R16,-1
 005C 1FEF              ldi R17,-1
 005E 2CC0              xjmp L1
 0060           L13:
 0060                   .dbline 354
 0060           ;               if (enable && st.chip_cfg.int_enable)
 0060 AA20              tst R10
 0062 39F0              breq L17
 0064           X4:
 0064 20905800          lds R2,_st+4+8
 0068 2220              tst R2
 006A 19F0              breq L17
 006C           X5:
 006C                   .dbline 355
 006C           ;                       return 0;
 006C 0027              clr R16
 006E 1127              clr R17
 0070 23C0              xjmp L1
 0072           L17:
 0072                   .dbline 356
 0072           ;               if (enable)
 0072 AA20              tst R10
 0074 19F0              breq L21
 0076           X6:
 0076                   .dbline 357
 0076           ;                       tmp = BIT_DATA_RDY_EN;
 0076 81E0              ldi R24,1
 0078 8C83              std y+4,R24
 007A 02C0              xjmp L22
 007C           L21:
 007C                   .dbline 359
 007C           ;               else
 007C           ;                       tmp = 0x00;
 007C 2224              clr R2
 007E 2C82              std y+4,R2
 0080           L22:
 0080                   .dbline 360
 0080           ;               if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 0080 CE01              movw R24,R28
 0082 0496              adiw R24,4
 0084 9B83              std y+3,R25
 0086 8A83              std y+2,R24
 0088 81E0              ldi R24,1
 008A 8883              std y+0,R24
 008C E0914C00          lds R30,_st
 0090 F0914D00          lds R31,_st+1
 0094 2785              ldd R18,z+15
 0096 E0914E00          lds R30,_st+2
 009A F0914F00          lds R31,_st+2+1
 009E 0081              ldd R16,z+0
 00A0 0E940000          xcall _i2cwrite
 00A4 0023              tst R16
 00A6 19F0              breq L23
 00A8           X7:
 00A8                   .dbline 361
 00A8           ;                       return -1;
 00A8 0FEF              ldi R16,-1
 00AA 1FEF              ldi R17,-1
 00AC 05C0              xjmp L1
 00AE           L23:
 00AE                   .dbline 362
 00AE           ;               st.chip_cfg.int_enable = tmp;
 00AE 2C80              ldd R2,y+4
 00B0 20925800          sts _st+4+8,R2
 00B4                   .dbline 363
 00B4           ;       }
 00B4           L3:
 00B4                   .dbline 364
 00B4           ;       return 0;
 00B4 0027              clr R16
 00B6 1127              clr R17
 00B8                   .dbline -2
 00B8           L1:
 00B8                   .dbline 0 ; func end
 00B8 2596              adiw R28,5
 00BA A990              ld R10,y+
 00BC 0895              ret
 00BE                   .dbsym l tmp 4 c
 00BE                   .dbsym r enable 10 c
 00BE                   .dbend
 00BE                   .dbfunc e mpu_reg_dump _mpu_reg_dump fI
 00BE           ;           data -> y+4
 00BE           ;             ii -> R10
                        .even
 00BE           _mpu_reg_dump::
 00BE AA92              st -y,R10
 00C0 2597              sbiw R28,5
 00C2                   .dbline -1
 00C2                   .dbline 368
 00C2           ; }
 00C2           ; 
 00C2           ; int mpu_reg_dump(void)
 00C2           ; {
 00C2                   .dbline 372
 00C2           ;       unsigned char ii;
 00C2           ;       unsigned char data;
 00C2           ; 
 00C2           ;       for (ii = 0; ii < st.hw->num_reg; ii++) 
 00C2 AA24              clr R10
 00C4 20C0              xjmp L32
 00C6           L29:
 00C6                   .dbline 373
 00C6           ;   {
 00C6                   .dbline 374
 00C6           ;               if (ii == st.reg->fifo_r_w || ii == st.reg->mem_r_w)
 00C6 40904C00          lds R4,_st
 00CA 50904D00          lds R5,_st+1
 00CE F201              movw R30,R4
 00D0 2384              ldd R2,z+11
 00D2 A214              cp R10,R2
 00D4 19F0              breq L36
 00D6           X8:
 00D6 2588              ldd R2,z+21
 00D8 A214              cp R10,R2
 00DA 09F4              brne L34
 00DC           X9:
 00DC           L36:
 00DC                   .dbline 375
 00DC           ;                       continue;
 00DC 13C0              xjmp L30
 00DE           L34:
 00DE                   .dbline 376
 00DE           ;               if (i2c_read(st.hw->addr, ii, 1, &data))
 00DE CE01              movw R24,R28
 00E0 0496              adiw R24,4
 00E2 9B83              std y+3,R25
 00E4 8A83              std y+2,R24
 00E6 81E0              ldi R24,1
 00E8 8883              std y+0,R24
 00EA 2A2D              mov R18,R10
 00EC E0914E00          lds R30,_st+2
 00F0 F0914F00          lds R31,_st+2+1
 00F4 0081              ldd R16,z+0
 00F6 0E940000          xcall _i2cread
 00FA 0023              tst R16
 00FC 19F0              breq L37
 00FE           X10:
 00FE                   .dbline 377
 00FE           ;                       return -1;
 00FE 0FEF              ldi R16,-1
 0100 1FEF              ldi R17,-1
 0102 0AC0              xjmp L28
 0104           L37:
 0104                   .dbline 378
 0104           ;       }
 0104           L30:
 0104                   .dbline 372
 0104 A394              inc R10
 0106           L32:
 0106                   .dbline 372
 0106 E0914E00          lds R30,_st+2
 010A F0914F00          lds R31,_st+2+1
 010E 2380              ldd R2,z+3
 0110 A214              cp R10,R2
 0112 C8F2              brlo L29
 0114           X11:
 0114                   .dbline 379
 0114           ;       return 0;
 0114 0027              clr R16
 0116 1127              clr R17
 0118                   .dbline -2
 0118           L28:
 0118                   .dbline 0 ; func end
 0118 2596              adiw R28,5
 011A A990              ld R10,y+
 011C 0895              ret
 011E                   .dbsym l data 4 c
 011E                   .dbsym r ii 10 c
 011E                   .dbend
 011E                   .dbfunc e mpu_read_reg _mpu_read_reg fI
 011E           ;           data -> R12,R13
 011E           ;            reg -> R10
                        .even
 011E           _mpu_read_reg::
 011E 0E940000          xcall push_xgset003C
 0122 6901              movw R12,R18
 0124 A02E              mov R10,R16
 0126 2497              sbiw R28,4
 0128                   .dbline -1
 0128                   .dbline 384
 0128           ; }
 0128           ; 
 0128           ; 
 0128           ; int mpu_read_reg(unsigned char reg, unsigned char *data)
 0128           ; {
 0128                   .dbline 385
 0128           ;       if (reg == st.reg->fifo_r_w || reg == st.reg->mem_r_w)
 0128 40904C00          lds R4,_st
 012C 50904D00          lds R5,_st+1
 0130 F201              movw R30,R4
 0132 2384              ldd R2,z+11
 0134 A214              cp R10,R2
 0136 19F0              breq L43
 0138           X12:
 0138 2588              ldd R2,z+21
 013A A214              cp R10,R2
 013C 19F4              brne L41
 013E           X13:
 013E           L43:
 013E                   .dbline 386
 013E           ;               return -1;
 013E 0FEF              ldi R16,-1
 0140 1FEF              ldi R17,-1
 0142 17C0              xjmp L40
 0144           L41:
 0144                   .dbline 387
 0144           ;       if (reg >= st.hw->num_reg)
 0144 E0914E00          lds R30,_st+2
 0148 F0914F00          lds R31,_st+2+1
 014C 2380              ldd R2,z+3
 014E A214              cp R10,R2
 0150 18F0              brlo L44
 0152           X14:
 0152                   .dbline 388
 0152           ;               return -1;
 0152 0FEF              ldi R16,-1
 0154 1FEF              ldi R17,-1
 0156 0DC0              xjmp L40
 0158           L44:
 0158                   .dbline 389
 0158           ;       return i2c_read(st.hw->addr, reg, 1, data);
 0158 DB82              std y+3,R13
 015A CA82              std y+2,R12
 015C 81E0              ldi R24,1
 015E 8883              std y+0,R24
 0160 2A2D              mov R18,R10
 0162 E0914E00          lds R30,_st+2
 0166 F0914F00          lds R31,_st+2+1
 016A 0081              ldd R16,z+0
 016C 0E940000          xcall _i2cread
 0170 1127              clr R17
 0172                   .dbline -2
 0172           L40:
 0172                   .dbline 0 ; func end
 0172 2496              adiw R28,4
 0174 0C940000          xjmp pop_xgset003C
 0178                   .dbsym r data 12 pc
 0178                   .dbsym r reg 10 c
 0178                   .dbend
 0178                   .dbfunc e mpu_init _mpu_init fI
 0178           ;            rev -> R20
 0178           ;           data -> y+4
                        .even
 0178           _mpu_init::
 0178 0E940000          xcall push_xgset300C
 017C 2A97              sbiw R28,10
 017E                   .dbline -1
 017E                   .dbline 393
 017E           ; }
 017E           ; 
 017E           ; int mpu_init(void)
 017E           ; {
 017E                   .dbline 396
 017E           ;       unsigned char data[6], rev;
 017E           ; 
 017E           ;       data[0] = 0x80;
 017E 80E8              ldi R24,128
 0180 8C83              std y+4,R24
 0182                   .dbline 397
 0182           ;       if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &(data[0])))
 0182 CE01              movw R24,R28
 0184 0496              adiw R24,4
 0186 9B83              std y+3,R25
 0188 8A83              std y+2,R24
 018A 81E0              ldi R24,1
 018C 8883              std y+0,R24
 018E E0914C00          lds R30,_st
 0192 F0914D00          lds R31,_st+1
 0196 2289              ldd R18,z+18
 0198 E0914E00          lds R30,_st+2
 019C F0914F00          lds R31,_st+2+1
 01A0 0081              ldd R16,z+0
 01A2 0E940000          xcall _i2cwrite
 01A6 0023              tst R16
 01A8 19F0              breq L49
 01AA           X15:
 01AA                   .dbline 398
 01AA           ;               return -1;
 01AA 0FEF              ldi R16,-1
 01AC 1FEF              ldi R17,-1
 01AE DBC0              xjmp L48
 01B0           L49:
 01B0                   .dbline 399
 01B0           ;       delay_ms(100);
 01B0 04E6              ldi R16,100
 01B2 10E0              ldi R17,0
 01B4 0E940000          xcall _delay_ms
 01B8                   .dbline 401
 01B8           ; 
 01B8           ;       data[0] = 0x00;
 01B8 2224              clr R2
 01BA 2C82              std y+4,R2
 01BC                   .dbline 402
 01BC           ;       if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &(data[0])))
 01BC CE01              movw R24,R28
 01BE 0496              adiw R24,4
 01C0 9B83              std y+3,R25
 01C2 8A83              std y+2,R24
 01C4 81E0              ldi R24,1
 01C6 8883              std y+0,R24
 01C8 E0914C00          lds R30,_st
 01CC F0914D00          lds R31,_st+1
 01D0 2289              ldd R18,z+18
 01D2 E0914E00          lds R30,_st+2
 01D6 F0914F00          lds R31,_st+2+1
 01DA 0081              ldd R16,z+0
 01DC 0E940000          xcall _i2cwrite
 01E0 0023              tst R16
 01E2 19F0              breq L52
 01E4           X16:
 01E4                   .dbline 403
 01E4           ;               return -1;
 01E4 0FEF              ldi R16,-1
 01E6 1FEF              ldi R17,-1
 01E8 BEC0              xjmp L48
 01EA           L52:
 01EA                   .dbline 405
 01EA           ; 
 01EA           ;       if (i2c_read(st.hw->addr, st.reg->accel_offs, 6, data))
 01EA CE01              movw R24,R28
 01EC 0496              adiw R24,4
 01EE 9B83              std y+3,R25
 01F0 8A83              std y+2,R24
 01F2 86E0              ldi R24,6
 01F4 8883              std y+0,R24
 01F6 E0914C00          lds R30,_st
 01FA F0914D00          lds R31,_st+1
 01FE 2689              ldd R18,z+22
 0200 E0914E00          lds R30,_st+2
 0204 F0914F00          lds R31,_st+2+1
 0208 0081              ldd R16,z+0
 020A 0E940000          xcall _i2cread
 020E A02E              mov R10,R16
 0210 0023              tst R16
 0212 19F0              breq L55
 0214           X17:
 0214                   .dbline 406
 0214           ;               return -1;
 0214 0FEF              ldi R16,-1
 0216 1FEF              ldi R17,-1
 0218 A6C0              xjmp L48
 021A           L55:
 021A                   .dbline 407
 021A           ;       rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 021A 8F81              ldd R24,y+7
 021C 8170              andi R24,1
 021E 880F              lsl R24
 0220 4985              ldd R20,y+9
 0222 4170              andi R20,1
 0224 440F              lsl R20
 0226 440F              lsl R20
 0228 482B              or R20,R24
 022A 8D81              ldd R24,y+5
 022C 8170              andi R24,1
 022E 482B              or R20,R24
 0230                   .dbline 410
 0230           ;               (data[1] & 0x01);
 0230           ; 
 0230           ;       if (rev) 
 0230 79F0              breq L61
 0232           X18:
 0232                   .dbline 411
 0232           ;       {
 0232                   .dbline 412
 0232           ;               if (rev == 1)
 0232 4130              cpi R20,1
 0234 21F4              brne L63
 0236           X19:
 0236                   .dbline 413
 0236           ;                               st.chip_cfg.accel_half = 1;
 0236 81E0              ldi R24,1
 0238 80935A00          sts _st+4+10,R24
 023C 30C0              xjmp L62
 023E           L63:
 023E                   .dbline 414
 023E           ;                       else if (rev == 2)
 023E 4230              cpi R20,2
 0240 21F4              brne L67
 0242           X20:
 0242                   .dbline 415
 0242           ;                               st.chip_cfg.accel_half = 0;
 0242 2224              clr R2
 0244 20925A00          sts _st+4+10,R2
 0248 2AC0              xjmp L62
 024A           L67:
 024A                   .dbline 417
 024A           ;                       else 
 024A           ;                       {
 024A                   .dbline 418
 024A           ;                               return -1;
 024A 0FEF              ldi R16,-1
 024C 1FEF              ldi R17,-1
 024E 8BC0              xjmp L48
 0250           L61:
 0250                   .dbline 423
 0250           ;                       }
 0250           ;       } 
 0250           ;       
 0250           ;       else 
 0250           ;       {
 0250                   .dbline 424
 0250           ;               if (i2c_read(st.hw->addr, st.reg->prod_id, 1, &(data[0])))
 0250 CE01              movw R24,R28
 0252 0496              adiw R24,4
 0254 9B83              std y+3,R25
 0256 8A83              std y+2,R24
 0258 81E0              ldi R24,1
 025A 8883              std y+0,R24
 025C E0914C00          lds R30,_st
 0260 F0914D00          lds R31,_st+1
 0264 2381              ldd R18,z+3
 0266 E0914E00          lds R30,_st+2
 026A F0914F00          lds R31,_st+2+1
 026E 0081              ldd R16,z+0
 0270 0E940000          xcall _i2cread
 0274 A02E              mov R10,R16
 0276 0023              tst R16
 0278 19F0              breq L71
 027A           X21:
 027A                   .dbline 425
 027A           ;                       return -1;
 027A 0FEF              ldi R16,-1
 027C 1FEF              ldi R17,-1
 027E 73C0              xjmp L48
 0280           L71:
 0280                   .dbline 426
 0280           ;               rev = data[0] & 0x0F;
 0280 4C81              ldd R20,y+4
 0282 4F70              andi R20,15
 0284                   .dbline 427
 0284           ;               if (!rev) 
 0284 19F4              brne L74
 0286           X22:
 0286                   .dbline 428
 0286           ;               {
 0286                   .dbline 429
 0286           ;                       return -1;
 0286 0FEF              ldi R16,-1
 0288 1FEF              ldi R17,-1
 028A 6DC0              xjmp L48
 028C           L74:
 028C                   .dbline 431
 028C           ;               } 
 028C           ;               else if (rev == 4) 
 028C 4430              cpi R20,4
 028E 21F4              brne L76
 0290           X23:
 0290                   .dbline 432
 0290           ;               {
 0290                   .dbline 433
 0290           ;                       st.chip_cfg.accel_half = 1;
 0290 81E0              ldi R24,1
 0292 80935A00          sts _st+4+10,R24
 0296                   .dbline 434
 0296           ;               } 
 0296 03C0              xjmp L77
 0298           L76:
 0298                   .dbline 436
 0298           ;               else
 0298           ;                       st.chip_cfg.accel_half = 0;
 0298 2224              clr R2
 029A 20925A00          sts _st+4+10,R2
 029E           L77:
 029E                   .dbline 437
 029E           ;       }
 029E           L62:
 029E                   .dbline 439
 029E           ; 
 029E           ;       st.chip_cfg.sensors = 0xFF;
 029E 8FEF              ldi R24,255
 02A0 80935200          sts _st+4+2,R24
 02A4                   .dbline 440
 02A4           ;       st.chip_cfg.gyro_fsr = 0xFF;
 02A4 80935000          sts _st+4,R24
 02A8                   .dbline 441
 02A8           ;       st.chip_cfg.accel_fsr = 0xFF;
 02A8 80935100          sts _st+4+1,R24
 02AC                   .dbline 442
 02AC           ;       st.chip_cfg.lpf = 0xFF;
 02AC 80935300          sts _st+4+3,R24
 02B0                   .dbline 443
 02B0           ;       st.chip_cfg.sample_rate = 0xFFFF;
 02B0 9FEF              ldi R25,255
 02B2 90935600          sts _st+4+5+1,R25
 02B6 80935500          sts _st+4+5,R24
 02BA                   .dbline 444
 02BA           ;       st.chip_cfg.fifo_enable = 0xFF;
 02BA 80935700          sts _st+4+7,R24
 02BE                   .dbline 445
 02BE           ;       st.chip_cfg.bypass_mode = 0xFF;
 02BE 80935900          sts _st+4+9,R24
 02C2                   .dbline 446
 02C2           ;       st.chip_cfg.clk_src = INV_CLK_PLL;
 02C2 81E0              ldi R24,1
 02C4 80935400          sts _st+4+4,R24
 02C8                   .dbline 447
 02C8           ;       st.chip_cfg.active_low_int = 1;
 02C8 80936700          sts _st+4+23,R24
 02CC                   .dbline 448
 02CC           ;       st.chip_cfg.latched_int = 0;
 02CC 2224              clr R2
 02CE 20926800          sts _st+4+24,R2
 02D2                   .dbline 449
 02D2           ;       st.chip_cfg.int_motion_only = 0;
 02D2 20925C00          sts _st+4+12,R2
 02D6                   .dbline 450
 02D6           ;       st.chip_cfg.lp_accel_mode = 0;
 02D6 20925B00          sts _st+4+11,R2
 02DA                   .dbline 451
 02DA           ;       memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 02DA 8AE0              ldi R24,10
 02DC 90E0              ldi R25,0
 02DE 9983              std y+1,R25
 02E0 8883              std y+0,R24
 02E2 2227              clr R18
 02E4 3327              clr R19
 02E6 00E0              ldi R16,<_st+4+13
 02E8 10E0              ldi R17,>_st+4+13
 02EA 0E940000          xcall _memset
 02EE                   .dbline 452
 02EE           ;       st.chip_cfg.dmp_on = 0;
 02EE 2224              clr R2
 02F0 20926900          sts _st+4+25,R2
 02F4                   .dbline 453
 02F4           ;       st.chip_cfg.dmp_loaded = 0;
 02F4 20926A00          sts _st+4+26,R2
 02F8                   .dbline 454
 02F8           ;       st.chip_cfg.dmp_sample_rate = 0;
 02F8 3324              clr R3
 02FA 30926C00          sts _st+4+27+1,R3
 02FE 20926B00          sts _st+4+27,R2
 0302                   .dbline 456
 0302           ; 
 0302           ;       if (mpu_set_gyro_fsr(2000))
 0302 00ED              ldi R16,2000
 0304 17E0              ldi R17,7
 0306 68D4              xcall _mpu_set_gyro_fsr
 0308 5801              movw R10,R16
 030A 0030              cpi R16,0
 030C 0107              cpc R16,R17
 030E 19F0              breq L115
 0310           X24:
 0310                   .dbline 457
 0310           ;               return -1;
 0310 0FEF              ldi R16,-1
 0312 1FEF              ldi R17,-1
 0314 28C0              xjmp L48
 0316           L115:
 0316                   .dbline 458
 0316           ;       if (mpu_set_accel_fsr(2))
 0316 02E0              ldi R16,2
 0318 F7D4              xcall _mpu_set_accel_fsr
 031A 5801              movw R10,R16
 031C 0030              cpi R16,0
 031E 0107              cpc R16,R17
 0320 19F0              breq L117
 0322           X25:
 0322                   .dbline 459
 0322           ;               return -1;
 0322 0FEF              ldi R16,-1
 0324 1FEF              ldi R17,-1
 0326 1FC0              xjmp L48
 0328           L117:
 0328                   .dbline 460
 0328           ;       if (mpu_set_lpf(42))
 0328 0AE2              ldi R16,42
 032A 10E0              ldi R17,0
 032C A4D5              xcall _mpu_set_lpf
 032E 5801              movw R10,R16
 0330 0030              cpi R16,0
 0332 0107              cpc R16,R17
 0334 19F0              breq L119
 0336           X26:
 0336                   .dbline 461
 0336           ;               return -1;
 0336 0FEF              ldi R16,-1
 0338 1FEF              ldi R17,-1
 033A 15C0              xjmp L48
 033C           L119:
 033C                   .dbline 462
 033C           ;       if (mpu_set_sample_rate(50))
 033C 02E3              ldi R16,50
 033E 10E0              ldi R17,0
 0340 03D6              xcall _mpu_set_sample_rate
 0342 5801              movw R10,R16
 0344 0030              cpi R16,0
 0346 0107              cpc R16,R17
 0348 19F0              breq L121
 034A           X27:
 034A                   .dbline 463
 034A           ;               return -1;
 034A 0FEF              ldi R16,-1
 034C 1FEF              ldi R17,-1
 034E 0BC0              xjmp L48
 0350           L121:
 0350                   .dbline 464
 0350           ;       if (mpu_configure_fifo(0))
 0350 0027              clr R16
 0352 EDD6              xcall _mpu_configure_fifo
 0354 5801              movw R10,R16
 0356 0030              cpi R16,0
 0358 0107              cpc R16,R17
 035A 19F0              breq L123
 035C           X28:
 035C                   .dbline 465
 035C           ;               return -1;
 035C 0FEF              ldi R16,-1
 035E 1FEF              ldi R17,-1
 0360 02C0              xjmp L48
 0362           L123:
 0362                   .dbline 466
 0362           ;       return 0;
 0362 0027              clr R16
 0364 1127              clr R17
 0366                   .dbline -2
 0366           L48:
 0366                   .dbline 0 ; func end
 0366 2A96              adiw R28,10
 0368 0C940000          xjmp pop_xgset300C
 036C                   .dbsym r rev 20 c
 036C                   .dbsym l data 4 A[6:6]c
 036C                   .dbend
 036C                   .dbfunc e mpu_lp_accel_mode _mpu_lp_accel_mode fI
 036C           ;            tmp -> y+4
 036C           ;           rate -> R20
                        .even
 036C           _mpu_lp_accel_mode::
 036C 4A93              st -y,R20
 036E 402F              mov R20,R16
 0370 2697              sbiw R28,6
 0372                   .dbline -1
 0372                   .dbline 470
 0372           ; }
 0372           ; 
 0372           ; int mpu_lp_accel_mode(unsigned char rate)
 0372           ; {
 0372                   .dbline 473
 0372           ;       unsigned char tmp[2];
 0372           ; 
 0372           ;       if (rate > 40)
 0372 88E2              ldi R24,40
 0374 8417              cp R24,R20
 0376 18F4              brsh L126
 0378           X29:
 0378                   .dbline 474
 0378           ;               return -1;
 0378 0FEF              ldi R16,-1
 037A 1FEF              ldi R17,-1
 037C 77C0              xjmp L125
 037E           L126:
 037E                   .dbline 476
 037E           ; 
 037E           ;       if (!rate) 
 037E 4423              tst R20
 0380 21F5              brne L128
 0382           X30:
 0382                   .dbline 477
 0382           ;       {
 0382                   .dbline 478
 0382           ;               mpu_set_int_latched(0);
 0382 0027              clr R16
 0384 0E946F0B          xcall _mpu_set_int_latched
 0388                   .dbline 479
 0388           ;               tmp[0] = 0;
 0388 2224              clr R2
 038A 2C82              std y+4,R2
 038C                   .dbline 480
 038C           ;               tmp[1] = BIT_STBY_XYZG;
 038C 87E0              ldi R24,7
 038E 8D83              std y+5,R24
 0390                   .dbline 481
 0390           ;               if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 0390 CE01              movw R24,R28
 0392 0496              adiw R24,4
 0394 9B83              std y+3,R25
 0396 8A83              std y+2,R24
 0398 82E0              ldi R24,2
 039A 8883              std y+0,R24
 039C E0914C00          lds R30,_st
 03A0 F0914D00          lds R31,_st+1
 03A4 2289              ldd R18,z+18
 03A6 E0914E00          lds R30,_st+2
 03AA F0914F00          lds R31,_st+2+1
 03AE 0081              ldd R16,z+0
 03B0 0E940000          xcall _i2cwrite
 03B4 0023              tst R16
 03B6 19F0              breq L131
 03B8           X31:
 03B8                   .dbline 482
 03B8           ;                               return -1;
 03B8 0FEF              ldi R16,-1
 03BA 1FEF              ldi R17,-1
 03BC 57C0              xjmp L125
 03BE           L131:
 03BE                   .dbline 483
 03BE           ;               st.chip_cfg.lp_accel_mode = 0;
 03BE 2224              clr R2
 03C0 20925B00          sts _st+4+11,R2
 03C4                   .dbline 484
 03C4           ;               return 0;
 03C4 0027              clr R16
 03C6 1127              clr R17
 03C8 51C0              xjmp L125
 03CA           L128:
 03CA                   .dbline 487
 03CA           ;       }
 03CA           ;       
 03CA           ;       mpu_set_int_latched(1);
 03CA 01E0              ldi R16,1
 03CC 0E946F0B          xcall _mpu_set_int_latched
 03D0                   .dbline 488
 03D0           ;       tmp[0] = BIT_LPA_CYCLE;
 03D0 80E2              ldi R24,32
 03D2 8C83              std y+4,R24
 03D4                   .dbline 490
 03D4           ;       
 03D4           ;       if (rate == 1) 
 03D4 4130              cpi R20,1
 03D6 31F4              brne L136
 03D8           X32:
 03D8                   .dbline 491
 03D8           ;       {
 03D8                   .dbline 492
 03D8           ;               tmp[1] = INV_LPA_1_25HZ;
 03D8 2224              clr R2
 03DA 2D82              std y+5,R2
 03DC                   .dbline 493
 03DC           ;               mpu_set_lpf(5);
 03DC 05E0              ldi R16,5
 03DE 10E0              ldi R17,0
 03E0 4AD5              xcall _mpu_set_lpf
 03E2                   .dbline 494
 03E2           ;       }       
 03E2 17C0              xjmp L137
 03E4           L136:
 03E4                   .dbline 495
 03E4           ;       else if (rate <= 5) 
 03E4 85E0              ldi R24,5
 03E6 8417              cp R24,R20
 03E8 30F0              brlo L139
 03EA           X33:
 03EA                   .dbline 496
 03EA           ;       {
 03EA                   .dbline 497
 03EA           ;               tmp[1] = INV_LPA_5HZ;
 03EA 81E0              ldi R24,1
 03EC 8D83              std y+5,R24
 03EE                   .dbline 498
 03EE           ;               mpu_set_lpf(5);
 03EE 05E0              ldi R16,5
 03F0 10E0              ldi R17,0
 03F2 41D5              xcall _mpu_set_lpf
 03F4                   .dbline 499
 03F4           ;       }       
 03F4 0EC0              xjmp L140
 03F6           L139:
 03F6                   .dbline 500
 03F6           ;       else if (rate <= 20) 
 03F6 84E1              ldi R24,20
 03F8 8417              cp R24,R20
 03FA 30F0              brlo L142
 03FC           X34:
 03FC                   .dbline 501
 03FC           ;       {
 03FC                   .dbline 502
 03FC           ;               tmp[1] = INV_LPA_20HZ;
 03FC 82E0              ldi R24,2
 03FE 8D83              std y+5,R24
 0400                   .dbline 503
 0400           ;               mpu_set_lpf(10);
 0400 0AE0              ldi R16,10
 0402 10E0              ldi R17,0
 0404 38D5              xcall _mpu_set_lpf
 0406                   .dbline 504
 0406           ;       }       
 0406 05C0              xjmp L143
 0408           L142:
 0408                   .dbline 506
 0408           ;       else 
 0408           ;       {
 0408                   .dbline 507
 0408           ;               tmp[1] = INV_LPA_40HZ;
 0408 83E0              ldi R24,3
 040A 8D83              std y+5,R24
 040C                   .dbline 508
 040C           ;               mpu_set_lpf(20);
 040C 04E1              ldi R16,20
 040E 10E0              ldi R17,0
 0410 32D5              xcall _mpu_set_lpf
 0412                   .dbline 509
 0412           ;       }
 0412           L143:
 0412           L140:
 0412           L137:
 0412                   .dbline 511
 0412           ;       
 0412           ;       tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
 0412 8D81              ldd R24,y+5
 0414 880F              lsl R24
 0416 880F              lsl R24
 0418 880F              lsl R24
 041A 880F              lsl R24
 041C 880F              lsl R24
 041E 880F              lsl R24
 0420 8760              ori R24,7
 0422 8D83              std y+5,R24
 0424                   .dbline 512
 0424           ;       if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 0424 CE01              movw R24,R28
 0426 0496              adiw R24,4
 0428 9B83              std y+3,R25
 042A 8A83              std y+2,R24
 042C 82E0              ldi R24,2
 042E 8883              std y+0,R24
 0430 E0914C00          lds R30,_st
 0434 F0914D00          lds R31,_st+1
 0438 2289              ldd R18,z+18
 043A E0914E00          lds R30,_st+2
 043E F0914F00          lds R31,_st+2+1
 0442 0081              ldd R16,z+0
 0444 0E940000          xcall _i2cwrite
 0448 0023              tst R16
 044A 19F0              breq L148
 044C           X35:
 044C                   .dbline 513
 044C           ;               return -1;
 044C 0FEF              ldi R16,-1
 044E 1FEF              ldi R17,-1
 0450 0DC0              xjmp L125
 0452           L148:
 0452                   .dbline 514
 0452           ;       st.chip_cfg.sensors = INV_XYZ_ACCEL;
 0452 88E0              ldi R24,8
 0454 80935200          sts _st+4+2,R24
 0458                   .dbline 515
 0458           ;       st.chip_cfg.clk_src = 0;
 0458 2224              clr R2
 045A 20925400          sts _st+4+4,R2
 045E                   .dbline 516
 045E           ;       st.chip_cfg.lp_accel_mode = 1;
 045E 81E0              ldi R24,1
 0460 80935B00          sts _st+4+11,R24
 0464                   .dbline 517
 0464           ;       mpu_configure_fifo(0);
 0464 0027              clr R16
 0466 63D6              xcall _mpu_configure_fifo
 0468                   .dbline 519
 0468           ; 
 0468           ;       return 0;
 0468 0027              clr R16
 046A 1127              clr R17
 046C                   .dbline -2
 046C           L125:
 046C                   .dbline 0 ; func end
 046C 2696              adiw R28,6
 046E 4991              ld R20,y+
 0470 0895              ret
 0472                   .dbsym l tmp 4 A[2:2]c
 0472                   .dbsym r rate 20 c
 0472                   .dbend
 0472                   .dbfunc e mpu_get_gyro_reg _mpu_get_gyro_reg fI
 0472           ;            tmp -> y+4
 0472           ;      timestamp -> R10,R11
 0472           ;           data -> R20,R21
                        .even
 0472           _mpu_get_gyro_reg::
 0472 0E940000          xcall push_xgset300C
 0476 5901              movw R10,R18
 0478 A801              movw R20,R16
 047A 2A97              sbiw R28,10
 047C                   .dbline -1
 047C                   .dbline 523
 047C           ; }
 047C           ; 
 047C           ; int mpu_get_gyro_reg(short *data, unsigned long *timestamp)
 047C           ; {
 047C                   .dbline 526
 047C           ;       unsigned char tmp[6];
 047C           ; 
 047C           ;       if (!(st.chip_cfg.sensors & INV_XYZ_GYRO))
 047C 80915200          lds R24,_st+4+2
 0480 8077              andi R24,112
 0482 19F4              brne L158
 0484           X36:
 0484                   .dbline 527
 0484           ;               return -1;
 0484 0FEF              ldi R16,-1
 0486 1FEF              ldi R17,-1
 0488 2DC0              xjmp L157
 048A           L158:
 048A                   .dbline 529
 048A           ; 
 048A           ;       if (i2c_read(st.hw->addr, st.reg->raw_gyro, 6, tmp))
 048A CE01              movw R24,R28
 048C 0496              adiw R24,4
 048E 9B83              std y+3,R25
 0490 8A83              std y+2,R24
 0492 86E0              ldi R24,6
 0494 8883              std y+0,R24
 0496 E0914C00          lds R30,_st
 049A F0914D00          lds R31,_st+1
 049E 2485              ldd R18,z+12
 04A0 E0914E00          lds R30,_st+2
 04A4 F0914F00          lds R31,_st+2+1
 04A8 0081              ldd R16,z+0
 04AA 0E940000          xcall _i2cread
 04AE 0023              tst R16
 04B0 19F0              breq L162
 04B2           X37:
 04B2                   .dbline 530
 04B2           ;               return -1;
 04B2 0FEF              ldi R16,-1
 04B4 1FEF              ldi R17,-1
 04B6 16C0              xjmp L157
 04B8           L162:
 04B8                   .dbline 531
 04B8           ;       data[0] = (tmp[0] << 8) | tmp[1];
 04B8 2D80              ldd R2,y+5
 04BA 3C80              ldd R3,y+4
 04BC FA01              movw R30,R20
 04BE 3182              std z+1,R3
 04C0 2082              std z+0,R2
 04C2                   .dbline 532
 04C2           ;       data[1] = (tmp[2] << 8) | tmp[3];
 04C2 2F80              ldd R2,y+7
 04C4 3E80              ldd R3,y+6
 04C6 3382              std z+3,R3
 04C8 2282              std z+2,R2
 04CA                   .dbline 533
 04CA           ;       data[2] = (tmp[4] << 8) | tmp[5];
 04CA 2984              ldd R2,y+9
 04CC 3884              ldd R3,y+8
 04CE 3582              std z+5,R3
 04D0 2482              std z+4,R2
 04D2                   .dbline 534
 04D2           ;       if (timestamp)
 04D2 AA20              tst R10
 04D4 11F4              brne X38
 04D6 BB20              tst R11
 04D8 19F0              breq L170
 04DA           X38:
 04DA                   .dbline 535
 04DA           ;               get_ms(timestamp);
 04DA 8501              movw R16,R10
 04DC 0E945916          xcall _get_ms
 04E0           L170:
 04E0                   .dbline 536
 04E0           ;       return 0;
 04E0 0027              clr R16
 04E2 1127              clr R17
 04E4                   .dbline -2
 04E4           L157:
 04E4                   .dbline 0 ; func end
 04E4 2A96              adiw R28,10
 04E6 0C940000          xjmp pop_xgset300C
 04EA                   .dbsym l tmp 4 A[6:6]c
 04EA                   .dbsym r timestamp 10 pl
 04EA                   .dbsym r data 20 pS
 04EA                   .dbend
 04EA                   .dbfunc e mpu_get_accel_reg _mpu_get_accel_reg fI
 04EA           ;            tmp -> y+4
 04EA           ;      timestamp -> R10,R11
 04EA           ;           data -> R20,R21
                        .even
 04EA           _mpu_get_accel_reg::
 04EA 0E940000          xcall push_xgset300C
 04EE 5901              movw R10,R18
 04F0 A801              movw R20,R16
 04F2 2A97              sbiw R28,10
 04F4                   .dbline -1
 04F4                   .dbline 540
 04F4           ; }
 04F4           ; 
 04F4           ; int mpu_get_accel_reg(short *data, unsigned long *timestamp)
 04F4           ; {
 04F4                   .dbline 543
 04F4           ;       unsigned char tmp[6];
 04F4           ; 
 04F4           ;       if (!(st.chip_cfg.sensors & INV_XYZ_ACCEL))
 04F4 20905200          lds R2,_st+4+2
 04F8 23FC              sbrc R2,3
 04FA 03C0              rjmp L173
 04FC           X39:
 04FC                   .dbline 544
 04FC           ;               return -1;
 04FC 0FEF              ldi R16,-1
 04FE 1FEF              ldi R17,-1
 0500 2DC0              xjmp L172
 0502           L173:
 0502                   .dbline 546
 0502           ; 
 0502           ;       if (i2c_read(st.hw->addr, st.reg->raw_accel, 6, tmp))
 0502 CE01              movw R24,R28
 0504 0496              adiw R24,4
 0506 9B83              std y+3,R25
 0508 8A83              std y+2,R24
 050A 86E0              ldi R24,6
 050C 8883              std y+0,R24
 050E E0914C00          lds R30,_st
 0512 F0914D00          lds R31,_st+1
 0516 2585              ldd R18,z+13
 0518 E0914E00          lds R30,_st+2
 051C F0914F00          lds R31,_st+2+1
 0520 0081              ldd R16,z+0
 0522 0E940000          xcall _i2cread
 0526 0023              tst R16
 0528 19F0              breq L177
 052A           X40:
 052A                   .dbline 547
 052A           ;               return -1;
 052A 0FEF              ldi R16,-1
 052C 1FEF              ldi R17,-1
 052E 16C0              xjmp L172
 0530           L177:
 0530                   .dbline 548
 0530           ;       data[0] = (tmp[0] << 8) | tmp[1];
 0530 2D80              ldd R2,y+5
 0532 3C80              ldd R3,y+4
 0534 FA01              movw R30,R20
 0536 3182              std z+1,R3
 0538 2082              std z+0,R2
 053A                   .dbline 549
 053A           ;       data[1] = (tmp[2] << 8) | tmp[3];
 053A 2F80              ldd R2,y+7
 053C 3E80              ldd R3,y+6
 053E 3382              std z+3,R3
 0540 2282              std z+2,R2
 0542                   .dbline 550
 0542           ;       data[2] = (tmp[4] << 8) | tmp[5];
 0542 2984              ldd R2,y+9
 0544 3884              ldd R3,y+8
 0546 3582              std z+5,R3
 0548 2482              std z+4,R2
 054A                   .dbline 551
 054A           ;       if (timestamp)
 054A AA20              tst R10
 054C 11F4              brne X41
 054E BB20              tst R11
 0550 19F0              breq L185
 0552           X41:
 0552                   .dbline 552
 0552           ;               get_ms(timestamp);
 0552 8501              movw R16,R10
 0554 0E945916          xcall _get_ms
 0558           L185:
 0558                   .dbline 553
 0558           ;       return 0;
 0558 0027              clr R16
 055A 1127              clr R17
 055C                   .dbline -2
 055C           L172:
 055C                   .dbline 0 ; func end
 055C 2A96              adiw R28,10
 055E 0C940000          xjmp pop_xgset300C
 0562                   .dbsym l tmp 4 A[6:6]c
 0562                   .dbsym r timestamp 10 pl
 0562                   .dbsym r data 20 pS
 0562                   .dbend
 0562                   .dbfunc e mpu_get_temperature _mpu_get_temperature fI
 0562           ;            raw -> R12,R13
 0562           ;            tmp -> y+4
 0562           ;      timestamp -> R14,R15
 0562           ;           data -> R10,R11
                        .even
 0562           _mpu_get_temperature::
 0562 0E940000          xcall push_xgset00FC
 0566 7901              movw R14,R18
 0568 5801              movw R10,R16
 056A 2697              sbiw R28,6
 056C                   .dbline -1
 056C                   .dbline 557
 056C           ; }
 056C           ; 
 056C           ; int mpu_get_temperature(long *data, unsigned long *timestamp)
 056C           ; {
 056C                   .dbline 561
 056C           ;       unsigned char tmp[2];
 056C           ;       short raw;
 056C           ; 
 056C           ;       if (!(st.chip_cfg.sensors))
 056C 20905200          lds R2,_st+4+2
 0570 2220              tst R2
 0572 19F4              brne L188
 0574           X42:
 0574                   .dbline 562
 0574           ;               return -1;
 0574 0FEF              ldi R16,-1
 0576 1FEF              ldi R17,-1
 0578 6AC0              xjmp L187
 057A           L188:
 057A                   .dbline 564
 057A           ; 
 057A           ;       if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
 057A CE01              movw R24,R28
 057C 0496              adiw R24,4
 057E 9B83              std y+3,R25
 0580 8A83              std y+2,R24
 0582 82E0              ldi R24,2
 0584 8883              std y+0,R24
 0586 E0914C00          lds R30,_st
 058A F0914D00          lds R31,_st+1
 058E 2685              ldd R18,z+14
 0590 E0914E00          lds R30,_st+2
 0594 F0914F00          lds R31,_st+2+1
 0598 0081              ldd R16,z+0
 059A 0E940000          xcall _i2cread
 059E 0023              tst R16
 05A0 19F0              breq L192
 05A2           X43:
 05A2                   .dbline 565
 05A2           ;               return -1;
 05A2 0FEF              ldi R16,-1
 05A4 1FEF              ldi R17,-1
 05A6 53C0              xjmp L187
 05A8           L192:
 05A8                   .dbline 566
 05A8           ;       raw = (tmp[0] << 8) | tmp[1];
 05A8 2D80              ldd R2,y+5
 05AA 3C80              ldd R3,y+4
 05AC D32C              mov R13,R3
 05AE C22C              mov R12,R2
 05B0                   .dbline 567
 05B0           ;       if (timestamp)
 05B0 EE20              tst R14
 05B2 11F4              brne X44
 05B4 FF20              tst R15
 05B6 19F0              breq L196
 05B8           X44:
 05B8                   .dbline 568
 05B8           ;               get_ms(timestamp);
 05B8 8701              movw R16,R14
 05BA 0E945916          xcall _get_ms
 05BE           L196:
 05BE                   .dbline 570
 05BE           ; 
 05BE           ;       data[0] = (long)((35 + ((raw - (float)st.hw->temp_offset) / st.hw->temp_sens)) * 65536L);
 05BE 00E0              ldi R16,<L200
 05C0 10E0              ldi R17,>L200
 05C2 0E940000          xcall elpm32
 05C6 1801              movw R2,R16
 05C8 2901              movw R4,R18
 05CA 8601              movw R16,R12
 05CC 0E940000          xcall int2fp
 05D0 3801              movw R6,R16
 05D2 4901              movw R8,R18
 05D4 E0914E00          lds R30,_st+2
 05D8 F0914F00          lds R31,_st+2+1
 05DC 0681              ldd R16,z+6
 05DE 1781              ldd R17,z+7
 05E0 0E940000          xcall int2fp
 05E4 3A93              st -y,R19
 05E6 2A93              st -y,R18
 05E8 1A93              st -y,R17
 05EA 0A93              st -y,R16
 05EC 8301              movw R16,R6
 05EE 9401              movw R18,R8
 05F0 0E940000          xcall fpsub2
 05F4 3801              movw R6,R16
 05F6 4901              movw R8,R18
 05F8 E0914E00          lds R30,_st+2
 05FC F0914F00          lds R31,_st+2+1
 0600 0481              ldd R16,z+4
 0602 1581              ldd R17,z+5
 0604 0E940000          xcall uint2fp
 0608 3A93              st -y,R19
 060A 2A93              st -y,R18
 060C 1A93              st -y,R17
 060E 0A93              st -y,R16
 0610 8301              movw R16,R6
 0612 9401              movw R18,R8
 0614 0E940000          xcall fpdiv2
 0618 3801              movw R6,R16
 061A 4901              movw R8,R18
 061C 00E0              ldi R16,<L201
 061E 10E0              ldi R17,>L201
 0620 0E940000          xcall elpm32
 0624 3A93              st -y,R19
 0626 2A93              st -y,R18
 0628 1A93              st -y,R17
 062A 0A93              st -y,R16
 062C 8301              movw R16,R6
 062E 9401              movw R18,R8
 0630 0E940000          xcall fpadd2x
 0634 8101              movw R16,R2
 0636 9201              movw R18,R4
 0638 0E940000          xcall fpmule2
 063C 0E940000          xcall fpint
 0640 F501              movw R30,R10
 0642 0083              std z+0,R16
 0644 1183              std z+1,R17
 0646 2283              std z+2,R18
 0648 3383              std z+3,R19
 064A                   .dbline 571
 064A           ;       return 0;
 064A 0027              clr R16
 064C 1127              clr R17
 064E                   .dbline -2
 064E           L187:
 064E                   .dbline 0 ; func end
 064E 2696              adiw R28,6
 0650 0C940000          xjmp pop_xgset00FC
 0654                   .dbsym r raw 12 S
 0654                   .dbsym l tmp 4 A[2:2]c
 0654                   .dbsym r timestamp 14 pl
 0654                   .dbsym r data 10 pL
 0654                   .dbend
 0654                   .dbfunc e mpu_set_accel_bias _mpu_set_accel_bias fI
 0654           ;             fg -> y+22
 0654           ;      got_accel -> y+16
 0654           ;       accel_hw -> y+10
 0654           ;           data -> y+4
 0654           ;     accel_bias -> R20,R21
                        .even
 0654           _mpu_set_accel_bias::
 0654 0E940000          xcall push_xgset300C
 0658 A801              movw R20,R16
 065A 6C97              sbiw R28,28
 065C                   .dbline -1
 065C                   .dbline 575
 065C           ; }
 065C           ; 
 065C           ; int mpu_set_accel_bias(const long *accel_bias)
 065C           ; {
 065C                   .dbline 581
 065C           ;       unsigned char data[6];
 065C           ;       short accel_hw[3];
 065C           ;       short got_accel[3];
 065C           ;       short fg[3];
 065C           ; 
 065C           ;       if (!accel_bias)
 065C 4030              cpi R20,0
 065E 4507              cpc R20,R21
 0660 19F4              brne L203
 0662           X45:
 0662                   .dbline 582
 0662           ;               return -1;
 0662 0FEF              ldi R16,-1
 0664 1FEF              ldi R17,-1
 0666 2DC1              xjmp L202
 0668           L203:
 0668                   .dbline 583
 0668           ;       if (!accel_bias[0] && !accel_bias[1] && !accel_bias[2])
 0668 FA01              movw R30,R20
 066A 2080              ldd R2,z+0
 066C 3180              ldd R3,z+1
 066E 4280              ldd R4,z+2
 0670 5380              ldd R5,z+3
 0672 8894              clc
 0674 2220              tst R2
 0676 3204              cpc R3,R2
 0678 4204              cpc R4,R2
 067A 5204              cpc R5,R2
 067C D1F4              brne L205
 067E           X46:
 067E 3496              adiw R30,4
 0680 2080              ldd R2,z+0
 0682 3180              ldd R3,z+1
 0684 4280              ldd R4,z+2
 0686 5380              ldd R5,z+3
 0688 8894              clc
 068A 2220              tst R2
 068C 3204              cpc R3,R2
 068E 4204              cpc R4,R2
 0690 5204              cpc R5,R2
 0692 79F4              brne L205
 0694           X47:
 0694 FA01              movw R30,R20
 0696 3896              adiw R30,8
 0698 2080              ldd R2,z+0
 069A 3180              ldd R3,z+1
 069C 4280              ldd R4,z+2
 069E 5380              ldd R5,z+3
 06A0 8894              clc
 06A2 2220              tst R2
 06A4 3204              cpc R3,R2
 06A6 4204              cpc R4,R2
 06A8 5204              cpc R5,R2
 06AA 19F4              brne L205
 06AC           X48:
 06AC                   .dbline 584
 06AC           ;               return 0;
 06AC 0027              clr R16
 06AE 1127              clr R17
 06B0 08C1              xjmp L202
 06B2           L205:
 06B2                   .dbline 586
 06B2           ; 
 06B2           ;       if (i2c_read(st.hw->addr, 3, 3, data))
 06B2 CE01              movw R24,R28
 06B4 0496              adiw R24,4
 06B6 9B83              std y+3,R25
 06B8 8A83              std y+2,R24
 06BA 83E0              ldi R24,3
 06BC 8883              std y+0,R24
 06BE 23E0              ldi R18,3
 06C0 E0914E00          lds R30,_st+2
 06C4 F0914F00          lds R31,_st+2+1
 06C8 0081              ldd R16,z+0
 06CA 0E940000          xcall _i2cread
 06CE 0023              tst R16
 06D0 19F0              breq L207
 06D2           X49:
 06D2                   .dbline 587
 06D2           ;               return -1;
 06D2 0FEF              ldi R16,-1
 06D4 1FEF              ldi R17,-1
 06D6 F5C0              xjmp L202
 06D8           L207:
 06D8                   .dbline 588
 06D8           ;       fg[0] = ((data[0] >> 4) + 8) & 0xf;
 06D8 8C81              ldd R24,y+4
 06DA 9927              clr R25
 06DC 9595              asr R25
 06DE 8795              ror R24
 06E0 9595              asr R25
 06E2 8795              ror R24
 06E4 9595              asr R25
 06E6 8795              ror R24
 06E8 9595              asr R25
 06EA 8795              ror R24
 06EC 0896              adiw R24,8
 06EE 8F70              andi R24,15
 06F0 9070              andi R25,0
 06F2 9F8B              std y+23,R25
 06F4 8E8B              std y+22,R24
 06F6                   .dbline 589
 06F6           ;       fg[1] = ((data[1] >> 4) + 8) & 0xf;
 06F6 8D81              ldd R24,y+5
 06F8 9927              clr R25
 06FA 9595              asr R25
 06FC 8795              ror R24
 06FE 9595              asr R25
 0700 8795              ror R24
 0702 9595              asr R25
 0704 8795              ror R24
 0706 9595              asr R25
 0708 8795              ror R24
 070A 0896              adiw R24,8
 070C 8F70              andi R24,15
 070E 9070              andi R25,0
 0710 998F              std y+25,R25
 0712 888F              std y+24,R24
 0714                   .dbline 590
 0714           ;       fg[2] = ((data[2] >> 4) + 8) & 0xf;
 0714 8E81              ldd R24,y+6
 0716 9927              clr R25
 0718 9595              asr R25
 071A 8795              ror R24
 071C 9595              asr R25
 071E 8795              ror R24
 0720 9595              asr R25
 0722 8795              ror R24
 0724 9595              asr R25
 0726 8795              ror R24
 0728 0896              adiw R24,8
 072A 8F70              andi R24,15
 072C 9070              andi R25,0
 072E 9B8F              std y+27,R25
 0730 8A8F              std y+26,R24
 0732                   .dbline 592
 0732           ; 
 0732           ;       accel_hw[0] = (short)(accel_bias[0] * 2 / (64 + fg[0]));
 0732 8E89              ldd R24,y+22
 0734 9F89              ldd R25,y+23
 0736 805C              subi R24,192  ; offset = 64
 0738 9F4F              sbci R25,255
 073A 1C01              movw R2,R24
 073C 4424              clr R4
 073E 37FC              sbrc R3,7
 0740 4094              com R4
 0742 5524              clr R5
 0744 47FC              sbrc R4,7
 0746 5094              com R5
 0748 FA01              movw R30,R20
 074A 0081              ldd R16,z+0
 074C 1181              ldd R17,z+1
 074E 2281              ldd R18,z+2
 0750 3381              ldd R19,z+3
 0752 000F              lsl R16
 0754 111F              rol R17
 0756 221F              rol R18
 0758 331F              rol R19
 075A 5A92              st -y,R5
 075C 4A92              st -y,R4
 075E 3A92              st -y,R3
 0760 2A92              st -y,R2
 0762 0E940000          xcall div32s
 0766 1B87              std y+11,R17
 0768 0A87              std y+10,R16
 076A                   .dbline 593
 076A           ;       accel_hw[1] = (short)(accel_bias[1] * 2 / (64 + fg[1]));
 076A 888D              ldd R24,y+24
 076C 998D              ldd R25,y+25
 076E 805C              subi R24,192  ; offset = 64
 0770 9F4F              sbci R25,255
 0772 1C01              movw R2,R24
 0774 4424              clr R4
 0776 37FC              sbrc R3,7
 0778 4094              com R4
 077A 5524              clr R5
 077C 47FC              sbrc R4,7
 077E 5094              com R5
 0780 FA01              movw R30,R20
 0782 0481              ldd R16,z+4
 0784 1581              ldd R17,z+5
 0786 2681              ldd R18,z+6
 0788 3781              ldd R19,z+7
 078A 000F              lsl R16
 078C 111F              rol R17
 078E 221F              rol R18
 0790 331F              rol R19
 0792 5A92              st -y,R5
 0794 4A92              st -y,R4
 0796 3A92              st -y,R3
 0798 2A92              st -y,R2
 079A 0E940000          xcall div32s
 079E 1D87              std y+13,R17
 07A0 0C87              std y+12,R16
 07A2                   .dbline 594
 07A2           ;       accel_hw[2] = (short)(accel_bias[2] * 2 / (64 + fg[2]));
 07A2 8A8D              ldd R24,y+26
 07A4 9B8D              ldd R25,y+27
 07A6 805C              subi R24,192  ; offset = 64
 07A8 9F4F              sbci R25,255
 07AA 1C01              movw R2,R24
 07AC 4424              clr R4
 07AE 37FC              sbrc R3,7
 07B0 4094              com R4
 07B2 5524              clr R5
 07B4 47FC              sbrc R4,7
 07B6 5094              com R5
 07B8 FA01              movw R30,R20
 07BA 0085              ldd R16,z+8
 07BC 1185              ldd R17,z+9
 07BE 2285              ldd R18,z+10
 07C0 3385              ldd R19,z+11
 07C2 000F              lsl R16
 07C4 111F              rol R17
 07C6 221F              rol R18
 07C8 331F              rol R19
 07CA 5A92              st -y,R5
 07CC 4A92              st -y,R4
 07CE 3A92              st -y,R3
 07D0 2A92              st -y,R2
 07D2 0E940000          xcall div32s
 07D6 1F87              std y+15,R17
 07D8 0E87              std y+14,R16
 07DA                   .dbline 596
 07DA           ; 
 07DA           ;       if (i2c_read(st.hw->addr, 0x06, 6, data))
 07DA CE01              movw R24,R28
 07DC 0496              adiw R24,4
 07DE 9B83              std y+3,R25
 07E0 8A83              std y+2,R24
 07E2 86E0              ldi R24,6
 07E4 8883              std y+0,R24
 07E6 26E0              ldi R18,6
 07E8 E0914E00          lds R30,_st+2
 07EC F0914F00          lds R31,_st+2+1
 07F0 0081              ldd R16,z+0
 07F2 0E940000          xcall _i2cread
 07F6 0023              tst R16
 07F8 19F0              breq L218
 07FA           X50:
 07FA                   .dbline 597
 07FA           ;               return -1;
 07FA 0FEF              ldi R16,-1
 07FC 1FEF              ldi R17,-1
 07FE 61C0              xjmp L202
 0800           L218:
 0800                   .dbline 599
 0800           ; 
 0800           ;       got_accel[0] = ((short)data[0] << 8) | data[1];
 0800 2D80              ldd R2,y+5
 0802 3C80              ldd R3,y+4
 0804 4424              clr R4
 0806 398A              std y+17,R3
 0808 288A              std y+16,R2
 080A                   .dbline 600
 080A           ;       got_accel[1] = ((short)data[2] << 8) | data[3];
 080A 2F80              ldd R2,y+7
 080C 3E80              ldd R3,y+6
 080E 4424              clr R4
 0810 3B8A              std y+19,R3
 0812 2A8A              std y+18,R2
 0814                   .dbline 601
 0814           ;       got_accel[2] = ((short)data[4] << 8) | data[5];
 0814 2984              ldd R2,y+9
 0816 3884              ldd R3,y+8
 0818 4424              clr R4
 081A 3D8A              std y+21,R3
 081C 2C8A              std y+20,R2
 081E                   .dbline 603
 081E           ; 
 081E           ;       accel_hw[0] += got_accel[0];
 081E 2888              ldd R2,y+16
 0820 3988              ldd R3,y+17
 0822 4A84              ldd R4,y+10
 0824 5B84              ldd R5,y+11
 0826 420C              add R4,R2
 0828 531C              adc R5,R3
 082A 5B86              std y+11,R5
 082C 4A86              std y+10,R4
 082E                   .dbline 604
 082E           ;       accel_hw[1] += got_accel[1];
 082E 2A88              ldd R2,y+18
 0830 3B88              ldd R3,y+19
 0832 4C84              ldd R4,y+12
 0834 5D84              ldd R5,y+13
 0836 420C              add R4,R2
 0838 531C              adc R5,R3
 083A 5D86              std y+13,R5
 083C 4C86              std y+12,R4
 083E                   .dbline 605
 083E           ;       accel_hw[2] += got_accel[2];
 083E 2C88              ldd R2,y+20
 0840 3D88              ldd R3,y+21
 0842 4E84              ldd R4,y+14
 0844 5F84              ldd R5,y+15
 0846 420C              add R4,R2
 0848 531C              adc R5,R3
 084A 5F86              std y+15,R5
 084C 4E86              std y+14,R4
 084E                   .dbline 607
 084E           ; 
 084E           ;       data[0] = (accel_hw[0] >> 8) & 0xff;
 084E 8A85              ldd R24,y+10
 0850 9B85              ldd R25,y+11
 0852 892F              mov R24,R25
 0854 9927              clr R25
 0856 87FD              sbrc R24,7
 0858 9095              com R25
 085A 9070              andi R25,0
 085C 8C83              std y+4,R24
 085E                   .dbline 608
 085E           ;       data[1] = (accel_hw[0]) & 0xff;
 085E 8A85              ldd R24,y+10
 0860 9B85              ldd R25,y+11
 0862 9070              andi R25,0
 0864 8D83              std y+5,R24
 0866                   .dbline 609
 0866           ;       data[2] = (accel_hw[1] >> 8) & 0xff;
 0866 8C85              ldd R24,y+12
 0868 9D85              ldd R25,y+13
 086A 892F              mov R24,R25
 086C 9927              clr R25
 086E 87FD              sbrc R24,7
 0870 9095              com R25
 0872 9070              andi R25,0
 0874 8E83              std y+6,R24
 0876                   .dbline 610
 0876           ;       data[3] = (accel_hw[1]) & 0xff;
 0876 8C85              ldd R24,y+12
 0878 9D85              ldd R25,y+13
 087A 9070              andi R25,0
 087C 8F83              std y+7,R24
 087E                   .dbline 611
 087E           ;       data[4] = (accel_hw[2] >> 8) & 0xff;
 087E 8E85              ldd R24,y+14
 0880 9F85              ldd R25,y+15
 0882 892F              mov R24,R25
 0884 9927              clr R25
 0886 87FD              sbrc R24,7
 0888 9095              com R25
 088A 9070              andi R25,0
 088C 8887              std y+8,R24
 088E                   .dbline 612
 088E           ;       data[5] = (accel_hw[2]) & 0xff;
 088E 8E85              ldd R24,y+14
 0890 9F85              ldd R25,y+15
 0892 9070              andi R25,0
 0894 8987              std y+9,R24
 0896                   .dbline 614
 0896           ; 
 0896           ;       if (i2c_write(st.hw->addr, 0x06, 6, data))
 0896 CE01              movw R24,R28
 0898 0496              adiw R24,4
 089A 9B83              std y+3,R25
 089C 8A83              std y+2,R24
 089E 86E0              ldi R24,6
 08A0 8883              std y+0,R24
 08A2 26E0              ldi R18,6
 08A4 E0914E00          lds R30,_st+2
 08A8 F0914F00          lds R31,_st+2+1
 08AC 0081              ldd R16,z+0
 08AE 0E940000          xcall _i2cwrite
 08B2 A02E              mov R10,R16
 08B4 0023              tst R16
 08B6 19F0              breq L241
 08B8           X51:
 08B8                   .dbline 615
 08B8           ;               return -1;
 08B8 0FEF              ldi R16,-1
 08BA 1FEF              ldi R17,-1
 08BC 02C0              xjmp L202
 08BE           L241:
 08BE                   .dbline 616
 08BE           ;       return 0;
 08BE 0027              clr R16
 08C0 1127              clr R17
 08C2                   .dbline -2
 08C2           L202:
 08C2                   .dbline 0 ; func end
 08C2 6C96              adiw R28,28
 08C4 0C940000          xjmp pop_xgset300C
 08C8                   .dbsym l fg 22 A[6:3]S
 08C8                   .dbsym l got_accel 16 A[6:3]S
 08C8                   .dbsym l accel_hw 10 A[6:3]S
 08C8                   .dbsym l data 4 A[6:6]c
 08C8                   .dbsym r accel_bias 20 pL
 08C8                   .dbend
 08C8                   .dbfunc e mpu_reset_fifo _mpu_reset_fifo fI
 08C8           ;           data -> y+4
                        .even
 08C8           _mpu_reset_fifo::
 08C8 AA92              st -y,R10
 08CA 2597              sbiw R28,5
 08CC                   .dbline -1
 08CC                   .dbline 620
 08CC           ; }
 08CC           ; 
 08CC           ; int mpu_reset_fifo(void)
 08CC           ; {
 08CC                   .dbline 623
 08CC           ;       unsigned char data;
 08CC           ; 
 08CC           ;       if (!(st.chip_cfg.sensors))
 08CC 20905200          lds R2,_st+4+2
 08D0 2220              tst R2
 08D2 19F4              brne L245
 08D4           X52:
 08D4                   .dbline 624
 08D4           ;               return -1;
 08D4 0FEF              ldi R16,-1
 08D6 1FEF              ldi R17,-1
 08D8 45C1              xjmp L244
 08DA           L245:
 08DA                   .dbline 626
 08DA           ; 
 08DA           ;       data = 0;
 08DA 2224              clr R2
 08DC 2C82              std y+4,R2
 08DE                   .dbline 627
 08DE           ;       if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 08DE CE01              movw R24,R28
 08E0 0496              adiw R24,4
 08E2 9B83              std y+3,R25
 08E4 8A83              std y+2,R24
 08E6 81E0              ldi R24,1
 08E8 8883              std y+0,R24
 08EA E0914C00          lds R30,_st
 08EE F0914D00          lds R31,_st+1
 08F2 2785              ldd R18,z+15
 08F4 E0914E00          lds R30,_st+2
 08F8 F0914F00          lds R31,_st+2+1
 08FC 0081              ldd R16,z+0
 08FE 0E940000          xcall _i2cwrite
 0902 0023              tst R16
 0904 19F0              breq L249
 0906           X53:
 0906                   .dbline 628
 0906           ;               return -1;
 0906 0FEF              ldi R16,-1
 0908 1FEF              ldi R17,-1
 090A 2CC1              xjmp L244
 090C           L249:
 090C                   .dbline 629
 090C           ;       if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 090C CE01              movw R24,R28
 090E 0496              adiw R24,4
 0910 9B83              std y+3,R25
 0912 8A83              std y+2,R24
 0914 81E0              ldi R24,1
 0916 8883              std y+0,R24
 0918 E0914C00          lds R30,_st
 091C F0914D00          lds R31,_st+1
 0920 2581              ldd R18,z+5
 0922 E0914E00          lds R30,_st+2
 0926 F0914F00          lds R31,_st+2+1
 092A 0081              ldd R16,z+0
 092C 0E940000          xcall _i2cwrite
 0930 0023              tst R16
 0932 19F0              breq L252
 0934           X54:
 0934                   .dbline 630
 0934           ;               return -1;
 0934 0FEF              ldi R16,-1
 0936 1FEF              ldi R17,-1
 0938 15C1              xjmp L244
 093A           L252:
 093A                   .dbline 631
 093A           ;       if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 093A CE01              movw R24,R28
 093C 0496              adiw R24,4
 093E 9B83              std y+3,R25
 0940 8A83              std y+2,R24
 0942 81E0              ldi R24,1
 0944 8883              std y+0,R24
 0946 E0914C00          lds R30,_st
 094A F0914D00          lds R31,_st+1
 094E 2481              ldd R18,z+4
 0950 E0914E00          lds R30,_st+2
 0954 F0914F00          lds R31,_st+2+1
 0958 0081              ldd R16,z+0
 095A 0E940000          xcall _i2cwrite
 095E A02E              mov R10,R16
 0960 0023              tst R16
 0962 19F0              breq L255
 0964           X55:
 0964                   .dbline 632
 0964           ;               return -1;
 0964 0FEF              ldi R16,-1
 0966 1FEF              ldi R17,-1
 0968 FDC0              xjmp L244
 096A           L255:
 096A                   .dbline 634
 096A           ; 
 096A           ;       if (st.chip_cfg.dmp_on) 
 096A 20906900          lds R2,_st+4+25
 096E 2220              tst R2
 0970 09F4              brne X70
 0972 7AC0              xjmp L258
 0974           X70:
 0974           X56:
 0974                   .dbline 635
 0974           ;       {
 0974                   .dbline 636
 0974           ;               data = BIT_FIFO_RST | BIT_DMP_RST;
 0974 8CE0              ldi R24,12
 0976 8C83              std y+4,R24
 0978                   .dbline 637
 0978           ;               if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 0978 CE01              movw R24,R28
 097A 0496              adiw R24,4
 097C 9B83              std y+3,R25
 097E 8A83              std y+2,R24
 0980 81E0              ldi R24,1
 0982 8883              std y+0,R24
 0984 E0914C00          lds R30,_st
 0988 F0914D00          lds R31,_st+1
 098C 2481              ldd R18,z+4
 098E E0914E00          lds R30,_st+2
 0992 F0914F00          lds R31,_st+2+1
 0996 0081              ldd R16,z+0
 0998 0E940000          xcall _i2cwrite
 099C A02E              mov R10,R16
 099E 0023              tst R16
 09A0 19F0              breq L262
 09A2           X57:
 09A2                   .dbline 638
 09A2           ;                       return -1;
 09A2 0FEF              ldi R16,-1
 09A4 1FEF              ldi R17,-1
 09A6 DEC0              xjmp L244
 09A8           L262:
 09A8                   .dbline 639
 09A8           ;               delay_ms(50);
 09A8 02E3              ldi R16,50
 09AA 10E0              ldi R17,0
 09AC 0E940000          xcall _delay_ms
 09B0                   .dbline 640
 09B0           ;               data = BIT_DMP_EN | BIT_FIFO_EN;
 09B0 80EC              ldi R24,192
 09B2 8C83              std y+4,R24
 09B4                   .dbline 641
 09B4           ;               if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 09B4 20905200          lds R2,_st+4+2
 09B8 20FE              sbrs R2,0
 09BA 02C0              rjmp L265
 09BC           X58:
 09BC                   .dbline 642
 09BC           ;                       data |= BIT_AUX_IF_EN;
 09BC 8062              ori R24,32
 09BE 8C83              std y+4,R24
 09C0           L265:
 09C0                   .dbline 643
 09C0           ;               if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 09C0 CE01              movw R24,R28
 09C2 0496              adiw R24,4
 09C4 9B83              std y+3,R25
 09C6 8A83              std y+2,R24
 09C8 81E0              ldi R24,1
 09CA 8883              std y+0,R24
 09CC E0914C00          lds R30,_st
 09D0 F0914D00          lds R31,_st+1
 09D4 2481              ldd R18,z+4
 09D6 E0914E00          lds R30,_st+2
 09DA F0914F00          lds R31,_st+2+1
 09DE 0081              ldd R16,z+0
 09E0 0E940000          xcall _i2cwrite
 09E4 A02E              mov R10,R16
 09E6 0023              tst R16
 09E8 19F0              breq L269
 09EA           X59:
 09EA                   .dbline 644
 09EA           ;                       return -1;
 09EA 0FEF              ldi R16,-1
 09EC 1FEF              ldi R17,-1
 09EE BAC0              xjmp L244
 09F0           L269:
 09F0                   .dbline 645
 09F0           ;               if (st.chip_cfg.int_enable)
 09F0 20905800          lds R2,_st+4+8
 09F4 2220              tst R2
 09F6 19F0              breq L272
 09F8           X60:
 09F8                   .dbline 646
 09F8           ;                       data = BIT_DMP_INT_EN;
 09F8 82E0              ldi R24,2
 09FA 8C83              std y+4,R24
 09FC 02C0              xjmp L273
 09FE           L272:
 09FE                   .dbline 648
 09FE           ;               else
 09FE           ;                       data = 0;
 09FE 2224              clr R2
 0A00 2C82              std y+4,R2
 0A02           L273:
 0A02                   .dbline 649
 0A02           ;               if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 0A02 CE01              movw R24,R28
 0A04 0496              adiw R24,4
 0A06 9B83              std y+3,R25
 0A08 8A83              std y+2,R24
 0A0A 81E0              ldi R24,1
 0A0C 8883              std y+0,R24
 0A0E E0914C00          lds R30,_st
 0A12 F0914D00          lds R31,_st+1
 0A16 2785              ldd R18,z+15
 0A18 E0914E00          lds R30,_st+2
 0A1C F0914F00          lds R31,_st+2+1
 0A20 0081              ldd R16,z+0
 0A22 0E940000          xcall _i2cwrite
 0A26 A02E              mov R10,R16
 0A28 0023              tst R16
 0A2A 19F0              breq L276
 0A2C           X61:
 0A2C                   .dbline 650
 0A2C           ;                       return -1;
 0A2C 0FEF              ldi R16,-1
 0A2E 1FEF              ldi R17,-1
 0A30 99C0              xjmp L244
 0A32           L276:
 0A32                   .dbline 651
 0A32           ;               data = 0;
 0A32 2224              clr R2
 0A34 2C82              std y+4,R2
 0A36                   .dbline 652
 0A36           ;               if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 0A36 CE01              movw R24,R28
 0A38 0496              adiw R24,4
 0A3A 9B83              std y+3,R25
 0A3C 8A83              std y+2,R24
 0A3E 81E0              ldi R24,1
 0A40 8883              std y+0,R24
 0A42 E0914C00          lds R30,_st
 0A46 F0914D00          lds R31,_st+1
 0A4A 2581              ldd R18,z+5
 0A4C E0914E00          lds R30,_st+2
 0A50 F0914F00          lds R31,_st+2+1
 0A54 0081              ldd R16,z+0
 0A56 0E940000          xcall _i2cwrite
 0A5A A02E              mov R10,R16
 0A5C 0023              tst R16
 0A5E 09F4              brne X71
 0A60 7FC0              xjmp L259
 0A62           X71:
 0A62           X62:
 0A62                   .dbline 653
 0A62           ;                       return -1;
 0A62 0FEF              ldi R16,-1
 0A64 1FEF              ldi R17,-1
 0A66 7EC0              xjmp L244
 0A68           L258:
 0A68                   .dbline 656
 0A68           ;       } 
 0A68           ;       else 
 0A68           ;       {
 0A68                   .dbline 657
 0A68           ;               data = BIT_FIFO_RST;
 0A68 84E0              ldi R24,4
 0A6A 8C83              std y+4,R24
 0A6C                   .dbline 658
 0A6C           ;               if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 0A6C CE01              movw R24,R28
 0A6E 0496              adiw R24,4
 0A70 9B83              std y+3,R25
 0A72 8A83              std y+2,R24
 0A74 81E0              ldi R24,1
 0A76 8883              std y+0,R24
 0A78 E0914C00          lds R30,_st
 0A7C F0914D00          lds R31,_st+1
 0A80 2481              ldd R18,z+4
 0A82 E0914E00          lds R30,_st+2
 0A86 F0914F00          lds R31,_st+2+1
 0A8A 0081              ldd R16,z+0
 0A8C 0E940000          xcall _i2cwrite
 0A90 A02E              mov R10,R16
 0A92 0023              tst R16
 0A94 19F0              breq L282
 0A96           X63:
 0A96                   .dbline 659
 0A96           ;                       return -1;
 0A96 0FEF              ldi R16,-1
 0A98 1FEF              ldi R17,-1
 0A9A 64C0              xjmp L244
 0A9C           L282:
 0A9C                   .dbline 660
 0A9C           ;               if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors ))
 0A9C 20905900          lds R2,_st+4+9
 0AA0 2220              tst R2
 0AA2 21F4              brne L291
 0AA4           X64:
 0AA4 20905200          lds R2,_st+4+2
 0AA8 2220              tst R2
 0AAA 19F4              brne L285
 0AAC           X65:
 0AAC           L291:
 0AAC                   .dbline 661
 0AAC           ;                       data = BIT_FIFO_EN;
 0AAC 80E4              ldi R24,64
 0AAE 8C83              std y+4,R24
 0AB0 02C0              xjmp L286
 0AB2           L285:
 0AB2                   .dbline 663
 0AB2           ;               else
 0AB2           ;                       data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 0AB2 80E6              ldi R24,96
 0AB4 8C83              std y+4,R24
 0AB6           L286:
 0AB6                   .dbline 664
 0AB6           ;               if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 0AB6 CE01              movw R24,R28
 0AB8 0496              adiw R24,4
 0ABA 9B83              std y+3,R25
 0ABC 8A83              std y+2,R24
 0ABE 81E0              ldi R24,1
 0AC0 8883              std y+0,R24
 0AC2 E0914C00          lds R30,_st
 0AC6 F0914D00          lds R31,_st+1
 0ACA 2481              ldd R18,z+4
 0ACC E0914E00          lds R30,_st+2
 0AD0 F0914F00          lds R31,_st+2+1
 0AD4 0081              ldd R16,z+0
 0AD6 0E940000          xcall _i2cwrite
 0ADA A02E              mov R10,R16
 0ADC 0023              tst R16
 0ADE 19F0              breq L292
 0AE0           X66:
 0AE0                   .dbline 665
 0AE0           ;                       return -1;
 0AE0 0FEF              ldi R16,-1
 0AE2 1FEF              ldi R17,-1
 0AE4 3FC0              xjmp L244
 0AE6           L292:
 0AE6                   .dbline 666
 0AE6           ;               delay_ms(50);
 0AE6 02E3              ldi R16,50
 0AE8 10E0              ldi R17,0
 0AEA 0E940000          xcall _delay_ms
 0AEE                   .dbline 667
 0AEE           ;               if (st.chip_cfg.int_enable)
 0AEE 20905800          lds R2,_st+4+8
 0AF2 2220              tst R2
 0AF4 19F0              breq L295
 0AF6           X67:
 0AF6                   .dbline 668
 0AF6           ;                       data = BIT_DATA_RDY_EN;
 0AF6 81E0              ldi R24,1
 0AF8 8C83              std y+4,R24
 0AFA 02C0              xjmp L296
 0AFC           L295:
 0AFC                   .dbline 670
 0AFC           ;               else
 0AFC           ;                       data = 0;
 0AFC 2224              clr R2
 0AFE 2C82              std y+4,R2
 0B00           L296:
 0B00                   .dbline 671
 0B00           ;               if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 0B00 CE01              movw R24,R28
 0B02 0496              adiw R24,4
 0B04 9B83              std y+3,R25
 0B06 8A83              std y+2,R24
 0B08 81E0              ldi R24,1
 0B0A 8883              std y+0,R24
 0B0C E0914C00          lds R30,_st
 0B10 F0914D00          lds R31,_st+1
 0B14 2785              ldd R18,z+15
 0B16 E0914E00          lds R30,_st+2
 0B1A F0914F00          lds R31,_st+2+1
 0B1E 0081              ldd R16,z+0
 0B20 0E940000          xcall _i2cwrite
 0B24 A02E              mov R10,R16
 0B26 0023              tst R16
 0B28 19F0              breq L299
 0B2A           X68:
 0B2A                   .dbline 672
 0B2A           ;                       return -1;
 0B2A 0FEF              ldi R16,-1
 0B2C 1FEF              ldi R17,-1
 0B2E 1AC0              xjmp L244
 0B30           L299:
 0B30                   .dbline 673
 0B30           ;               if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 0B30 80E0              ldi R24,<_st+4+7
 0B32 90E0              ldi R25,>_st+4+7
 0B34 9B83              std y+3,R25
 0B36 8A83              std y+2,R24
 0B38 81E0              ldi R24,1
 0B3A 8883              std y+0,R24
 0B3C E0914C00          lds R30,_st
 0B40 F0914D00          lds R31,_st+1
 0B44 2581              ldd R18,z+5
 0B46 E0914E00          lds R30,_st+2
 0B4A F0914F00          lds R31,_st+2+1
 0B4E 0081              ldd R16,z+0
 0B50 0E940000          xcall _i2cwrite
 0B54 A02E              mov R10,R16
 0B56 0023              tst R16
 0B58 19F0              breq L302
 0B5A           X69:
 0B5A                   .dbline 674
 0B5A           ;                       return -1;
 0B5A 0FEF              ldi R16,-1
 0B5C 1FEF              ldi R17,-1
 0B5E 02C0              xjmp L244
 0B60           L302:
 0B60                   .dbline 675
 0B60           ;       }
 0B60           L259:
 0B60                   .dbline 676
 0B60           ;       return 0;
 0B60 0027              clr R16
 0B62 1127              clr R17
 0B64                   .dbline -2
 0B64           L244:
 0B64                   .dbline 0 ; func end
 0B64 2596              adiw R28,5
 0B66 A990              ld R10,y+
 0B68 0895              ret
 0B6A                   .dbsym l data 4 c
 0B6A                   .dbend
 0B6A                   .dbfunc e mpu_get_gyro_fsr _mpu_get_gyro_fsr fI
 0B6A           ;            fsr -> R16,R17
                        .even
 0B6A           _mpu_get_gyro_fsr::
 0B6A 4A93              st -y,R20
 0B6C 5A93              st -y,R21
 0B6E                   .dbline -1
 0B6E                   .dbline 680
 0B6E           ; }
 0B6E           ; 
 0B6E           ; int mpu_get_gyro_fsr(unsigned short *fsr)
 0B6E           ; {
 0B6E                   .dbline 681
 0B6E           ;       switch (st.chip_cfg.gyro_fsr) 
 0B6E 40915000          lds R20,_st+4
 0B72 5527              clr R21
 0B74 4030              cpi R20,0
 0B76 4507              cpc R20,R21
 0B78 69F0              breq L312
 0B7A           X72:
 0B7A 4130              cpi R20,1
 0B7C E0E0              ldi R30,0
 0B7E 5E07              cpc R21,R30
 0B80 79F0              breq L313
 0B82           X73:
 0B82 4230              cpi R20,2
 0B84 E0E0              ldi R30,0
 0B86 5E07              cpc R21,R30
 0B88 89F0              breq L314
 0B8A           X74:
 0B8A 4330              cpi R20,3
 0B8C E0E0              ldi R30,0
 0B8E 5E07              cpc R21,R30
 0B90 99F0              breq L315
 0B92           X75:
 0B92 18C0              xjmp L308
 0B94           L312:
 0B94                   .dbline 684
 0B94           ;       {
 0B94           ;       case INV_FSR_250DPS:
 0B94           ;               fsr[0] = 250;
 0B94 8AEF              ldi R24,250
 0B96 90E0              ldi R25,0
 0B98 F801              movw R30,R16
 0B9A 9183              std z+1,R25
 0B9C 8083              std z+0,R24
 0B9E                   .dbline 685
 0B9E           ;               break;
 0B9E 17C0              xjmp L309
 0BA0           L313:
 0BA0                   .dbline 687
 0BA0           ;       case INV_FSR_500DPS:
 0BA0           ;               fsr[0] = 500;
 0BA0 84EF              ldi R24,500
 0BA2 91E0              ldi R25,1
 0BA4 F801              movw R30,R16
 0BA6 9183              std z+1,R25
 0BA8 8083              std z+0,R24
 0BAA                   .dbline 688
 0BAA           ;               break;
 0BAA 11C0              xjmp L309
 0BAC           L314:
 0BAC                   .dbline 690
 0BAC           ;       case INV_FSR_1000DPS:
 0BAC           ;               fsr[0] = 1000;
 0BAC 88EE              ldi R24,1000
 0BAE 93E0              ldi R25,3
 0BB0 F801              movw R30,R16
 0BB2 9183              std z+1,R25
 0BB4 8083              std z+0,R24
 0BB6                   .dbline 691
 0BB6           ;               break;
 0BB6 0BC0              xjmp L309
 0BB8           L315:
 0BB8                   .dbline 693
 0BB8           ;       case INV_FSR_2000DPS:
 0BB8           ;               fsr[0] = 2000;
 0BB8 80ED              ldi R24,2000
 0BBA 97E0              ldi R25,7
 0BBC F801              movw R30,R16
 0BBE 9183              std z+1,R25
 0BC0 8083              std z+0,R24
 0BC2                   .dbline 694
 0BC2           ;               break;
 0BC2 05C0              xjmp L309
 0BC4           L308:
 0BC4                   .dbline 696
 0BC4           ;       default:
 0BC4           ;               fsr[0] = 0;
 0BC4 2224              clr R2
 0BC6 3324              clr R3
 0BC8 F801              movw R30,R16
 0BCA 3182              std z+1,R3
 0BCC 2082              std z+0,R2
 0BCE                   .dbline 697
 0BCE           ;               break;
 0BCE           L309:
 0BCE                   .dbline 699
 0BCE           ;       }
 0BCE           ;       return 0;
 0BCE 0027              clr R16
 0BD0 1127              clr R17
 0BD2                   .dbline -2
 0BD2           L307:
 0BD2                   .dbline 0 ; func end
 0BD2 5991              ld R21,y+
 0BD4 4991              ld R20,y+
 0BD6 0895              ret
 0BD8                   .dbsym r fsr 16 ps
 0BD8                   .dbend
 0BD8                   .dbfunc e mpu_set_gyro_fsr _mpu_set_gyro_fsr fI
 0BD8           ;           data -> y+4
 0BD8           ;            fsr -> R20,R21
                        .even
 0BD8           _mpu_set_gyro_fsr::
 0BD8 4A93              st -y,R20
 0BDA 5A93              st -y,R21
 0BDC A801              movw R20,R16
 0BDE 2597              sbiw R28,5
 0BE0                   .dbline -1
 0BE0                   .dbline 703
 0BE0           ; }
 0BE0           ; 
 0BE0           ; int mpu_set_gyro_fsr(unsigned short fsr)
 0BE0           ; {
 0BE0                   .dbline 706
 0BE0           ;       unsigned char data;
 0BE0           ; 
 0BE0           ;       if (!(st.chip_cfg.sensors))
 0BE0 20905200          lds R2,_st+4+2
 0BE4 2220              tst R2
 0BE6 19F4              brne L317
 0BE8           X76:
 0BE8                   .dbline 707
 0BE8           ;               return -1;
 0BE8 0FEF              ldi R16,-1
 0BEA 1FEF              ldi R17,-1
 0BEC 54C0              xjmp L316
 0BEE           L317:
 0BEE                   .dbline 709
 0BEE           ; 
 0BEE           ;       switch (fsr) 
 0BEE 443F              cpi R20,244
 0BF0 E1E0              ldi R30,1
 0BF2 5E07              cpc R21,R30
 0BF4 D1F0              breq L324
 0BF6           X77:
 0BF6 84EF              ldi R24,500
 0BF8 91E0              ldi R25,1
 0BFA 8417              cp R24,R20
 0BFC 9507              cpc R25,R21
 0BFE 2CF0              brlt L328
 0C00           X78:
 0C00           L327:
 0C00 4A3F              cpi R20,250
 0C02 E0E0              ldi R30,0
 0C04 5E07              cpc R21,R30
 0C06 71F0              breq L323
 0C08           X79:
 0C08 19C0              xjmp L321
 0C0A           L328:
 0C0A 483E              cpi R20,232
 0C0C E3E0              ldi R30,3
 0C0E 5E07              cpc R21,R30
 0C10 79F0              breq L325
 0C12           X80:
 0C12 483E              cpi R20,232
 0C14 E3E0              ldi R30,3
 0C16 5E07              cpc R21,R30
 0C18 8CF0              brlt L321
 0C1A           X81:
 0C1A           L329:
 0C1A 403D              cpi R20,208
 0C1C E7E0              ldi R30,7
 0C1E 5E07              cpc R21,R30
 0C20 51F0              breq L326
 0C22           X82:
 0C22 0CC0              xjmp L321
 0C24           L323:
 0C24                   .dbline 712
 0C24           ;       {
 0C24           ;       case 250:
 0C24           ;               data = INV_FSR_250DPS << 3;
 0C24 2224              clr R2
 0C26 2C82              std y+4,R2
 0C28                   .dbline 713
 0C28           ;               break;
 0C28 0CC0              xjmp L322
 0C2A           L324:
 0C2A                   .dbline 715
 0C2A           ;       case 500:
 0C2A           ;               data = INV_FSR_500DPS << 3;
 0C2A 88E0              ldi R24,8
 0C2C 8C83              std y+4,R24
 0C2E                   .dbline 716
 0C2E           ;               break;
 0C2E 09C0              xjmp L322
 0C30           L325:
 0C30                   .dbline 718
 0C30           ;       case 1000:
 0C30           ;               data = INV_FSR_1000DPS << 3;
 0C30 80E1              ldi R24,16
 0C32 8C83              std y+4,R24
 0C34                   .dbline 719
 0C34           ;               break;
 0C34 06C0              xjmp L322
 0C36           L326:
 0C36                   .dbline 721
 0C36           ;       case 2000:
 0C36           ;               data = INV_FSR_2000DPS << 3;
 0C36 88E1              ldi R24,24
 0C38 8C83              std y+4,R24
 0C3A                   .dbline 722
 0C3A           ;               break;
 0C3A 03C0              xjmp L322
 0C3C           L321:
 0C3C                   .dbline 724
 0C3C           ;       default:
 0C3C           ;               return -1;
 0C3C 0FEF              ldi R16,-1
 0C3E 1FEF              ldi R17,-1
 0C40 2AC0              xjmp L316
 0C42           L322:
 0C42                   .dbline 727
 0C42           ;       }
 0C42           ; 
 0C42           ;       if (st.chip_cfg.gyro_fsr == (data >> 3))
 0C42 2C80              ldd R2,y+4
 0C44 2694              lsr R2
 0C46 2694              lsr R2
 0C48 2694              lsr R2
 0C4A 30905000          lds R3,_st+4
 0C4E 3214              cp R3,R2
 0C50 19F4              brne L330
 0C52           X83:
 0C52                   .dbline 728
 0C52           ;               return 0;
 0C52 0027              clr R16
 0C54 1127              clr R17
 0C56 1FC0              xjmp L316
 0C58           L330:
 0C58                   .dbline 729
 0C58           ;       if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 0C58 CE01              movw R24,R28
 0C5A 0496              adiw R24,4
 0C5C 9B83              std y+3,R25
 0C5E 8A83              std y+2,R24
 0C60 81E0              ldi R24,1
 0C62 8883              std y+0,R24
 0C64 E0914C00          lds R30,_st
 0C68 F0914D00          lds R31,_st+1
 0C6C 2681              ldd R18,z+6
 0C6E E0914E00          lds R30,_st+2
 0C72 F0914F00          lds R31,_st+2+1
 0C76 0081              ldd R16,z+0
 0C78 0E940000          xcall _i2cwrite
 0C7C 0023              tst R16
 0C7E 19F0              breq L333
 0C80           X84:
 0C80                   .dbline 730
 0C80           ;               return -1;
 0C80 0FEF              ldi R16,-1
 0C82 1FEF              ldi R17,-1
 0C84 08C0              xjmp L316
 0C86           L333:
 0C86                   .dbline 731
 0C86           ;       st.chip_cfg.gyro_fsr = data >> 3;
 0C86 2C80              ldd R2,y+4
 0C88 2694              lsr R2
 0C8A 2694              lsr R2
 0C8C 2694              lsr R2
 0C8E 20925000          sts _st+4,R2
 0C92                   .dbline 732
 0C92           ;       return 0;
 0C92 0027              clr R16
 0C94 1127              clr R17
 0C96                   .dbline -2
 0C96           L316:
 0C96                   .dbline 0 ; func end
 0C96 2596              adiw R28,5
 0C98 5991              ld R21,y+
 0C9A 4991              ld R20,y+
 0C9C 0895              ret
 0C9E                   .dbsym l data 4 c
 0C9E                   .dbsym r fsr 20 s
 0C9E                   .dbend
 0C9E                   .dbfunc e mpu_get_accel_fsr _mpu_get_accel_fsr fI
 0C9E           ;            fsr -> R16,R17
                        .even
 0C9E           _mpu_get_accel_fsr::
 0C9E 4A93              st -y,R20
 0CA0 5A93              st -y,R21
 0CA2                   .dbline -1
 0CA2                   .dbline 736
 0CA2           ; }
 0CA2           ; 
 0CA2           ; int mpu_get_accel_fsr(unsigned char *fsr)
 0CA2           ; {
 0CA2                   .dbline 737
 0CA2           ;       switch (st.chip_cfg.accel_fsr) 
 0CA2 40915100          lds R20,_st+4+1
 0CA6 5527              clr R21
 0CA8 4030              cpi R20,0
 0CAA 4507              cpc R20,R21
 0CAC 69F0              breq L343
 0CAE           X85:
 0CAE 4130              cpi R20,1
 0CB0 E0E0              ldi R30,0
 0CB2 5E07              cpc R21,R30
 0CB4 69F0              breq L344
 0CB6           X86:
 0CB6 4230              cpi R20,2
 0CB8 E0E0              ldi R30,0
 0CBA 5E07              cpc R21,R30
 0CBC 69F0              breq L345
 0CBE           X87:
 0CBE 4330              cpi R20,3
 0CC0 E0E0              ldi R30,0
 0CC2 5E07              cpc R21,R30
 0CC4 69F0              breq L346
 0CC6           X88:
 0CC6 10C0              xjmp L338
 0CC8           L343:
 0CC8                   .dbline 740
 0CC8           ;       {
 0CC8           ;       case INV_FSR_2G:
 0CC8           ;               fsr[0] = 2;
 0CC8 82E0              ldi R24,2
 0CCA F801              movw R30,R16
 0CCC 8083              std z+0,R24
 0CCE                   .dbline 741
 0CCE           ;               break;
 0CCE 0FC0              xjmp L339
 0CD0           L344:
 0CD0                   .dbline 743
 0CD0           ;       case INV_FSR_4G:
 0CD0           ;               fsr[0] = 4;
 0CD0 84E0              ldi R24,4
 0CD2 F801              movw R30,R16
 0CD4 8083              std z+0,R24
 0CD6                   .dbline 744
 0CD6           ;               break;
 0CD6 0BC0              xjmp L339
 0CD8           L345:
 0CD8                   .dbline 746
 0CD8           ;       case INV_FSR_8G:
 0CD8           ;               fsr[0] = 8;
 0CD8 88E0              ldi R24,8
 0CDA F801              movw R30,R16
 0CDC 8083              std z+0,R24
 0CDE                   .dbline 747
 0CDE           ;               break;
 0CDE 07C0              xjmp L339
 0CE0           L346:
 0CE0                   .dbline 749
 0CE0           ;       case INV_FSR_16G:
 0CE0           ;               fsr[0] = 16;
 0CE0 80E1              ldi R24,16
 0CE2 F801              movw R30,R16
 0CE4 8083              std z+0,R24
 0CE6                   .dbline 750
 0CE6           ;               break;
 0CE6 03C0              xjmp L339
 0CE8           L338:
 0CE8                   .dbline 752
 0CE8           ;       default:
 0CE8           ;               return -1;
 0CE8 0FEF              ldi R16,-1
 0CEA 1FEF              ldi R17,-1
 0CEC 0AC0              xjmp L337
 0CEE           L339:
 0CEE                   .dbline 754
 0CEE           ;       }
 0CEE           ;       if (st.chip_cfg.accel_half)
 0CEE 20905A00          lds R2,_st+4+10
 0CF2 2220              tst R2
 0CF4 21F0              breq L347
 0CF6           X89:
 0CF6                   .dbline 755
 0CF6           ;               fsr[0] <<= 1;
 0CF6 F801              movw R30,R16
 0CF8 2080              ldd R2,z+0
 0CFA 220C              lsl R2
 0CFC 2082              std z+0,R2
 0CFE           L347:
 0CFE                   .dbline 756
 0CFE           ;       return 0;
 0CFE 0027              clr R16
 0D00 1127              clr R17
 0D02                   .dbline -2
 0D02           L337:
 0D02                   .dbline 0 ; func end
 0D02 5991              ld R21,y+
 0D04 4991              ld R20,y+
 0D06 0895              ret
 0D08                   .dbsym r fsr 16 pc
 0D08                   .dbend
 0D08                   .dbfunc e mpu_set_accel_fsr _mpu_set_accel_fsr fI
 0D08           ;           data -> y+4
 0D08           ;            fsr -> R10
                        .even
 0D08           _mpu_set_accel_fsr::
 0D08 0E940000          xcall push_xgset300C
 0D0C A02E              mov R10,R16
 0D0E 2597              sbiw R28,5
 0D10                   .dbline -1
 0D10                   .dbline 760
 0D10           ; }
 0D10           ; 
 0D10           ; int mpu_set_accel_fsr(unsigned char fsr)
 0D10           ; {
 0D10                   .dbline 763
 0D10           ;       unsigned char data;
 0D10           ; 
 0D10           ;       if (!(st.chip_cfg.sensors))
 0D10 20905200          lds R2,_st+4+2
 0D14 2220              tst R2
 0D16 19F4              brne L352
 0D18           X90:
 0D18                   .dbline 764
 0D18           ;               return -1;
 0D18 0FEF              ldi R16,-1
 0D1A 1FEF              ldi R17,-1
 0D1C 52C0              xjmp L351
 0D1E           L352:
 0D1E                   .dbline 766
 0D1E           ; 
 0D1E           ;       switch (fsr) 
 0D1E 4A2D              mov R20,R10
 0D20 5527              clr R21
 0D22 4830              cpi R20,8
 0D24 E0E0              ldi R30,0
 0D26 5E07              cpc R21,R30
 0D28 C9F0              breq L361
 0D2A           X91:
 0D2A 88E0              ldi R24,8
 0D2C 90E0              ldi R25,0
 0D2E 8417              cp R24,R20
 0D30 9507              cpc R25,R21
 0D32 4CF0              brlt L364
 0D34           X92:
 0D34           L363:
 0D34 4230              cpi R20,2
 0D36 E0E0              ldi R30,0
 0D38 5E07              cpc R21,R30
 0D3A 51F0              breq L359
 0D3C           X93:
 0D3C 4430              cpi R20,4
 0D3E E0E0              ldi R30,0
 0D40 5E07              cpc R21,R30
 0D42 49F0              breq L360
 0D44           X94:
 0D44 11C0              xjmp L356
 0D46           L364:
 0D46 4031              cpi R20,16
 0D48 E0E0              ldi R30,0
 0D4A 5E07              cpc R21,R30
 0D4C 51F0              breq L362
 0D4E           X95:
 0D4E 0CC0              xjmp L356
 0D50           L359:
 0D50                   .dbline 769
 0D50           ;       {
 0D50           ;       case 2:
 0D50           ;               data = INV_FSR_2G << 3;
 0D50 2224              clr R2
 0D52 2C82              std y+4,R2
 0D54                   .dbline 770
 0D54           ;               break;
 0D54 0CC0              xjmp L357
 0D56           L360:
 0D56                   .dbline 772
 0D56           ;       case 4:
 0D56           ;               data = INV_FSR_4G << 3;
 0D56 88E0              ldi R24,8
 0D58 8C83              std y+4,R24
 0D5A                   .dbline 773
 0D5A           ;               break;
 0D5A 09C0              xjmp L357
 0D5C           L361:
 0D5C                   .dbline 775
 0D5C           ;       case 8:
 0D5C           ;               data = INV_FSR_8G << 3;
 0D5C 80E1              ldi R24,16
 0D5E 8C83              std y+4,R24
 0D60                   .dbline 776
 0D60           ;               break;
 0D60 06C0              xjmp L357
 0D62           L362:
 0D62                   .dbline 778
 0D62           ;       case 16:
 0D62           ;               data = INV_FSR_16G << 3;
 0D62 88E1              ldi R24,24
 0D64 8C83              std y+4,R24
 0D66                   .dbline 779
 0D66           ;               break;
 0D66 03C0              xjmp L357
 0D68           L356:
 0D68                   .dbline 781
 0D68           ;       default:
 0D68           ;               return -1;
 0D68 0FEF              ldi R16,-1
 0D6A 1FEF              ldi R17,-1
 0D6C 2AC0              xjmp L351
 0D6E           L357:
 0D6E                   .dbline 784
 0D6E           ;       }
 0D6E           ; 
 0D6E           ;       if (st.chip_cfg.accel_fsr == (data >> 3))
 0D6E 2C80              ldd R2,y+4
 0D70 2694              lsr R2
 0D72 2694              lsr R2
 0D74 2694              lsr R2
 0D76 30905100          lds R3,_st+4+1
 0D7A 3214              cp R3,R2
 0D7C 19F4              brne L365
 0D7E           X96:
 0D7E                   .dbline 785
 0D7E           ;               return 0;
 0D7E 0027              clr R16
 0D80 1127              clr R17
 0D82 1FC0              xjmp L351
 0D84           L365:
 0D84                   .dbline 786
 0D84           ;       if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 0D84 CE01              movw R24,R28
 0D86 0496              adiw R24,4
 0D88 9B83              std y+3,R25
 0D8A 8A83              std y+2,R24
 0D8C 81E0              ldi R24,1
 0D8E 8883              std y+0,R24
 0D90 E0914C00          lds R30,_st
 0D94 F0914D00          lds R31,_st+1
 0D98 2781              ldd R18,z+7
 0D9A E0914E00          lds R30,_st+2
 0D9E F0914F00          lds R31,_st+2+1
 0DA2 0081              ldd R16,z+0
 0DA4 0E940000          xcall _i2cwrite
 0DA8 0023              tst R16
 0DAA 19F0              breq L369
 0DAC           X97:
 0DAC                   .dbline 787
 0DAC           ;               return -1;
 0DAC 0FEF              ldi R16,-1
 0DAE 1FEF              ldi R17,-1
 0DB0 08C0              xjmp L351
 0DB2           L369:
 0DB2                   .dbline 788
 0DB2           ;       st.chip_cfg.accel_fsr = data >> 3;
 0DB2 2C80              ldd R2,y+4
 0DB4 2694              lsr R2
 0DB6 2694              lsr R2
 0DB8 2694              lsr R2
 0DBA 20925100          sts _st+4+1,R2
 0DBE                   .dbline 789
 0DBE           ;       return 0;
 0DBE 0027              clr R16
 0DC0 1127              clr R17
 0DC2                   .dbline -2
 0DC2           L351:
 0DC2                   .dbline 0 ; func end
 0DC2 2596              adiw R28,5
 0DC4 0C940000          xjmp pop_xgset300C
 0DC8                   .dbsym l data 4 c
 0DC8                   .dbsym r fsr 10 c
 0DC8                   .dbend
 0DC8                   .dbfunc e mpu_get_lpf _mpu_get_lpf fI
 0DC8           ;            lpf -> R16,R17
                        .even
 0DC8           _mpu_get_lpf::
 0DC8 4A93              st -y,R20
 0DCA 5A93              st -y,R21
 0DCC                   .dbline -1
 0DCC                   .dbline 793
 0DCC           ; }
 0DCC           ; 
 0DCC           ; int mpu_get_lpf(unsigned short *lpf)
 0DCC           ; {
 0DCC                   .dbline 794
 0DCC           ;       switch (st.chip_cfg.lpf) 
 0DCC 40915300          lds R20,_st+4+3
 0DD0 5527              clr R21
 0DD2 4030              cpi R20,0
 0DD4 4507              cpc R20,R21
 0DD6 09F4              brne X106
 0DD8 44C0              xjmp L386
 0DDA           X106:
 0DDA           X98:
 0DDA 4130              cpi R20,1
 0DDC E0E0              ldi R30,0
 0DDE 5E07              cpc R21,R30
 0DE0 E1F0              breq L380
 0DE2           X99:
 0DE2 4230              cpi R20,2
 0DE4 E0E0              ldi R30,0
 0DE6 5E07              cpc R21,R30
 0DE8 F1F0              breq L381
 0DEA           X100:
 0DEA 4330              cpi R20,3
 0DEC E0E0              ldi R30,0
 0DEE 5E07              cpc R21,R30
 0DF0 01F1              breq L382
 0DF2           X101:
 0DF2 4430              cpi R20,4
 0DF4 E0E0              ldi R30,0
 0DF6 5E07              cpc R21,R30
 0DF8 11F1              breq L383
 0DFA           X102:
 0DFA 4530              cpi R20,5
 0DFC E0E0              ldi R30,0
 0DFE 5E07              cpc R21,R30
 0E00 09F4              brne X107
 0E02 23C0              xjmp L384
 0E04           X107:
 0E04           X103:
 0E04 4630              cpi R20,6
 0E06 E0E0              ldi R30,0
 0E08 5E07              cpc R21,R30
 0E0A 09F4              brne X108
 0E0C 24C0              xjmp L385
 0E0E           X108:
 0E0E           X104:
 0E0E 4730              cpi R20,7
 0E10 E0E0              ldi R30,0
 0E12 5E07              cpc R21,R30
 0E14 09F4              brne X109
 0E16 25C0              xjmp L386
 0E18           X109:
 0E18           X105:
 0E18 24C0              xjmp L375
 0E1A           L380:
 0E1A                   .dbline 797
 0E1A           ;       {
 0E1A           ;       case INV_FILTER_188HZ:
 0E1A           ;               lpf[0] = 188;
 0E1A 8CEB              ldi R24,188
 0E1C 90E0              ldi R25,0
 0E1E F801              movw R30,R16
 0E20 9183              std z+1,R25
 0E22 8083              std z+0,R24
 0E24                   .dbline 798
 0E24           ;               break;
 0E24 23C0              xjmp L376
 0E26           L381:
 0E26                   .dbline 800
 0E26           ;       case INV_FILTER_98HZ:
 0E26           ;               lpf[0] = 98;
 0E26 82E6              ldi R24,98
 0E28 90E0              ldi R25,0
 0E2A F801              movw R30,R16
 0E2C 9183              std z+1,R25
 0E2E 8083              std z+0,R24
 0E30                   .dbline 801
 0E30           ;               break;
 0E30 1DC0              xjmp L376
 0E32           L382:
 0E32                   .dbline 803
 0E32           ;       case INV_FILTER_42HZ:
 0E32           ;               lpf[0] = 42;
 0E32 8AE2              ldi R24,42
 0E34 90E0              ldi R25,0
 0E36 F801              movw R30,R16
 0E38 9183              std z+1,R25
 0E3A 8083              std z+0,R24
 0E3C                   .dbline 804
 0E3C           ;               break;
 0E3C 17C0              xjmp L376
 0E3E           L383:
 0E3E                   .dbline 806
 0E3E           ;       case INV_FILTER_20HZ:
 0E3E           ;               lpf[0] = 20;
 0E3E 84E1              ldi R24,20
 0E40 90E0              ldi R25,0
 0E42 F801              movw R30,R16
 0E44 9183              std z+1,R25
 0E46 8083              std z+0,R24
 0E48                   .dbline 807
 0E48           ;               break;
 0E48 11C0              xjmp L376
 0E4A           L384:
 0E4A                   .dbline 809
 0E4A           ;       case INV_FILTER_10HZ:
 0E4A           ;               lpf[0] = 10;
 0E4A 8AE0              ldi R24,10
 0E4C 90E0              ldi R25,0
 0E4E F801              movw R30,R16
 0E50 9183              std z+1,R25
 0E52 8083              std z+0,R24
 0E54                   .dbline 810
 0E54           ;               break;
 0E54 0BC0              xjmp L376
 0E56           L385:
 0E56                   .dbline 812
 0E56           ;       case INV_FILTER_5HZ:
 0E56           ;               lpf[0] = 5;
 0E56 85E0              ldi R24,5
 0E58 90E0              ldi R25,0
 0E5A F801              movw R30,R16
 0E5C 9183              std z+1,R25
 0E5E 8083              std z+0,R24
 0E60                   .dbline 813
 0E60           ;               break;
 0E60 05C0              xjmp L376
 0E62           L386:
 0E62           L375:
 0E62                   .dbline 817
 0E62           ;       case INV_FILTER_256HZ_NOLPF2:
 0E62           ;       case INV_FILTER_2100HZ_NOLPF:
 0E62           ;       default:
 0E62           ;               lpf[0] = 0;
 0E62 2224              clr R2
 0E64 3324              clr R3
 0E66 F801              movw R30,R16
 0E68 3182              std z+1,R3
 0E6A 2082              std z+0,R2
 0E6C                   .dbline 818
 0E6C           ;               break;
 0E6C           L376:
 0E6C                   .dbline 820
 0E6C           ;       }
 0E6C           ;       return 0;
 0E6C 0027              clr R16
 0E6E 1127              clr R17
 0E70                   .dbline -2
 0E70           L374:
 0E70                   .dbline 0 ; func end
 0E70 5991              ld R21,y+
 0E72 4991              ld R20,y+
 0E74 0895              ret
 0E76                   .dbsym r lpf 16 ps
 0E76                   .dbend
 0E76                   .dbfunc e mpu_set_lpf _mpu_set_lpf fI
 0E76           ;           data -> y+4
 0E76           ;            lpf -> R20,R21
                        .even
 0E76           _mpu_set_lpf::
 0E76 4A93              st -y,R20
 0E78 5A93              st -y,R21
 0E7A A801              movw R20,R16
 0E7C 2597              sbiw R28,5
 0E7E                   .dbline -1
 0E7E                   .dbline 824
 0E7E           ; }
 0E7E           ; 
 0E7E           ; int mpu_set_lpf(unsigned short lpf)
 0E7E           ; {
 0E7E                   .dbline 827
 0E7E           ;       unsigned char data;
 0E7E           ; 
 0E7E           ;       if (!(st.chip_cfg.sensors))
 0E7E 20905200          lds R2,_st+4+2
 0E82 2220              tst R2
 0E84 19F4              brne L388
 0E86           X110:
 0E86                   .dbline 828
 0E86           ;               return -1;
 0E86 0FEF              ldi R16,-1
 0E88 1FEF              ldi R17,-1
 0E8A 49C0              xjmp L387
 0E8C           L388:
 0E8C                   .dbline 830
 0E8C           ; 
 0E8C           ;       if (lpf >= 188)
 0E8C 4C3B              cpi R20,188
 0E8E E0E0              ldi R30,0
 0E90 5E07              cpc R21,R30
 0E92 18F0              brlo L392
 0E94           X111:
 0E94                   .dbline 831
 0E94           ;               data = INV_FILTER_188HZ;
 0E94 81E0              ldi R24,1
 0E96 8C83              std y+4,R24
 0E98 1EC0              xjmp L393
 0E9A           L392:
 0E9A                   .dbline 832
 0E9A           ;       else if (lpf >= 98)
 0E9A 4236              cpi R20,98
 0E9C E0E0              ldi R30,0
 0E9E 5E07              cpc R21,R30
 0EA0 18F0              brlo L394
 0EA2           X112:
 0EA2                   .dbline 833
 0EA2           ;               data = INV_FILTER_98HZ;
 0EA2 82E0              ldi R24,2
 0EA4 8C83              std y+4,R24
 0EA6 17C0              xjmp L395
 0EA8           L394:
 0EA8                   .dbline 834
 0EA8           ;       else if (lpf >= 42)
 0EA8 4A32              cpi R20,42
 0EAA E0E0              ldi R30,0
 0EAC 5E07              cpc R21,R30
 0EAE 18F0              brlo L396
 0EB0           X113:
 0EB0                   .dbline 835
 0EB0           ;               data = INV_FILTER_42HZ;
 0EB0 83E0              ldi R24,3
 0EB2 8C83              std y+4,R24
 0EB4 10C0              xjmp L397
 0EB6           L396:
 0EB6                   .dbline 836
 0EB6           ;       else if (lpf >= 20)
 0EB6 4431              cpi R20,20
 0EB8 E0E0              ldi R30,0
 0EBA 5E07              cpc R21,R30
 0EBC 18F0              brlo L398
 0EBE           X114:
 0EBE                   .dbline 837
 0EBE           ;               data = INV_FILTER_20HZ;
 0EBE 84E0              ldi R24,4
 0EC0 8C83              std y+4,R24
 0EC2 09C0              xjmp L399
 0EC4           L398:
 0EC4                   .dbline 838
 0EC4           ;       else if (lpf >= 10)
 0EC4 4A30              cpi R20,10
 0EC6 E0E0              ldi R30,0
 0EC8 5E07              cpc R21,R30
 0ECA 18F0              brlo L400
 0ECC           X115:
 0ECC                   .dbline 839
 0ECC           ;               data = INV_FILTER_10HZ;
 0ECC 85E0              ldi R24,5
 0ECE 8C83              std y+4,R24
 0ED0 02C0              xjmp L401
 0ED2           L400:
 0ED2                   .dbline 841
 0ED2           ;       else
 0ED2           ;               data = INV_FILTER_5HZ;
 0ED2 86E0              ldi R24,6
 0ED4 8C83              std y+4,R24
 0ED6           L401:
 0ED6           L399:
 0ED6           L397:
 0ED6           L395:
 0ED6           L393:
 0ED6                   .dbline 843
 0ED6           ; 
 0ED6           ;       if (st.chip_cfg.lpf == data)
 0ED6 2C80              ldd R2,y+4
 0ED8 30905300          lds R3,_st+4+3
 0EDC 3214              cp R3,R2
 0EDE 19F4              brne L402
 0EE0           X116:
 0EE0                   .dbline 844
 0EE0           ;               return 0;
 0EE0 0027              clr R16
 0EE2 1127              clr R17
 0EE4 1CC0              xjmp L387
 0EE6           L402:
 0EE6                   .dbline 845
 0EE6           ;       if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 0EE6 CE01              movw R24,R28
 0EE8 0496              adiw R24,4
 0EEA 9B83              std y+3,R25
 0EEC 8A83              std y+2,R24
 0EEE 81E0              ldi R24,1
 0EF0 8883              std y+0,R24
 0EF2 E0914C00          lds R30,_st
 0EF6 F0914D00          lds R31,_st+1
 0EFA 2281              ldd R18,z+2
 0EFC E0914E00          lds R30,_st+2
 0F00 F0914F00          lds R31,_st+2+1
 0F04 0081              ldd R16,z+0
 0F06 0E940000          xcall _i2cwrite
 0F0A 0023              tst R16
 0F0C 19F0              breq L406
 0F0E           X117:
 0F0E                   .dbline 846
 0F0E           ;               return -1;
 0F0E 0FEF              ldi R16,-1
 0F10 1FEF              ldi R17,-1
 0F12 05C0              xjmp L387
 0F14           L406:
 0F14                   .dbline 847
 0F14           ;       st.chip_cfg.lpf = data;
 0F14 2C80              ldd R2,y+4
 0F16 20925300          sts _st+4+3,R2
 0F1A                   .dbline 848
 0F1A           ;       return 0;
 0F1A 0027              clr R16
 0F1C 1127              clr R17
 0F1E                   .dbline -2
 0F1E           L387:
 0F1E                   .dbline 0 ; func end
 0F1E 2596              adiw R28,5
 0F20 5991              ld R21,y+
 0F22 4991              ld R20,y+
 0F24 0895              ret
 0F26                   .dbsym l data 4 c
 0F26                   .dbsym r lpf 20 s
 0F26                   .dbend
 0F26                   .dbfunc e mpu_get_sample_rate _mpu_get_sample_rate fI
 0F26           ;           rate -> R16,R17
                        .even
 0F26           _mpu_get_sample_rate::
 0F26                   .dbline -1
 0F26                   .dbline 852
 0F26           ; }
 0F26           ; 
 0F26           ; int mpu_get_sample_rate(unsigned short *rate)
 0F26           ; {
 0F26                   .dbline 853
 0F26           ;       if (st.chip_cfg.dmp_on)
 0F26 20906900          lds R2,_st+4+25
 0F2A 2220              tst R2
 0F2C 19F0              breq L412
 0F2E           X118:
 0F2E                   .dbline 854
 0F2E           ;               return -1;
 0F2E 0FEF              ldi R16,-1
 0F30 1FEF              ldi R17,-1
 0F32 09C0              xjmp L411
 0F34           L412:
 0F34                   .dbline 856
 0F34           ;       else
 0F34           ;               rate[0] = st.chip_cfg.sample_rate;
 0F34 20905500          lds R2,_st+4+5
 0F38 30905600          lds R3,_st+4+5+1
 0F3C F801              movw R30,R16
 0F3E 3182              std z+1,R3
 0F40 2082              std z+0,R2
 0F42                   .dbline 857
 0F42           ;       return 0;
 0F42 0027              clr R16
 0F44 1127              clr R17
 0F46                   .dbline -2
 0F46           L411:
 0F46                   .dbline 0 ; func end
 0F46 0895              ret
 0F48                   .dbsym r rate 16 ps
 0F48                   .dbend
 0F48                   .dbfunc e mpu_set_sample_rate _mpu_set_sample_rate fI
 0F48           ;           data -> y+4
 0F48           ;           rate -> R20,R21
                        .even
 0F48           _mpu_set_sample_rate::
 0F48 4A93              st -y,R20
 0F4A 5A93              st -y,R21
 0F4C A801              movw R20,R16
 0F4E 2597              sbiw R28,5
 0F50                   .dbline -1
 0F50                   .dbline 861
 0F50           ; }
 0F50           ; 
 0F50           ; int mpu_set_sample_rate(unsigned short rate)
 0F50           ; {
 0F50                   .dbline 864
 0F50           ;       unsigned char data;
 0F50           ; 
 0F50           ;       if (!(st.chip_cfg.sensors))
 0F50 20905200          lds R2,_st+4+2
 0F54 2220              tst R2
 0F56 19F4              brne L419
 0F58           X119:
 0F58                   .dbline 865
 0F58           ;               return -1;
 0F58 0FEF              ldi R16,-1
 0F5A 1FEF              ldi R17,-1
 0F5C 58C0              xjmp L418
 0F5E           L419:
 0F5E                   .dbline 867
 0F5E           ; 
 0F5E           ;       if (st.chip_cfg.dmp_on)
 0F5E 20906900          lds R2,_st+4+25
 0F62 2220              tst R2
 0F64 19F0              breq L423
 0F66           X120:
 0F66                   .dbline 868
 0F66           ;               return -1;
 0F66 0FEF              ldi R16,-1
 0F68 1FEF              ldi R17,-1
 0F6A 51C0              xjmp L418
 0F6C           L423:
 0F6C                   .dbline 870
 0F6C           ;       else 
 0F6C           ;       {
 0F6C                   .dbline 871
 0F6C           ;               if (st.chip_cfg.lp_accel_mode) 
 0F6C 20905B00          lds R2,_st+4+11
 0F70 2220              tst R2
 0F72 79F0              breq L427
 0F74           X121:
 0F74                   .dbline 872
 0F74           ;               {
 0F74                   .dbline 873
 0F74           ;                       if (rate && (rate <= 40)) 
 0F74 4030              cpi R20,0
 0F76 4507              cpc R20,R21
 0F78 51F0              breq L431
 0F7A           X122:
 0F7A 88E2              ldi R24,40
 0F7C 90E0              ldi R25,0
 0F7E 8417              cp R24,R20
 0F80 9507              cpc R25,R21
 0F82 28F0              brlo L431
 0F84           X123:
 0F84                   .dbline 874
 0F84           ;                       {
 0F84                   .dbline 875
 0F84           ;                               mpu_lp_accel_mode(rate);
 0F84 042F              mov R16,R20
 0F86 F2D9              xcall _mpu_lp_accel_mode
 0F88                   .dbline 876
 0F88           ;                               return 0;
 0F88 0027              clr R16
 0F8A 1127              clr R17
 0F8C 40C0              xjmp L418
 0F8E           L431:
 0F8E                   .dbline 879
 0F8E           ;                       }
 0F8E           ; 
 0F8E           ;                       mpu_lp_accel_mode(0);
 0F8E 0027              clr R16
 0F90 EDD9              xcall _mpu_lp_accel_mode
 0F92                   .dbline 880
 0F92           ;               }
 0F92           L427:
 0F92                   .dbline 881
 0F92           ;               if (rate < 4)
 0F92 4430              cpi R20,4
 0F94 E0E0              ldi R30,0
 0F96 5E07              cpc R21,R30
 0F98 18F4              brsh L433
 0F9A           X124:
 0F9A                   .dbline 882
 0F9A           ;                       rate = 4;
 0F9A 44E0              ldi R20,4
 0F9C 50E0              ldi R21,0
 0F9E 07C0              xjmp L434
 0FA0           L433:
 0FA0                   .dbline 883
 0FA0           ;               else if (rate > 1000)
 0FA0 88EE              ldi R24,1000
 0FA2 93E0              ldi R25,3
 0FA4 8417              cp R24,R20
 0FA6 9507              cpc R25,R21
 0FA8 10F4              brsh L435
 0FAA           X125:
 0FAA                   .dbline 884
 0FAA           ;                       rate = 1000;
 0FAA 48EE              ldi R20,1000
 0FAC 53E0              ldi R21,3
 0FAE           L435:
 0FAE           L434:
 0FAE                   .dbline 886
 0FAE           ; 
 0FAE           ;               data = 1000 / rate - 1;
 0FAE 08EE              ldi R16,1000
 0FB0 13E0              ldi R17,3
 0FB2 9A01              movw R18,R20
 0FB4 0E940000          xcall div16u
 0FB8 C801              movw R24,R16
 0FBA 0197              sbiw R24,1
 0FBC 8C83              std y+4,R24
 0FBE                   .dbline 887
 0FBE           ;               if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 0FBE CE01              movw R24,R28
 0FC0 0496              adiw R24,4
 0FC2 9B83              std y+3,R25
 0FC4 8A83              std y+2,R24
 0FC6 81E0              ldi R24,1
 0FC8 8883              std y+0,R24
 0FCA E0914C00          lds R30,_st
 0FCE F0914D00          lds R31,_st+1
 0FD2 2181              ldd R18,z+1
 0FD4 E0914E00          lds R30,_st+2
 0FD8 F0914F00          lds R31,_st+2+1
 0FDC 0081              ldd R16,z+0
 0FDE 0E940000          xcall _i2cwrite
 0FE2 0023              tst R16
 0FE4 19F0              breq L437
 0FE6           X126:
 0FE6                   .dbline 888
 0FE6           ;                       return -1;
 0FE6 0FEF              ldi R16,-1
 0FE8 1FEF              ldi R17,-1
 0FEA 11C0              xjmp L418
 0FEC           L437:
 0FEC                   .dbline 890
 0FEC           ; 
 0FEC           ;               st.chip_cfg.sample_rate = 1000 / (1 + data);
 0FEC 2C81              ldd R18,y+4
 0FEE 3327              clr R19
 0FF0 2F5F              subi R18,255  ; offset = 1
 0FF2 3F4F              sbci R19,255
 0FF4 08EE              ldi R16,1000
 0FF6 13E0              ldi R17,3
 0FF8 0E940000          xcall div16s
 0FFC 10935600          sts _st+4+5+1,R17
 1000 00935500          sts _st+4+5,R16
 1004                   .dbline 892
 1004           ; 
 1004           ;               mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 1004 1695              lsr R17
 1006 0795              ror R16
 1008 36DF              xcall _mpu_set_lpf
 100A                   .dbline 893
 100A           ;               return 0;
 100A 0027              clr R16
 100C 1127              clr R17
 100E                   .dbline -2
 100E           L418:
 100E                   .dbline 0 ; func end
 100E 2596              adiw R28,5
 1010 5991              ld R21,y+
 1012 4991              ld R20,y+
 1014 0895              ret
 1016                   .dbsym l data 4 c
 1016                   .dbsym r rate 20 s
 1016                   .dbend
 1016                   .dbfunc e mpu_get_gyro_sens _mpu_get_gyro_sens fI
 1016           ;           sens -> R10,R11
                        .even
 1016           _mpu_get_gyro_sens::
 1016 0E940000          xcall push_xgset300C
 101A 5801              movw R10,R16
 101C                   .dbline -1
 101C                   .dbline 898
 101C           ;       }
 101C           ; }
 101C           ; 
 101C           ; int mpu_get_gyro_sens(float *sens)
 101C           ; {
 101C                   .dbline 899
 101C           ;       switch (st.chip_cfg.gyro_fsr) 
 101C 40915000          lds R20,_st+4
 1020 5527              clr R21
 1022 4030              cpi R20,0
 1024 4507              cpc R20,R21
 1026 69F0              breq L449
 1028           X127:
 1028 4130              cpi R20,1
 102A E0E0              ldi R30,0
 102C 5E07              cpc R21,R30
 102E 99F0              breq L451
 1030           X128:
 1030 4230              cpi R20,2
 1032 E0E0              ldi R30,0
 1034 5E07              cpc R21,R30
 1036 C9F0              breq L453
 1038           X129:
 1038 4330              cpi R20,3
 103A E0E0              ldi R30,0
 103C 5E07              cpc R21,R30
 103E F9F0              breq L455
 1040           X130:
 1040 28C0              xjmp L445
 1042           L449:
 1042                   .dbline 902
 1042           ;       {
 1042           ;       case INV_FSR_250DPS:
 1042           ;               sens[0] = 131.f;
 1042 00E0              ldi R16,<L450
 1044 10E0              ldi R17,>L450
 1046 0E940000          xcall elpm32
 104A F501              movw R30,R10
 104C 0083              std z+0,R16
 104E 1183              std z+1,R17
 1050 2283              std z+2,R18
 1052 3383              std z+3,R19
 1054                   .dbline 903
 1054           ;               break;
 1054 21C0              xjmp L446
 1056           L451:
 1056                   .dbline 905
 1056           ;       case INV_FSR_500DPS:
 1056           ;               sens[0] = 65.5f;
 1056 00E0              ldi R16,<L452
 1058 10E0              ldi R17,>L452
 105A 0E940000          xcall elpm32
 105E F501              movw R30,R10
 1060 0083              std z+0,R16
 1062 1183              std z+1,R17
 1064 2283              std z+2,R18
 1066 3383              std z+3,R19
 1068                   .dbline 906
 1068           ;               break;
 1068 17C0              xjmp L446
 106A           L453:
 106A                   .dbline 908
 106A           ;       case INV_FSR_1000DPS:
 106A           ;               sens[0] = 32.8f;
 106A 00E0              ldi R16,<L454
 106C 10E0              ldi R17,>L454
 106E 0E940000          xcall elpm32
 1072 F501              movw R30,R10
 1074 0083              std z+0,R16
 1076 1183              std z+1,R17
 1078 2283              std z+2,R18
 107A 3383              std z+3,R19
 107C                   .dbline 909
 107C           ;               break;
 107C 0DC0              xjmp L446
 107E           L455:
 107E                   .dbline 911
 107E           ;       case INV_FSR_2000DPS:
 107E           ;               sens[0] = 16.4f;
 107E 00E0              ldi R16,<L456
 1080 10E0              ldi R17,>L456
 1082 0E940000          xcall elpm32
 1086 F501              movw R30,R10
 1088 0083              std z+0,R16
 108A 1183              std z+1,R17
 108C 2283              std z+2,R18
 108E 3383              std z+3,R19
 1090                   .dbline 912
 1090           ;               break;
 1090 03C0              xjmp L446
 1092           L445:
 1092                   .dbline 914
 1092           ;       default:
 1092           ;               return -1;
 1092 0FEF              ldi R16,-1
 1094 1FEF              ldi R17,-1
 1096 02C0              xjmp L444
 1098           L446:
 1098                   .dbline 916
 1098           ;       }
 1098           ;       return 0;
 1098 0027              clr R16
 109A 1127              clr R17
 109C                   .dbline -2
 109C           L444:
 109C                   .dbline 0 ; func end
 109C 0C940000          xjmp pop_xgset300C
 10A0                   .dbsym r sens 10 pD
 10A0                   .dbend
 10A0                   .dbfunc e mpu_get_accel_sens _mpu_get_accel_sens fI
 10A0           ;           sens -> R16,R17
                        .even
 10A0           _mpu_get_accel_sens::
 10A0 4A93              st -y,R20
 10A2 5A93              st -y,R21
 10A4                   .dbline -1
 10A4                   .dbline 920
 10A4           ; }
 10A4           ; 
 10A4           ; int mpu_get_accel_sens(unsigned short *sens)
 10A4           ; {
 10A4                   .dbline 921
 10A4           ;       switch (st.chip_cfg.accel_fsr) 
 10A4 40915100          lds R20,_st+4+1
 10A8 5527              clr R21
 10AA 4030              cpi R20,0
 10AC 4507              cpc R20,R21
 10AE 69F0              breq L463
 10B0           X131:
 10B0 4130              cpi R20,1
 10B2 E0E0              ldi R30,0
 10B4 5E07              cpc R21,R30
 10B6 79F0              breq L464
 10B8           X132:
 10B8 4230              cpi R20,2
 10BA E0E0              ldi R30,0
 10BC 5E07              cpc R21,R30
 10BE 89F0              breq L465
 10C0           X133:
 10C0 4330              cpi R20,3
 10C2 E0E0              ldi R30,0
 10C4 5E07              cpc R21,R30
 10C6 99F0              breq L466
 10C8           X134:
 10C8 18C0              xjmp L458
 10CA           L463:
 10CA                   .dbline 924
 10CA           ;       {
 10CA           ;       case INV_FSR_2G:
 10CA           ;               sens[0] = 16384;
 10CA 80E0              ldi R24,16384
 10CC 90E4              ldi R25,64
 10CE F801              movw R30,R16
 10D0 9183              std z+1,R25
 10D2 8083              std z+0,R24
 10D4                   .dbline 925
 10D4           ;               break;
 10D4 15C0              xjmp L459
 10D6           L464:
 10D6                   .dbline 927
 10D6           ;       case INV_FSR_4G:
 10D6           ;               sens[0] = 8092;
 10D6 8CE9              ldi R24,8092
 10D8 9FE1              ldi R25,31
 10DA F801              movw R30,R16
 10DC 9183              std z+1,R25
 10DE 8083              std z+0,R24
 10E0                   .dbline 928
 10E0           ;               break;
 10E0 0FC0              xjmp L459
 10E2           L465:
 10E2                   .dbline 930
 10E2           ;       case INV_FSR_8G:
 10E2           ;               sens[0] = 4096;
 10E2 80E0              ldi R24,4096
 10E4 90E1              ldi R25,16
 10E6 F801              movw R30,R16
 10E8 9183              std z+1,R25
 10EA 8083              std z+0,R24
 10EC                   .dbline 931
 10EC           ;               break;
 10EC 09C0              xjmp L459
 10EE           L466:
 10EE                   .dbline 933
 10EE           ;       case INV_FSR_16G:
 10EE           ;               sens[0] = 2048;
 10EE 80E0              ldi R24,2048
 10F0 98E0              ldi R25,8
 10F2 F801              movw R30,R16
 10F4 9183              std z+1,R25
 10F6 8083              std z+0,R24
 10F8                   .dbline 934
 10F8           ;               break;
 10F8 03C0              xjmp L459
 10FA           L458:
 10FA                   .dbline 936
 10FA           ;       default:
 10FA           ;               return -1;
 10FA 0FEF              ldi R16,-1
 10FC 1FEF              ldi R17,-1
 10FE 0DC0              xjmp L457
 1100           L459:
 1100                   .dbline 938
 1100           ;       }
 1100           ;       if (st.chip_cfg.accel_half)
 1100 20905A00          lds R2,_st+4+10
 1104 2220              tst R2
 1106 39F0              breq L467
 1108           X135:
 1108                   .dbline 939
 1108           ;               sens[0] >>= 1;
 1108 F801              movw R30,R16
 110A 2080              ldd R2,z+0
 110C 3180              ldd R3,z+1
 110E 3694              lsr R3
 1110 2794              ror R2
 1112 3182              std z+1,R3
 1114 2082              std z+0,R2
 1116           L467:
 1116                   .dbline 940
 1116           ;       return 0;
 1116 0027              clr R16
 1118 1127              clr R17
 111A                   .dbline -2
 111A           L457:
 111A                   .dbline 0 ; func end
 111A 5991              ld R21,y+
 111C 4991              ld R20,y+
 111E 0895              ret
 1120                   .dbsym r sens 16 ps
 1120                   .dbend
 1120                   .dbfunc e mpu_get_fifo_config _mpu_get_fifo_config fI
 1120           ;        sensors -> R16,R17
                        .even
 1120           _mpu_get_fifo_config::
 1120                   .dbline -1
 1120                   .dbline 944
 1120           ; }
 1120           ; 
 1120           ; int mpu_get_fifo_config(unsigned char *sensors)
 1120           ; {
 1120                   .dbline 945
 1120           ;       sensors[0] = st.chip_cfg.fifo_enable;
 1120 20905700          lds R2,_st+4+7
 1124 F801              movw R30,R16
 1126 2082              std z+0,R2
 1128                   .dbline 946
 1128           ;       return 0;
 1128 0027              clr R16
 112A 1127              clr R17
 112C                   .dbline -2
 112C           L471:
 112C                   .dbline 0 ; func end
 112C 0895              ret
 112E                   .dbsym r sensors 16 pc
 112E                   .dbend
 112E                   .dbfunc e mpu_configure_fifo _mpu_configure_fifo fI
 112E           ;           prev -> R10
 112E           ;         result -> R20,R21
 112E           ;        sensors -> R22
                        .even
 112E           _mpu_configure_fifo::
 112E 0E940000          xcall push_xgsetF00C
 1132 602F              mov R22,R16
 1134                   .dbline -1
 1134                   .dbline 950
 1134           ; }
 1134           ; 
 1134           ; int mpu_configure_fifo(unsigned char sensors)
 1134           ; {
 1134                   .dbline 952
 1134           ;       unsigned char prev;
 1134           ;       int result = 0;
 1134 4427              clr R20
 1136 5527              clr R21
 1138                   .dbline 954
 1138           ; 
 1138           ;       sensors &= ~INV_XYZ_COMPASS;
 1138 6E7F              andi R22,254
 113A                   .dbline 956
 113A           ; 
 113A           ;       if (st.chip_cfg.dmp_on)
 113A 20906900          lds R2,_st+4+25
 113E 2220              tst R2
 1140 19F0              breq L475
 1142           X136:
 1142                   .dbline 957
 1142           ;               return 0;
 1142 0027              clr R16
 1144 1127              clr R17
 1146 2FC0              xjmp L474
 1148           L475:
 1148                   .dbline 958
 1148           ;       else {
 1148                   .dbline 959
 1148           ;               if (!(st.chip_cfg.sensors))
 1148 20905200          lds R2,_st+4+2
 114C 2220              tst R2
 114E 19F4              brne L479
 1150           X137:
 1150                   .dbline 960
 1150           ;                       return -1;
 1150 0FEF              ldi R16,-1
 1152 1FEF              ldi R17,-1
 1154 28C0              xjmp L474
 1156           L479:
 1156                   .dbline 961
 1156           ;               prev = st.chip_cfg.fifo_enable;
 1156 A0905700          lds R10,_st+4+7
 115A                   .dbline 962
 115A           ;               st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 115A 20905200          lds R2,_st+4+2
 115E 362E              mov R3,R22
 1160 3220              and R3,R2
 1162 30925700          sts _st+4+7,R3
 1166                   .dbline 963
 1166           ;               if (st.chip_cfg.fifo_enable != sensors)
 1166 3616              cp R3,R22
 1168 19F0              breq L489
 116A           X138:
 116A                   .dbline 965
 116A           ; 
 116A           ;                       result = -1;
 116A 4FEF              ldi R20,-1
 116C 5FEF              ldi R21,-1
 116E 02C0              xjmp L490
 1170           L489:
 1170                   .dbline 967
 1170           ;               else
 1170           ;                       result = 0;
 1170 4427              clr R20
 1172 5527              clr R21
 1174           L490:
 1174                   .dbline 968
 1174           ;               if (sensors || st.chip_cfg.lp_accel_mode)
 1174 6623              tst R22
 1176 21F4              brne L497
 1178           X139:
 1178 20905B00          lds R2,_st+4+11
 117C 2220              tst R2
 117E 21F0              breq L493
 1180           X140:
 1180           L497:
 1180                   .dbline 969
 1180           ;                       set_int_enable(1);
 1180 01E0              ldi R16,1
 1182 0E940000          xcall _set_int_enable
 1186 03C0              xjmp L494
 1188           L493:
 1188                   .dbline 971
 1188           ;               else
 1188           ;                       set_int_enable(0);
 1188 0027              clr R16
 118A 0E940000          xcall _set_int_enable
 118E           L494:
 118E                   .dbline 972
 118E           ;               if (sensors) 
 118E 6623              tst R22
 1190 49F0              breq L498
 1192           X141:
 1192                   .dbline 973
 1192           ;               {
 1192                   .dbline 974
 1192           ;                       if (mpu_reset_fifo()) 
 1192 9ADB              xcall _mpu_reset_fifo
 1194 0030              cpi R16,0
 1196 0107              cpc R16,R17
 1198 29F0              breq L500
 119A           X142:
 119A                   .dbline 975
 119A           ;                       {
 119A                   .dbline 976
 119A           ;                               st.chip_cfg.fifo_enable = prev;
 119A A0925700          sts _st+4+7,R10
 119E                   .dbline 977
 119E           ;                               return -1;
 119E 0FEF              ldi R16,-1
 11A0 1FEF              ldi R17,-1
 11A2 01C0              xjmp L474
 11A4           L500:
 11A4                   .dbline 979
 11A4           ;                       }
 11A4           ;               }
 11A4           L498:
 11A4                   .dbline 980
 11A4           ;       }
 11A4                   .dbline 982
 11A4           ; 
 11A4           ;       return result;
 11A4 8A01              movw R16,R20
 11A6                   .dbline -2
 11A6           L474:
 11A6                   .dbline 0 ; func end
 11A6 0C940000          xjmp pop_xgsetF00C
 11AA                   .dbsym r prev 10 c
 11AA                   .dbsym r result 20 I
 11AA                   .dbsym r sensors 22 c
 11AA                   .dbend
 11AA                   .dbfunc e mpu_get_power_state _mpu_get_power_state fI
 11AA           ;       power_on -> R16,R17
                        .even
 11AA           _mpu_get_power_state::
 11AA                   .dbline -1
 11AA                   .dbline 986
 11AA           ; }
 11AA           ; 
 11AA           ; int mpu_get_power_state(unsigned char *power_on)
 11AA           ; {
 11AA                   .dbline 987
 11AA           ;       if (st.chip_cfg.sensors)
 11AA 20905200          lds R2,_st+4+2
 11AE 2220              tst R2
 11B0 21F0              breq L505
 11B2           X143:
 11B2                   .dbline 988
 11B2           ;               power_on[0] = 1;
 11B2 81E0              ldi R24,1
 11B4 F801              movw R30,R16
 11B6 8083              std z+0,R24
 11B8 03C0              xjmp L506
 11BA           L505:
 11BA                   .dbline 990
 11BA           ;       else
 11BA           ;               power_on[0] = 0;
 11BA 2224              clr R2
 11BC F801              movw R30,R16
 11BE 2082              std z+0,R2
 11C0           L506:
 11C0                   .dbline 991
 11C0           ;       return 0;
 11C0 0027              clr R16
 11C2 1127              clr R17
 11C4                   .dbline -2
 11C4           L504:
 11C4                   .dbline 0 ; func end
 11C4 0895              ret
 11C6                   .dbsym r power_on 16 pc
 11C6                   .dbend
 11C6                   .dbfunc e mpu_set_sensors _mpu_set_sensors fI
 11C6           ;           data -> y+4
 11C6           ;        sensors -> R20
                        .even
 11C6           _mpu_set_sensors::
 11C6 4A93              st -y,R20
 11C8 402F              mov R20,R16
 11CA 2597              sbiw R28,5
 11CC                   .dbline -1
 11CC                   .dbline 995
 11CC           ; }
 11CC           ; 
 11CC           ; int mpu_set_sensors(unsigned char sensors)
 11CC           ; {
 11CC                   .dbline 998
 11CC           ;       unsigned char data;
 11CC           ; 
 11CC           ;       if (sensors & INV_XYZ_GYRO)
 11CC 842F              mov R24,R20
 11CE 8077              andi R24,112
 11D0 19F0              breq L510
 11D2           X144:
 11D2                   .dbline 999
 11D2           ;               data = INV_CLK_PLL;
 11D2 81E0              ldi R24,1
 11D4 8C83              std y+4,R24
 11D6 07C0              xjmp L511
 11D8           L510:
 11D8                   .dbline 1000
 11D8           ;       else if (sensors)
 11D8 4423              tst R20
 11DA 19F0              breq L512
 11DC           X145:
 11DC                   .dbline 1001
 11DC           ;               data = 0;
 11DC 2224              clr R2
 11DE 2C82              std y+4,R2
 11E0 02C0              xjmp L513
 11E2           L512:
 11E2                   .dbline 1003
 11E2           ;       else
 11E2           ;               data = BIT_SLEEP;
 11E2 80E4              ldi R24,64
 11E4 8C83              std y+4,R24
 11E6           L513:
 11E6           L511:
 11E6                   .dbline 1004
 11E6           ;       if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) 
 11E6 CE01              movw R24,R28
 11E8 0496              adiw R24,4
 11EA 9B83              std y+3,R25
 11EC 8A83              std y+2,R24
 11EE 81E0              ldi R24,1
 11F0 8883              std y+0,R24
 11F2 E0914C00          lds R30,_st
 11F6 F0914D00          lds R31,_st+1
 11FA 2289              ldd R18,z+18
 11FC E0914E00          lds R30,_st+2
 1200 F0914F00          lds R31,_st+2+1
 1204 0081              ldd R16,z+0
 1206 0E940000          xcall _i2cwrite
 120A 0023              tst R16
 120C 31F0              breq L514
 120E           X146:
 120E                   .dbline 1005
 120E           ;       {
 120E                   .dbline 1006
 120E           ;               st.chip_cfg.sensors = 0;
 120E 2224              clr R2
 1210 20925200          sts _st+4+2,R2
 1214                   .dbline 1007
 1214           ;               return -1;
 1214 0FEF              ldi R16,-1
 1216 1FEF              ldi R17,-1
 1218 45C0              xjmp L509
 121A           L514:
 121A                   .dbline 1009
 121A           ;       }
 121A           ;       st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 121A 8C81              ldd R24,y+4
 121C 8F7B              andi R24,191
 121E 80935400          sts _st+4+4,R24
 1222                   .dbline 1011
 1222           ; 
 1222           ;       data = 0;
 1222 2224              clr R2
 1224 2C82              std y+4,R2
 1226                   .dbline 1012
 1226           ;       if (!(sensors & INV_X_GYRO))
 1226 46FD              sbrc R20,6
 1228 03C0              rjmp L521
 122A           X147:
 122A                   .dbline 1013
 122A           ;               data |= BIT_STBY_XG;
 122A 822D              mov R24,R2
 122C 8460              ori R24,4
 122E 8C83              std y+4,R24
 1230           L521:
 1230                   .dbline 1014
 1230           ;       if (!(sensors & INV_Y_GYRO))
 1230 45FD              sbrc R20,5
 1232 03C0              rjmp L523
 1234           X148:
 1234                   .dbline 1015
 1234           ;               data |= BIT_STBY_YG;
 1234 8C81              ldd R24,y+4
 1236 8260              ori R24,2
 1238 8C83              std y+4,R24
 123A           L523:
 123A                   .dbline 1016
 123A           ;       if (!(sensors & INV_Z_GYRO))
 123A 44FD              sbrc R20,4
 123C 03C0              rjmp L525
 123E           X149:
 123E                   .dbline 1017
 123E           ;               data |= BIT_STBY_ZG;
 123E 8C81              ldd R24,y+4
 1240 8160              ori R24,1
 1242 8C83              std y+4,R24
 1244           L525:
 1244                   .dbline 1018
 1244           ;       if (!(sensors & INV_XYZ_ACCEL))
 1244 43FD              sbrc R20,3
 1246 03C0              rjmp L527
 1248           X150:
 1248                   .dbline 1019
 1248           ;               data |= BIT_STBY_XYZA;
 1248 8C81              ldd R24,y+4
 124A 8863              ori R24,56
 124C 8C83              std y+4,R24
 124E           L527:
 124E                   .dbline 1020
 124E           ;       if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) 
 124E CE01              movw R24,R28
 1250 0496              adiw R24,4
 1252 9B83              std y+3,R25
 1254 8A83              std y+2,R24
 1256 81E0              ldi R24,1
 1258 8883              std y+0,R24
 125A E0914C00          lds R30,_st
 125E F0914D00          lds R31,_st+1
 1262 2389              ldd R18,z+19
 1264 E0914E00          lds R30,_st+2
 1268 F0914F00          lds R31,_st+2+1
 126C 0081              ldd R16,z+0
 126E 0E940000          xcall _i2cwrite
 1272 0023              tst R16
 1274 31F0              breq L529
 1276           X151:
 1276                   .dbline 1021
 1276           ;       {
 1276                   .dbline 1022
 1276           ;               st.chip_cfg.sensors = 0;
 1276 2224              clr R2
 1278 20925200          sts _st+4+2,R2
 127C                   .dbline 1023
 127C           ;               return -1;
 127C 0FEF              ldi R16,-1
 127E 1FEF              ldi R17,-1
 1280 11C0              xjmp L509
 1282           L529:
 1282                   .dbline 1026
 1282           ;       }
 1282           ; 
 1282           ;       if (sensors && (sensors != INV_XYZ_ACCEL))
 1282 4423              tst R20
 1284 21F0              breq L534
 1286           X152:
 1286 4830              cpi R20,8
 1288 11F0              breq L534
 128A           X153:
 128A                   .dbline 1028
 128A           ; 
 128A           ;               mpu_set_int_latched(0);
 128A 0027              clr R16
 128C 28D2              xcall _mpu_set_int_latched
 128E           L534:
 128E                   .dbline 1030
 128E           ; 
 128E           ;       st.chip_cfg.sensors = sensors;
 128E 40935200          sts _st+4+2,R20
 1292                   .dbline 1031
 1292           ;       st.chip_cfg.lp_accel_mode = 0;
 1292 2224              clr R2
 1294 20925B00          sts _st+4+11,R2
 1298                   .dbline 1032
 1298           ;       delay_ms(50);
 1298 02E3              ldi R16,50
 129A 10E0              ldi R17,0
 129C 0E940000          xcall _delay_ms
 12A0                   .dbline 1033
 12A0           ;       return 0;
 12A0 0027              clr R16
 12A2 1127              clr R17
 12A4                   .dbline -2
 12A4           L509:
 12A4                   .dbline 0 ; func end
 12A4 2596              adiw R28,5
 12A6 4991              ld R20,y+
 12A8 0895              ret
 12AA                   .dbsym l data 4 c
 12AA                   .dbsym r sensors 20 c
 12AA                   .dbend
 12AA                   .dbfunc e mpu_get_int_status _mpu_get_int_status fI
 12AA           ;            tmp -> y+4
 12AA           ;         status -> R10,R11
                        .even
 12AA           _mpu_get_int_status::
 12AA AA92              st -y,R10
 12AC BA92              st -y,R11
 12AE 5801              movw R10,R16
 12B0 2697              sbiw R28,6
 12B2                   .dbline -1
 12B2                   .dbline 1037
 12B2           ; }
 12B2           ; 
 12B2           ; int mpu_get_int_status(short *status)
 12B2           ; {
 12B2                   .dbline 1039
 12B2           ;       unsigned char tmp[2];
 12B2           ;       if (!st.chip_cfg.sensors)
 12B2 20905200          lds R2,_st+4+2
 12B6 2220              tst R2
 12B8 19F4              brne L541
 12BA           X154:
 12BA                   .dbline 1040
 12BA           ;               return -1;
 12BA 0FEF              ldi R16,-1
 12BC 1FEF              ldi R17,-1
 12BE 1EC0              xjmp L540
 12C0           L541:
 12C0                   .dbline 1041
 12C0           ;       if (i2c_read(st.hw->addr, st.reg->dmp_int_status, 2, tmp))
 12C0 CE01              movw R24,R28
 12C2 0496              adiw R24,4
 12C4 9B83              std y+3,R25
 12C6 8A83              std y+2,R24
 12C8 82E0              ldi R24,2
 12CA 8883              std y+0,R24
 12CC E0914C00          lds R30,_st
 12D0 F0914D00          lds R31,_st+1
 12D4 2089              ldd R18,z+16
 12D6 E0914E00          lds R30,_st+2
 12DA F0914F00          lds R31,_st+2+1
 12DE 0081              ldd R16,z+0
 12E0 0E940000          xcall _i2cread
 12E4 0023              tst R16
 12E6 19F0              breq L545
 12E8           X155:
 12E8                   .dbline 1042
 12E8           ;               return -1;
 12E8 0FEF              ldi R16,-1
 12EA 1FEF              ldi R17,-1
 12EC 07C0              xjmp L540
 12EE           L545:
 12EE                   .dbline 1043
 12EE           ;       status[0] = (tmp[0] << 8) | tmp[1];
 12EE 2D80              ldd R2,y+5
 12F0 3C80              ldd R3,y+4
 12F2 F501              movw R30,R10
 12F4 3182              std z+1,R3
 12F6 2082              std z+0,R2
 12F8                   .dbline 1044
 12F8           ;       return 0;
 12F8 0027              clr R16
 12FA 1127              clr R17
 12FC                   .dbline -2
 12FC           L540:
 12FC                   .dbline 0 ; func end
 12FC 2696              adiw R28,6
 12FE B990              ld R11,y+
 1300 A990              ld R10,y+
 1302 0895              ret
 1304                   .dbsym l tmp 4 A[2:2]c
 1304                   .dbsym r status 10 pS
 1304                   .dbend
 1304                   .dbfunc e mpu_read_fifo _mpu_read_fifo fI
 1304           ;     fifo_count -> R14,R15
 1304           ;    packet_size -> R12
 1304           ;           data -> y+4
 1304           ;          index -> R20,R21
 1304           ;           more -> R22,R23
 1304           ;        sensors -> y+32
 1304           ;      timestamp -> R10,R11
 1304           ;          accel -> y+28
 1304           ;           gyro -> y+26
                        .even
 1304           _mpu_read_fifo::
 1304 0E940000          xcall push_arg4
 1308 0E940000          xcall push_xgsetF0FC
 130C 6097              sbiw R28,16
 130E AE8C              ldd R10,y+30
 1310 BF8C              ldd R11,y+31
 1312 6AA1              ldd R22,y+34
 1314 7BA1              ldd R23,y+35
 1316                   .dbline -1
 1316                   .dbline 1049
 1316           ; }
 1316           ; 
 1316           ; int mpu_read_fifo(short *gyro, short *accel, unsigned long *timestamp,
 1316           ;               unsigned char *sensors, unsigned char *more)
 1316           ; {
 1316                   .dbline 1051
 1316           ;       unsigned char data[MAX_PACKET_LENGTH];
 1316           ;       unsigned char packet_size = 0;
 1316 CC24              clr R12
 1318                   .dbline 1052
 1318           ;       unsigned short fifo_count, index = 0;
 1318 4427              clr R20
 131A 5527              clr R21
 131C                   .dbline 1054
 131C           ; 
 131C           ;       if (st.chip_cfg.dmp_on)
 131C 20906900          lds R2,_st+4+25
 1320 2220              tst R2
 1322 19F0              breq L550
 1324           X156:
 1324                   .dbline 1055
 1324           ;               return -1;
 1324 0FEF              ldi R16,-1
 1326 1FEF              ldi R17,-1
 1328 4CC1              xjmp L549
 132A           L550:
 132A                   .dbline 1057
 132A           ; 
 132A           ;       sensors[0] = 0;
 132A 2224              clr R2
 132C E8A1              ldd R30,y+32
 132E F9A1              ldd R31,y+33
 1330 2082              std z+0,R2
 1332                   .dbline 1058
 1332           ;       if (!st.chip_cfg.sensors)
 1332 20905200          lds R2,_st+4+2
 1336 2220              tst R2
 1338 19F4              brne L554
 133A           X157:
 133A                   .dbline 1059
 133A           ;               return -1;
 133A 0FEF              ldi R16,-1
 133C 1FEF              ldi R17,-1
 133E 41C1              xjmp L549
 1340           L554:
 1340                   .dbline 1060
 1340           ;       if (!st.chip_cfg.fifo_enable)
 1340 20905700          lds R2,_st+4+7
 1344 2220              tst R2
 1346 19F4              brne L558
 1348           X158:
 1348                   .dbline 1061
 1348           ;               return -1;
 1348 0FEF              ldi R16,-1
 134A 1FEF              ldi R17,-1
 134C 3AC1              xjmp L549
 134E           L558:
 134E                   .dbline 1063
 134E           ; 
 134E           ;       if (st.chip_cfg.fifo_enable & INV_X_GYRO)
 134E 20905700          lds R2,_st+4+7
 1352 26FE              sbrs R2,6
 1354 03C0              rjmp L562
 1356           X159:
 1356                   .dbline 1064
 1356           ;               packet_size += 2;
 1356 8C2D              mov R24,R12
 1358 8E5F              subi R24,254    ; addi 2
 135A C82E              mov R12,R24
 135C           L562:
 135C                   .dbline 1065
 135C           ;       if (st.chip_cfg.fifo_enable & INV_Y_GYRO)
 135C 20905700          lds R2,_st+4+7
 1360 25FE              sbrs R2,5
 1362 03C0              rjmp L566
 1364           X160:
 1364                   .dbline 1066
 1364           ;               packet_size += 2;
 1364 8C2D              mov R24,R12
 1366 8E5F              subi R24,254    ; addi 2
 1368 C82E              mov R12,R24
 136A           L566:
 136A                   .dbline 1067
 136A           ;       if (st.chip_cfg.fifo_enable & INV_Z_GYRO)
 136A 20905700          lds R2,_st+4+7
 136E 24FE              sbrs R2,4
 1370 03C0              rjmp L570
 1372           X161:
 1372                   .dbline 1068
 1372           ;               packet_size += 2;
 1372 8C2D              mov R24,R12
 1374 8E5F              subi R24,254    ; addi 2
 1376 C82E              mov R12,R24
 1378           L570:
 1378                   .dbline 1069
 1378           ;       if (st.chip_cfg.fifo_enable & INV_XYZ_ACCEL)
 1378 20905700          lds R2,_st+4+7
 137C 23FE              sbrs R2,3
 137E 03C0              rjmp L574
 1380           X162:
 1380                   .dbline 1070
 1380           ;               packet_size += 6;
 1380 8C2D              mov R24,R12
 1382 8A5F              subi R24,250    ; addi 6
 1384 C82E              mov R12,R24
 1386           L574:
 1386                   .dbline 1072
 1386           ; 
 1386           ;       if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
 1386 CE01              movw R24,R28
 1388 0496              adiw R24,4
 138A 9B83              std y+3,R25
 138C 8A83              std y+2,R24
 138E 82E0              ldi R24,2
 1390 8883              std y+0,R24
 1392 E0914C00          lds R30,_st
 1396 F0914D00          lds R31,_st+1
 139A 2285              ldd R18,z+10
 139C E0914E00          lds R30,_st+2
 13A0 F0914F00          lds R31,_st+2+1
 13A4 0081              ldd R16,z+0
 13A6 0E940000          xcall _i2cread
 13AA 0023              tst R16
 13AC 19F0              breq L578
 13AE           X163:
 13AE                   .dbline 1073
 13AE           ;               return -1;
 13AE 0FEF              ldi R16,-1
 13B0 1FEF              ldi R17,-1
 13B2 07C1              xjmp L549
 13B4           L578:
 13B4                   .dbline 1074
 13B4           ;       fifo_count = (data[0] << 8) | data[1];
 13B4 2D80              ldd R2,y+5
 13B6 3C80              ldd R3,y+4
 13B8 F32C              mov R15,R3
 13BA E22C              mov R14,R2
 13BC                   .dbline 1075
 13BC           ;       if (fifo_count < packet_size)
 13BC 2C2C              mov R2,R12
 13BE 3324              clr R3
 13C0 E214              cp R14,R2
 13C2 F304              cpc R15,R3
 13C4 18F4              brsh L582
 13C6           X164:
 13C6                   .dbline 1076
 13C6           ;               return 0;
 13C6 0027              clr R16
 13C8 1127              clr R17
 13CA FBC0              xjmp L549
 13CC           L582:
 13CC                   .dbline 1077
 13CC           ;       if (fifo_count > (st.hw->max_fifo >> 1)) 
 13CC E0914E00          lds R30,_st+2
 13D0 F0914F00          lds R31,_st+2+1
 13D4 2180              ldd R2,z+1
 13D6 3280              ldd R3,z+2
 13D8 3694              lsr R3
 13DA 2794              ror R2
 13DC 2E14              cp R2,R14
 13DE 3F04              cpc R3,R15
 13E0 F0F4              brsh L584
 13E2           X165:
 13E2                   .dbline 1078
 13E2           ;       {
 13E2                   .dbline 1079
 13E2           ;               if (i2c_read(st.hw->addr, st.reg->int_status, 1, data))
 13E2 CE01              movw R24,R28
 13E4 0496              adiw R24,4
 13E6 9B83              std y+3,R25
 13E8 8A83              std y+2,R24
 13EA 81E0              ldi R24,1
 13EC 8883              std y+0,R24
 13EE E0914C00          lds R30,_st
 13F2 F0914D00          lds R31,_st+1
 13F6 2189              ldd R18,z+17
 13F8 E0914E00          lds R30,_st+2
 13FC F0914F00          lds R31,_st+2+1
 1400 0081              ldd R16,z+0
 1402 0E940000          xcall _i2cread
 1406 0023              tst R16
 1408 19F0              breq L587
 140A           X166:
 140A                   .dbline 1080
 140A           ;                               return -1;
 140A 0FEF              ldi R16,-1
 140C 1FEF              ldi R17,-1
 140E D9C0              xjmp L549
 1410           L587:
 1410                   .dbline 1081
 1410           ;               if (data[0] & BIT_FIFO_OVERFLOW) {
 1410 2C80              ldd R2,y+4
 1412 24FE              sbrs R2,4
 1414 04C0              rjmp L590
 1416           X167:
 1416                   .dbline 1081
 1416                   .dbline 1082
 1416           ;                               mpu_reset_fifo();
 1416 58DA              xcall _mpu_reset_fifo
 1418                   .dbline 1083
 1418           ;                               return -2;
 1418 0EEF              ldi R16,-2
 141A 1FEF              ldi R17,-1
 141C D2C0              xjmp L549
 141E           L590:
 141E                   .dbline 1085
 141E           ;               }
 141E           ;       }
 141E           L584:
 141E                   .dbline 1086
 141E           ;       get_ms((unsigned long*)timestamp);
 141E 8501              movw R16,R10
 1420 0E945916          xcall _get_ms
 1424                   .dbline 1088
 1424           ; 
 1424           ;       if (i2c_read(st.hw->addr, st.reg->fifo_r_w, packet_size, data))
 1424 CE01              movw R24,R28
 1426 0496              adiw R24,4
 1428 9B83              std y+3,R25
 142A 8A83              std y+2,R24
 142C C882              std y+0,R12
 142E E0914C00          lds R30,_st
 1432 F0914D00          lds R31,_st+1
 1436 2385              ldd R18,z+11
 1438 E0914E00          lds R30,_st+2
 143C F0914F00          lds R31,_st+2+1
 1440 0081              ldd R16,z+0
 1442 0E940000          xcall _i2cread
 1446 A02E              mov R10,R16
 1448 0023              tst R16
 144A 19F0              breq L592
 144C           X168:
 144C                   .dbline 1089
 144C           ;               return -1;
 144C 0FEF              ldi R16,-1
 144E 1FEF              ldi R17,-1
 1450 B8C0              xjmp L549
 1452           L592:
 1452                   .dbline 1090
 1452           ;       more[0] = fifo_count / packet_size - 1;
 1452 2C2D              mov R18,R12
 1454 3327              clr R19
 1456 8701              movw R16,R14
 1458 0E940000          xcall div16u
 145C C801              movw R24,R16
 145E 0197              sbiw R24,1
 1460 FB01              movw R30,R22
 1462 8083              std z+0,R24
 1464                   .dbline 1091
 1464           ;       sensors[0] = 0;
 1464 2224              clr R2
 1466 E8A1              ldd R30,y+32
 1468 F9A1              ldd R31,y+33
 146A 2082              std z+0,R2
 146C                   .dbline 1093
 146C           ; 
 146C           ;       if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_XYZ_ACCEL) 
 146C 2C2C              mov R2,R12
 146E 3324              clr R3
 1470 4215              cp R20,R2
 1472 5305              cpc R21,R3
 1474 09F4              brne X177
 1476 40C0              xjmp L595
 1478           X177:
 1478           X169:
 1478 20905700          lds R2,_st+4+7
 147C 23FE              sbrs R2,3
 147E 3CC0              rjmp L595
 1480           X170:
 1480                   .dbline 1094
 1480           ;       {
 1480                   .dbline 1095
 1480           ;               accel[0] = (data[index+0] << 8) | data[index+1];
 1480 CE01              movw R24,R28
 1482 0496              adiw R24,4
 1484 FA01              movw R30,R20
 1486 3196              adiw R30,1
 1488 E80F              add R30,R24
 148A F91F              adc R31,R25
 148C 2080              ldd R2,z+0
 148E CE01              movw R24,R28
 1490 0496              adiw R24,4
 1492 FA01              movw R30,R20
 1494 E80F              add R30,R24
 1496 F91F              adc R31,R25
 1498 3080              ldd R3,z+0
 149A EC8D              ldd R30,y+28
 149C FD8D              ldd R31,y+29
 149E 3182              std z+1,R3
 14A0 2082              std z+0,R2
 14A2                   .dbline 1096
 14A2           ;               accel[1] = (data[index+2] << 8) | data[index+3];
 14A2 CE01              movw R24,R28
 14A4 0496              adiw R24,4
 14A6 FA01              movw R30,R20
 14A8 3396              adiw R30,3
 14AA E80F              add R30,R24
 14AC F91F              adc R31,R25
 14AE 2080              ldd R2,z+0
 14B0 CE01              movw R24,R28
 14B2 0496              adiw R24,4
 14B4 FA01              movw R30,R20
 14B6 3296              adiw R30,2
 14B8 E80F              add R30,R24
 14BA F91F              adc R31,R25
 14BC 3080              ldd R3,z+0
 14BE EC8D              ldd R30,y+28
 14C0 FD8D              ldd R31,y+29
 14C2 3382              std z+3,R3
 14C4 2282              std z+2,R2
 14C6                   .dbline 1097
 14C6           ;               accel[2] = (data[index+4] << 8) | data[index+5];
 14C6 CE01              movw R24,R28
 14C8 0496              adiw R24,4
 14CA FA01              movw R30,R20
 14CC 3596              adiw R30,5
 14CE E80F              add R30,R24
 14D0 F91F              adc R31,R25
 14D2 2080              ldd R2,z+0
 14D4 CE01              movw R24,R28
 14D6 0496              adiw R24,4
 14D8 FA01              movw R30,R20
 14DA 3496              adiw R30,4
 14DC E80F              add R30,R24
 14DE F91F              adc R31,R25
 14E0 3080              ldd R3,z+0
 14E2 EC8D              ldd R30,y+28
 14E4 FD8D              ldd R31,y+29
 14E6 3582              std z+5,R3
 14E8 2482              std z+4,R2
 14EA                   .dbline 1098
 14EA           ;               sensors[0] |= INV_XYZ_ACCEL;
 14EA E8A1              ldd R30,y+32
 14EC F9A1              ldd R31,y+33
 14EE 8081              ldd R24,z+0
 14F0 8860              ori R24,8
 14F2 8083              std z+0,R24
 14F4                   .dbline 1099
 14F4           ;               index += 6;
 14F4 4A5F              subi R20,250  ; offset = 6
 14F6 5F4F              sbci R21,255
 14F8                   .dbline 1100
 14F8           ;       }
 14F8           L595:
 14F8                   .dbline 1102
 14F8           ;       
 14F8           ;       if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_X_GYRO) 
 14F8 2C2C              mov R2,R12
 14FA 3324              clr R3
 14FC 4215              cp R20,R2
 14FE 5305              cpc R21,R3
 1500 E1F0              breq L599
 1502           X171:
 1502 20905700          lds R2,_st+4+7
 1506 26FE              sbrs R2,6
 1508 18C0              rjmp L599
 150A           X172:
 150A                   .dbline 1103
 150A           ;       {
 150A                   .dbline 1104
 150A           ;               gyro[0] = (data[index+0] << 8) | data[index+1];
 150A CE01              movw R24,R28
 150C 0496              adiw R24,4
 150E FA01              movw R30,R20
 1510 3196              adiw R30,1
 1512 E80F              add R30,R24
 1514 F91F              adc R31,R25
 1516 2080              ldd R2,z+0
 1518 CE01              movw R24,R28
 151A 0496              adiw R24,4
 151C FA01              movw R30,R20
 151E E80F              add R30,R24
 1520 F91F              adc R31,R25
 1522 3080              ldd R3,z+0
 1524 EA8D              ldd R30,y+26
 1526 FB8D              ldd R31,y+27
 1528 3182              std z+1,R3
 152A 2082              std z+0,R2
 152C                   .dbline 1105
 152C           ;               sensors[0] |= INV_X_GYRO;
 152C E8A1              ldd R30,y+32
 152E F9A1              ldd R31,y+33
 1530 8081              ldd R24,z+0
 1532 8064              ori R24,64
 1534 8083              std z+0,R24
 1536                   .dbline 1106
 1536           ;               index += 2;
 1536 4E5F              subi R20,254  ; offset = 2
 1538 5F4F              sbci R21,255
 153A                   .dbline 1107
 153A           ;       }
 153A           L599:
 153A                   .dbline 1109
 153A           ;       
 153A           ;       if((index != packet_size) && st.chip_cfg.fifo_enable & INV_Y_GYRO) 
 153A 2C2C              mov R2,R12
 153C 3324              clr R3
 153E 4215              cp R20,R2
 1540 5305              cpc R21,R3
 1542 E1F0              breq L603
 1544           X173:
 1544 20905700          lds R2,_st+4+7
 1548 25FE              sbrs R2,5
 154A 18C0              rjmp L603
 154C           X174:
 154C                   .dbline 1110
 154C           ;       {
 154C                   .dbline 1111
 154C           ;               gyro[1] = (data[index+0] << 8) | data[index+1];
 154C CE01              movw R24,R28
 154E 0496              adiw R24,4
 1550 FA01              movw R30,R20
 1552 3196              adiw R30,1
 1554 E80F              add R30,R24
 1556 F91F              adc R31,R25
 1558 2080              ldd R2,z+0
 155A CE01              movw R24,R28
 155C 0496              adiw R24,4
 155E FA01              movw R30,R20
 1560 E80F              add R30,R24
 1562 F91F              adc R31,R25
 1564 3080              ldd R3,z+0
 1566 EA8D              ldd R30,y+26
 1568 FB8D              ldd R31,y+27
 156A 3382              std z+3,R3
 156C 2282              std z+2,R2
 156E                   .dbline 1112
 156E           ;               sensors[0] |= INV_Y_GYRO;
 156E E8A1              ldd R30,y+32
 1570 F9A1              ldd R31,y+33
 1572 8081              ldd R24,z+0
 1574 8062              ori R24,32
 1576 8083              std z+0,R24
 1578                   .dbline 1113
 1578           ;               index += 2;
 1578 4E5F              subi R20,254  ; offset = 2
 157A 5F4F              sbci R21,255
 157C                   .dbline 1114
 157C           ;       }
 157C           L603:
 157C                   .dbline 1116
 157C           ;       
 157C           ;       if ((index != packet_size) && st.chip_cfg.fifo_enable & INV_Z_GYRO) 
 157C 2C2C              mov R2,R12
 157E 3324              clr R3
 1580 4215              cp R20,R2
 1582 5305              cpc R21,R3
 1584 E1F0              breq L607
 1586           X175:
 1586 20905700          lds R2,_st+4+7
 158A 24FE              sbrs R2,4
 158C 18C0              rjmp L607
 158E           X176:
 158E                   .dbline 1117
 158E           ;       {
 158E                   .dbline 1118
 158E           ;               gyro[2] = (data[index+0] << 8) | data[index+1];
 158E CE01              movw R24,R28
 1590 0496              adiw R24,4
 1592 FA01              movw R30,R20
 1594 3196              adiw R30,1
 1596 E80F              add R30,R24
 1598 F91F              adc R31,R25
 159A 2080              ldd R2,z+0
 159C CE01              movw R24,R28
 159E 0496              adiw R24,4
 15A0 FA01              movw R30,R20
 15A2 E80F              add R30,R24
 15A4 F91F              adc R31,R25
 15A6 3080              ldd R3,z+0
 15A8 EA8D              ldd R30,y+26
 15AA FB8D              ldd R31,y+27
 15AC 3582              std z+5,R3
 15AE 2482              std z+4,R2
 15B0                   .dbline 1119
 15B0           ;               sensors[0] |= INV_Z_GYRO;
 15B0 E8A1              ldd R30,y+32
 15B2 F9A1              ldd R31,y+33
 15B4 8081              ldd R24,z+0
 15B6 8061              ori R24,16
 15B8 8083              std z+0,R24
 15BA                   .dbline 1120
 15BA           ;               index += 2;
 15BA 4E5F              subi R20,254  ; offset = 2
 15BC 5F4F              sbci R21,255
 15BE                   .dbline 1121
 15BE           ;       }
 15BE           L607:
 15BE                   .dbline 1123
 15BE           ; 
 15BE           ;       return 0;
 15BE 0027              clr R16
 15C0 1127              clr R17
 15C2                   .dbline -2
 15C2           L549:
 15C2                   .dbline 0 ; func end
 15C2 6096              adiw R28,16
 15C4 0E940000          xcall pop_xgsetF0FC
 15C8 2496              adiw R28,4
 15CA 0895              ret
 15CC                   .dbsym r fifo_count 14 s
 15CC                   .dbsym r packet_size 12 c
 15CC                   .dbsym l data 4 A[12:12]c
 15CC                   .dbsym r index 20 s
 15CC                   .dbsym r more 22 pc
 15CC                   .dbsym l sensors 32 pc
 15CC                   .dbsym r timestamp 10 pl
 15CC                   .dbsym l accel 28 pS
 15CC                   .dbsym l gyro 26 pS
 15CC                   .dbend
 15CC                   .dbfunc e mpu_read_fifo_stream _mpu_read_fifo_stream fI
 15CC           ;     fifo_count -> R12,R13
 15CC           ;            tmp -> y+4
 15CC           ;           more -> R10,R11
 15CC           ;           data -> R20,R21
 15CC           ;         length -> R14,R15
                        .even
 15CC           _mpu_read_fifo_stream::
 15CC 0E940000          xcall push_xgset30FC
 15D0 A901              movw R20,R18
 15D2 7801              movw R14,R16
 15D4 2697              sbiw R28,6
 15D6 AE84              ldd R10,y+14
 15D8 BF84              ldd R11,y+15
 15DA                   .dbline -1
 15DA                   .dbline 1128
 15DA           ; }
 15DA           ; 
 15DA           ; int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
 15DA           ;     unsigned char *more)
 15DA           ; {
 15DA                   .dbline 1131
 15DA           ;       unsigned char tmp[2];
 15DA           ;       unsigned short fifo_count;
 15DA           ;       if (!st.chip_cfg.dmp_on)
 15DA 20906900          lds R2,_st+4+25
 15DE 2220              tst R2
 15E0 19F4              brne L612
 15E2           X178:
 15E2                   .dbline 1132
 15E2           ;               return -1;
 15E2 0FEF              ldi R16,-1
 15E4 1FEF              ldi R17,-1
 15E6 73C0              xjmp L611
 15E8           L612:
 15E8                   .dbline 1133
 15E8           ;       if (!st.chip_cfg.sensors)
 15E8 20905200          lds R2,_st+4+2
 15EC 2220              tst R2
 15EE 19F4              brne L616
 15F0           X179:
 15F0                   .dbline 1134
 15F0           ;               return -1;
 15F0 0FEF              ldi R16,-1
 15F2 1FEF              ldi R17,-1
 15F4 6CC0              xjmp L611
 15F6           L616:
 15F6                   .dbline 1136
 15F6           ; 
 15F6           ;       if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 15F6 CE01              movw R24,R28
 15F8 0496              adiw R24,4
 15FA 9B83              std y+3,R25
 15FC 8A83              std y+2,R24
 15FE 82E0              ldi R24,2
 1600 8883              std y+0,R24
 1602 E0914C00          lds R30,_st
 1606 F0914D00          lds R31,_st+1
 160A 2285              ldd R18,z+10
 160C E0914E00          lds R30,_st+2
 1610 F0914F00          lds R31,_st+2+1
 1614 0081              ldd R16,z+0
 1616 0E940000          xcall _i2cread
 161A 0023              tst R16
 161C 19F0              breq L620
 161E           X180:
 161E                   .dbline 1137
 161E           ;               return -1;
 161E 0FEF              ldi R16,-1
 1620 1FEF              ldi R17,-1
 1622 55C0              xjmp L611
 1624           L620:
 1624                   .dbline 1138
 1624           ;       fifo_count = (tmp[0] << 8) | tmp[1];
 1624 2D80              ldd R2,y+5
 1626 3C80              ldd R3,y+4
 1628 D32C              mov R13,R3
 162A C22C              mov R12,R2
 162C                   .dbline 1139
 162C           ;       if (fifo_count < length) {
 162C CE14              cp R12,R14
 162E DF04              cpc R13,R15
 1630 30F4              brsh L624
 1632           X181:
 1632                   .dbline 1139
 1632                   .dbline 1140
 1632           ;               more[0] = 0;
 1632 2224              clr R2
 1634 F501              movw R30,R10
 1636 2082              std z+0,R2
 1638                   .dbline 1141
 1638           ;               return -1;
 1638 0FEF              ldi R16,-1
 163A 1FEF              ldi R17,-1
 163C 48C0              xjmp L611
 163E           L624:
 163E                   .dbline 1143
 163E           ;       }
 163E           ;       if (fifo_count > (st.hw->max_fifo >> 1)) {
 163E E0914E00          lds R30,_st+2
 1642 F0914F00          lds R31,_st+2+1
 1646 2180              ldd R2,z+1
 1648 3280              ldd R3,z+2
 164A 3694              lsr R3
 164C 2794              ror R2
 164E 2C14              cp R2,R12
 1650 3D04              cpc R3,R13
 1652 F0F4              brsh L626
 1654           X182:
 1654                   .dbline 1143
 1654                   .dbline 1145
 1654           ; 
 1654           ;               if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 1654 CE01              movw R24,R28
 1656 0496              adiw R24,4
 1658 9B83              std y+3,R25
 165A 8A83              std y+2,R24
 165C 81E0              ldi R24,1
 165E 8883              std y+0,R24
 1660 E0914C00          lds R30,_st
 1664 F0914D00          lds R31,_st+1
 1668 2189              ldd R18,z+17
 166A E0914E00          lds R30,_st+2
 166E F0914F00          lds R31,_st+2+1
 1672 0081              ldd R16,z+0
 1674 0E940000          xcall _i2cread
 1678 0023              tst R16
 167A 19F0              breq L629
 167C           X183:
 167C                   .dbline 1146
 167C           ;                               return -1;
 167C 0FEF              ldi R16,-1
 167E 1FEF              ldi R17,-1
 1680 26C0              xjmp L611
 1682           L629:
 1682                   .dbline 1147
 1682           ;               if (tmp[0] & BIT_FIFO_OVERFLOW) {
 1682 2C80              ldd R2,y+4
 1684 24FE              sbrs R2,4
 1686 04C0              rjmp L632
 1688           X184:
 1688                   .dbline 1147
 1688                   .dbline 1148
 1688           ;                               mpu_reset_fifo();
 1688 1FD9              xcall _mpu_reset_fifo
 168A                   .dbline 1149
 168A           ;                               return -2;
 168A 0EEF              ldi R16,-2
 168C 1FEF              ldi R17,-1
 168E 1FC0              xjmp L611
 1690           L632:
 1690                   .dbline 1151
 1690           ;               }
 1690           ;       }
 1690           L626:
 1690                   .dbline 1153
 1690           ; 
 1690           ;       if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 1690 5B83              std y+3,R21
 1692 4A83              std y+2,R20
 1694 E882              std y+0,R14
 1696 E0914C00          lds R30,_st
 169A F0914D00          lds R31,_st+1
 169E 2385              ldd R18,z+11
 16A0 E0914E00          lds R30,_st+2
 16A4 F0914F00          lds R31,_st+2+1
 16A8 0081              ldd R16,z+0
 16AA 0E940000          xcall _i2cread
 16AE 402F              mov R20,R16
 16B0 0023              tst R16
 16B2 19F0              breq L634
 16B4           X185:
 16B4                   .dbline 1154
 16B4           ;               return -1;
 16B4 0FEF              ldi R16,-1
 16B6 1FEF              ldi R17,-1
 16B8 0AC0              xjmp L611
 16BA           L634:
 16BA                   .dbline 1155
 16BA           ;       more[0] = fifo_count / length - 1;
 16BA 9701              movw R18,R14
 16BC 8601              movw R16,R12
 16BE 0E940000          xcall div16u
 16C2 C801              movw R24,R16
 16C4 0197              sbiw R24,1
 16C6 F501              movw R30,R10
 16C8 8083              std z+0,R24
 16CA                   .dbline 1156
 16CA           ;       return 0;
 16CA 0027              clr R16
 16CC 1127              clr R17
 16CE                   .dbline -2
 16CE           L611:
 16CE                   .dbline 0 ; func end
 16CE 2696              adiw R28,6
 16D0 0C940000          xjmp pop_xgset30FC
 16D4                   .dbsym r fifo_count 12 s
 16D4                   .dbsym l tmp 4 A[2:2]c
 16D4                   .dbsym r more 10 pc
 16D4                   .dbsym r data 20 pc
 16D4                   .dbsym r length 14 s
 16D4                   .dbend
 16D4                   .dbfunc e mpu_set_int_level _mpu_set_int_level fI
 16D4           ;     active_low -> R16
                        .even
 16D4           _mpu_set_int_level::
 16D4                   .dbline -1
 16D4                   .dbline 1160
 16D4           ; }
 16D4           ; 
 16D4           ; int mpu_set_int_level(unsigned char active_low)
 16D4           ; {
 16D4                   .dbline 1161
 16D4           ;     st.chip_cfg.active_low_int = active_low;
 16D4 00936700          sts _st+4+23,R16
 16D8                   .dbline 1162
 16D8           ;     return 0;
 16D8 0027              clr R16
 16DA 1127              clr R17
 16DC                   .dbline -2
 16DC           L637:
 16DC                   .dbline 0 ; func end
 16DC 0895              ret
 16DE                   .dbsym r active_low 16 c
 16DE                   .dbend
 16DE                   .dbfunc e mpu_set_int_latched _mpu_set_int_latched fI
 16DE           ;            tmp -> y+4
 16DE           ;         enable -> R10
                        .even
 16DE           _mpu_set_int_latched::
 16DE AA92              st -y,R10
 16E0 A02E              mov R10,R16
 16E2 2597              sbiw R28,5
 16E4                   .dbline -1
 16E4                   .dbline 1166
 16E4           ; }
 16E4           ; 
 16E4           ; int mpu_set_int_latched(unsigned char enable)
 16E4           ; {
 16E4                   .dbline 1168
 16E4           ;     unsigned char tmp;
 16E4           ;     if (st.chip_cfg.latched_int == enable)
 16E4 20906800          lds R2,_st+4+24
 16E8 2A14              cp R2,R10
 16EA 19F4              brne L641
 16EC           X186:
 16EC                   .dbline 1169
 16EC           ;         return 0;
 16EC 0027              clr R16
 16EE 1127              clr R17
 16F0 30C0              xjmp L640
 16F2           L641:
 16F2                   .dbline 1171
 16F2           ; 
 16F2           ;     if (enable)
 16F2 AA20              tst R10
 16F4 19F0              breq L645
 16F6           X187:
 16F6                   .dbline 1172
 16F6           ;         tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 16F6 80E3              ldi R24,48
 16F8 8C83              std y+4,R24
 16FA 02C0              xjmp L646
 16FC           L645:
 16FC                   .dbline 1174
 16FC           ;     else
 16FC           ;         tmp = 0;
 16FC 2224              clr R2
 16FE 2C82              std y+4,R2
 1700           L646:
 1700                   .dbline 1175
 1700           ;     if (st.chip_cfg.bypass_mode)
 1700 20905900          lds R2,_st+4+9
 1704 2220              tst R2
 1706 19F0              breq L647
 1708           X188:
 1708                   .dbline 1176
 1708           ;         tmp |= BIT_BYPASS_EN;
 1708 8C81              ldd R24,y+4
 170A 8260              ori R24,2
 170C 8C83              std y+4,R24
 170E           L647:
 170E                   .dbline 1177
 170E           ;     if (st.chip_cfg.active_low_int)
 170E 20906700          lds R2,_st+4+23
 1712 2220              tst R2
 1714 19F0              breq L651
 1716           X189:
 1716                   .dbline 1178
 1716           ;         tmp |= BIT_ACTL;
 1716 8C81              ldd R24,y+4
 1718 8068              ori R24,128
 171A 8C83              std y+4,R24
 171C           L651:
 171C                   .dbline 1179
 171C           ;     if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 171C CE01              movw R24,R28
 171E 0496              adiw R24,4
 1720 9B83              std y+3,R25
 1722 8A83              std y+2,R24
 1724 81E0              ldi R24,1
 1726 8883              std y+0,R24
 1728 E0914C00          lds R30,_st
 172C F0914D00          lds R31,_st+1
 1730 2489              ldd R18,z+20
 1732 E0914E00          lds R30,_st+2
 1736 F0914F00          lds R31,_st+2+1
 173A 0081              ldd R16,z+0
 173C 0E940000          xcall _i2cwrite
 1740 0023              tst R16
 1742 19F0              breq L655
 1744           X190:
 1744                   .dbline 1180
 1744           ;         return -1;
 1744 0FEF              ldi R16,-1
 1746 1FEF              ldi R17,-1
 1748 04C0              xjmp L640
 174A           L655:
 174A                   .dbline 1181
 174A           ;     st.chip_cfg.latched_int = enable;
 174A A0926800          sts _st+4+24,R10
 174E                   .dbline 1182
 174E           ;     return 0;
 174E 0027              clr R16
 1750 1127              clr R17
 1752                   .dbline -2
 1752           L640:
 1752                   .dbline 0 ; func end
 1752 2596              adiw R28,5
 1754 A990              ld R10,y+
 1756 0895              ret
 1758                   .dbsym l tmp 4 c
 1758                   .dbsym r enable 10 c
 1758                   .dbend
 1758                   .dbfunc s get_accel_prod_shift _get_accel_prod_shift fI
 1758           ;            tmp -> y+7
 1758           ;     shift_code -> y+4
 1758           ;             ii -> R20
 1758           ;       st_shift -> R10,R11
                        .even
 1758           _get_accel_prod_shift:
 1758 0E940000          xcall push_xgsetF03C
 175C 5801              movw R10,R16
 175E 2B97              sbiw R28,11
 1760                   .dbline -1
 1760                   .dbline 1186
 1760           ; }
 1760           ; 
 1760           ; static int get_accel_prod_shift(float *st_shift)
 1760           ; {
 1760                   .dbline 1189
 1760           ;       unsigned char tmp[4], shift_code[3], ii;
 1760           ; 
 1760           ;       if (i2c_read(st.hw->addr, 0x0D, 4, tmp))
 1760 CE01              movw R24,R28
 1762 0796              adiw R24,7
 1764 9B83              std y+3,R25
 1766 8A83              std y+2,R24
 1768 84E0              ldi R24,4
 176A 8883              std y+0,R24
 176C 2DE0              ldi R18,13
 176E E0914E00          lds R30,_st+2
 1772 F0914F00          lds R31,_st+2+1
 1776 0081              ldd R16,z+0
 1778 0E940000          xcall _i2cread
 177C 0023              tst R16
 177E 19F0              breq L661
 1780           X191:
 1780                   .dbline 1190
 1780           ;               return 0x07;
 1780 07E0              ldi R16,7
 1782 10E0              ldi R17,0
 1784 75C0              xjmp L660
 1786           L661:
 1786                   .dbline 1192
 1786           ; 
 1786           ;       shift_code[0] = ((tmp[0] & 0xE0) >> 3) | ((tmp[3] & 0x30) >> 4);
 1786 8A85              ldd R24,y+10
 1788 8073              andi R24,48
 178A 8295              swap R24
 178C 8F70              andi R24,#0x0F
 178E 9F81              ldd R25,y+7
 1790 907E              andi R25,224
 1792 9695              lsr R25
 1794 9695              lsr R25
 1796 9695              lsr R25
 1798 982B              or R25,R24
 179A 9C83              std y+4,R25
 179C                   .dbline 1193
 179C           ;       shift_code[1] = ((tmp[1] & 0xE0) >> 3) | ((tmp[3] & 0x0C) >> 2);
 179C 8A85              ldd R24,y+10
 179E 8C70              andi R24,12
 17A0 982F              mov R25,R24
 17A2 9695              lsr R25
 17A4 9695              lsr R25
 17A6 8885              ldd R24,y+8
 17A8 807E              andi R24,224
 17AA 8695              lsr R24
 17AC 8695              lsr R24
 17AE 8695              lsr R24
 17B0 892B              or R24,R25
 17B2 8D83              std y+5,R24
 17B4                   .dbline 1194
 17B4           ;       shift_code[2] = ((tmp[2] & 0xE0) >> 3) | (tmp[3] & 0x03);
 17B4 8A85              ldd R24,y+10
 17B6 8370              andi R24,3
 17B8 9985              ldd R25,y+9
 17BA 907E              andi R25,224
 17BC 9695              lsr R25
 17BE 9695              lsr R25
 17C0 9695              lsr R25
 17C2 982B              or R25,R24
 17C4 9E83              std y+6,R25
 17C6                   .dbline 1195
 17C6           ;       for (ii = 0; ii < 3; ii++) 
 17C6 4427              clr R20
 17C8 4EC0              xjmp L674
 17CA           L671:
 17CA                   .dbline 1196
 17CA           ;       {
 17CA                   .dbline 1197
 17CA           ;               if (!shift_code[ii]) 
 17CA CE01              movw R24,R28
 17CC 0496              adiw R24,4
 17CE E42F              mov R30,R20
 17D0 FF27              clr R31
 17D2 E80F              add R30,R24
 17D4 F91F              adc R31,R25
 17D6 2080              ldd R2,z+0
 17D8 2220              tst R2
 17DA 89F4              brne L675
 17DC           X192:
 17DC                   .dbline 1198
 17DC           ;               {
 17DC                   .dbline 1199
 17DC           ;                       st_shift[ii] = 0.f;
 17DC E42F              mov R30,R20
 17DE FF27              clr R31
 17E0 EE0F              lsl R30
 17E2 FF1F              rol R31
 17E4 EE0F              lsl R30
 17E6 FF1F              rol R31
 17E8 EA0D              add R30,R10
 17EA FB1D              adc R31,R11
 17EC 00E0              ldi R16,<L677
 17EE 10E0              ldi R17,>L677
 17F0 0E940000          xcall elpm32
 17F4 0083              std z+0,R16
 17F6 1183              std z+1,R17
 17F8 2283              std z+2,R18
 17FA 3383              std z+3,R19
 17FC                   .dbline 1200
 17FC           ;                       continue;
 17FC 33C0              xjmp L672
 17FE           L675:
 17FE                   .dbline 1203
 17FE           ;               }
 17FE           ; 
 17FE           ;               st_shift[ii] = 0.34f;
 17FE E42F              mov R30,R20
 1800 FF27              clr R31
 1802 EE0F              lsl R30
 1804 FF1F              rol R31
 1806 EE0F              lsl R30
 1808 FF1F              rol R31
 180A EA0D              add R30,R10
 180C FB1D              adc R31,R11
 180E 00E0              ldi R16,<L678
 1810 10E0              ldi R17,>L678
 1812 0E940000          xcall elpm32
 1816 0083              std z+0,R16
 1818 1183              std z+1,R17
 181A 2283              std z+2,R18
 181C 3383              std z+3,R19
 181E 16C0              xjmp L680
 1820           L679:
 1820                   .dbline 1205
 1820           ;               while (--shift_code[ii])
 1820           ;                       st_shift[ii] *= 1.034f;
 1820 242E              mov R2,R20
 1822 3324              clr R3
 1824 220C              lsl R2
 1826 331C              rol R3
 1828 220C              lsl R2
 182A 331C              rol R3
 182C 2A0C              add R2,R10
 182E 3B1C              adc R3,R11
 1830 2101              movw R4,R2
 1832 00E0              ldi R16,<L682
 1834 10E0              ldi R17,>L682
 1836 0E940000          xcall elpm32
 183A 5A92              st -y,R5
 183C 4A92              st -y,R4
 183E 0E940000          xcall fpmule1
 1842 F201              movw R30,R4
 1844 0083              std z+0,R16
 1846 1183              std z+1,R17
 1848 2283              std z+2,R18
 184A 3383              std z+3,R19
 184C           L680:
 184C                   .dbline 1204
 184C CE01              movw R24,R28
 184E 0496              adiw R24,4
 1850 C42E              mov R12,R20
 1852 DD24              clr R13
 1854 C80E              add R12,R24
 1856 D91E              adc R13,R25
 1858 F601              movw R30,R12
 185A 6081              ldd R22,z+0
 185C 6150              subi R22,1
 185E 6083              std z+0,R22
 1860 6623              tst R22
 1862 F1F6              brne L679
 1864           X193:
 1864                   .dbline 1206
 1864           ;       }
 1864           L672:
 1864                   .dbline 1195
 1864 4395              inc R20
 1866           L674:
 1866                   .dbline 1195
 1866 4330              cpi R20,3
 1868 08F4              brsh X195
 186A AFCF              xjmp L671
 186C           X195:
 186C           X194:
 186C                   .dbline 1207
 186C           ;       return 0;
 186C 0027              clr R16
 186E 1127              clr R17
 1870                   .dbline -2
 1870           L660:
 1870                   .dbline 0 ; func end
 1870 2B96              adiw R28,11
 1872 0C940000          xjmp pop_xgsetF03C
 1876                   .dbsym l tmp 7 A[4:4]c
 1876                   .dbsym l shift_code 4 A[3:3]c
 1876                   .dbsym r ii 20 c
 1876                   .dbsym r st_shift 10 pD
 1876                   .dbend
 1876                   .dbfunc s accel_self_test _accel_self_test fI
 1876           ;         result -> R10,R11
 1876           ;   st_shift_var -> y+16
 1876           ;       st_shift -> y+4
 1876           ;  st_shift_cust -> y+0
 1876           ;             jj -> R20,R21
 1876           ;        bias_st -> R12,R13
 1876           ;   bias_regular -> R14,R15
                        .even
 1876           _accel_self_test:
 1876 0E940000          xcall push_xgset30FC
 187A 6901              movw R12,R18
 187C 7801              movw R14,R16
 187E 6497              sbiw R28,20
 1880                   .dbline -1
 1880                   .dbline 1211
 1880           ; }
 1880           ; 
 1880           ; static int accel_self_test(long *bias_regular, long *bias_st)
 1880           ; {
 1880                   .dbline 1212
 1880           ;       int jj, result = 0;
 1880 AA24              clr R10
 1882 BB24              clr R11
 1884                   .dbline 1215
 1884           ;       float st_shift[3], st_shift_cust, st_shift_var;
 1884           ; 
 1884           ;       get_accel_prod_shift(st_shift);
 1884 8E01              movw R16,R28
 1886 0C5F              subi R16,252  ; offset = 4
 1888 1F4F              sbci R17,255
 188A 66DF              xcall _get_accel_prod_shift
 188C                   .dbline 1216
 188C           ;       for(jj = 0; jj < 3; jj++) 
 188C 4427              clr R20
 188E 5527              clr R21
 1890           L684:
 1890                   .dbline 1217
 1890           ;       {
 1890                   .dbline 1218
 1890           ;               st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 1890 1A01              movw R2,R20
 1892 220C              lsl R2
 1894 331C              rol R3
 1896 220C              lsl R2
 1898 331C              rol R3
 189A 3101              movw R6,R2
 189C F101              movw R30,R2
 189E EC0D              add R30,R12
 18A0 FD1D              adc R31,R13
 18A2 2080              ldd R2,z+0
 18A4 3180              ldd R3,z+1
 18A6 4280              ldd R4,z+2
 18A8 5380              ldd R5,z+3
 18AA F301              movw R30,R6
 18AC EE0D              add R30,R14
 18AE FF1D              adc R31,R15
 18B0 0081              ldd R16,z+0
 18B2 1181              ldd R17,z+1
 18B4 2281              ldd R18,z+2
 18B6 3381              ldd R19,z+3
 18B8 0219              sub R16,R2
 18BA 1309              sbc R17,R3
 18BC 2409              sbc R18,R4
 18BE 3509              sbc R19,R5
 18C0 0E940000          xcall _labs
 18C4 0E940000          xcall long2fp
 18C8 1801              movw R2,R16
 18CA 2901              movw R4,R18
 18CC 00E0              ldi R16,<L200
 18CE 10E0              ldi R17,>L200
 18D0 0E940000          xcall elpm32
 18D4 3A93              st -y,R19
 18D6 2A93              st -y,R18
 18D8 1A93              st -y,R17
 18DA 0A93              st -y,R16
 18DC 8101              movw R16,R2
 18DE 9201              movw R18,R4
 18E0 0E940000          xcall fpdiv2
 18E4 0883              std y+0,R16
 18E6 1983              std y+1,R17
 18E8 2A83              std y+2,R18
 18EA 3B83              std y+3,R19
 18EC                   .dbline 1219
 18EC           ;               if (st_shift[jj]) 
 18EC CE01              movw R24,R28
 18EE 0496              adiw R24,4
 18F0 FA01              movw R30,R20
 18F2 EE0F              lsl R30
 18F4 FF1F              rol R31
 18F6 EE0F              lsl R30
 18F8 FF1F              rol R31
 18FA E80F              add R30,R24
 18FC F91F              adc R31,R25
 18FE 2080              ldd R2,z+0
 1900 3180              ldd R3,z+1
 1902 4280              ldd R4,z+2
 1904 5380              ldd R5,z+3
 1906 00E0              ldi R16,<L677
 1908 10E0              ldi R17,>L677
 190A 0E940000          xcall elpm32
 190E 3A93              st -y,R19
 1910 2A93              st -y,R18
 1912 1A93              st -y,R17
 1914 0A93              st -y,R16
 1916 8101              movw R16,R2
 1918 9201              movw R18,R4
 191A 0E940000          xcall fpcmp2
 191E 09F4              brne X201
 1920 40C0              xjmp L688
 1922           X201:
 1922           X196:
 1922                   .dbline 1220
 1922           ;               {
 1922                   .dbline 1221
 1922           ;                       st_shift_var = st_shift_cust / st_shift[jj] - 1.f;
 1922 0881              ldd R16,y+0
 1924 1981              ldd R17,y+1
 1926 2A81              ldd R18,y+2
 1928 3B81              ldd R19,y+3
 192A CE01              movw R24,R28
 192C 0496              adiw R24,4
 192E 1A01              movw R2,R20
 1930 220C              lsl R2
 1932 331C              rol R3
 1934 220C              lsl R2
 1936 331C              rol R3
 1938 280E              add R2,R24
 193A 391E              adc R3,R25
 193C 3A92              st -y,R3
 193E 2A92              st -y,R2
 1940 0E940000          xcall fpdiv1
 1944 1801              movw R2,R16
 1946 2901              movw R4,R18
 1948 00E0              ldi R16,<L690
 194A 10E0              ldi R17,>L690
 194C 0E940000          xcall elpm32
 1950 3A93              st -y,R19
 1952 2A93              st -y,R18
 1954 1A93              st -y,R17
 1956 0A93              st -y,R16
 1958 8101              movw R16,R2
 195A 9201              movw R18,R4
 195C 0E940000          xcall fpsub2
 1960 088B              std y+16,R16
 1962 198B              std y+17,R17
 1964 2A8B              std y+18,R18
 1966 3B8B              std y+19,R19
 1968                   .dbline 1223
 1968           ;               
 1968           ;                       if (fabs(st_shift_var) > test.max_accel_var)
 1968 0889              ldd R16,y+16
 196A 1989              ldd R17,y+17
 196C 2A89              ldd R18,y+18
 196E 3B89              ldd R19,y+19
 1970 0E940000          xcall _fabsf
 1974 3A93              st -y,R19
 1976 2A93              st -y,R18
 1978 1A93              st -y,R17
 197A 0A93              st -y,R16
 197C 20914A00          lds R18,_test+35+2
 1980 30914B00          lds R19,_test+35+2+1
 1984 00914800          lds R16,_test+35
 1988 10914900          lds R17,_test+35+1
 198C 0E940000          xcall fpcmp2
 1990 44F5              brge L689
 1992           X197:
 1992                   .dbline 1224
 1992           ;                               result |= 1 << jj;
 1992 01E0              ldi R16,1
 1994 10E0              ldi R17,0
 1996 9A01              movw R18,R20
 1998 0E940000          xcall lsl16
 199C A02A              or R10,R16
 199E B12A              or R11,R17
 19A0                   .dbline 1225
 19A0           ;               } 
 19A0 20C0              xjmp L689
 19A2           L688:
 19A2                   .dbline 1226
 19A2           ;               else if ((st_shift_cust < test.min_g) ||
 19A2 0881              ldd R16,y+0
 19A4 1981              ldd R17,y+1
 19A6 2A81              ldd R18,y+2
 19A8 3B81              ldd R19,y+3
 19AA 80E0              ldi R24,<_test+27
 19AC 90E0              ldi R25,>_test+27
 19AE 9A93              st -y,R25
 19B0 8A93              st -y,R24
 19B2 0E940000          xcall fpcmp1
 19B6 74F0              brlt L698
 19B8           X198:
 19B8 CE01              movw R24,R28
 19BA 20914600          lds R18,_test+31+2
 19BE 30914700          lds R19,_test+31+2+1
 19C2 00914400          lds R16,_test+31
 19C6 10914500          lds R17,_test+31+1
 19CA 9A93              st -y,R25
 19CC 8A93              st -y,R24
 19CE 0E940000          xcall fpcmp1
 19D2 3CF4              brge L694
 19D4           X199:
 19D4           L698:
 19D4                   .dbline 1228
 19D4           ;                       (st_shift_cust > test.max_g))
 19D4           ;                       result |= 1 << jj;
 19D4 01E0              ldi R16,1
 19D6 10E0              ldi R17,0
 19D8 9A01              movw R18,R20
 19DA 0E940000          xcall lsl16
 19DE A02A              or R10,R16
 19E0 B12A              or R11,R17
 19E2           L694:
 19E2           L689:
 19E2                   .dbline 1229
 19E2           ;       }
 19E2           L685:
 19E2                   .dbline 1216
 19E2 4F5F              subi R20,255  ; offset = 1
 19E4 5F4F              sbci R21,255
 19E6                   .dbline 1216
 19E6 4330              cpi R20,3
 19E8 E0E0              ldi R30,0
 19EA 5E07              cpc R21,R30
 19EC 0CF4              brge X202
 19EE 50CF              xjmp L684
 19F0           X202:
 19F0           X200:
 19F0                   .dbline 1231
 19F0           ; 
 19F0           ;       return result;
 19F0 8501              movw R16,R10
 19F2                   .dbline -2
 19F2           L683:
 19F2                   .dbline 0 ; func end
 19F2 6496              adiw R28,20
 19F4 0C940000          xjmp pop_xgset30FC
 19F8                   .dbsym r result 10 I
 19F8                   .dbsym l st_shift_var 16 D
 19F8                   .dbsym l st_shift 4 A[12:3]D
 19F8                   .dbsym l st_shift_cust 0 D
 19F8                   .dbsym r jj 20 I
 19F8                   .dbsym r bias_st 12 pL
 19F8                   .dbsym r bias_regular 14 pL
 19F8                   .dbend
 19F8                   .dbfunc s gyro_self_test _gyro_self_test fI
 19F8           ;         result -> R10,R11
 19F8           ;   st_shift_var -> y+15
 19F8           ;  st_shift_cust -> y+11
 19F8           ;       st_shift -> y+7
 19F8           ;            tmp -> y+4
 19F8           ;             jj -> R20,R21
 19F8           ;        bias_st -> R12,R13
 19F8           ;   bias_regular -> y+29
                        .even
 19F8           _gyro_self_test:
 19F8 0E940000          xcall push_arg4
 19FC 0E940000          xcall push_xgsetF0FC
 1A00 6901              movw R12,R18
 1A02 6397              sbiw R28,19
 1A04                   .dbline -1
 1A04                   .dbline 1235
 1A04           ; }
 1A04           ; 
 1A04           ; static int gyro_self_test(long *bias_regular, long *bias_st)
 1A04           ; {
 1A04                   .dbline 1236
 1A04           ;       int jj, result = 0;
 1A04 AA24              clr R10
 1A06 BB24              clr R11
 1A08                   .dbline 1240
 1A08           ;       unsigned char tmp[3];
 1A08           ;       float st_shift, st_shift_cust, st_shift_var;
 1A08           ; 
 1A08           ;       if (i2c_read(st.hw->addr, 0x0D, 3, tmp))
 1A08 CE01              movw R24,R28
 1A0A 0496              adiw R24,4
 1A0C 9B83              std y+3,R25
 1A0E 8A83              std y+2,R24
 1A10 83E0              ldi R24,3
 1A12 8883              std y+0,R24
 1A14 2DE0              ldi R18,13
 1A16 E0914E00          lds R30,_st+2
 1A1A F0914F00          lds R31,_st+2+1
 1A1E 0081              ldd R16,z+0
 1A20 0E940000          xcall _i2cread
 1A24 0023              tst R16
 1A26 19F0              breq L700
 1A28           X203:
 1A28                   .dbline 1241
 1A28           ;               return 0x07;
 1A28 07E0              ldi R16,7
 1A2A 10E0              ldi R17,0
 1A2C DCC0              xjmp L699
 1A2E           L700:
 1A2E                   .dbline 1243
 1A2E           ; 
 1A2E           ;       tmp[0] &= 0x1F;
 1A2E 8C81              ldd R24,y+4
 1A30 8F71              andi R24,31
 1A32 8C83              std y+4,R24
 1A34                   .dbline 1244
 1A34           ;       tmp[1] &= 0x1F;
 1A34 8D81              ldd R24,y+5
 1A36 8F71              andi R24,31
 1A38 8D83              std y+5,R24
 1A3A                   .dbline 1245
 1A3A           ;       tmp[2] &= 0x1F;
 1A3A 8E81              ldd R24,y+6
 1A3C 8F71              andi R24,31
 1A3E 8E83              std y+6,R24
 1A40                   .dbline 1247
 1A40           ; 
 1A40           ;       for (jj = 0; jj < 3; jj++) {
 1A40 4427              clr R20
 1A42 5527              clr R21
 1A44           L705:
 1A44                   .dbline 1247
 1A44                   .dbline 1248
 1A44           ;               st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 1A44 1A01              movw R2,R20
 1A46 220C              lsl R2
 1A48 331C              rol R3
 1A4A 220C              lsl R2
 1A4C 331C              rol R3
 1A4E 3101              movw R6,R2
 1A50 F101              movw R30,R2
 1A52 EC0D              add R30,R12
 1A54 FD1D              adc R31,R13
 1A56 2080              ldd R2,z+0
 1A58 3180              ldd R3,z+1
 1A5A 4280              ldd R4,z+2
 1A5C 5380              ldd R5,z+3
 1A5E F301              movw R30,R6
 1A60 0D8C              ldd R0,y+29
 1A62 1E8C              ldd R1,y+30
 1A64 E00D              add R30,R0
 1A66 F11D              adc R31,R1
 1A68 0081              ldd R16,z+0
 1A6A 1181              ldd R17,z+1
 1A6C 2281              ldd R18,z+2
 1A6E 3381              ldd R19,z+3
 1A70 0219              sub R16,R2
 1A72 1309              sbc R17,R3
 1A74 2409              sbc R18,R4
 1A76 3509              sbc R19,R5
 1A78 0E940000          xcall _labs
 1A7C 0E940000          xcall long2fp
 1A80 1801              movw R2,R16
 1A82 2901              movw R4,R18
 1A84 00E0              ldi R16,<L200
 1A86 10E0              ldi R17,>L200
 1A88 0E940000          xcall elpm32
 1A8C 3A93              st -y,R19
 1A8E 2A93              st -y,R18
 1A90 1A93              st -y,R17
 1A92 0A93              st -y,R16
 1A94 8101              movw R16,R2
 1A96 9201              movw R18,R4
 1A98 0E940000          xcall fpdiv2
 1A9C 0B87              std y+11,R16
 1A9E 1C87              std y+12,R17
 1AA0 2D87              std y+13,R18
 1AA2 3E87              std y+14,R19
 1AA4                   .dbline 1249
 1AA4           ;               if (tmp[jj]) 
 1AA4 CE01              movw R24,R28
 1AA6 0496              adiw R24,4
 1AA8 FA01              movw R30,R20
 1AAA E80F              add R30,R24
 1AAC F91F              adc R31,R25
 1AAE 2080              ldd R2,z+0
 1AB0 2220              tst R2
 1AB2 09F4              brne X210
 1AB4 6FC0              xjmp L709
 1AB6           X210:
 1AB6           X204:
 1AB6                   .dbline 1250
 1AB6           ;               {
 1AB6                   .dbline 1251
 1AB6           ;                       st_shift = 3275.f / test.gyro_sens;
 1AB6 00E0              ldi R16,<L711
 1AB8 10E0              ldi R17,>L711
 1ABA 0E940000          xcall elpm32
 1ABE 1801              movw R2,R16
 1AC0 2901              movw R4,R18
 1AC2 20912700          lds R18,_test+2
 1AC6 30912800          lds R19,_test+2+1
 1ACA 00912500          lds R16,_test
 1ACE 10912600          lds R17,_test+1
 1AD2 0E940000          xcall ulong2fp
 1AD6 3A93              st -y,R19
 1AD8 2A93              st -y,R18
 1ADA 1A93              st -y,R17
 1ADC 0A93              st -y,R16
 1ADE 8101              movw R16,R2
 1AE0 9201              movw R18,R4
 1AE2 0E940000          xcall fpdiv2
 1AE6 0F83              std y+7,R16
 1AE8 1887              std y+8,R17
 1AEA 2987              std y+9,R18
 1AEC 3A87              std y+10,R19
 1AEE 0EC0              xjmp L713
 1AF0           L712:
 1AF0                   .dbline 1253
 1AF0           ;                       while (--tmp[jj])
 1AF0           ;                               st_shift *= 1.046f;
 1AF0 00E0              ldi R16,<L715
 1AF2 10E0              ldi R17,>L715
 1AF4 0E940000          xcall elpm32
 1AF8 CE01              movw R24,R28
 1AFA 0796              adiw R24,7
 1AFC 9A93              st -y,R25
 1AFE 8A93              st -y,R24
 1B00 0E940000          xcall fpmule1
 1B04 0F83              std y+7,R16
 1B06 1887              std y+8,R17
 1B08 2987              std y+9,R18
 1B0A 3A87              std y+10,R19
 1B0C           L713:
 1B0C                   .dbline 1252
 1B0C CE01              movw R24,R28
 1B0E 0496              adiw R24,4
 1B10 7A01              movw R14,R20
 1B12 E80E              add R14,R24
 1B14 F91E              adc R15,R25
 1B16 F701              movw R30,R14
 1B18 6081              ldd R22,z+0
 1B1A 6150              subi R22,1
 1B1C 6083              std z+0,R22
 1B1E 6623              tst R22
 1B20 39F7              brne L712
 1B22           X205:
 1B22                   .dbline 1254
 1B22           ;                       st_shift_var = st_shift_cust / st_shift - 1.f;
 1B22 0B85              ldd R16,y+11
 1B24 1C85              ldd R17,y+12
 1B26 2D85              ldd R18,y+13
 1B28 3E85              ldd R19,y+14
 1B2A CE01              movw R24,R28
 1B2C 0796              adiw R24,7
 1B2E 9A93              st -y,R25
 1B30 8A93              st -y,R24
 1B32 0E940000          xcall fpdiv1
 1B36 1801              movw R2,R16
 1B38 2901              movw R4,R18
 1B3A 00E0              ldi R16,<L690
 1B3C 10E0              ldi R17,>L690
 1B3E 0E940000          xcall elpm32
 1B42 3A93              st -y,R19
 1B44 2A93              st -y,R18
 1B46 1A93              st -y,R17
 1B48 0A93              st -y,R16
 1B4A 8101              movw R16,R2
 1B4C 9201              movw R18,R4
 1B4E 0E940000          xcall fpsub2
 1B52 0F87              std y+15,R16
 1B54 188B              std y+16,R17
 1B56 298B              std y+17,R18
 1B58 3A8B              std y+18,R19
 1B5A                   .dbline 1255
 1B5A           ;                       if (fabs(st_shift_var) > test.max_gyro_var)
 1B5A 0F85              ldd R16,y+15
 1B5C 1889              ldd R17,y+16
 1B5E 2989              ldd R18,y+17
 1B60 3A89              ldd R19,y+18
 1B62 0E940000          xcall _fabsf
 1B66 3A93              st -y,R19
 1B68 2A93              st -y,R18
 1B6A 1A93              st -y,R17
 1B6C 0A93              st -y,R16
 1B6E 20913E00          lds R18,_test+23+2
 1B72 30913F00          lds R19,_test+23+2+1
 1B76 00913C00          lds R16,_test+23
 1B7A 10913D00          lds R17,_test+23+1
 1B7E 0E940000          xcall fpcmp2
 1B82 4CF5              brge L710
 1B84           X206:
 1B84                   .dbline 1256
 1B84           ;                               result |= 1 << jj;
 1B84 01E0              ldi R16,1
 1B86 10E0              ldi R17,0
 1B88 9A01              movw R18,R20
 1B8A 0E940000          xcall lsl16
 1B8E A02A              or R10,R16
 1B90 B12A              or R11,R17
 1B92                   .dbline 1257
 1B92           ;               } 
 1B92 21C0              xjmp L710
 1B94           L709:
 1B94                   .dbline 1258
 1B94           ;               else if ((st_shift_cust < test.min_dps) ||
 1B94 0B85              ldd R16,y+11
 1B96 1C85              ldd R17,y+12
 1B98 2D85              ldd R18,y+13
 1B9A 3E85              ldd R19,y+14
 1B9C 80E0              ldi R24,<_test+15
 1B9E 90E0              ldi R25,>_test+15
 1BA0 9A93              st -y,R25
 1BA2 8A93              st -y,R24
 1BA4 0E940000          xcall fpcmp1
 1BA8 7CF0              brlt L723
 1BAA           X207:
 1BAA CE01              movw R24,R28
 1BAC 0B96              adiw R24,11
 1BAE 20913A00          lds R18,_test+19+2
 1BB2 30913B00          lds R19,_test+19+2+1
 1BB6 00913800          lds R16,_test+19
 1BBA 10913900          lds R17,_test+19+1
 1BBE 9A93              st -y,R25
 1BC0 8A93              st -y,R24
 1BC2 0E940000          xcall fpcmp1
 1BC6 3CF4              brge L719
 1BC8           X208:
 1BC8           L723:
 1BC8                   .dbline 1260
 1BC8           ;                       (st_shift_cust > test.max_dps))
 1BC8           ;                       result |= 1 << jj;
 1BC8 01E0              ldi R16,1
 1BCA 10E0              ldi R17,0
 1BCC 9A01              movw R18,R20
 1BCE 0E940000          xcall lsl16
 1BD2 A02A              or R10,R16
 1BD4 B12A              or R11,R17
 1BD6           L719:
 1BD6           L710:
 1BD6                   .dbline 1261
 1BD6           ;       }
 1BD6           L706:
 1BD6                   .dbline 1247
 1BD6 4F5F              subi R20,255  ; offset = 1
 1BD8 5F4F              sbci R21,255
 1BDA                   .dbline 1247
 1BDA 4330              cpi R20,3
 1BDC E0E0              ldi R30,0
 1BDE 5E07              cpc R21,R30
 1BE0 0CF4              brge X211
 1BE2 30CF              xjmp L705
 1BE4           X211:
 1BE4           X209:
 1BE4                   .dbline 1262
 1BE4           ;       return result;
 1BE4 8501              movw R16,R10
 1BE6                   .dbline -2
 1BE6           L699:
 1BE6                   .dbline 0 ; func end
 1BE6 6396              adiw R28,19
 1BE8 0E940000          xcall pop_xgsetF0FC
 1BEC 2496              adiw R28,4
 1BEE 0895              ret
 1BF0                   .dbsym r result 10 I
 1BF0                   .dbsym l st_shift_var 15 D
 1BF0                   .dbsym l st_shift_cust 11 D
 1BF0                   .dbsym l st_shift 7 D
 1BF0                   .dbsym l tmp 4 A[3:3]c
 1BF0                   .dbsym r jj 20 I
 1BF0                   .dbsym r bias_st 12 pL
 1BF0                   .dbsym l bias_regular 29 pL
 1BF0                   .dbend
 1BF0                   .dbfunc s get_st_biases _get_st_biases fI
 1BF0           ;       gyro_cur -> y+22
 1BF0           ;      accel_cur -> y+16
 1BF0           ;     fifo_count -> R10,R11
 1BF0           ;   packet_count -> R14
 1BF0           ;             ii -> R12
 1BF0           ;           data -> y+4
 1BF0           ;        hw_test -> R10
 1BF0           ;          accel -> y+40
 1BF0           ;           gyro -> y+38
                        .even
 1BF0           _get_st_biases:
 1BF0 0E940000          xcall push_arg4
 1BF4 0E940000          xcall push_xgsetF0FC
 1BF8 6C97              sbiw R28,28
 1BFA AAA4              ldd R10,y+42
 1BFC                   .dbline -1
 1BFC                   .dbline 1266
 1BFC           ; }
 1BFC           ; 
 1BFC           ; static int get_st_biases(long *gyro, long *accel, unsigned char hw_test)
 1BFC           ; {
 1BFC                   .dbline 1271
 1BFC           ;       unsigned char data[MAX_PACKET_LENGTH];
 1BFC           ;       unsigned char packet_count, ii;
 1BFC           ;       unsigned short fifo_count;
 1BFC           ; 
 1BFC           ;       data[0] = 0x01;
 1BFC 81E0              ldi R24,1
 1BFE 8C83              std y+4,R24
 1C00                   .dbline 1272
 1C00           ;       data[1] = 0;
 1C00 2224              clr R2
 1C02 2D82              std y+5,R2
 1C04                   .dbline 1273
 1C04           ;       if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
 1C04 CE01              movw R24,R28
 1C06 0496              adiw R24,4
 1C08 9B83              std y+3,R25
 1C0A 8A83              std y+2,R24
 1C0C 82E0              ldi R24,2
 1C0E 8883              std y+0,R24
 1C10 E0914C00          lds R30,_st
 1C14 F0914D00          lds R31,_st+1
 1C18 2289              ldd R18,z+18
 1C1A E0914E00          lds R30,_st+2
 1C1E F0914F00          lds R31,_st+2+1
 1C22 0081              ldd R16,z+0
 1C24 0E940000          xcall _i2cwrite
 1C28 0023              tst R16
 1C2A 19F0              breq L726
 1C2C           X212:
 1C2C                   .dbline 1274
 1C2C           ;               return -1;
 1C2C 0FEF              ldi R16,-1
 1C2E 1FEF              ldi R17,-1
 1C30 C0C3              xjmp L724
 1C32           L726:
 1C32                   .dbline 1275
 1C32           ;       delay_ms(200);
 1C32 08EC              ldi R16,200
 1C34 10E0              ldi R17,0
 1C36 0E940000          xcall _delay_ms
 1C3A                   .dbline 1276
 1C3A           ;       data[0] = 0;
 1C3A 2224              clr R2
 1C3C 2C82              std y+4,R2
 1C3E                   .dbline 1277
 1C3E           ;       if (i2c_write(st.hw->addr, st.reg->int_enable, 1, data))
 1C3E CE01              movw R24,R28
 1C40 0496              adiw R24,4
 1C42 9B83              std y+3,R25
 1C44 8A83              std y+2,R24
 1C46 81E0              ldi R24,1
 1C48 8883              std y+0,R24
 1C4A E0914C00          lds R30,_st
 1C4E F0914D00          lds R31,_st+1
 1C52 2785              ldd R18,z+15
 1C54 E0914E00          lds R30,_st+2
 1C58 F0914F00          lds R31,_st+2+1
 1C5C 0081              ldd R16,z+0
 1C5E 0E940000          xcall _i2cwrite
 1C62 0023              tst R16
 1C64 19F0              breq L729
 1C66           X213:
 1C66                   .dbline 1278
 1C66           ;               return -1;
 1C66 0FEF              ldi R16,-1
 1C68 1FEF              ldi R17,-1
 1C6A A3C3              xjmp L724
 1C6C           L729:
 1C6C                   .dbline 1279
 1C6C           ;       if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 1C6C CE01              movw R24,R28
 1C6E 0496              adiw R24,4
 1C70 9B83              std y+3,R25
 1C72 8A83              std y+2,R24
 1C74 81E0              ldi R24,1
 1C76 8883              std y+0,R24
 1C78 E0914C00          lds R30,_st
 1C7C F0914D00          lds R31,_st+1
 1C80 2581              ldd R18,z+5
 1C82 E0914E00          lds R30,_st+2
 1C86 F0914F00          lds R31,_st+2+1
 1C8A 0081              ldd R16,z+0
 1C8C 0E940000          xcall _i2cwrite
 1C90 C02E              mov R12,R16
 1C92 0023              tst R16
 1C94 19F0              breq L732
 1C96           X214:
 1C96                   .dbline 1280
 1C96           ;               return -1;
 1C96 0FEF              ldi R16,-1
 1C98 1FEF              ldi R17,-1
 1C9A 8BC3              xjmp L724
 1C9C           L732:
 1C9C                   .dbline 1281
 1C9C           ;       if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 1C9C CE01              movw R24,R28
 1C9E 0496              adiw R24,4
 1CA0 9B83              std y+3,R25
 1CA2 8A83              std y+2,R24
 1CA4 81E0              ldi R24,1
 1CA6 8883              std y+0,R24
 1CA8 E0914C00          lds R30,_st
 1CAC F0914D00          lds R31,_st+1
 1CB0 2289              ldd R18,z+18
 1CB2 E0914E00          lds R30,_st+2
 1CB6 F0914F00          lds R31,_st+2+1
 1CBA 0081              ldd R16,z+0
 1CBC 0E940000          xcall _i2cwrite
 1CC0 C02E              mov R12,R16
 1CC2 0023              tst R16
 1CC4 19F0              breq L735
 1CC6           X215:
 1CC6                   .dbline 1282
 1CC6           ;               return -1;
 1CC6 0FEF              ldi R16,-1
 1CC8 1FEF              ldi R17,-1
 1CCA 73C3              xjmp L724
 1CCC           L735:
 1CCC                   .dbline 1283
 1CCC           ;       if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 1CCC CE01              movw R24,R28
 1CCE 0496              adiw R24,4
 1CD0 9B83              std y+3,R25
 1CD2 8A83              std y+2,R24
 1CD4 81E0              ldi R24,1
 1CD6 8883              std y+0,R24
 1CD8 E0914C00          lds R30,_st
 1CDC F0914D00          lds R31,_st+1
 1CE0 2789              ldd R18,z+23
 1CE2 E0914E00          lds R30,_st+2
 1CE6 F0914F00          lds R31,_st+2+1
 1CEA 0081              ldd R16,z+0
 1CEC 0E940000          xcall _i2cwrite
 1CF0 C02E              mov R12,R16
 1CF2 0023              tst R16
 1CF4 19F0              breq L738
 1CF6           X216:
 1CF6                   .dbline 1284
 1CF6           ;               return -1;
 1CF6 0FEF              ldi R16,-1
 1CF8 1FEF              ldi R17,-1
 1CFA 5BC3              xjmp L724
 1CFC           L738:
 1CFC                   .dbline 1285
 1CFC           ;       if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 1CFC CE01              movw R24,R28
 1CFE 0496              adiw R24,4
 1D00 9B83              std y+3,R25
 1D02 8A83              std y+2,R24
 1D04 81E0              ldi R24,1
 1D06 8883              std y+0,R24
 1D08 E0914C00          lds R30,_st
 1D0C F0914D00          lds R31,_st+1
 1D10 2481              ldd R18,z+4
 1D12 E0914E00          lds R30,_st+2
 1D16 F0914F00          lds R31,_st+2+1
 1D1A 0081              ldd R16,z+0
 1D1C 0E940000          xcall _i2cwrite
 1D20 C02E              mov R12,R16
 1D22 0023              tst R16
 1D24 19F0              breq L741
 1D26           X217:
 1D26                   .dbline 1286
 1D26           ;               return -1;
 1D26 0FEF              ldi R16,-1
 1D28 1FEF              ldi R17,-1
 1D2A 43C3              xjmp L724
 1D2C           L741:
 1D2C                   .dbline 1287
 1D2C           ;       data[0] = BIT_FIFO_RST | BIT_DMP_RST;
 1D2C 8CE0              ldi R24,12
 1D2E 8C83              std y+4,R24
 1D30                   .dbline 1288
 1D30           ;       if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 1D30 CE01              movw R24,R28
 1D32 0496              adiw R24,4
 1D34 9B83              std y+3,R25
 1D36 8A83              std y+2,R24
 1D38 81E0              ldi R24,1
 1D3A 8883              std y+0,R24
 1D3C E0914C00          lds R30,_st
 1D40 F0914D00          lds R31,_st+1
 1D44 2481              ldd R18,z+4
 1D46 E0914E00          lds R30,_st+2
 1D4A F0914F00          lds R31,_st+2+1
 1D4E 0081              ldd R16,z+0
 1D50 0E940000          xcall _i2cwrite
 1D54 C02E              mov R12,R16
 1D56 0023              tst R16
 1D58 19F0              breq L744
 1D5A           X218:
 1D5A                   .dbline 1289
 1D5A           ;               return -1;
 1D5A 0FEF              ldi R16,-1
 1D5C 1FEF              ldi R17,-1
 1D5E 29C3              xjmp L724
 1D60           L744:
 1D60                   .dbline 1290
 1D60           ;       delay_ms(15);
 1D60 0FE0              ldi R16,15
 1D62 10E0              ldi R17,0
 1D64 0E940000          xcall _delay_ms
 1D68                   .dbline 1291
 1D68           ;       data[0] = st.test->reg_lpf;
 1D68 E0916D00          lds R30,_st+33
 1D6C F0916E00          lds R31,_st+33+1
 1D70 2184              ldd R2,z+9
 1D72 2C82              std y+4,R2
 1D74                   .dbline 1292
 1D74           ;       if (i2c_write(st.hw->addr, st.reg->lpf, 1, data))
 1D74 CE01              movw R24,R28
 1D76 0496              adiw R24,4
 1D78 9B83              std y+3,R25
 1D7A 8A83              std y+2,R24
 1D7C 81E0              ldi R24,1
 1D7E 8883              std y+0,R24
 1D80 E0914C00          lds R30,_st
 1D84 F0914D00          lds R31,_st+1
 1D88 2281              ldd R18,z+2
 1D8A E0914E00          lds R30,_st+2
 1D8E F0914F00          lds R31,_st+2+1
 1D92 0081              ldd R16,z+0
 1D94 0E940000          xcall _i2cwrite
 1D98 C02E              mov R12,R16
 1D9A 0023              tst R16
 1D9C 19F0              breq L748
 1D9E           X219:
 1D9E                   .dbline 1293
 1D9E           ;               return -1;
 1D9E 0FEF              ldi R16,-1
 1DA0 1FEF              ldi R17,-1
 1DA2 07C3              xjmp L724
 1DA4           L748:
 1DA4                   .dbline 1294
 1DA4           ;       data[0] = st.test->reg_rate_div;
 1DA4 E0916D00          lds R30,_st+33
 1DA8 F0916E00          lds R31,_st+33+1
 1DAC 2084              ldd R2,z+8
 1DAE 2C82              std y+4,R2
 1DB0                   .dbline 1295
 1DB0           ;       if (i2c_write(st.hw->addr, st.reg->rate_div, 1, data))
 1DB0 CE01              movw R24,R28
 1DB2 0496              adiw R24,4
 1DB4 9B83              std y+3,R25
 1DB6 8A83              std y+2,R24
 1DB8 81E0              ldi R24,1
 1DBA 8883              std y+0,R24
 1DBC E0914C00          lds R30,_st
 1DC0 F0914D00          lds R31,_st+1
 1DC4 2181              ldd R18,z+1
 1DC6 E0914E00          lds R30,_st+2
 1DCA F0914F00          lds R31,_st+2+1
 1DCE 0081              ldd R16,z+0
 1DD0 0E940000          xcall _i2cwrite
 1DD4 C02E              mov R12,R16
 1DD6 0023              tst R16
 1DD8 19F0              breq L752
 1DDA           X220:
 1DDA                   .dbline 1296
 1DDA           ;               return -1;
 1DDA 0FEF              ldi R16,-1
 1DDC 1FEF              ldi R17,-1
 1DDE E9C2              xjmp L724
 1DE0           L752:
 1DE0                   .dbline 1297
 1DE0           ;       if (hw_test)
 1DE0 AA20              tst R10
 1DE2 41F0              breq L755
 1DE4           X221:
 1DE4                   .dbline 1298
 1DE4           ;               data[0] = st.test->reg_gyro_fsr | 0xE0;
 1DE4 E0916D00          lds R30,_st+33
 1DE8 F0916E00          lds R31,_st+33+1
 1DEC 8285              ldd R24,z+10
 1DEE 806E              ori R24,224
 1DF0 8C83              std y+4,R24
 1DF2 06C0              xjmp L756
 1DF4           L755:
 1DF4                   .dbline 1300
 1DF4           ;       else
 1DF4           ;               data[0] = st.test->reg_gyro_fsr;
 1DF4 E0916D00          lds R30,_st+33
 1DF8 F0916E00          lds R31,_st+33+1
 1DFC 2284              ldd R2,z+10
 1DFE 2C82              std y+4,R2
 1E00           L756:
 1E00                   .dbline 1301
 1E00           ;       if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, data))
 1E00 CE01              movw R24,R28
 1E02 0496              adiw R24,4
 1E04 9B83              std y+3,R25
 1E06 8A83              std y+2,R24
 1E08 81E0              ldi R24,1
 1E0A 8883              std y+0,R24
 1E0C E0914C00          lds R30,_st
 1E10 F0914D00          lds R31,_st+1
 1E14 2681              ldd R18,z+6
 1E16 E0914E00          lds R30,_st+2
 1E1A F0914F00          lds R31,_st+2+1
 1E1E 0081              ldd R16,z+0
 1E20 0E940000          xcall _i2cwrite
 1E24 C02E              mov R12,R16
 1E26 0023              tst R16
 1E28 19F0              breq L759
 1E2A           X222:
 1E2A                   .dbline 1302
 1E2A           ;               return -1;
 1E2A 0FEF              ldi R16,-1
 1E2C 1FEF              ldi R17,-1
 1E2E C1C2              xjmp L724
 1E30           L759:
 1E30                   .dbline 1304
 1E30           ; 
 1E30           ;       if (hw_test)
 1E30 AA20              tst R10
 1E32 41F0              breq L762
 1E34           X223:
 1E34                   .dbline 1305
 1E34           ;               data[0] = st.test->reg_accel_fsr | 0xE0;
 1E34 E0916D00          lds R30,_st+33
 1E38 F0916E00          lds R31,_st+33+1
 1E3C 8385              ldd R24,z+11
 1E3E 806E              ori R24,224
 1E40 8C83              std y+4,R24
 1E42 03C0              xjmp L763
 1E44           L762:
 1E44                   .dbline 1307
 1E44           ;       else
 1E44           ;               data[0] = test.reg_accel_fsr;
 1E44 20903000          lds R2,_test+11
 1E48 2C82              std y+4,R2
 1E4A           L763:
 1E4A                   .dbline 1308
 1E4A           ;       if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, data))
 1E4A CE01              movw R24,R28
 1E4C 0496              adiw R24,4
 1E4E 9B83              std y+3,R25
 1E50 8A83              std y+2,R24
 1E52 81E0              ldi R24,1
 1E54 8883              std y+0,R24
 1E56 E0914C00          lds R30,_st
 1E5A F0914D00          lds R31,_st+1
 1E5E 2781              ldd R18,z+7
 1E60 E0914E00          lds R30,_st+2
 1E64 F0914F00          lds R31,_st+2+1
 1E68 0081              ldd R16,z+0
 1E6A 0E940000          xcall _i2cwrite
 1E6E C02E              mov R12,R16
 1E70 0023              tst R16
 1E72 19F0              breq L766
 1E74           X224:
 1E74                   .dbline 1309
 1E74           ;               return -1;
 1E74 0FEF              ldi R16,-1
 1E76 1FEF              ldi R17,-1
 1E78 9CC2              xjmp L724
 1E7A           L766:
 1E7A                   .dbline 1310
 1E7A           ;       if (hw_test)
 1E7A AA20              tst R10
 1E7C 21F0              breq L769
 1E7E           X225:
 1E7E                   .dbline 1311
 1E7E           ;               delay_ms(200);
 1E7E 08EC              ldi R16,200
 1E80 10E0              ldi R17,0
 1E82 0E940000          xcall _delay_ms
 1E86           L769:
 1E86                   .dbline 1313
 1E86           ; 
 1E86           ;       data[0] = BIT_FIFO_EN;
 1E86 80E4              ldi R24,64
 1E88 8C83              std y+4,R24
 1E8A                   .dbline 1314
 1E8A           ;       if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 1E8A CE01              movw R24,R28
 1E8C 0496              adiw R24,4
 1E8E 9B83              std y+3,R25
 1E90 8A83              std y+2,R24
 1E92 81E0              ldi R24,1
 1E94 8883              std y+0,R24
 1E96 E0914C00          lds R30,_st
 1E9A F0914D00          lds R31,_st+1
 1E9E 2481              ldd R18,z+4
 1EA0 E0914E00          lds R30,_st+2
 1EA4 F0914F00          lds R31,_st+2+1
 1EA8 0081              ldd R16,z+0
 1EAA 0E940000          xcall _i2cwrite
 1EAE A02E              mov R10,R16
 1EB0 0023              tst R16
 1EB2 19F0              breq L771
 1EB4           X226:
 1EB4                   .dbline 1315
 1EB4           ;               return -1;
 1EB4 0FEF              ldi R16,-1
 1EB6 1FEF              ldi R17,-1
 1EB8 7CC2              xjmp L724
 1EBA           L771:
 1EBA                   .dbline 1317
 1EBA           ; 
 1EBA           ;       data[0] = INV_XYZ_GYRO | INV_XYZ_ACCEL;
 1EBA 88E7              ldi R24,120
 1EBC 8C83              std y+4,R24
 1EBE                   .dbline 1318
 1EBE           ;       if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 1EBE CE01              movw R24,R28
 1EC0 0496              adiw R24,4
 1EC2 9B83              std y+3,R25
 1EC4 8A83              std y+2,R24
 1EC6 81E0              ldi R24,1
 1EC8 8883              std y+0,R24
 1ECA E0914C00          lds R30,_st
 1ECE F0914D00          lds R31,_st+1
 1ED2 2581              ldd R18,z+5
 1ED4 E0914E00          lds R30,_st+2
 1ED8 F0914F00          lds R31,_st+2+1
 1EDC 0081              ldd R16,z+0
 1EDE 0E940000          xcall _i2cwrite
 1EE2 A02E              mov R10,R16
 1EE4 0023              tst R16
 1EE6 19F0              breq L774
 1EE8           X227:
 1EE8                   .dbline 1319
 1EE8           ;               return -1;
 1EE8 0FEF              ldi R16,-1
 1EEA 1FEF              ldi R17,-1
 1EEC 62C2              xjmp L724
 1EEE           L774:
 1EEE                   .dbline 1320
 1EEE           ;       delay_ms(test.wait_ms);
 1EEE 00913100          lds R16,_test+12
 1EF2 10913200          lds R17,_test+12+1
 1EF6 0E940000          xcall _delay_ms
 1EFA                   .dbline 1321
 1EFA           ;       data[0] = 0;
 1EFA 2224              clr R2
 1EFC 2C82              std y+4,R2
 1EFE                   .dbline 1322
 1EFE           ;       if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 1EFE CE01              movw R24,R28
 1F00 0496              adiw R24,4
 1F02 9B83              std y+3,R25
 1F04 8A83              std y+2,R24
 1F06 81E0              ldi R24,1
 1F08 8883              std y+0,R24
 1F0A E0914C00          lds R30,_st
 1F0E F0914D00          lds R31,_st+1
 1F12 2581              ldd R18,z+5
 1F14 E0914E00          lds R30,_st+2
 1F18 F0914F00          lds R31,_st+2+1
 1F1C 0081              ldd R16,z+0
 1F1E 0E940000          xcall _i2cwrite
 1F22 A02E              mov R10,R16
 1F24 0023              tst R16
 1F26 19F0              breq L778
 1F28           X228:
 1F28                   .dbline 1323
 1F28           ;               return -1;
 1F28 0FEF              ldi R16,-1
 1F2A 1FEF              ldi R17,-1
 1F2C 42C2              xjmp L724
 1F2E           L778:
 1F2E                   .dbline 1325
 1F2E           ; 
 1F2E           ;       if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
 1F2E CE01              movw R24,R28
 1F30 0496              adiw R24,4
 1F32 9B83              std y+3,R25
 1F34 8A83              std y+2,R24
 1F36 82E0              ldi R24,2
 1F38 8883              std y+0,R24
 1F3A E0914C00          lds R30,_st
 1F3E F0914D00          lds R31,_st+1
 1F42 2285              ldd R18,z+10
 1F44 E0914E00          lds R30,_st+2
 1F48 F0914F00          lds R31,_st+2+1
 1F4C 0081              ldd R16,z+0
 1F4E 0E940000          xcall _i2cread
 1F52 A02E              mov R10,R16
 1F54 0023              tst R16
 1F56 19F0              breq L781
 1F58           X229:
 1F58                   .dbline 1326
 1F58           ;               return -1;
 1F58 0FEF              ldi R16,-1
 1F5A 1FEF              ldi R17,-1
 1F5C 2AC2              xjmp L724
 1F5E           L781:
 1F5E                   .dbline 1328
 1F5E           ; 
 1F5E           ;       fifo_count = (data[0] << 8) | data[1];
 1F5E 2D80              ldd R2,y+5
 1F60 3C80              ldd R3,y+4
 1F62 B32C              mov R11,R3
 1F64 A22C              mov R10,R2
 1F66                   .dbline 1329
 1F66           ;       packet_count = fifo_count / MAX_PACKET_LENGTH;
 1F66 2CE0              ldi R18,12
 1F68 30E0              ldi R19,0
 1F6A 8501              movw R16,R10
 1F6C 0E940000          xcall div16u
 1F70 E02E              mov R14,R16
 1F72                   .dbline 1330
 1F72           ;       gyro[0] = gyro[1] = gyro[2] = 0;
 1F72 EEA1              ldd R30,y+38
 1F74 FFA1              ldd R31,y+39
 1F76 3896              adiw R30,8
 1F78 80E0              ldi R24,0
 1F7A 8083              std z+0,R24
 1F7C 8183              std z+1,R24
 1F7E 8283              std z+2,R24
 1F80 8383              std z+3,R24
 1F82 EEA1              ldd R30,y+38
 1F84 FFA1              ldd R31,y+39
 1F86 3496              adiw R30,4
 1F88 80E0              ldi R24,0
 1F8A 8083              std z+0,R24
 1F8C 8183              std z+1,R24
 1F8E 8283              std z+2,R24
 1F90 8383              std z+3,R24
 1F92 EEA1              ldd R30,y+38
 1F94 FFA1              ldd R31,y+39
 1F96 80E0              ldi R24,0
 1F98 8083              std z+0,R24
 1F9A 8183              std z+1,R24
 1F9C 8283              std z+2,R24
 1F9E 8383              std z+3,R24
 1FA0                   .dbline 1331
 1FA0           ;       accel[0] = accel[1] = accel[2] = 0;
 1FA0 E8A5              ldd R30,y+40
 1FA2 F9A5              ldd R31,y+41
 1FA4 3896              adiw R30,8
 1FA6 80E0              ldi R24,0
 1FA8 8083              std z+0,R24
 1FAA 8183              std z+1,R24
 1FAC 8283              std z+2,R24
 1FAE 8383              std z+3,R24
 1FB0 E8A5              ldd R30,y+40
 1FB2 F9A5              ldd R31,y+41
 1FB4 3496              adiw R30,4
 1FB6 80E0              ldi R24,0
 1FB8 8083              std z+0,R24
 1FBA 8183              std z+1,R24
 1FBC 8283              std z+2,R24
 1FBE 8383              std z+3,R24
 1FC0 E8A5              ldd R30,y+40
 1FC2 F9A5              ldd R31,y+41
 1FC4 80E0              ldi R24,0
 1FC6 8083              std z+0,R24
 1FC8 8183              std z+1,R24
 1FCA 8283              std z+2,R24
 1FCC 8383              std z+3,R24
 1FCE                   .dbline 1333
 1FCE           ; 
 1FCE           ;       for (ii = 0; ii < packet_count; ii++) {
 1FCE CC24              clr R12
 1FD0 C2C0              xjmp L788
 1FD2           L785:
 1FD2                   .dbline 1333
 1FD2                   .dbline 1335
 1FD2           ;               short accel_cur[3], gyro_cur[3];
 1FD2           ;               if (i2c_read(st.hw->addr, st.reg->fifo_r_w, MAX_PACKET_LENGTH, data))
 1FD2 CE01              movw R24,R28
 1FD4 0496              adiw R24,4
 1FD6 9B83              std y+3,R25
 1FD8 8A83              std y+2,R24
 1FDA 8CE0              ldi R24,12
 1FDC 8883              std y+0,R24
 1FDE E0914C00          lds R30,_st
 1FE2 F0914D00          lds R31,_st+1
 1FE6 2385              ldd R18,z+11
 1FE8 E0914E00          lds R30,_st+2
 1FEC F0914F00          lds R31,_st+2+1
 1FF0 0081              ldd R16,z+0
 1FF2 0E940000          xcall _i2cread
 1FF6 A02E              mov R10,R16
 1FF8 0023              tst R16
 1FFA 19F0              breq L789
 1FFC           X230:
 1FFC                   .dbline 1336
 1FFC           ;                       return -1;
 1FFC 0FEF              ldi R16,-1
 1FFE 1FEF              ldi R17,-1
 2000 D8C1              xjmp L724
 2002           L789:
 2002                   .dbline 1337
 2002           ;               accel_cur[0] = ((short)data[0] << 8) | data[1];
 2002 2D80              ldd R2,y+5
 2004 3C80              ldd R3,y+4
 2006 4424              clr R4
 2008 398A              std y+17,R3
 200A 288A              std y+16,R2
 200C                   .dbline 1338
 200C           ;               accel_cur[1] = ((short)data[2] << 8) | data[3];
 200C 2F80              ldd R2,y+7
 200E 3E80              ldd R3,y+6
 2010 4424              clr R4
 2012 3B8A              std y+19,R3
 2014 2A8A              std y+18,R2
 2016                   .dbline 1339
 2016           ;               accel_cur[2] = ((short)data[4] << 8) | data[5];
 2016 2984              ldd R2,y+9
 2018 3884              ldd R3,y+8
 201A 4424              clr R4
 201C 3D8A              std y+21,R3
 201E 2C8A              std y+20,R2
 2020                   .dbline 1340
 2020           ;               accel[0] += (long)accel_cur[0];
 2020 2888              ldd R2,y+16
 2022 3988              ldd R3,y+17
 2024 4424              clr R4
 2026 37FC              sbrc R3,7
 2028 4094              com R4
 202A 5524              clr R5
 202C 47FC              sbrc R4,7
 202E 5094              com R5
 2030 E8A5              ldd R30,y+40
 2032 F9A5              ldd R31,y+41
 2034 6080              ldd R6,z+0
 2036 7180              ldd R7,z+1
 2038 8280              ldd R8,z+2
 203A 9380              ldd R9,z+3
 203C 620C              add R6,R2
 203E 731C              adc R7,R3
 2040 841C              adc R8,R4
 2042 951C              adc R9,R5
 2044 6082              std z+0,R6
 2046 7182              std z+1,R7
 2048 8282              std z+2,R8
 204A 9382              std z+3,R9
 204C                   .dbline 1341
 204C           ;               accel[1] += (long)accel_cur[1];
 204C CF01              movw R24,R30
 204E 0496              adiw R24,4
 2050 2A88              ldd R2,y+18
 2052 3B88              ldd R3,y+19
 2054 4424              clr R4
 2056 37FC              sbrc R3,7
 2058 4094              com R4
 205A 5524              clr R5
 205C 47FC              sbrc R4,7
 205E 5094              com R5
 2060 FC01              movw R30,R24
 2062 6080              ldd R6,z+0
 2064 7180              ldd R7,z+1
 2066 8280              ldd R8,z+2
 2068 9380              ldd R9,z+3
 206A 620C              add R6,R2
 206C 731C              adc R7,R3
 206E 841C              adc R8,R4
 2070 951C              adc R9,R5
 2072 6082              std z+0,R6
 2074 7182              std z+1,R7
 2076 8282              std z+2,R8
 2078 9382              std z+3,R9
 207A                   .dbline 1342
 207A           ;               accel[2] += (long)accel_cur[2];
 207A 88A5              ldd R24,y+40
 207C 99A5              ldd R25,y+41
 207E 0896              adiw R24,8
 2080 2C88              ldd R2,y+20
 2082 3D88              ldd R3,y+21
 2084 4424              clr R4
 2086 37FC              sbrc R3,7
 2088 4094              com R4
 208A 5524              clr R5
 208C 47FC              sbrc R4,7
 208E 5094              com R5
 2090 FC01              movw R30,R24
 2092 6080              ldd R6,z+0
 2094 7180              ldd R7,z+1
 2096 8280              ldd R8,z+2
 2098 9380              ldd R9,z+3
 209A 620C              add R6,R2
 209C 731C              adc R7,R3
 209E 841C              adc R8,R4
 20A0 951C              adc R9,R5
 20A2 6082              std z+0,R6
 20A4 7182              std z+1,R7
 20A6 8282              std z+2,R8
 20A8 9382              std z+3,R9
 20AA                   .dbline 1343
 20AA           ;               gyro_cur[0] = (((short)data[6] << 8) | data[7]);
 20AA 2B84              ldd R2,y+11
 20AC 3A84              ldd R3,y+10
 20AE 4424              clr R4
 20B0 3F8A              std y+23,R3
 20B2 2E8A              std y+22,R2
 20B4                   .dbline 1344
 20B4           ;               gyro_cur[1] = (((short)data[8] << 8) | data[9]);
 20B4 2D84              ldd R2,y+13
 20B6 3C84              ldd R3,y+12
 20B8 4424              clr R4
 20BA 398E              std y+25,R3
 20BC 288E              std y+24,R2
 20BE                   .dbline 1345
 20BE           ;               gyro_cur[2] = (((short)data[10] << 8) | data[11]);
 20BE 2F84              ldd R2,y+15
 20C0 3E84              ldd R3,y+14
 20C2 4424              clr R4
 20C4 3B8E              std y+27,R3
 20C6 2A8E              std y+26,R2
 20C8                   .dbline 1346
 20C8           ;               gyro[0] += (long)gyro_cur[0];
 20C8 2E88              ldd R2,y+22
 20CA 3F88              ldd R3,y+23
 20CC 4424              clr R4
 20CE 37FC              sbrc R3,7
 20D0 4094              com R4
 20D2 5524              clr R5
 20D4 47FC              sbrc R4,7
 20D6 5094              com R5
 20D8 EEA1              ldd R30,y+38
 20DA FFA1              ldd R31,y+39
 20DC 6080              ldd R6,z+0
 20DE 7180              ldd R7,z+1
 20E0 8280              ldd R8,z+2
 20E2 9380              ldd R9,z+3
 20E4 620C              add R6,R2
 20E6 731C              adc R7,R3
 20E8 841C              adc R8,R4
 20EA 951C              adc R9,R5
 20EC 6082              std z+0,R6
 20EE 7182              std z+1,R7
 20F0 8282              std z+2,R8
 20F2 9382              std z+3,R9
 20F4                   .dbline 1347
 20F4           ;               gyro[1] += (long)gyro_cur[1];
 20F4 CF01              movw R24,R30
 20F6 0496              adiw R24,4
 20F8 288C              ldd R2,y+24
 20FA 398C              ldd R3,y+25
 20FC 4424              clr R4
 20FE 37FC              sbrc R3,7
 2100 4094              com R4
 2102 5524              clr R5
 2104 47FC              sbrc R4,7
 2106 5094              com R5
 2108 FC01              movw R30,R24
 210A 6080              ldd R6,z+0
 210C 7180              ldd R7,z+1
 210E 8280              ldd R8,z+2
 2110 9380              ldd R9,z+3
 2112 620C              add R6,R2
 2114 731C              adc R7,R3
 2116 841C              adc R8,R4
 2118 951C              adc R9,R5
 211A 6082              std z+0,R6
 211C 7182              std z+1,R7
 211E 8282              std z+2,R8
 2120 9382              std z+3,R9
 2122                   .dbline 1348
 2122           ;               gyro[2] += (long)gyro_cur[2];
 2122 8EA1              ldd R24,y+38
 2124 9FA1              ldd R25,y+39
 2126 0896              adiw R24,8
 2128 5C01              movw R10,R24
 212A 2A8C              ldd R2,y+26
 212C 3B8C              ldd R3,y+27
 212E 4424              clr R4
 2130 37FC              sbrc R3,7
 2132 4094              com R4
 2134 5524              clr R5
 2136 47FC              sbrc R4,7
 2138 5094              com R5
 213A FC01              movw R30,R24
 213C 6080              ldd R6,z+0
 213E 7180              ldd R7,z+1
 2140 8280              ldd R8,z+2
 2142 9380              ldd R9,z+3
 2144 620C              add R6,R2
 2146 731C              adc R7,R3
 2148 841C              adc R8,R4
 214A 951C              adc R9,R5
 214C 6082              std z+0,R6
 214E 7182              std z+1,R7
 2150 8282              std z+2,R8
 2152 9382              std z+3,R9
 2154                   .dbline 1349
 2154           ;       }
 2154           L786:
 2154                   .dbline 1333
 2154 C394              inc R12
 2156           L788:
 2156                   .dbline 1333
 2156 CE14              cp R12,R14
 2158 08F4              brsh X233
 215A 3BCF              xjmp L785
 215C           X233:
 215C           X231:
 215C                   .dbline 1365
 215C           ;       #ifdef EMPL_NO_64BIT
 215C           ;       gyro[0] = (long)(((float)gyro[0]*65536.f) / test.gyro_sens / packet_count);
 215C           ;       gyro[1] = (long)(((float)gyro[1]*65536.f) / test.gyro_sens / packet_count);
 215C           ;       gyro[2] = (long)(((float)gyro[2]*65536.f) / test.gyro_sens / packet_count);
 215C           ;       if (has_accel) 
 215C           ;       {
 215C           ;               accel[0] = (long)(((float)accel[0]*65536.f) / test.accel_sens /
 215C           ;                       packet_count);
 215C           ;               accel[1] = (long)(((float)accel[1]*65536.f) / test.accel_sens /
 215C           ;                       packet_count);
 215C           ;               accel[2] = (long)(((float)accel[2]*65536.f) / test.accel_sens /
 215C           ;                       packet_count);
 215C           ;               accel[2] -= 65536L;
 215C           ;       }
 215C           ;       #else
 215C           ;       gyro[0] = (long)(((long long)gyro[0]<<16) / test.gyro_sens / packet_count);
 215C 40902700          lds R4,_test+2
 2160 50902800          lds R5,_test+2+1
 2164 20902500          lds R2,_test
 2168 30902600          lds R3,_test+1
 216C EEA1              ldd R30,y+38
 216E FFA1              ldd R31,y+39
 2170 0081              ldd R16,z+0
 2172 1181              ldd R17,z+1
 2174 2281              ldd R18,z+2
 2176 3381              ldd R19,z+3
 2178 9801              movw R18,R16
 217A 0027              clr R16
 217C 1127              clr R17
 217E 5A92              st -y,R5
 2180 4A92              st -y,R4
 2182 3A92              st -y,R3
 2184 2A92              st -y,R2
 2186 0E940000          xcall div32s
 218A 2E2C              mov R2,R14
 218C 3324              clr R3
 218E 4424              clr R4
 2190 5524              clr R5
 2192 5A92              st -y,R5
 2194 4A92              st -y,R4
 2196 3A92              st -y,R3
 2198 2A92              st -y,R2
 219A 0E940000          xcall div32s
 219E EEA1              ldd R30,y+38
 21A0 FFA1              ldd R31,y+39
 21A2 0083              std z+0,R16
 21A4 1183              std z+1,R17
 21A6 2283              std z+2,R18
 21A8 3383              std z+3,R19
 21AA                   .dbline 1366
 21AA           ;       gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / packet_count);
 21AA CF01              movw R24,R30
 21AC 0496              adiw R24,4
 21AE 6C01              movw R12,R24
 21B0 40902700          lds R4,_test+2
 21B4 50902800          lds R5,_test+2+1
 21B8 20902500          lds R2,_test
 21BC 30902600          lds R3,_test+1
 21C0 FC01              movw R30,R24
 21C2 0081              ldd R16,z+0
 21C4 1181              ldd R17,z+1
 21C6 2281              ldd R18,z+2
 21C8 3381              ldd R19,z+3
 21CA 9801              movw R18,R16
 21CC 0027              clr R16
 21CE 1127              clr R17
 21D0 5A92              st -y,R5
 21D2 4A92              st -y,R4
 21D4 3A92              st -y,R3
 21D6 2A92              st -y,R2
 21D8 0E940000          xcall div32s
 21DC 2E2C              mov R2,R14
 21DE 3324              clr R3
 21E0 4424              clr R4
 21E2 5524              clr R5
 21E4 5A92              st -y,R5
 21E6 4A92              st -y,R4
 21E8 3A92              st -y,R3
 21EA 2A92              st -y,R2
 21EC 0E940000          xcall div32s
 21F0 F601              movw R30,R12
 21F2 0083              std z+0,R16
 21F4 1183              std z+1,R17
 21F6 2283              std z+2,R18
 21F8 3383              std z+3,R19
 21FA                   .dbline 1367
 21FA           ;       gyro[2] = (long)(((long long)gyro[2]<<16) / test.gyro_sens / packet_count);
 21FA 8EA1              ldd R24,y+38
 21FC 9FA1              ldd R25,y+39
 21FE 0896              adiw R24,8
 2200 6C01              movw R12,R24
 2202 40902700          lds R4,_test+2
 2206 50902800          lds R5,_test+2+1
 220A 20902500          lds R2,_test
 220E 30902600          lds R3,_test+1
 2212 FC01              movw R30,R24
 2214 0081              ldd R16,z+0
 2216 1181              ldd R17,z+1
 2218 2281              ldd R18,z+2
 221A 3381              ldd R19,z+3
 221C 9801              movw R18,R16
 221E 0027              clr R16
 2220 1127              clr R17
 2222 5A92              st -y,R5
 2224 4A92              st -y,R4
 2226 3A92              st -y,R3
 2228 2A92              st -y,R2
 222A 0E940000          xcall div32s
 222E 2E2C              mov R2,R14
 2230 3324              clr R3
 2232 4424              clr R4
 2234 5524              clr R5
 2236 5A92              st -y,R5
 2238 4A92              st -y,R4
 223A 3A92              st -y,R3
 223C 2A92              st -y,R2
 223E 0E940000          xcall div32s
 2242 F601              movw R30,R12
 2244 0083              std z+0,R16
 2246 1183              std z+1,R17
 2248 2283              std z+2,R18
 224A 3383              std z+3,R19
 224C                   .dbline 1368
 224C           ;       accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens /
 224C 40902B00          lds R4,_test+4+2
 2250 50902C00          lds R5,_test+4+2+1
 2254 20902900          lds R2,_test+4
 2258 30902A00          lds R3,_test+4+1
 225C E8A5              ldd R30,y+40
 225E F9A5              ldd R31,y+41
 2260 0081              ldd R16,z+0
 2262 1181              ldd R17,z+1
 2264 2281              ldd R18,z+2
 2266 3381              ldd R19,z+3
 2268 9801              movw R18,R16
 226A 0027              clr R16
 226C 1127              clr R17
 226E 5A92              st -y,R5
 2270 4A92              st -y,R4
 2272 3A92              st -y,R3
 2274 2A92              st -y,R2
 2276 0E940000          xcall div32s
 227A 2E2C              mov R2,R14
 227C 3324              clr R3
 227E 4424              clr R4
 2280 5524              clr R5
 2282 5A92              st -y,R5
 2284 4A92              st -y,R4
 2286 3A92              st -y,R3
 2288 2A92              st -y,R2
 228A 0E940000          xcall div32s
 228E E8A5              ldd R30,y+40
 2290 F9A5              ldd R31,y+41
 2292 0083              std z+0,R16
 2294 1183              std z+1,R17
 2296 2283              std z+2,R18
 2298 3383              std z+3,R19
 229A                   .dbline 1370
 229A           ;               packet_count);
 229A           ;       accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens /
 229A CF01              movw R24,R30
 229C 0496              adiw R24,4
 229E 6C01              movw R12,R24
 22A0 40902B00          lds R4,_test+4+2
 22A4 50902C00          lds R5,_test+4+2+1
 22A8 20902900          lds R2,_test+4
 22AC 30902A00          lds R3,_test+4+1
 22B0 FC01              movw R30,R24
 22B2 0081              ldd R16,z+0
 22B4 1181              ldd R17,z+1
 22B6 2281              ldd R18,z+2
 22B8 3381              ldd R19,z+3
 22BA 9801              movw R18,R16
 22BC 0027              clr R16
 22BE 1127              clr R17
 22C0 5A92              st -y,R5
 22C2 4A92              st -y,R4
 22C4 3A92              st -y,R3
 22C6 2A92              st -y,R2
 22C8 0E940000          xcall div32s
 22CC 2E2C              mov R2,R14
 22CE 3324              clr R3
 22D0 4424              clr R4
 22D2 5524              clr R5
 22D4 5A92              st -y,R5
 22D6 4A92              st -y,R4
 22D8 3A92              st -y,R3
 22DA 2A92              st -y,R2
 22DC 0E940000          xcall div32s
 22E0 F601              movw R30,R12
 22E2 0083              std z+0,R16
 22E4 1183              std z+1,R17
 22E6 2283              std z+2,R18
 22E8 3383              std z+3,R19
 22EA                   .dbline 1372
 22EA           ;               packet_count);
 22EA           ;       accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens /
 22EA 88A5              ldd R24,y+40
 22EC 99A5              ldd R25,y+41
 22EE 0896              adiw R24,8
 22F0 6C01              movw R12,R24
 22F2 40902B00          lds R4,_test+4+2
 22F6 50902C00          lds R5,_test+4+2+1
 22FA 20902900          lds R2,_test+4
 22FE 30902A00          lds R3,_test+4+1
 2302 FC01              movw R30,R24
 2304 0081              ldd R16,z+0
 2306 1181              ldd R17,z+1
 2308 2281              ldd R18,z+2
 230A 3381              ldd R19,z+3
 230C 9801              movw R18,R16
 230E 0027              clr R16
 2310 1127              clr R17
 2312 5A92              st -y,R5
 2314 4A92              st -y,R4
 2316 3A92              st -y,R3
 2318 2A92              st -y,R2
 231A 0E940000          xcall div32s
 231E 2E2C              mov R2,R14
 2320 3324              clr R3
 2322 4424              clr R4
 2324 5524              clr R5
 2326 5A92              st -y,R5
 2328 4A92              st -y,R4
 232A 3A92              st -y,R3
 232C 2A92              st -y,R2
 232E 0E940000          xcall div32s
 2332 F601              movw R30,R12
 2334 0083              std z+0,R16
 2336 1183              std z+1,R17
 2338 2283              std z+2,R18
 233A 3383              std z+3,R19
 233C                   .dbline 1374
 233C           ;               packet_count);
 233C           ;       if (accel[2] > 0L)
 233C 40E0              ldi R20,0
 233E 50E0              ldi R21,0
 2340 60E0              ldi R22,0
 2342 70E0              ldi R23,0
 2344 E8A5              ldd R30,y+40
 2346 F9A5              ldd R31,y+41
 2348 2084              ldd R2,z+8
 234A 3184              ldd R3,z+9
 234C 4284              ldd R4,z+10
 234E 5384              ldd R5,z+11
 2350 4215              cp R20,R2
 2352 5305              cpc R21,R3
 2354 6405              cpc R22,R4
 2356 7505              cpc R23,R5
 2358 ACF4              brge L814
 235A           X232:
 235A                   .dbline 1375
 235A           ;               accel[2] -= 65536L;
 235A CF01              movw R24,R30
 235C 0896              adiw R24,8
 235E 6C01              movw R12,R24
 2360 40E0              ldi R20,0
 2362 50E0              ldi R21,0
 2364 61E0              ldi R22,1
 2366 70E0              ldi R23,0
 2368 FC01              movw R30,R24
 236A 2080              ldd R2,z+0
 236C 3180              ldd R3,z+1
 236E 4280              ldd R4,z+2
 2370 5380              ldd R5,z+3
 2372 241A              sub R2,R20
 2374 350A              sbc R3,R21
 2376 460A              sbc R4,R22
 2378 570A              sbc R5,R23
 237A 2082              std z+0,R2
 237C 3182              std z+1,R3
 237E 4282              std z+2,R4
 2380 5382              std z+3,R5
 2382 15C0              xjmp L815
 2384           L814:
 2384                   .dbline 1377
 2384           ;       else
 2384           ;               accel[2] += 65536L;
 2384 88A5              ldd R24,y+40
 2386 99A5              ldd R25,y+41
 2388 0896              adiw R24,8
 238A 5C01              movw R10,R24
 238C 40E0              ldi R20,0
 238E 50E0              ldi R21,0
 2390 61E0              ldi R22,1
 2392 70E0              ldi R23,0
 2394 FC01              movw R30,R24
 2396 2080              ldd R2,z+0
 2398 3180              ldd R3,z+1
 239A 4280              ldd R4,z+2
 239C 5380              ldd R5,z+3
 239E 240E              add R2,R20
 23A0 351E              adc R3,R21
 23A2 461E              adc R4,R22
 23A4 571E              adc R5,R23
 23A6 2082              std z+0,R2
 23A8 3182              std z+1,R3
 23AA 4282              std z+2,R4
 23AC 5382              std z+3,R5
 23AE           L815:
 23AE                   .dbline 1380
 23AE           ;       #endif
 23AE           ; 
 23AE           ;       return 0;
 23AE 0027              clr R16
 23B0 1127              clr R17
 23B2                   .dbline -2
 23B2           L724:
 23B2                   .dbline 0 ; func end
 23B2 6C96              adiw R28,28
 23B4 0E940000          xcall pop_xgsetF0FC
 23B8 2496              adiw R28,4
 23BA 0895              ret
 23BC                   .dbsym l gyro_cur 22 A[6:3]S
 23BC                   .dbsym l accel_cur 16 A[6:3]S
 23BC                   .dbsym r fifo_count 10 s
 23BC                   .dbsym r packet_count 14 c
 23BC                   .dbsym r ii 12 c
 23BC                   .dbsym l data 4 A[12:12]c
 23BC                   .dbsym r hw_test 10 c
 23BC                   .dbsym l accel 40 pL
 23BC                   .dbsym l gyro 38 pL
 23BC                   .dbend
 23BC                   .dbfunc e mpu_run_self_test _mpu_run_self_test fI
 23BC           ;     dmp_was_on -> R22
 23BC           ;            lpf -> y+31
 23BC           ;    sample_rate -> y+29
 23BC           ;       gyro_fsr -> y+27
 23BC           ;     sensors_on -> R10
 23BC           ;   fifo_sensors -> y+26
 23BC           ;      accel_fsr -> y+25
 23BC           ;    gyro_result -> R14
 23BC           ;   accel_result -> R12
 23BC           ;         result -> R20,R21
 23BC           ;       accel_st -> y+13
 23BC           ;        gyro_st -> y+1
 23BC           ;          tries -> R12
 23BC           ;             ii -> R14,R15
 23BC           ;          accel -> y+45
 23BC           ;           gyro -> y+43
                        .even
 23BC           _mpu_run_self_test::
 23BC 0E940000          xcall push_arg4
 23C0 0E940000          xcall push_xgsetF0FC
 23C4 A197              sbiw R28,33
 23C6                   .dbline -1
 23C6                   .dbline 1384
 23C6           ; }
 23C6           ; 
 23C6           ; int mpu_run_self_test(long *gyro, long *accel)
 23C6           ; {
 23C6                   .dbline 1385
 23C6           ;       const unsigned char tries = 2;
 23C6 82E0              ldi R24,2
 23C8 C82E              mov R12,R24
 23CA                   .dbline 1394
 23CA           ;       long gyro_st[3], accel_st[3];
 23CA           ;       unsigned char accel_result, gyro_result;
 23CA           ;       int ii;
 23CA           ;       int result;
 23CA           ;       unsigned char accel_fsr, fifo_sensors, sensors_on;
 23CA           ;       unsigned short gyro_fsr, sample_rate, lpf;
 23CA           ;       unsigned char dmp_was_on;
 23CA           ; 
 23CA           ;       if (st.chip_cfg.dmp_on) 
 23CA 20906900          lds R2,_st+4+25
 23CE 2220              tst R2
 23D0 21F0              breq L817
 23D2           X234:
 23D2                   .dbline 1395
 23D2           ;       {
 23D2                   .dbline 1396
 23D2           ;               mpu_set_dmp_state(0);
 23D2 0027              clr R16
 23D4 C4D2              xcall _mpu_set_dmp_state
 23D6                   .dbline 1397
 23D6           ;               dmp_was_on = 1;
 23D6 61E0              ldi R22,1
 23D8                   .dbline 1398
 23D8           ;       } else
 23D8 01C0              xjmp L818
 23DA           L817:
 23DA                   .dbline 1399
 23DA           ;               dmp_was_on = 0;
 23DA 6627              clr R22
 23DC           L818:
 23DC                   .dbline 1401
 23DC           ; 
 23DC           ;       mpu_get_gyro_fsr(&gyro_fsr);
 23DC 8E01              movw R16,R28
 23DE 055E              subi R16,229  ; offset = 27
 23E0 1F4F              sbci R17,255
 23E2 0E94B505          xcall _mpu_get_gyro_fsr
 23E6                   .dbline 1402
 23E6           ;       mpu_get_accel_fsr(&accel_fsr);
 23E6 8E01              movw R16,R28
 23E8 075E              subi R16,231  ; offset = 25
 23EA 1F4F              sbci R17,255
 23EC 0E944F06          xcall _mpu_get_accel_fsr
 23F0                   .dbline 1403
 23F0           ;       mpu_get_lpf(&lpf);
 23F0 8E01              movw R16,R28
 23F2 015E              subi R16,225  ; offset = 31
 23F4 1F4F              sbci R17,255
 23F6 0E94E406          xcall _mpu_get_lpf
 23FA                   .dbline 1404
 23FA           ;       mpu_get_sample_rate(&sample_rate);
 23FA 8E01              movw R16,R28
 23FC 035E              subi R16,227  ; offset = 29
 23FE 1F4F              sbci R17,255
 2400 0E949307          xcall _mpu_get_sample_rate
 2404                   .dbline 1405
 2404           ;       sensors_on = st.chip_cfg.sensors;
 2404 A0905200          lds R10,_st+4+2
 2408                   .dbline 1406
 2408           ;       mpu_get_fifo_config(&fifo_sensors);
 2408 8E01              movw R16,R28
 240A 065E              subi R16,230  ; offset = 26
 240C 1F4F              sbci R17,255
 240E 0E949008          xcall _mpu_get_fifo_config
 2412                   .dbline 1408
 2412           ; 
 2412           ;       for (ii = 0; ii < tries; ii++)
 2412 EE24              clr R14
 2414 FF24              clr R15
 2416 0EC0              xjmp L826
 2418           L823:
 2418                   .dbline 1409
 2418           ;               if (!get_st_biases(gyro, accel, 0))
 2418 2224              clr R2
 241A 2882              std y+0,R2
 241C 2DA5              ldd R18,y+45
 241E 3EA5              ldd R19,y+46
 2420 0BA5              ldd R16,y+43
 2422 1CA5              ldd R17,y+44
 2424 E5DB              xcall _get_st_biases
 2426 0030              cpi R16,0
 2428 0107              cpc R16,R17
 242A 09F4              brne L827
 242C           X235:
 242C                   .dbline 1410
 242C           ;                       break;
 242C 08C0              xjmp L825
 242E           L827:
 242E           L824:
 242E                   .dbline 1408
 242E C701              movw R24,R14
 2430 0196              adiw R24,1
 2432 7C01              movw R14,R24
 2434           L826:
 2434                   .dbline 1408
 2434 2C2C              mov R2,R12
 2436 3324              clr R3
 2438 E214              cp R14,R2
 243A F304              cpc R15,R3
 243C 6CF3              brlt L823
 243E           X236:
 243E           L825:
 243E                   .dbline 1411
 243E           ;       if (ii == tries) {
 243E 2C2C              mov R2,R12
 2440 3324              clr R3
 2442 E214              cp R14,R2
 2444 F304              cpc R15,R3
 2446 11F4              brne L829
 2448           X237:
 2448                   .dbline 1411
 2448                   .dbline 1412
 2448           ;               result = 0;
 2448 4427              clr R20
 244A 5527              clr R21
 244C                   .dbline 1413
 244C           ;       }
 244C           L829:
 244C                   .dbline 1414
 244C           ;       for (ii = 0; ii < tries; ii++)
 244C EE24              clr R14
 244E FF24              clr R15
 2450 10C0              xjmp L834
 2452           L831:
 2452                   .dbline 1415
 2452           ;               if (!get_st_biases(gyro_st, accel_st, 1))
 2452 81E0              ldi R24,1
 2454 8883              std y+0,R24
 2456 9E01              movw R18,R28
 2458 235F              subi R18,243  ; offset = 13
 245A 3F4F              sbci R19,255
 245C 8E01              movw R16,R28
 245E 0F5F              subi R16,255  ; offset = 1
 2460 1F4F              sbci R17,255
 2462 C6DB              xcall _get_st_biases
 2464 0030              cpi R16,0
 2466 0107              cpc R16,R17
 2468 09F4              brne L835
 246A           X238:
 246A                   .dbline 1416
 246A           ;                       break;
 246A 08C0              xjmp L833
 246C           L835:
 246C           L832:
 246C                   .dbline 1414
 246C C701              movw R24,R14
 246E 0196              adiw R24,1
 2470 7C01              movw R14,R24
 2472           L834:
 2472                   .dbline 1414
 2472 2C2C              mov R2,R12
 2474 3324              clr R3
 2476 E214              cp R14,R2
 2478 F304              cpc R15,R3
 247A 5CF3              brlt L831
 247C           X239:
 247C           L833:
 247C                   .dbline 1417
 247C           ;       if (ii == tries) 
 247C 2C2C              mov R2,R12
 247E 3324              clr R3
 2480 E214              cp R14,R2
 2482 F304              cpc R15,R3
 2484 01F4              brne L837
 2486           X240:
 2486                   .dbline 1418
 2486           ;       {
 2486                   .dbline 1419
 2486           ;               result = 0;
 2486                   .dbline 1420
 2486           ;       }
 2486           L837:
 2486                   .dbline 1421
 2486           ;       accel_result = accel_self_test(accel, accel_st);
 2486 9E01              movw R18,R28
 2488 235F              subi R18,243  ; offset = 13
 248A 3F4F              sbci R19,255
 248C 0DA5              ldd R16,y+45
 248E 1EA5              ldd R17,y+46
 2490 F2D9              xcall _accel_self_test
 2492 6801              movw R12,R16
 2494                   .dbline 1422
 2494           ;       gyro_result = gyro_self_test(gyro, gyro_st);
 2494 9E01              movw R18,R28
 2496 2F5F              subi R18,255  ; offset = 1
 2498 3F4F              sbci R19,255
 249A 0BA5              ldd R16,y+43
 249C 1CA5              ldd R17,y+44
 249E ACDA              xcall _gyro_self_test
 24A0 7801              movw R14,R16
 24A2                   .dbline 1424
 24A2           ; 
 24A2           ;       result = 0;
 24A2 4427              clr R20
 24A4 5527              clr R21
 24A6                   .dbline 1425
 24A6           ;       if (!gyro_result)
 24A6 0023              tst R16
 24A8 09F4              brne L839
 24AA           X241:
 24AA                   .dbline 1426
 24AA           ;               result |= 0x01;
 24AA 4160              ori R20,1
 24AC           L839:
 24AC                   .dbline 1427
 24AC           ;       if (!accel_result)
 24AC CC20              tst R12
 24AE 09F4              brne L841
 24B0           X242:
 24B0                   .dbline 1428
 24B0           ;               result |= 0x02;
 24B0 4260              ori R20,2
 24B2           L841:
 24B2                   .dbline 1429
 24B2           ;       st.chip_cfg.gyro_fsr = 0xFF;
 24B2 8FEF              ldi R24,255
 24B4 80935000          sts _st+4,R24
 24B8                   .dbline 1430
 24B8           ;       st.chip_cfg.accel_fsr = 0xFF;
 24B8 80935100          sts _st+4+1,R24
 24BC                   .dbline 1431
 24BC           ;       st.chip_cfg.lpf = 0xFF;
 24BC 80935300          sts _st+4+3,R24
 24C0                   .dbline 1432
 24C0           ;       st.chip_cfg.sample_rate = 0xFFFF;
 24C0 9FEF              ldi R25,255
 24C2 90935600          sts _st+4+5+1,R25
 24C6 80935500          sts _st+4+5,R24
 24CA                   .dbline 1433
 24CA           ;       st.chip_cfg.sensors = 0xFF;
 24CA 80935200          sts _st+4+2,R24
 24CE                   .dbline 1434
 24CE           ;       st.chip_cfg.fifo_enable = 0xFF;
 24CE 80935700          sts _st+4+7,R24
 24D2                   .dbline 1435
 24D2           ;       st.chip_cfg.clk_src = INV_CLK_PLL;
 24D2 81E0              ldi R24,1
 24D4 80935400          sts _st+4+4,R24
 24D8                   .dbline 1436
 24D8           ;       mpu_set_gyro_fsr(gyro_fsr);
 24D8 0B8D              ldd R16,y+27
 24DA 1C8D              ldd R17,y+28
 24DC 0E94EC05          xcall _mpu_set_gyro_fsr
 24E0                   .dbline 1437
 24E0           ;       mpu_set_accel_fsr(accel_fsr);
 24E0 098D              ldd R16,y+25
 24E2 0E948406          xcall _mpu_set_accel_fsr
 24E6                   .dbline 1438
 24E6           ;       mpu_set_lpf(lpf);
 24E6 0F8D              ldd R16,y+31
 24E8 18A1              ldd R17,y+32
 24EA 0E943B07          xcall _mpu_set_lpf
 24EE                   .dbline 1439
 24EE           ;       mpu_set_sample_rate(sample_rate);
 24EE 0D8D              ldd R16,y+29
 24F0 1E8D              ldd R17,y+30
 24F2 0E94A407          xcall _mpu_set_sample_rate
 24F6                   .dbline 1440
 24F6           ;       mpu_set_sensors(sensors_on);
 24F6 0A2D              mov R16,R10
 24F8 0E94E308          xcall _mpu_set_sensors
 24FC                   .dbline 1441
 24FC           ;       mpu_configure_fifo(fifo_sensors);
 24FC 0A8D              ldd R16,y+26
 24FE 0E949708          xcall _mpu_configure_fifo
 2502                   .dbline 1443
 2502           ; 
 2502           ;       if (dmp_was_on)
 2502 6623              tst R22
 2504 11F0              breq L856
 2506           X243:
 2506                   .dbline 1444
 2506           ;               mpu_set_dmp_state(1);
 2506 01E0              ldi R16,1
 2508 2AD2              xcall _mpu_set_dmp_state
 250A           L856:
 250A                   .dbline 1446
 250A           ; 
 250A           ;       return result;
 250A 8A01              movw R16,R20
 250C                   .dbline -2
 250C           L816:
 250C                   .dbline 0 ; func end
 250C A196              adiw R28,33
 250E 0E940000          xcall pop_xgsetF0FC
 2512 2496              adiw R28,4
 2514 0895              ret
 2516                   .dbsym r dmp_was_on 22 c
 2516                   .dbsym l lpf 31 s
 2516                   .dbsym l sample_rate 29 s
 2516                   .dbsym l gyro_fsr 27 s
 2516                   .dbsym r sensors_on 10 c
 2516                   .dbsym l fifo_sensors 26 c
 2516                   .dbsym l accel_fsr 25 c
 2516                   .dbsym r gyro_result 14 c
 2516                   .dbsym r accel_result 12 c
 2516                   .dbsym r result 20 I
 2516                   .dbsym l accel_st 13 A[12:3]L
 2516                   .dbsym l gyro_st 1 A[12:3]L
 2516                   .dbsym r tries 12 c
 2516                   .dbsym r ii 14 I
 2516                   .dbsym l accel 45 pL
 2516                   .dbsym l gyro 43 pL
 2516                   .dbend
 2516                   .dbfunc e mpu_write_mem _mpu_write_mem fI
 2516           ;            tmp -> y+4
 2516           ;           data -> R12,R13
 2516           ;         length -> R10,R11
 2516           ;       mem_addr -> R20,R21
                        .even
 2516           _mpu_write_mem::
 2516 0E940000          xcall push_xgset303C
 251A 5901              movw R10,R18
 251C A801              movw R20,R16
 251E 2697              sbiw R28,6
 2520 CC84              ldd R12,y+12
 2522 DD84              ldd R13,y+13
 2524                   .dbline -1
 2524                   .dbline 1451
 2524           ; }
 2524           ; 
 2524           ; int mpu_write_mem(unsigned short mem_addr, unsigned short length,
 2524           ;               unsigned char *data)
 2524           ; {
 2524                   .dbline 1454
 2524           ;       unsigned char tmp[2];
 2524           ; 
 2524           ;       if (!data)
 2524 CC20              tst R12
 2526 29F4              brne L859
 2528 DD20              tst R13
 252A 19F4              brne L859
 252C           X244:
 252C                   .dbline 1455
 252C           ;               return -1;
 252C 0FEF              ldi R16,-1
 252E 1FEF              ldi R17,-1
 2530 4BC0              xjmp L858
 2532           L859:
 2532                   .dbline 1456
 2532           ;       if (!st.chip_cfg.sensors)
 2532 20905200          lds R2,_st+4+2
 2536 2220              tst R2
 2538 19F4              brne L861
 253A           X245:
 253A                   .dbline 1457
 253A           ;               return -1;
 253A 0FEF              ldi R16,-1
 253C 1FEF              ldi R17,-1
 253E 44C0              xjmp L858
 2540           L861:
 2540                   .dbline 1459
 2540           ; 
 2540           ;       tmp[0] = (unsigned char)(mem_addr >> 8);
 2540 1A01              movw R2,R20
 2542 232C              mov R2,R3
 2544 3324              clr R3
 2546 2C82              std y+4,R2
 2548                   .dbline 1460
 2548           ;       tmp[1] = (unsigned char)(mem_addr & 0xFF);
 2548 CA01              movw R24,R20
 254A 9070              andi R25,0
 254C 8D83              std y+5,R24
 254E                   .dbline 1462
 254E           ; 
 254E           ;       if (tmp[1] + length > st.hw->bank_size)
 254E 282E              mov R2,R24
 2550 3324              clr R3
 2552 2A0C              add R2,R10
 2554 3B1C              adc R3,R11
 2556 E0914E00          lds R30,_st+2
 255A F0914F00          lds R31,_st+2+1
 255E 4084              ldd R4,z+8
 2560 5184              ldd R5,z+9
 2562 4214              cp R4,R2
 2564 5304              cpc R5,R3
 2566 18F4              brsh L866
 2568           X246:
 2568                   .dbline 1463
 2568           ;               return -1;
 2568 0FEF              ldi R16,-1
 256A 1FEF              ldi R17,-1
 256C 2DC0              xjmp L858
 256E           L866:
 256E                   .dbline 1465
 256E           ; 
 256E           ;       if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 256E CE01              movw R24,R28
 2570 0496              adiw R24,4
 2572 9B83              std y+3,R25
 2574 8A83              std y+2,R24
 2576 82E0              ldi R24,2
 2578 8883              std y+0,R24
 257A E0914C00          lds R30,_st
 257E F0914D00          lds R31,_st+1
 2582 208D              ldd R18,z+24
 2584 E0914E00          lds R30,_st+2
 2588 F0914F00          lds R31,_st+2+1
 258C 0081              ldd R16,z+0
 258E 0E940000          xcall _i2cwrite
 2592 0023              tst R16
 2594 19F0              breq L870
 2596           X247:
 2596                   .dbline 1466
 2596           ;               return -1;
 2596 0FEF              ldi R16,-1
 2598 1FEF              ldi R17,-1
 259A 16C0              xjmp L858
 259C           L870:
 259C                   .dbline 1467
 259C           ;       if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 259C DB82              std y+3,R13
 259E CA82              std y+2,R12
 25A0 A882              std y+0,R10
 25A2 E0914C00          lds R30,_st
 25A6 F0914D00          lds R31,_st+1
 25AA 2589              ldd R18,z+21
 25AC E0914E00          lds R30,_st+2
 25B0 F0914F00          lds R31,_st+2+1
 25B4 0081              ldd R16,z+0
 25B6 0E940000          xcall _i2cwrite
 25BA 0023              tst R16
 25BC 19F0              breq L873
 25BE           X248:
 25BE                   .dbline 1468
 25BE           ;               return -1;
 25BE 0FEF              ldi R16,-1
 25C0 1FEF              ldi R17,-1
 25C2 02C0              xjmp L858
 25C4           L873:
 25C4                   .dbline 1469
 25C4           ;       return 0;
 25C4 0027              clr R16
 25C6 1127              clr R17
 25C8                   .dbline -2
 25C8           L858:
 25C8                   .dbline 0 ; func end
 25C8 2696              adiw R28,6
 25CA 0C940000          xjmp pop_xgset303C
 25CE                   .dbsym l tmp 4 A[2:2]c
 25CE                   .dbsym r data 12 pc
 25CE                   .dbsym r length 10 s
 25CE                   .dbsym r mem_addr 20 s
 25CE                   .dbend
 25CE                   .dbfunc e mpu_read_mem _mpu_read_mem fI
 25CE           ;            tmp -> y+4
 25CE           ;           data -> R12,R13
 25CE           ;         length -> R10,R11
 25CE           ;       mem_addr -> R20,R21
                        .even
 25CE           _mpu_read_mem::
 25CE 0E940000          xcall push_xgset303C
 25D2 5901              movw R10,R18
 25D4 A801              movw R20,R16
 25D6 2697              sbiw R28,6
 25D8 CC84              ldd R12,y+12
 25DA DD84              ldd R13,y+13
 25DC                   .dbline -1
 25DC                   .dbline 1474
 25DC           ; }
 25DC           ; 
 25DC           ; int mpu_read_mem(unsigned short mem_addr, unsigned short length,
 25DC           ;         unsigned char *data)
 25DC           ; {
 25DC                   .dbline 1477
 25DC           ;       unsigned char tmp[2];
 25DC           ; 
 25DC           ;       if (!data)
 25DC CC20              tst R12
 25DE 29F4              brne L877
 25E0 DD20              tst R13
 25E2 19F4              brne L877
 25E4           X249:
 25E4                   .dbline 1478
 25E4           ;               return -1;
 25E4 0FEF              ldi R16,-1
 25E6 1FEF              ldi R17,-1
 25E8 4BC0              xjmp L876
 25EA           L877:
 25EA                   .dbline 1479
 25EA           ;       if (!st.chip_cfg.sensors)
 25EA 20905200          lds R2,_st+4+2
 25EE 2220              tst R2
 25F0 19F4              brne L879
 25F2           X250:
 25F2                   .dbline 1480
 25F2           ;               return -1;
 25F2 0FEF              ldi R16,-1
 25F4 1FEF              ldi R17,-1
 25F6 44C0              xjmp L876
 25F8           L879:
 25F8                   .dbline 1482
 25F8           ; 
 25F8           ;       tmp[0] = (unsigned char)(mem_addr >> 8);
 25F8 1A01              movw R2,R20
 25FA 232C              mov R2,R3
 25FC 3324              clr R3
 25FE 2C82              std y+4,R2
 2600                   .dbline 1483
 2600           ;       tmp[1] = (unsigned char)(mem_addr & 0xFF);
 2600 CA01              movw R24,R20
 2602 9070              andi R25,0
 2604 8D83              std y+5,R24
 2606                   .dbline 1485
 2606           ; 
 2606           ;       if (tmp[1] + length > st.hw->bank_size)
 2606 282E              mov R2,R24
 2608 3324              clr R3
 260A 2A0C              add R2,R10
 260C 3B1C              adc R3,R11
 260E E0914E00          lds R30,_st+2
 2612 F0914F00          lds R31,_st+2+1
 2616 4084              ldd R4,z+8
 2618 5184              ldd R5,z+9
 261A 4214              cp R4,R2
 261C 5304              cpc R5,R3
 261E 18F4              brsh L884
 2620           X251:
 2620                   .dbline 1486
 2620           ;               return -1;
 2620 0FEF              ldi R16,-1
 2622 1FEF              ldi R17,-1
 2624 2DC0              xjmp L876
 2626           L884:
 2626                   .dbline 1488
 2626           ; 
 2626           ;       if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 2626 CE01              movw R24,R28
 2628 0496              adiw R24,4
 262A 9B83              std y+3,R25
 262C 8A83              std y+2,R24
 262E 82E0              ldi R24,2
 2630 8883              std y+0,R24
 2632 E0914C00          lds R30,_st
 2636 F0914D00          lds R31,_st+1
 263A 208D              ldd R18,z+24
 263C E0914E00          lds R30,_st+2
 2640 F0914F00          lds R31,_st+2+1
 2644 0081              ldd R16,z+0
 2646 0E940000          xcall _i2cwrite
 264A 0023              tst R16
 264C 19F0              breq L888
 264E           X252:
 264E                   .dbline 1489
 264E           ;               return -1;
 264E 0FEF              ldi R16,-1
 2650 1FEF              ldi R17,-1
 2652 16C0              xjmp L876
 2654           L888:
 2654                   .dbline 1490
 2654           ;       if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 2654 DB82              std y+3,R13
 2656 CA82              std y+2,R12
 2658 A882              std y+0,R10
 265A E0914C00          lds R30,_st
 265E F0914D00          lds R31,_st+1
 2662 2589              ldd R18,z+21
 2664 E0914E00          lds R30,_st+2
 2668 F0914F00          lds R31,_st+2+1
 266C 0081              ldd R16,z+0
 266E 0E940000          xcall _i2cread
 2672 0023              tst R16
 2674 19F0              breq L891
 2676           X253:
 2676                   .dbline 1491
 2676           ;               return -1;
 2676 0FEF              ldi R16,-1
 2678 1FEF              ldi R17,-1
 267A 02C0              xjmp L876
 267C           L891:
 267C                   .dbline 1492
 267C           ;       return 0;
 267C 0027              clr R16
 267E 1127              clr R17
 2680                   .dbline -2
 2680           L876:
 2680                   .dbline 0 ; func end
 2680 2696              adiw R28,6
 2682 0C940000          xjmp pop_xgset303C
 2686                   .dbsym l tmp 4 A[2:2]c
 2686                   .dbsym r data 12 pc
 2686                   .dbsym r length 10 s
 2686                   .dbsym r mem_addr 20 s
 2686                   .dbend
 2686                   .dbfunc e mpu_set_bypass _mpu_set_bypass fI
 2686           ;            tmp -> y+4
 2686           ;      bypass_on -> R10
                        .even
 2686           _mpu_set_bypass::
 2686 AA92              st -y,R10
 2688 CA92              st -y,R12
 268A A02E              mov R10,R16
 268C 2597              sbiw R28,5
 268E                   .dbline -1
 268E                   .dbline 1496
 268E           ; }
 268E           ; 
 268E           ; int mpu_set_bypass(unsigned char bypass_on)
 268E           ; {
 268E                   .dbline 1499
 268E           ;     unsigned char tmp;
 268E           ; 
 268E           ;     if (st.chip_cfg.bypass_mode == bypass_on)
 268E 20905900          lds R2,_st+4+9
 2692 2A14              cp R2,R10
 2694 19F4              brne L895
 2696           X254:
 2696                   .dbline 1500
 2696           ;         return 0;
 2696 0027              clr R16
 2698 1127              clr R17
 269A CBC0              xjmp L894
 269C           L895:
 269C                   .dbline 1502
 269C           ; 
 269C           ;     if (bypass_on) {
 269C AA20              tst R10
 269E 09F4              brne X267
 26A0 5DC0              xjmp L899
 26A2           X267:
 26A2           X255:
 26A2                   .dbline 1502
 26A2                   .dbline 1503
 26A2           ;         if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 26A2 CE01              movw R24,R28
 26A4 0496              adiw R24,4
 26A6 9B83              std y+3,R25
 26A8 8A83              std y+2,R24
 26AA 81E0              ldi R24,1
 26AC 8883              std y+0,R24
 26AE E0914C00          lds R30,_st
 26B2 F0914D00          lds R31,_st+1
 26B6 2481              ldd R18,z+4
 26B8 E0914E00          lds R30,_st+2
 26BC F0914F00          lds R31,_st+2+1
 26C0 0081              ldd R16,z+0
 26C2 0E940000          xcall _i2cread
 26C6 0023              tst R16
 26C8 19F0              breq L901
 26CA           X256:
 26CA                   .dbline 1504
 26CA           ;             return -1;
 26CA 0FEF              ldi R16,-1
 26CC 1FEF              ldi R17,-1
 26CE B1C0              xjmp L894
 26D0           L901:
 26D0                   .dbline 1505
 26D0           ;         tmp &= ~BIT_AUX_IF_EN;
 26D0 8C81              ldd R24,y+4
 26D2 8F7D              andi R24,223
 26D4 8C83              std y+4,R24
 26D6                   .dbline 1506
 26D6           ;         if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 26D6 CE01              movw R24,R28
 26D8 0496              adiw R24,4
 26DA 9B83              std y+3,R25
 26DC 8A83              std y+2,R24
 26DE 81E0              ldi R24,1
 26E0 8883              std y+0,R24
 26E2 E0914C00          lds R30,_st
 26E6 F0914D00          lds R31,_st+1
 26EA 2481              ldd R18,z+4
 26EC E0914E00          lds R30,_st+2
 26F0 F0914F00          lds R31,_st+2+1
 26F4 0081              ldd R16,z+0
 26F6 0E940000          xcall _i2cwrite
 26FA 0023              tst R16
 26FC 19F0              breq L904
 26FE           X257:
 26FE                   .dbline 1507
 26FE           ;             return -1;
 26FE 0FEF              ldi R16,-1
 2700 1FEF              ldi R17,-1
 2702 97C0              xjmp L894
 2704           L904:
 2704                   .dbline 1508
 2704           ;         delay_ms(3);
 2704 03E0              ldi R16,3
 2706 10E0              ldi R17,0
 2708 0E940000          xcall _delay_ms
 270C                   .dbline 1509
 270C           ;         tmp = BIT_BYPASS_EN;
 270C 82E0              ldi R24,2
 270E 8C83              std y+4,R24
 2710                   .dbline 1510
 2710           ;         if (st.chip_cfg.active_low_int)
 2710 20906700          lds R2,_st+4+23
 2714 2220              tst R2
 2716 11F0              breq L907
 2718           X258:
 2718                   .dbline 1511
 2718           ;             tmp |= BIT_ACTL;
 2718 8068              ori R24,128
 271A 8C83              std y+4,R24
 271C           L907:
 271C                   .dbline 1512
 271C           ;         if (st.chip_cfg.latched_int)
 271C 20906800          lds R2,_st+4+24
 2720 2220              tst R2
 2722 19F0              breq L911
 2724           X259:
 2724                   .dbline 1513
 2724           ;             tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 2724 8C81              ldd R24,y+4
 2726 8063              ori R24,48
 2728 8C83              std y+4,R24
 272A           L911:
 272A                   .dbline 1514
 272A           ;         if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 272A CE01              movw R24,R28
 272C 0496              adiw R24,4
 272E 9B83              std y+3,R25
 2730 8A83              std y+2,R24
 2732 81E0              ldi R24,1
 2734 8883              std y+0,R24
 2736 E0914C00          lds R30,_st
 273A F0914D00          lds R31,_st+1
 273E 2489              ldd R18,z+20
 2740 E0914E00          lds R30,_st+2
 2744 F0914F00          lds R31,_st+2+1
 2748 0081              ldd R16,z+0
 274A 0E940000          xcall _i2cwrite
 274E C02E              mov R12,R16
 2750 0023              tst R16
 2752 09F4              brne X268
 2754 6AC0              xjmp L900
 2756           X268:
 2756           X260:
 2756                   .dbline 1515
 2756           ;             return -1;
 2756 0FEF              ldi R16,-1
 2758 1FEF              ldi R17,-1
 275A 6BC0              xjmp L894
 275C           L899:
 275C                   .dbline 1516
 275C           ;     } else {
 275C                   .dbline 1518
 275C           ;         /* Enable I2C master mode if compass is being used. */
 275C           ;         if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 275C CE01              movw R24,R28
 275E 0496              adiw R24,4
 2760 9B83              std y+3,R25
 2762 8A83              std y+2,R24
 2764 81E0              ldi R24,1
 2766 8883              std y+0,R24
 2768 E0914C00          lds R30,_st
 276C F0914D00          lds R31,_st+1
 2770 2481              ldd R18,z+4
 2772 E0914E00          lds R30,_st+2
 2776 F0914F00          lds R31,_st+2+1
 277A 0081              ldd R16,z+0
 277C 0E940000          xcall _i2cread
 2780 C02E              mov R12,R16
 2782 0023              tst R16
 2784 19F0              breq L918
 2786           X261:
 2786                   .dbline 1519
 2786           ;             return -1;
 2786 0FEF              ldi R16,-1
 2788 1FEF              ldi R17,-1
 278A 53C0              xjmp L894
 278C           L918:
 278C                   .dbline 1520
 278C           ;         if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 278C 20905200          lds R2,_st+4+2
 2790 20FE              sbrs R2,0
 2792 04C0              rjmp L921
 2794           X262:
 2794                   .dbline 1521
 2794           ;             tmp |= BIT_AUX_IF_EN;
 2794 8C81              ldd R24,y+4
 2796 8062              ori R24,32
 2798 8C83              std y+4,R24
 279A 03C0              xjmp L922
 279C           L921:
 279C                   .dbline 1523
 279C           ;         else
 279C           ;             tmp &= ~BIT_AUX_IF_EN;
 279C 8C81              ldd R24,y+4
 279E 8F7D              andi R24,223
 27A0 8C83              std y+4,R24
 27A2           L922:
 27A2                   .dbline 1524
 27A2           ;         if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 27A2 CE01              movw R24,R28
 27A4 0496              adiw R24,4
 27A6 9B83              std y+3,R25
 27A8 8A83              std y+2,R24
 27AA 81E0              ldi R24,1
 27AC 8883              std y+0,R24
 27AE E0914C00          lds R30,_st
 27B2 F0914D00          lds R31,_st+1
 27B6 2481              ldd R18,z+4
 27B8 E0914E00          lds R30,_st+2
 27BC F0914F00          lds R31,_st+2+1
 27C0 0081              ldd R16,z+0
 27C2 0E940000          xcall _i2cwrite
 27C6 C02E              mov R12,R16
 27C8 0023              tst R16
 27CA 19F0              breq L925
 27CC           X263:
 27CC                   .dbline 1525
 27CC           ;             return -1;
 27CC 0FEF              ldi R16,-1
 27CE 1FEF              ldi R17,-1
 27D0 30C0              xjmp L894
 27D2           L925:
 27D2                   .dbline 1526
 27D2           ;         delay_ms(3);
 27D2 03E0              ldi R16,3
 27D4 10E0              ldi R17,0
 27D6 0E940000          xcall _delay_ms
 27DA                   .dbline 1527
 27DA           ;         if (st.chip_cfg.active_low_int)
 27DA 20906700          lds R2,_st+4+23
 27DE 2220              tst R2
 27E0 19F0              breq L928
 27E2           X264:
 27E2                   .dbline 1528
 27E2           ;             tmp = BIT_ACTL;
 27E2 80E8              ldi R24,128
 27E4 8C83              std y+4,R24
 27E6 02C0              xjmp L929
 27E8           L928:
 27E8                   .dbline 1530
 27E8           ;         else
 27E8           ;             tmp = 0;
 27E8 2224              clr R2
 27EA 2C82              std y+4,R2
 27EC           L929:
 27EC                   .dbline 1531
 27EC           ;         if (st.chip_cfg.latched_int)
 27EC 20906800          lds R2,_st+4+24
 27F0 2220              tst R2
 27F2 19F0              breq L932
 27F4           X265:
 27F4                   .dbline 1532
 27F4           ;             tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 27F4 8C81              ldd R24,y+4
 27F6 8063              ori R24,48
 27F8 8C83              std y+4,R24
 27FA           L932:
 27FA                   .dbline 1533
 27FA           ;         if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 27FA CE01              movw R24,R28
 27FC 0496              adiw R24,4
 27FE 9B83              std y+3,R25
 2800 8A83              std y+2,R24
 2802 81E0              ldi R24,1
 2804 8883              std y+0,R24
 2806 E0914C00          lds R30,_st
 280A F0914D00          lds R31,_st+1
 280E 2489              ldd R18,z+20
 2810 E0914E00          lds R30,_st+2
 2814 F0914F00          lds R31,_st+2+1
 2818 0081              ldd R16,z+0
 281A 0E940000          xcall _i2cwrite
 281E C02E              mov R12,R16
 2820 0023              tst R16
 2822 19F0              breq L936
 2824           X266:
 2824                   .dbline 1534
 2824           ;             return -1;
 2824 0FEF              ldi R16,-1
 2826 1FEF              ldi R17,-1
 2828 04C0              xjmp L894
 282A           L936:
 282A                   .dbline 1535
 282A           ;     }
 282A           L900:
 282A                   .dbline 1536
 282A           ;     st.chip_cfg.bypass_mode = bypass_on;
 282A A0925900          sts _st+4+9,R10
 282E                   .dbline 1537
 282E           ;     return 0;
 282E 0027              clr R16
 2830 1127              clr R17
 2832                   .dbline -2
 2832           L894:
 2832                   .dbline 0 ; func end
 2832 2596              adiw R28,5
 2834 C990              ld R12,y+
 2836 A990              ld R10,y+
 2838 0895              ret
 283A                   .dbsym l tmp 4 c
 283A                   .dbsym r bypass_on 10 c
 283A                   .dbend
 283A                   .dbfunc e mpu_load_firmware _mpu_load_firmware fI
 283A           ;            tmp -> y+20
 283A           ;            cur -> y+4
 283A           ;     this_write -> R14,R15
 283A           ;             ii -> R12,R13
 283A           ;    sample_rate -> R10,R11
 283A           ;     start_addr -> R20,R21
 283A           ;       firmware -> y+34
 283A           ;         length -> y+32
                        .even
 283A           _mpu_load_firmware::
 283A 0E940000          xcall push_arg4
 283E 0E940000          xcall push_xgsetF0FC
 2842 6697              sbiw R28,22
 2844 4CA1              ldd R20,y+36
 2846 5DA1              ldd R21,y+37
 2848 AEA0              ldd R10,y+38
 284A BFA0              ldd R11,y+39
 284C                   .dbline -1
 284C                   .dbline 1543
 284C           ; }
 284C           ; 
 284C           ; 
 284C           ; int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
 284C           ;     unsigned short start_addr, unsigned short sample_rate)
 284C           ; {
 284C                   .dbline 1549
 284C           ;       unsigned short ii;
 284C           ;       unsigned short this_write;
 284C           ;       #define LOAD_CHUNK  (16)
 284C           ;       unsigned char cur[LOAD_CHUNK], tmp[2];
 284C           ; 
 284C           ;       if (st.chip_cfg.dmp_loaded)
 284C 20906A00          lds R2,_st+4+26
 2850 2220              tst R2
 2852 19F0              breq L942
 2854           X269:
 2854                   .dbline 1550
 2854           ;               return -1;
 2854 0FEF              ldi R16,-1
 2856 1FEF              ldi R17,-1
 2858 7DC0              xjmp L941
 285A           L942:
 285A                   .dbline 1552
 285A           ; 
 285A           ;       if (!firmware)
 285A 0AA0              ldd R0,y+34
 285C 1BA0              ldd R1,y+35
 285E 0020              tst R0
 2860 29F4              brne L946
 2862 1120              tst R1
 2864 19F4              brne L946
 2866           X270:
 2866                   .dbline 1553
 2866           ;               return -1;
 2866 0FEF              ldi R16,-1
 2868 1FEF              ldi R17,-1
 286A 74C0              xjmp L941
 286C           L946:
 286C                   .dbline 1554
 286C           ;       for (ii = 0; ii < length; ii += this_write) {
 286C CC24              clr R12
 286E DD24              clr R13
 2870 43C0              xjmp L951
 2872           L948:
 2872                   .dbline 1554
 2872                   .dbline 1555
 2872           ;               this_write = min(LOAD_CHUNK, length - ii);
 2872 28A0              ldd R2,y+32
 2874 39A0              ldd R3,y+33
 2876 2C18              sub R2,R12
 2878 3D08              sbc R3,R13
 287A 80E1              ldi R24,16
 287C 90E0              ldi R25,0
 287E 8215              cp R24,R2
 2880 9305              cpc R25,R3
 2882 18F4              brsh L952
 2884           X271:
 2884 60E1              ldi R22,16
 2886 70E0              ldi R23,0
 2888 04C0              xjmp L953
 288A           L952:
 288A 68A1              ldd R22,y+32
 288C 79A1              ldd R23,y+33
 288E 6C19              sub R22,R12
 2890 7D09              sbc R23,R13
 2892           L953:
 2892 7B01              movw R14,R22
 2894                   .dbline 1556
 2894           ;               if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 2894 1601              movw R2,R12
 2896 0AA0              ldd R0,y+34
 2898 1BA0              ldd R1,y+35
 289A 200C              add R2,R0
 289C 311C              adc R3,R1
 289E 3982              std y+1,R3
 28A0 2882              std y+0,R2
 28A2 9701              movw R18,R14
 28A4 8601              movw R16,R12
 28A6 37DE              xcall _mpu_write_mem
 28A8 0030              cpi R16,0
 28AA 0107              cpc R16,R17
 28AC 19F0              breq L954
 28AE           X272:
 28AE                   .dbline 1557
 28AE           ;                               return -1;
 28AE 0FEF              ldi R16,-1
 28B0 1FEF              ldi R17,-1
 28B2 50C0              xjmp L941
 28B4           L954:
 28B4                   .dbline 1558
 28B4           ;               if (mpu_read_mem(ii, this_write, cur))
 28B4 CE01              movw R24,R28
 28B6 0496              adiw R24,4
 28B8 9983              std y+1,R25
 28BA 8883              std y+0,R24
 28BC 9701              movw R18,R14
 28BE 8601              movw R16,R12
 28C0 86DE              xcall _mpu_read_mem
 28C2 0030              cpi R16,0
 28C4 0107              cpc R16,R17
 28C6 19F0              breq L956
 28C8           X273:
 28C8                   .dbline 1559
 28C8           ;                               return -1;
 28C8 0FEF              ldi R16,-1
 28CA 1FEF              ldi R17,-1
 28CC 43C0              xjmp L941
 28CE           L956:
 28CE                   .dbline 1560
 28CE           ;               if (memcmp((unsigned char*)firmware+ii, (unsigned char*)cur, this_write))
 28CE F982              std y+1,R15
 28D0 E882              std y+0,R14
 28D2 9E01              movw R18,R28
 28D4 2C5F              subi R18,252  ; offset = 4
 28D6 3F4F              sbci R19,255
 28D8 8601              movw R16,R12
 28DA 0AA0              ldd R0,y+34
 28DC 1BA0              ldd R1,y+35
 28DE 000D              add R16,R0
 28E0 111D              adc R17,R1
 28E2 0E940000          xcall _memcmp
 28E6 B801              movw R22,R16
 28E8 0030              cpi R16,0
 28EA 0107              cpc R16,R17
 28EC 19F0              breq L958
 28EE           X274:
 28EE                   .dbline 1561
 28EE           ;                               return -2;
 28EE 0EEF              ldi R16,-2
 28F0 1FEF              ldi R17,-1
 28F2 30C0              xjmp L941
 28F4           L958:
 28F4                   .dbline 1562
 28F4           ;       }
 28F4           L949:
 28F4                   .dbline 1554
 28F4 CE0C              add R12,R14
 28F6 DF1C              adc R13,R15
 28F8           L951:
 28F8                   .dbline 1554
 28F8 08A0              ldd R0,y+32
 28FA 19A0              ldd R1,y+33
 28FC C014              cp R12,R0
 28FE D104              cpc R13,R1
 2900 08F4              brsh X277
 2902 B7CF              xjmp L948
 2904           X277:
 2904           X275:
 2904                   .dbline 1564
 2904           ; 
 2904           ;       tmp[0] = start_addr >> 8;
 2904 1A01              movw R2,R20
 2906 232C              mov R2,R3
 2908 3324              clr R3
 290A 2C8A              std y+20,R2
 290C                   .dbline 1565
 290C           ;       tmp[1] = start_addr & 0xFF;
 290C CA01              movw R24,R20
 290E 9070              andi R25,0
 2910 8D8B              std y+21,R24
 2912                   .dbline 1566
 2912           ;       if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 2912 CE01              movw R24,R28
 2914 4496              adiw R24,20
 2916 9B83              std y+3,R25
 2918 8A83              std y+2,R24
 291A 82E0              ldi R24,2
 291C 8883              std y+0,R24
 291E E0914C00          lds R30,_st
 2922 F0914D00          lds R31,_st+1
 2926 228D              ldd R18,z+26
 2928 E0914E00          lds R30,_st+2
 292C F0914F00          lds R31,_st+2+1
 2930 0081              ldd R16,z+0
 2932 0E940000          xcall _i2cwrite
 2936 C02E              mov R12,R16
 2938 0023              tst R16
 293A 19F0              breq L961
 293C           X276:
 293C                   .dbline 1567
 293C           ;               return -1;
 293C 0FEF              ldi R16,-1
 293E 1FEF              ldi R17,-1
 2940 09C0              xjmp L941
 2942           L961:
 2942                   .dbline 1569
 2942           ; 
 2942           ;       st.chip_cfg.dmp_loaded = 1;
 2942 81E0              ldi R24,1
 2944 80936A00          sts _st+4+26,R24
 2948                   .dbline 1570
 2948           ;       st.chip_cfg.dmp_sample_rate = sample_rate;
 2948 B0926C00          sts _st+4+27+1,R11
 294C A0926B00          sts _st+4+27,R10
 2950                   .dbline 1571
 2950           ;       return 0;
 2950 0027              clr R16
 2952 1127              clr R17
 2954                   .dbline -2
 2954           L941:
 2954                   .dbline 0 ; func end
 2954 6696              adiw R28,22
 2956 0E940000          xcall pop_xgsetF0FC
 295A 2496              adiw R28,4
 295C 0895              ret
 295E                   .dbsym l tmp 20 A[2:2]c
 295E                   .dbsym l cur 4 A[16:16]c
 295E                   .dbsym r this_write 14 s
 295E                   .dbsym r ii 12 s
 295E                   .dbsym r sample_rate 10 s
 295E                   .dbsym r start_addr 20 s
 295E                   .dbsym l firmware 34 pc
 295E                   .dbsym l length 32 s
 295E                   .dbend
 295E                   .dbfunc e mpu_set_dmp_state _mpu_set_dmp_state fI
 295E           ;            tmp -> y+4
 295E           ;         enable -> R10
                        .even
 295E           _mpu_set_dmp_state::
 295E AA92              st -y,R10
 2960 A02E              mov R10,R16
 2962 2597              sbiw R28,5
 2964                   .dbline -1
 2964                   .dbline 1575
 2964           ; }
 2964           ; 
 2964           ; int mpu_set_dmp_state(unsigned char enable)
 2964           ; {
 2964                   .dbline 1577
 2964           ;       unsigned char tmp;
 2964           ;       if (st.chip_cfg.dmp_on == enable)
 2964 20906900          lds R2,_st+4+25
 2968 2A14              cp R2,R10
 296A 19F4              brne L969
 296C           X278:
 296C                   .dbline 1578
 296C           ;               return 0;
 296C 0027              clr R16
 296E 1127              clr R17
 2970 48C0              xjmp L968
 2972           L969:
 2972                   .dbline 1580
 2972           ; 
 2972           ;       if (enable) {
 2972 AA20              tst R10
 2974 59F1              breq L973
 2976           X279:
 2976                   .dbline 1580
 2976                   .dbline 1581
 2976           ;               if (!st.chip_cfg.dmp_loaded)
 2976 20906A00          lds R2,_st+4+26
 297A 2220              tst R2
 297C 19F4              brne L975
 297E           X280:
 297E                   .dbline 1582
 297E           ;                               return -1;
 297E 0FEF              ldi R16,-1
 2980 1FEF              ldi R17,-1
 2982 3FC0              xjmp L968
 2984           L975:
 2984                   .dbline 1583
 2984           ;               set_int_enable(0);
 2984 0027              clr R16
 2986 0E940000          xcall _set_int_enable
 298A                   .dbline 1584
 298A           ;               mpu_set_bypass(0);
 298A 0027              clr R16
 298C 7CDE              xcall _mpu_set_bypass
 298E                   .dbline 1586
 298E           ; 
 298E           ;               mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 298E 00916B00          lds R16,_st+4+27
 2992 10916C00          lds R17,_st+4+27+1
 2996 0E94A407          xcall _mpu_set_sample_rate
 299A                   .dbline 1588
 299A           ; 
 299A           ;               tmp = 0;
 299A 2224              clr R2
 299C 2C82              std y+4,R2
 299E                   .dbline 1589
 299E           ;               i2c_write(st.hw->addr, 0x23, 1, &tmp);
 299E CE01              movw R24,R28
 29A0 0496              adiw R24,4
 29A2 9B83              std y+3,R25
 29A4 8A83              std y+2,R24
 29A6 81E0              ldi R24,1
 29A8 8883              std y+0,R24
 29AA 23E2              ldi R18,35
 29AC E0914E00          lds R30,_st+2
 29B0 F0914F00          lds R31,_st+2+1
 29B4 0081              ldd R16,z+0
 29B6 0E940000          xcall _i2cwrite
 29BA                   .dbline 1590
 29BA           ;               st.chip_cfg.dmp_on = 1;
 29BA 81E0              ldi R24,1
 29BC 80936900          sts _st+4+25,R24
 29C0                   .dbline 1592
 29C0           ; 
 29C0           ;               set_int_enable(1);
 29C0 01E0              ldi R16,1
 29C2 0E940000          xcall _set_int_enable
 29C6                   .dbline 1593
 29C6           ;               mpu_reset_fifo();
 29C6 0E946404          xcall _mpu_reset_fifo
 29CA                   .dbline 1594
 29CA           ;       } 
 29CA 19C0              xjmp L974
 29CC           L973:
 29CC                   .dbline 1596
 29CC           ;       else 
 29CC           ;       {
 29CC                   .dbline 1597
 29CC           ;               set_int_enable(0);
 29CC 0027              clr R16
 29CE 0E940000          xcall _set_int_enable
 29D2                   .dbline 1598
 29D2           ;               tmp = st.chip_cfg.fifo_enable;
 29D2 20905700          lds R2,_st+4+7
 29D6 2C82              std y+4,R2
 29D8                   .dbline 1599
 29D8           ;               i2c_write(st.hw->addr, 0x23, 1, &tmp);
 29D8 CE01              movw R24,R28
 29DA 0496              adiw R24,4
 29DC 9B83              std y+3,R25
 29DE 8A83              std y+2,R24
 29E0 81E0              ldi R24,1
 29E2 8883              std y+0,R24
 29E4 23E2              ldi R18,35
 29E6 E0914E00          lds R30,_st+2
 29EA F0914F00          lds R31,_st+2+1
 29EE 0081              ldd R16,z+0
 29F0 0E940000          xcall _i2cwrite
 29F4                   .dbline 1600
 29F4           ;               st.chip_cfg.dmp_on = 0;
 29F4 2224              clr R2
 29F6 20926900          sts _st+4+25,R2
 29FA                   .dbline 1601
 29FA           ;               mpu_reset_fifo();
 29FA 0E946404          xcall _mpu_reset_fifo
 29FE                   .dbline 1602
 29FE           ;       }
 29FE           L974:
 29FE                   .dbline 1603
 29FE           ;       return 0;
 29FE 0027              clr R16
 2A00 1127              clr R17
 2A02                   .dbline -2
 2A02           L968:
 2A02                   .dbline 0 ; func end
 2A02 2596              adiw R28,5
 2A04 A990              ld R10,y+
 2A06 0895              ret
 2A08                   .dbsym l tmp 4 c
 2A08                   .dbsym r enable 10 c
 2A08                   .dbend
 2A08                   .dbfunc e mpu_get_dmp_state _mpu_get_dmp_state fI
 2A08           ;        enabled -> R16,R17
                        .even
 2A08           _mpu_get_dmp_state::
 2A08                   .dbline -1
 2A08                   .dbline 1607
 2A08           ; }
 2A08           ; 
 2A08           ; int mpu_get_dmp_state(unsigned char *enabled)
 2A08           ; {
 2A08                   .dbline 1608
 2A08           ;       enabled[0] = st.chip_cfg.dmp_on;
 2A08 20906900          lds R2,_st+4+25
 2A0C F801              movw R30,R16
 2A0E 2082              std z+0,R2
 2A10                   .dbline 1609
 2A10           ;       return 0;
 2A10 0027              clr R16
 2A12 1127              clr R17
 2A14                   .dbline -2
 2A14           L989:
 2A14                   .dbline 0 ; func end
 2A14 0895              ret
 2A16                   .dbsym r enabled 16 pc
 2A16                   .dbend
 2A16                   .dbfunc e mpu_lp_motion_interrupt _mpu_lp_motion_interrupt fI
 2A16           ;      cache_ptr -> R22,R23
 2A16           ;             ii -> R20,R21
 2A16           ;      thresh_hw -> R10
 2A16           ;           data -> y+4
 2A16           ;       lpa_freq -> R20
 2A16           ;           time -> R22
 2A16           ;         thresh -> R12,R13
                        .even
 2A16           _mpu_lp_motion_interrupt::
 2A16 0E940000          xcall push_xgsetF03C
 2A1A 622F              mov R22,R18
 2A1C 6801              movw R12,R16
 2A1E 2797              sbiw R28,7
 2A20 4F85              ldd R20,y+15
 2A22                   .dbline -1
 2A22                   .dbline 1614
 2A22           ; }
 2A22           ; 
 2A22           ; int mpu_lp_motion_interrupt(unsigned short thresh, unsigned char time,
 2A22           ;     unsigned char lpa_freq)
 2A22           ; {
 2A22                   .dbline 1617
 2A22           ;       unsigned char data[3];
 2A22           ; 
 2A22           ;       if (lpa_freq) 
 2A22 4423              tst R20
 2A24 09F4              brne X299
 2A26 F1C0              xjmp L993
 2A28           X299:
 2A28           X281:
 2A28                   .dbline 1618
 2A28           ;       {
 2A28                   .dbline 1620
 2A28           ;       unsigned char thresh_hw;
 2A28           ;       if (thresh > 8160)
 2A28 80EE              ldi R24,8160
 2A2A 9FE1              ldi R25,31
 2A2C 8C15              cp R24,R12
 2A2E 9D05              cpc R25,R13
 2A30 18F4              brsh L995
 2A32           X282:
 2A32                   .dbline 1621
 2A32           ;               thresh_hw = 255;
 2A32 8FEF              ldi R24,255
 2A34 A82E              mov R10,R24
 2A36 0EC0              xjmp L996
 2A38           L995:
 2A38                   .dbline 1622
 2A38           ;       else if (thresh < 32)
 2A38 C601              movw R24,R12
 2A3A 8032              cpi R24,32
 2A3C E0E0              ldi R30,0
 2A3E 9E07              cpc R25,R30
 2A40 18F4              brsh L997
 2A42           X283:
 2A42                   .dbline 1623
 2A42           ;               thresh_hw = 1;
 2A42 AA24              clr R10
 2A44 A394              inc R10
 2A46 06C0              xjmp L998
 2A48           L997:
 2A48                   .dbline 1625
 2A48           ;       else
 2A48           ;               thresh_hw = thresh >> 5;
 2A48 25E0              ldi R18,5
 2A4A 30E0              ldi R19,0
 2A4C 8601              movw R16,R12
 2A4E 0E940000          xcall lsr16
 2A52 A02E              mov R10,R16
 2A54           L998:
 2A54           L996:
 2A54                   .dbline 1626
 2A54           ;       if (!time)
 2A54 6623              tst R22
 2A56 09F4              brne L999
 2A58           X284:
 2A58                   .dbline 1627
 2A58           ;               time = 1;
 2A58 61E0              ldi R22,1
 2A5A           L999:
 2A5A                   .dbline 1629
 2A5A           ; 
 2A5A           ;       if (lpa_freq > 40)
 2A5A 88E2              ldi R24,40
 2A5C 8417              cp R24,R20
 2A5E 18F4              brsh L1001
 2A60           X285:
 2A60                   .dbline 1630
 2A60           ;               return -1;
 2A60 0FEF              ldi R16,-1
 2A62 1FEF              ldi R17,-1
 2A64 23C1              xjmp L992
 2A66           L1001:
 2A66                   .dbline 1632
 2A66           ; 
 2A66           ;       if (!st.chip_cfg.int_motion_only) 
 2A66 20905C00          lds R2,_st+4+12
 2A6A 2220              tst R2
 2A6C 29F5              brne L1003
 2A6E           X286:
 2A6E                   .dbline 1633
 2A6E           ;       {
 2A6E                   .dbline 1634
 2A6E           ;               if (st.chip_cfg.dmp_on) 
 2A6E 20906900          lds R2,_st+4+25
 2A72 2220              tst R2
 2A74 31F0              breq L1007
 2A76           X287:
 2A76                   .dbline 1635
 2A76           ;               {
 2A76                   .dbline 1636
 2A76           ;                               mpu_set_dmp_state(0);
 2A76 0027              clr R16
 2A78 72DF              xcall _mpu_set_dmp_state
 2A7A                   .dbline 1637
 2A7A           ;                               st.chip_cfg.cache.dmp_on = 1;
 2A7A 81E0              ldi R24,1
 2A7C 80936600          sts _st+4+13+9,R24
 2A80                   .dbline 1638
 2A80           ;               }
 2A80 03C0              xjmp L1008
 2A82           L1007:
 2A82                   .dbline 1640
 2A82           ;               else
 2A82           ;                       st.chip_cfg.cache.dmp_on = 0;
 2A82 2224              clr R2
 2A84 20926600          sts _st+4+13+9,R2
 2A88           L1008:
 2A88                   .dbline 1641
 2A88           ;               mpu_get_gyro_fsr(&st.chip_cfg.cache.gyro_fsr);
 2A88 00E0              ldi R16,<_st+4+13
 2A8A 10E0              ldi R17,>_st+4+13
 2A8C 0E94B505          xcall _mpu_get_gyro_fsr
 2A90                   .dbline 1642
 2A90           ;               mpu_get_accel_fsr(&st.chip_cfg.cache.accel_fsr);
 2A90 00E0              ldi R16,<_st+4+13+2
 2A92 10E0              ldi R17,>_st+4+13+2
 2A94 0E944F06          xcall _mpu_get_accel_fsr
 2A98                   .dbline 1643
 2A98           ;               mpu_get_lpf(&st.chip_cfg.cache.lpf);
 2A98 00E0              ldi R16,<_st+4+13+3
 2A9A 10E0              ldi R17,>_st+4+13+3
 2A9C 0E94E406          xcall _mpu_get_lpf
 2AA0                   .dbline 1644
 2AA0           ;               mpu_get_sample_rate(&st.chip_cfg.cache.sample_rate);
 2AA0 00E0              ldi R16,<_st+4+13+5
 2AA2 10E0              ldi R17,>_st+4+13+5
 2AA4 0E949307          xcall _mpu_get_sample_rate
 2AA8                   .dbline 1645
 2AA8           ;               st.chip_cfg.cache.sensors_on = st.chip_cfg.sensors;
 2AA8 20905200          lds R2,_st+4+2
 2AAC 20926400          sts _st+4+13+7,R2
 2AB0                   .dbline 1646
 2AB0           ;               mpu_get_fifo_config(&st.chip_cfg.cache.fifo_sensors);
 2AB0 00E0              ldi R16,<_st+4+13+8
 2AB2 10E0              ldi R17,>_st+4+13+8
 2AB4 0E949008          xcall _mpu_get_fifo_config
 2AB8                   .dbline 1647
 2AB8           ;       }
 2AB8           L1003:
 2AB8                   .dbline 1648
 2AB8           ;       set_int_enable(0);
 2AB8 0027              clr R16
 2ABA 0E940000          xcall _set_int_enable
 2ABE                   .dbline 1649
 2ABE           ;       mpu_lp_accel_mode(0);
 2ABE 0027              clr R16
 2AC0 0E94B601          xcall _mpu_lp_accel_mode
 2AC4                   .dbline 1650
 2AC4           ;       data[0] = INV_FILTER_256HZ_NOLPF2;
 2AC4 2224              clr R2
 2AC6 2C82              std y+4,R2
 2AC8                   .dbline 1651
 2AC8           ;       if (i2c_write(st.hw->addr, st.reg->lpf, 1, data))
 2AC8 CE01              movw R24,R28
 2ACA 0496              adiw R24,4
 2ACC 9B83              std y+3,R25
 2ACE 8A83              std y+2,R24
 2AD0 81E0              ldi R24,1
 2AD2 8883              std y+0,R24
 2AD4 E0914C00          lds R30,_st
 2AD8 F0914D00          lds R31,_st+1
 2ADC 2281              ldd R18,z+2
 2ADE E0914E00          lds R30,_st+2
 2AE2 F0914F00          lds R31,_st+2+1
 2AE6 0081              ldd R16,z+0
 2AE8 0E940000          xcall _i2cwrite
 2AEC 0023              tst R16
 2AEE 19F0              breq L1036
 2AF0           X288:
 2AF0                   .dbline 1652
 2AF0           ;                       return -1;
 2AF0 0FEF              ldi R16,-1
 2AF2 1FEF              ldi R17,-1
 2AF4 DBC0              xjmp L992
 2AF6           L1036:
 2AF6                   .dbline 1653
 2AF6           ;       data[0] = BIT_MOT_INT_EN;
 2AF6 80E4              ldi R24,64
 2AF8 8C83              std y+4,R24
 2AFA                   .dbline 1654
 2AFA           ;       if (i2c_write(st.hw->addr, st.reg->int_enable, 1, data))
 2AFA CE01              movw R24,R28
 2AFC 0496              adiw R24,4
 2AFE 9B83              std y+3,R25
 2B00 8A83              std y+2,R24
 2B02 81E0              ldi R24,1
 2B04 8883              std y+0,R24
 2B06 E0914C00          lds R30,_st
 2B0A F0914D00          lds R31,_st+1
 2B0E 2785              ldd R18,z+15
 2B10 E0914E00          lds R30,_st+2
 2B14 F0914F00          lds R31,_st+2+1
 2B18 0081              ldd R16,z+0
 2B1A 0E940000          xcall _i2cwrite
 2B1E 0023              tst R16
 2B20 09F0              breq L1039
 2B22           X289:
 2B22                   .dbline 1655
 2B22           ;                       goto lp_int_restore;
 2B22 88C0              xjmp L1042
 2B24           L1039:
 2B24                   .dbline 1657
 2B24           ; 
 2B24           ;       data[0] = thresh_hw;
 2B24 AC82              std y+4,R10
 2B26                   .dbline 1658
 2B26           ;       data[1] = time;
 2B26 6D83              std y+5,R22
 2B28                   .dbline 1659
 2B28           ;       if (i2c_write(st.hw->addr, st.reg->motion_thr, 2, data))
 2B28 CE01              movw R24,R28
 2B2A 0496              adiw R24,4
 2B2C 9B83              std y+3,R25
 2B2E 8A83              std y+2,R24
 2B30 82E0              ldi R24,2
 2B32 8883              std y+0,R24
 2B34 E0914C00          lds R30,_st
 2B38 F0914D00          lds R31,_st+1
 2B3C 2085              ldd R18,z+8
 2B3E E0914E00          lds R30,_st+2
 2B42 F0914F00          lds R31,_st+2+1
 2B46 0081              ldd R16,z+0
 2B48 0E940000          xcall _i2cwrite
 2B4C A02E              mov R10,R16
 2B4E 0023              tst R16
 2B50 09F0              breq L1044
 2B52           X290:
 2B52                   .dbline 1660
 2B52           ;               goto lp_int_restore;
 2B52 70C0              xjmp L1042
 2B54           L1044:
 2B54                   .dbline 1662
 2B54           ; 
 2B54           ;       delay_ms(5);
 2B54 05E0              ldi R16,5
 2B56 10E0              ldi R17,0
 2B58 0E940000          xcall _delay_ms
 2B5C                   .dbline 1663
 2B5C           ;       data[0] = (st.chip_cfg.accel_fsr << 3) | BITS_HPF;
 2B5C 80915100          lds R24,_st+4+1
 2B60 880F              lsl R24
 2B62 880F              lsl R24
 2B64 880F              lsl R24
 2B66 8760              ori R24,7
 2B68 8C83              std y+4,R24
 2B6A                   .dbline 1664
 2B6A           ;       if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, data))
 2B6A CE01              movw R24,R28
 2B6C 0496              adiw R24,4
 2B6E 9B83              std y+3,R25
 2B70 8A83              std y+2,R24
 2B72 81E0              ldi R24,1
 2B74 8883              std y+0,R24
 2B76 E0914C00          lds R30,_st
 2B7A F0914D00          lds R31,_st+1
 2B7E 2781              ldd R18,z+7
 2B80 E0914E00          lds R30,_st+2
 2B84 F0914F00          lds R31,_st+2+1
 2B88 0081              ldd R16,z+0
 2B8A 0E940000          xcall _i2cwrite
 2B8E A02E              mov R10,R16
 2B90 0023              tst R16
 2B92 09F0              breq L1049
 2B94           X291:
 2B94                   .dbline 1665
 2B94           ;               goto lp_int_restore;
 2B94 4FC0              xjmp L1042
 2B96           L1049:
 2B96                   .dbline 1667
 2B96           ; 
 2B96           ;       data[0] = BIT_LPA_CYCLE;
 2B96 80E2              ldi R24,32
 2B98 8C83              std y+4,R24
 2B9A                   .dbline 1668
 2B9A           ;       if (lpa_freq == 1)
 2B9A 4130              cpi R20,1
 2B9C 19F4              brne L1052
 2B9E           X292:
 2B9E                   .dbline 1669
 2B9E           ;               data[1] = INV_LPA_1_25HZ;
 2B9E 2224              clr R2
 2BA0 2D82              std y+5,R2
 2BA2 0EC0              xjmp L1053
 2BA4           L1052:
 2BA4                   .dbline 1670
 2BA4           ;       else if (lpa_freq <= 5)
 2BA4 85E0              ldi R24,5
 2BA6 8417              cp R24,R20
 2BA8 18F0              brlo L1055
 2BAA           X293:
 2BAA                   .dbline 1671
 2BAA           ;               data[1] = INV_LPA_5HZ;
 2BAA 81E0              ldi R24,1
 2BAC 8D83              std y+5,R24
 2BAE 08C0              xjmp L1056
 2BB0           L1055:
 2BB0                   .dbline 1672
 2BB0           ;       else if (lpa_freq <= 20)
 2BB0 84E1              ldi R24,20
 2BB2 8417              cp R24,R20
 2BB4 18F0              brlo L1058
 2BB6           X294:
 2BB6                   .dbline 1673
 2BB6           ;               data[1] = INV_LPA_20HZ;
 2BB6 82E0              ldi R24,2
 2BB8 8D83              std y+5,R24
 2BBA 02C0              xjmp L1059
 2BBC           L1058:
 2BBC                   .dbline 1675
 2BBC           ;       else
 2BBC           ;               data[1] = INV_LPA_40HZ;
 2BBC 83E0              ldi R24,3
 2BBE 8D83              std y+5,R24
 2BC0           L1059:
 2BC0           L1056:
 2BC0           L1053:
 2BC0                   .dbline 1676
 2BC0           ;       data[1] = (data[1] << 6) | BIT_STBY_XYZG;
 2BC0 8D81              ldd R24,y+5
 2BC2 880F              lsl R24
 2BC4 880F              lsl R24
 2BC6 880F              lsl R24
 2BC8 880F              lsl R24
 2BCA 880F              lsl R24
 2BCC 880F              lsl R24
 2BCE 8760              ori R24,7
 2BD0 8D83              std y+5,R24
 2BD2                   .dbline 1677
 2BD2           ;       if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
 2BD2 CE01              movw R24,R28
 2BD4 0496              adiw R24,4
 2BD6 9B83              std y+3,R25
 2BD8 8A83              std y+2,R24
 2BDA 82E0              ldi R24,2
 2BDC 8883              std y+0,R24
 2BDE E0914C00          lds R30,_st
 2BE2 F0914D00          lds R31,_st+1
 2BE6 2289              ldd R18,z+18
 2BE8 E0914E00          lds R30,_st+2
 2BEC F0914F00          lds R31,_st+2+1
 2BF0 0081              ldd R16,z+0
 2BF2 0E940000          xcall _i2cwrite
 2BF6 A02E              mov R10,R16
 2BF8 0023              tst R16
 2BFA 09F0              breq L1064
 2BFC           X295:
 2BFC                   .dbline 1678
 2BFC           ;               goto lp_int_restore;
 2BFC 1BC0              xjmp L1042
 2BFE           L1064:
 2BFE                   .dbline 1680
 2BFE           ; 
 2BFE           ;               st.chip_cfg.int_motion_only = 1;
 2BFE 81E0              ldi R24,1
 2C00 80935C00          sts _st+4+12,R24
 2C04                   .dbline 1681
 2C04           ;               return 0;
 2C04 0027              clr R16
 2C06 1127              clr R17
 2C08 51C0              xjmp L992
 2C0A           L993:
 2C0A                   .dbline 1684
 2C0A           ;       } 
 2C0A           ;       else 
 2C0A           ;               {
 2C0A                   .dbline 1686
 2C0A           ;               int ii;
 2C0A           ;               char *cache_ptr = (char*)&st.chip_cfg.cache;
 2C0A 60E0              ldi R22,<_st+4+13
 2C0C 70E0              ldi R23,>_st+4+13
 2C0E                   .dbline 1687
 2C0E           ;               for (ii = 0; ii < sizeof(st.chip_cfg.cache); ii++) 
 2C0E 4427              clr R20
 2C10 5527              clr R21
 2C12 09C0              xjmp L1074
 2C14           L1071:
 2C14                   .dbline 1688
 2C14           ;               {
 2C14                   .dbline 1689
 2C14           ;                               if (cache_ptr[ii] != 0)
 2C14 FA01              movw R30,R20
 2C16 E60F              add R30,R22
 2C18 F71F              adc R31,R23
 2C1A 2080              ldd R2,z+0
 2C1C 2220              tst R2
 2C1E 09F0              breq L1077
 2C20           X296:
 2C20                   .dbline 1690
 2C20           ;                                               goto lp_int_restore;
 2C20 09C0              xjmp L1042
 2C22           L1077:
 2C22                   .dbline 1691
 2C22           ;               }
 2C22           L1072:
 2C22                   .dbline 1687
 2C22 4F5F              subi R20,255  ; offset = 1
 2C24 5F4F              sbci R21,255
 2C26           L1074:
 2C26                   .dbline 1687
 2C26 4A30              cpi R20,10
 2C28 E0E0              ldi R30,0
 2C2A 5E07              cpc R21,R30
 2C2C 98F3              brlo L1071
 2C2E           X297:
 2C2E                   .dbline 1692
 2C2E           ;               return -1;
 2C2E 0FEF              ldi R16,-1
 2C30 1FEF              ldi R17,-1
 2C32 3CC0              xjmp L992
 2C34           L1042:
 2C34                   .dbline 1695
 2C34           ;       }
 2C34           ;       lp_int_restore:
 2C34           ;       st.chip_cfg.gyro_fsr = 0xFF;
 2C34 8FEF              ldi R24,255
 2C36 80935000          sts _st+4,R24
 2C3A                   .dbline 1696
 2C3A           ;       st.chip_cfg.accel_fsr = 0xFF;
 2C3A 80935100          sts _st+4+1,R24
 2C3E                   .dbline 1697
 2C3E           ;       st.chip_cfg.lpf = 0xFF;
 2C3E 80935300          sts _st+4+3,R24
 2C42                   .dbline 1698
 2C42           ;       st.chip_cfg.sample_rate = 0xFFFF;
 2C42 9FEF              ldi R25,255
 2C44 90935600          sts _st+4+5+1,R25
 2C48 80935500          sts _st+4+5,R24
 2C4C                   .dbline 1699
 2C4C           ;       st.chip_cfg.sensors = 0xFF;
 2C4C 80935200          sts _st+4+2,R24
 2C50                   .dbline 1700
 2C50           ;       st.chip_cfg.fifo_enable = 0xFF;
 2C50 80935700          sts _st+4+7,R24
 2C54                   .dbline 1701
 2C54           ;       st.chip_cfg.clk_src = INV_CLK_PLL;
 2C54 81E0              ldi R24,1
 2C56 80935400          sts _st+4+4,R24
 2C5A                   .dbline 1702
 2C5A           ;       mpu_set_sensors(st.chip_cfg.cache.sensors_on);
 2C5A 00916400          lds R16,_st+4+13+7
 2C5E 0E94E308          xcall _mpu_set_sensors
 2C62                   .dbline 1703
 2C62           ;       mpu_set_gyro_fsr(st.chip_cfg.cache.gyro_fsr);
 2C62 00915D00          lds R16,_st+4+13
 2C66 10915E00          lds R17,_st+4+13+1
 2C6A 0E94EC05          xcall _mpu_set_gyro_fsr
 2C6E                   .dbline 1704
 2C6E           ;       mpu_set_accel_fsr(st.chip_cfg.cache.accel_fsr);
 2C6E 00915F00          lds R16,_st+4+13+2
 2C72 0E948406          xcall _mpu_set_accel_fsr
 2C76                   .dbline 1705
 2C76           ;       mpu_set_lpf(st.chip_cfg.cache.lpf);
 2C76 00916000          lds R16,_st+4+13+3
 2C7A 10916100          lds R17,_st+4+13+3+1
 2C7E 0E943B07          xcall _mpu_set_lpf
 2C82                   .dbline 1706
 2C82           ;       mpu_set_sample_rate(st.chip_cfg.cache.sample_rate);
 2C82 00916200          lds R16,_st+4+13+5
 2C86 10916300          lds R17,_st+4+13+5+1
 2C8A 0E94A407          xcall _mpu_set_sample_rate
 2C8E                   .dbline 1707
 2C8E           ;       mpu_configure_fifo(st.chip_cfg.cache.fifo_sensors);
 2C8E 00916500          lds R16,_st+4+13+8
 2C92 0E949708          xcall _mpu_configure_fifo
 2C96                   .dbline 1709
 2C96           ; 
 2C96           ;       if (st.chip_cfg.cache.dmp_on)
 2C96 20906600          lds R2,_st+4+13+9
 2C9A 2220              tst R2
 2C9C 11F0              breq L1109
 2C9E           X298:
 2C9E                   .dbline 1710
 2C9E           ;               mpu_set_dmp_state(1);
 2C9E 01E0              ldi R16,1
 2CA0 5EDE              xcall _mpu_set_dmp_state
 2CA2           L1109:
 2CA2                   .dbline 1712
 2CA2           ; 
 2CA2           ;       st.chip_cfg.int_motion_only = 0;
 2CA2 2224              clr R2
 2CA4 20925C00          sts _st+4+12,R2
 2CA8                   .dbline 1713
 2CA8           ;       return 0;
 2CA8 0027              clr R16
 2CAA 1127              clr R17
 2CAC                   .dbline -2
 2CAC           L992:
 2CAC                   .dbline 0 ; func end
 2CAC 2796              adiw R28,7
 2CAE 0C940000          xjmp pop_xgsetF03C
 2CB2                   .dbsym r cache_ptr 22 pc
 2CB2                   .dbsym r ii 20 I
 2CB2                   .dbsym r thresh_hw 10 c
 2CB2                   .dbsym l data 4 A[3:3]c
 2CB2                   .dbsym r lpa_freq 20 c
 2CB2                   .dbsym r time 22 c
 2CB2                   .dbsym r thresh 12 s
 2CB2                   .dbend
 2CB2                   .dbfunc e get_ms _get_ms fV
 2CB2           ;           time -> R0,R1
                        .even
 2CB2           _get_ms::
 2CB2                   .dbline -1
 2CB2                   .dbline 1717
 2CB2           ; }
 2CB2           ; 
 2CB2           ; void get_ms(unsigned long *time)
 2CB2           ; {
 2CB2                   .dbline -2
 2CB2           L1116:
 2CB2                   .dbline 0 ; func end
 2CB2 0895              ret
 2CB4                   .dbsym l time 0 pl
 2CB4                   .dbend
                        .area lit(rom, con, rel)
 0000           L715:
 0000 54E3853F          .word 0xe354,0x3f85
 0004           L711:
 0004 00B04C45          .word 0xb000,0x454c
 0008           L690:
 0008 0000803F          .word 0x0,0x3f80
 000C           L682:
 000C 1D5A843F          .word 0x5a1d,0x3f84
 0010           L678:
 0010 7B14AE3E          .word 0x147b,0x3eae
 0014           L677:
 0014 00000000          .word 0x0,0x0
 0018           L456:
 0018 33338341          .word 0x3333,0x4183
 001C           L454:
 001C 33330342          .word 0x3333,0x4203
 0020           L452:
 0020 00008342          .word 0x0,0x4283
 0024           L450:
 0024 00000343          .word 0x0,0x4303
 0028           L201:
 0028 00000C42          .word 0x0,0x420c
 002C           L200:
 002C 00008047          .word 0x0,0x4780
 0030           ; 
 0030           ; }
